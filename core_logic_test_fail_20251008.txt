2025-10-08T16:00:06.6140478Z Current runner version: '2.328.0'
2025-10-08T16:00:06.6164241Z ##[group]Runner Image Provisioner
2025-10-08T16:00:06.6165068Z Hosted Compute Agent
2025-10-08T16:00:06.6165663Z Version: 20250912.392
2025-10-08T16:00:06.6166305Z Commit: d921fda672a98b64f4f82364647e2f10b2267d0b
2025-10-08T16:00:06.6166977Z Build Date: 2025-09-12T15:23:14Z
2025-10-08T16:00:06.6167805Z ##[endgroup]
2025-10-08T16:00:06.6168369Z ##[group]Operating System
2025-10-08T16:00:06.6168945Z Ubuntu
2025-10-08T16:00:06.6169377Z 24.04.3
2025-10-08T16:00:06.6169915Z LTS
2025-10-08T16:00:06.6170335Z ##[endgroup]
2025-10-08T16:00:06.6170807Z ##[group]Runner Image
2025-10-08T16:00:06.6171444Z Image: ubuntu-24.04
2025-10-08T16:00:06.6171924Z Version: 20250929.60.1
2025-10-08T16:00:06.6172913Z Included Software: https://github.com/actions/runner-images/blob/ubuntu24/20250929.60/images/ubuntu/Ubuntu2404-Readme.md
2025-10-08T16:00:06.6174511Z Image Release: https://github.com/actions/runner-images/releases/tag/ubuntu24%2F20250929.60
2025-10-08T16:00:06.6175555Z ##[endgroup]
2025-10-08T16:00:06.6178375Z ##[group]GITHUB_TOKEN Permissions
2025-10-08T16:00:06.6180406Z Actions: write
2025-10-08T16:00:06.6181091Z Attestations: write
2025-10-08T16:00:06.6181622Z Checks: write
2025-10-08T16:00:06.6182073Z Contents: write
2025-10-08T16:00:06.6182661Z Deployments: write
2025-10-08T16:00:06.6183137Z Discussions: write
2025-10-08T16:00:06.6183635Z Issues: write
2025-10-08T16:00:06.6184106Z Metadata: read
2025-10-08T16:00:06.6184607Z Models: read
2025-10-08T16:00:06.6185062Z Packages: write
2025-10-08T16:00:06.6185636Z Pages: write
2025-10-08T16:00:06.6186142Z PullRequests: write
2025-10-08T16:00:06.6186638Z RepositoryProjects: write
2025-10-08T16:00:06.6187235Z SecurityEvents: write
2025-10-08T16:00:06.6188266Z Statuses: write
2025-10-08T16:00:06.6188795Z ##[endgroup]
2025-10-08T16:00:06.6190837Z Secret source: Actions
2025-10-08T16:00:06.6191696Z Prepare workflow directory
2025-10-08T16:00:06.6526569Z Prepare all required actions
2025-10-08T16:00:06.6565183Z Getting action download info
2025-10-08T16:00:07.1204728Z Download action repository 'actions/checkout@v4' (SHA:08eba0b27e820071cde6df949e0beb9ba4906955)
2025-10-08T16:00:07.3213103Z Download action repository 'actions/setup-python@v5' (SHA:a26af69be951a213d495a4c3e4e4022e16d87065)
2025-10-08T16:00:07.4130976Z Download action repository 'actions/cache@v4' (SHA:0057852bfaa89a56745cba8c7296529d2fc39830)
2025-10-08T16:00:07.6430809Z Complete job name: 🔒 Core Logic Tests
2025-10-08T16:00:07.7172690Z ##[group]Run actions/checkout@v4
2025-10-08T16:00:07.7173606Z with:
2025-10-08T16:00:07.7174051Z   repository: theatl-social/pyfedi
2025-10-08T16:00:07.7174796Z   token: ***
2025-10-08T16:00:07.7175210Z   ssh-strict: true
2025-10-08T16:00:07.7175633Z   ssh-user: git
2025-10-08T16:00:07.7176055Z   persist-credentials: true
2025-10-08T16:00:07.7176533Z   clean: true
2025-10-08T16:00:07.7176965Z   sparse-checkout-cone-mode: true
2025-10-08T16:00:07.7177721Z   fetch-depth: 1
2025-10-08T16:00:07.7178146Z   fetch-tags: false
2025-10-08T16:00:07.7178617Z   show-progress: true
2025-10-08T16:00:07.7179042Z   lfs: false
2025-10-08T16:00:07.7179437Z   submodules: false
2025-10-08T16:00:07.7179864Z   set-safe-directory: true
2025-10-08T16:00:07.7180596Z ##[endgroup]
2025-10-08T16:00:07.8262584Z Syncing repository: theatl-social/pyfedi
2025-10-08T16:00:07.8264428Z ##[group]Getting Git version info
2025-10-08T16:00:07.8265153Z Working directory is '/home/runner/work/pyfedi/pyfedi'
2025-10-08T16:00:07.8266189Z [command]/usr/bin/git version
2025-10-08T16:00:07.8360903Z git version 2.51.0
2025-10-08T16:00:07.8390089Z ##[endgroup]
2025-10-08T16:00:07.8408529Z Temporarily overriding HOME='/home/runner/work/_temp/9beedcc5-4c52-4bc7-9a81-59c943968cad' before making global git config changes
2025-10-08T16:00:07.8410554Z Adding repository directory to the temporary git global config as a safe directory
2025-10-08T16:00:07.8415750Z [command]/usr/bin/git config --global --add safe.directory /home/runner/work/pyfedi/pyfedi
2025-10-08T16:00:07.8458365Z Deleting the contents of '/home/runner/work/pyfedi/pyfedi'
2025-10-08T16:00:07.8462721Z ##[group]Initializing the repository
2025-10-08T16:00:07.8467897Z [command]/usr/bin/git init /home/runner/work/pyfedi/pyfedi
2025-10-08T16:00:07.8611390Z hint: Using 'master' as the name for the initial branch. This default branch name
2025-10-08T16:00:07.8612587Z hint: is subject to change. To configure the initial branch name to use in all
2025-10-08T16:00:07.8613702Z hint: of your new repositories, which will suppress this warning, call:
2025-10-08T16:00:07.8614523Z hint:
2025-10-08T16:00:07.8615352Z hint: 	git config --global init.defaultBranch <name>
2025-10-08T16:00:07.8616347Z hint:
2025-10-08T16:00:07.8617003Z hint: Names commonly chosen instead of 'master' are 'main', 'trunk' and
2025-10-08T16:00:07.8618254Z hint: 'development'. The just-created branch can be renamed via this command:
2025-10-08T16:00:07.8619180Z hint:
2025-10-08T16:00:07.8619624Z hint: 	git branch -m <name>
2025-10-08T16:00:07.8620162Z hint:
2025-10-08T16:00:07.8620862Z hint: Disable this message with "git config set advice.defaultBranchName false"
2025-10-08T16:00:07.8622204Z Initialized empty Git repository in /home/runner/work/pyfedi/pyfedi/.git/
2025-10-08T16:00:07.8627823Z [command]/usr/bin/git remote add origin https://github.com/theatl-social/pyfedi
2025-10-08T16:00:07.8666014Z ##[endgroup]
2025-10-08T16:00:07.8666939Z ##[group]Disabling automatic garbage collection
2025-10-08T16:00:07.8669932Z [command]/usr/bin/git config --local gc.auto 0
2025-10-08T16:00:07.8698190Z ##[endgroup]
2025-10-08T16:00:07.8699048Z ##[group]Setting up auth
2025-10-08T16:00:07.8704703Z [command]/usr/bin/git config --local --name-only --get-regexp core\.sshCommand
2025-10-08T16:00:07.8734096Z [command]/usr/bin/git submodule foreach --recursive sh -c "git config --local --name-only --get-regexp 'core\.sshCommand' && git config --local --unset-all 'core.sshCommand' || :"
2025-10-08T16:00:07.9129257Z [command]/usr/bin/git config --local --name-only --get-regexp http\.https\:\/\/github\.com\/\.extraheader
2025-10-08T16:00:07.9170457Z [command]/usr/bin/git submodule foreach --recursive sh -c "git config --local --name-only --get-regexp 'http\.https\:\/\/github\.com\/\.extraheader' && git config --local --unset-all 'http.https://github.com/.extraheader' || :"
2025-10-08T16:00:07.9398891Z [command]/usr/bin/git config --local http.https://github.com/.extraheader AUTHORIZATION: basic ***
2025-10-08T16:00:07.9438043Z ##[endgroup]
2025-10-08T16:00:07.9439986Z ##[group]Fetching the repository
2025-10-08T16:00:07.9448732Z [command]/usr/bin/git -c protocol.version=2 fetch --no-tags --prune --no-recurse-submodules --depth=1 origin +9b01112cdc6812b0d54334047a5852b4fa215f13:refs/remotes/pull/30/merge
2025-10-08T16:00:08.9533332Z From https://github.com/theatl-social/pyfedi
2025-10-08T16:00:08.9535186Z  * [new ref]         9b01112cdc6812b0d54334047a5852b4fa215f13 -> pull/30/merge
2025-10-08T16:00:08.9568502Z ##[endgroup]
2025-10-08T16:00:08.9569946Z ##[group]Determining the checkout info
2025-10-08T16:00:08.9571595Z ##[endgroup]
2025-10-08T16:00:08.9575367Z [command]/usr/bin/git sparse-checkout disable
2025-10-08T16:00:08.9616072Z [command]/usr/bin/git config --local --unset-all extensions.worktreeConfig
2025-10-08T16:00:08.9643560Z ##[group]Checking out the ref
2025-10-08T16:00:08.9646324Z [command]/usr/bin/git checkout --progress --force refs/remotes/pull/30/merge
2025-10-08T16:00:09.0393705Z Note: switching to 'refs/remotes/pull/30/merge'.
2025-10-08T16:00:09.0395004Z 
2025-10-08T16:00:09.0396016Z You are in 'detached HEAD' state. You can look around, make experimental
2025-10-08T16:00:09.0398758Z changes and commit them, and you can discard any commits you make in this
2025-10-08T16:00:09.0401120Z state without impacting any branches by switching back to a branch.
2025-10-08T16:00:09.0402194Z 
2025-10-08T16:00:09.0402839Z If you want to create a new branch to retain commits you create, you may
2025-10-08T16:00:09.0404928Z do so (now or later) by using -c with the switch command. Example:
2025-10-08T16:00:09.0406239Z 
2025-10-08T16:00:09.0406584Z   git switch -c <new-branch-name>
2025-10-08T16:00:09.0407220Z 
2025-10-08T16:00:09.0407753Z Or undo this operation with:
2025-10-08T16:00:09.0408379Z 
2025-10-08T16:00:09.0408779Z   git switch -
2025-10-08T16:00:09.0409439Z 
2025-10-08T16:00:09.0410500Z Turn off this advice by setting config variable advice.detachedHead to false
2025-10-08T16:00:09.0411901Z 
2025-10-08T16:00:09.0413508Z HEAD is now at 9b01112 Merge 6b229ae1c12e1f15b8327e71d2027f974e74222a into 6b86d33d18a97451115234de4d16c3b57dbaf0ba
2025-10-08T16:00:09.0418248Z ##[endgroup]
2025-10-08T16:00:09.0445043Z [command]/usr/bin/git log -1 --format=%H
2025-10-08T16:00:09.0467147Z 9b01112cdc6812b0d54334047a5852b4fa215f13
2025-10-08T16:00:09.0778106Z ##[group]Run actions/setup-python@v5
2025-10-08T16:00:09.0779276Z with:
2025-10-08T16:00:09.0780122Z   python-version: 3.13
2025-10-08T16:00:09.0781093Z   check-latest: false
2025-10-08T16:00:09.0782297Z   token: ***
2025-10-08T16:00:09.0783157Z   update-environment: true
2025-10-08T16:00:09.0784231Z   allow-prereleases: false
2025-10-08T16:00:09.0785240Z   freethreaded: false
2025-10-08T16:00:09.0786159Z ##[endgroup]
2025-10-08T16:00:09.2465672Z ##[group]Installed versions
2025-10-08T16:00:09.2590521Z Successfully set up CPython (3.13.7)
2025-10-08T16:00:09.2593260Z ##[endgroup]
2025-10-08T16:00:09.4218764Z ##[group]Run actions/cache@v4
2025-10-08T16:00:09.4219757Z with:
2025-10-08T16:00:09.4220460Z   path: ~/.cache/pip
2025-10-08T16:00:09.4221899Z   key: Linux-pip-93b72d60a1f660b784d6309a0b22f127a738518ffed9eeb65aa476cd228c20e5
2025-10-08T16:00:09.4223583Z   restore-keys: Linux-pip-

2025-10-08T16:00:09.4224523Z   enableCrossOsArchive: false
2025-10-08T16:00:09.4225495Z   fail-on-cache-miss: false
2025-10-08T16:00:09.4226387Z   lookup-only: false
2025-10-08T16:00:09.4227208Z   save-always: false
2025-10-08T16:00:09.4228180Z env:
2025-10-08T16:00:09.4229110Z   pythonLocation: /opt/hostedtoolcache/Python/3.13.7/x64
2025-10-08T16:00:09.4230750Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.13.7/x64/lib/pkgconfig
2025-10-08T16:00:09.4232364Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.13.7/x64
2025-10-08T16:00:09.4233794Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.13.7/x64
2025-10-08T16:00:09.4235248Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.13.7/x64
2025-10-08T16:00:09.4236743Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.13.7/x64/lib
2025-10-08T16:00:09.4238145Z ##[endgroup]
2025-10-08T16:00:09.8345771Z Cache hit for: Linux-pip-93b72d60a1f660b784d6309a0b22f127a738518ffed9eeb65aa476cd228c20e5
2025-10-08T16:00:11.1087521Z Received 25165824 of 105551174 (23.8%), 24.0 MBs/sec
2025-10-08T16:00:11.6912693Z Received 105551174 of 105551174 (100.0%), 63.6 MBs/sec
2025-10-08T16:00:11.6915475Z Cache Size: ~101 MB (105551174 B)
2025-10-08T16:00:11.7015522Z [command]/usr/bin/tar -xf /home/runner/work/_temp/0fdce8d3-9f2e-49d7-97c6-0b0bc76e203c/cache.tzst -P -C /home/runner/work/pyfedi/pyfedi --use-compress-program unzstd
2025-10-08T16:00:11.9175338Z Cache restored successfully
2025-10-08T16:00:11.9456945Z Cache restored from key: Linux-pip-93b72d60a1f660b784d6309a0b22f127a738518ffed9eeb65aa476cd228c20e5
2025-10-08T16:00:11.9572237Z ##[group]Run python -m pip install --upgrade pip
2025-10-08T16:00:11.9572678Z [36;1mpython -m pip install --upgrade pip[0m
2025-10-08T16:00:11.9573012Z [36;1mpip install -r requirements.txt[0m
2025-10-08T16:00:11.9573287Z [36;1mpip install pytest[0m
2025-10-08T16:00:11.9616936Z shell: /usr/bin/bash -e {0}
2025-10-08T16:00:11.9617208Z env:
2025-10-08T16:00:11.9617757Z   pythonLocation: /opt/hostedtoolcache/Python/3.13.7/x64
2025-10-08T16:00:11.9618211Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.13.7/x64/lib/pkgconfig
2025-10-08T16:00:11.9618647Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.13.7/x64
2025-10-08T16:00:11.9619022Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.13.7/x64
2025-10-08T16:00:11.9619381Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.13.7/x64
2025-10-08T16:00:11.9619753Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.13.7/x64/lib
2025-10-08T16:00:11.9620288Z ##[endgroup]
2025-10-08T16:00:16.0227613Z Requirement already satisfied: pip in /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages (25.2)
2025-10-08T16:00:16.6633371Z Collecting urllib3~=1.26.20 (from -r requirements.txt (line 1))
2025-10-08T16:00:16.6653169Z   Using cached urllib3-1.26.20-py2.py3-none-any.whl.metadata (50 kB)
2025-10-08T16:00:16.6940153Z Collecting Flask==3.1.1 (from -r requirements.txt (line 2))
2025-10-08T16:00:16.6952277Z   Using cached flask-3.1.1-py3-none-any.whl.metadata (3.0 kB)
2025-10-08T16:00:16.7173299Z Collecting python-dotenv==1.0.0 (from -r requirements.txt (line 3))
2025-10-08T16:00:16.7184727Z   Using cached python_dotenv-1.0.0-py3-none-any.whl.metadata (21 kB)
2025-10-08T16:00:16.7426748Z Collecting flask-wtf==1.2.2 (from -r requirements.txt (line 4))
2025-10-08T16:00:16.7444206Z   Using cached flask_wtf-1.2.2-py3-none-any.whl.metadata (3.4 kB)
2025-10-08T16:00:16.7643308Z Collecting flask-sqlalchemy==3.1.1 (from -r requirements.txt (line 5))
2025-10-08T16:00:16.7655039Z   Using cached flask_sqlalchemy-3.1.1-py3-none-any.whl.metadata (3.4 kB)
2025-10-08T16:00:16.7860560Z Collecting flask-migrate~=4.1.0 (from -r requirements.txt (line 6))
2025-10-08T16:00:16.7873023Z   Using cached Flask_Migrate-4.1.0-py3-none-any.whl.metadata (3.3 kB)
2025-10-08T16:00:16.8053408Z Collecting flask-login==0.6.3 (from -r requirements.txt (line 7))
2025-10-08T16:00:16.8065042Z   Using cached Flask_Login-0.6.3-py3-none-any.whl.metadata (5.8 kB)
2025-10-08T16:00:16.8249726Z Collecting email-validator==2.0.0 (from -r requirements.txt (line 9))
2025-10-08T16:00:16.8261167Z   Using cached email_validator-2.0.0-py3-none-any.whl.metadata (25 kB)
2025-10-08T16:00:16.8443153Z Collecting flask-mail~=0.10.0 (from -r requirements.txt (line 10))
2025-10-08T16:00:16.8455148Z   Using cached flask_mail-0.10.0-py3-none-any.whl.metadata (2.1 kB)
2025-10-08T16:00:16.8634614Z Collecting flask-babel~=4.0.0 (from -r requirements.txt (line 11))
2025-10-08T16:00:16.8646683Z   Using cached flask_babel-4.0.0-py3-none-any.whl.metadata (1.9 kB)
2025-10-08T16:00:16.8819803Z Collecting flask-bcrypt~=1.0.0 (from -r requirements.txt (line 12))
2025-10-08T16:00:16.8831879Z   Using cached Flask_Bcrypt-1.0.1-py3-none-any.whl.metadata (2.6 kB)
2025-10-08T16:00:16.9483681Z Collecting psycopg2-binary (from -r requirements.txt (line 13))
2025-10-08T16:00:16.9496846Z   Using cached psycopg2_binary-2.9.10-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (4.9 kB)
2025-10-08T16:00:16.9748857Z Collecting httpx~=0.28.0 (from httpx[http2]~=0.28.0->-r requirements.txt (line 14))
2025-10-08T16:00:16.9760685Z   Using cached httpx-0.28.1-py3-none-any.whl.metadata (7.1 kB)
2025-10-08T16:00:16.9986118Z Collecting pyjwt==2.8.0 (from -r requirements.txt (line 15))
2025-10-08T16:00:16.9998079Z   Using cached PyJWT-2.8.0-py3-none-any.whl.metadata (4.2 kB)
2025-10-08T16:00:17.0195585Z Collecting SQLAlchemy-Searchable==2.1.0 (from -r requirements.txt (line 16))
2025-10-08T16:00:17.0207596Z   Using cached sqlalchemy_searchable-2.1.0-py3-none-any.whl.metadata (2.0 kB)
2025-10-08T16:00:17.0502550Z Collecting SQLAlchemy-Utils==0.41.1 (from -r requirements.txt (line 17))
2025-10-08T16:00:17.0514516Z   Using cached SQLAlchemy_Utils-0.41.1-py3-none-any.whl.metadata (4.3 kB)
2025-10-08T16:00:17.2399198Z Collecting cryptography==44.0.2 (from -r requirements.txt (line 18))
2025-10-08T16:00:17.2412735Z   Using cached cryptography-44.0.2-cp39-abi3-manylinux_2_34_x86_64.whl.metadata (5.7 kB)
2025-10-08T16:00:17.2654241Z Collecting Bootstrap-Flask==2.5.0 (from -r requirements.txt (line 19))
2025-10-08T16:00:17.2666094Z   Using cached bootstrap_flask-2.5.0-py3-none-any.whl.metadata (6.1 kB)
2025-10-08T16:00:17.2879226Z Collecting arrow==1.2.3 (from -r requirements.txt (line 20))
2025-10-08T16:00:17.2890591Z   Using cached arrow-1.2.3-py3-none-any.whl.metadata (6.9 kB)
2025-10-08T16:00:17.3096555Z Collecting pyld==2.0.4 (from -r requirements.txt (line 21))
2025-10-08T16:00:17.3108136Z   Using cached PyLD-2.0.4-py3-none-any.whl.metadata (10.0 kB)
2025-10-08T16:00:17.6001219Z Collecting boto3~=1.39.0 (from -r requirements.txt (line 22))
2025-10-08T16:00:17.6014499Z   Using cached boto3-1.39.17-py3-none-any.whl.metadata (6.7 kB)
2025-10-08T16:00:17.6237169Z Collecting markdown2==2.5.3 (from -r requirements.txt (line 23))
2025-10-08T16:00:17.6248959Z   Using cached markdown2-2.5.3-py3-none-any.whl.metadata (2.1 kB)
2025-10-08T16:00:17.6504081Z Collecting beautifulsoup4==4.12.2 (from -r requirements.txt (line 24))
2025-10-08T16:00:17.6515640Z   Using cached beautifulsoup4-4.12.2-py3-none-any.whl.metadata (3.6 kB)
2025-10-08T16:00:17.6715457Z Collecting flask-caching~=2.3.0 (from -r requirements.txt (line 25))
2025-10-08T16:00:17.6727742Z   Using cached Flask_Caching-2.3.1-py3-none-any.whl.metadata (2.2 kB)
2025-10-08T16:00:17.8322425Z Collecting Pillow (from -r requirements.txt (line 26))
2025-10-08T16:00:17.8335842Z   Using cached pillow-11.3.0-cp313-cp313-manylinux_2_27_x86_64.manylinux_2_28_x86_64.whl.metadata (9.0 kB)
2025-10-08T16:00:17.9321030Z Collecting pillow-heif (from -r requirements.txt (line 27))
2025-10-08T16:00:17.9334502Z   Using cached pillow_heif-1.1.1-cp313-cp313-manylinux_2_27_x86_64.manylinux_2_28_x86_64.whl.metadata (9.6 kB)
2025-10-08T16:00:17.9934608Z Collecting pillow-avif-plugin (from -r requirements.txt (line 28))
2025-10-08T16:00:17.9948149Z   Using cached pillow_avif_plugin-1.5.2-cp313-cp313-manylinux_2_28_x86_64.whl.metadata (2.1 kB)
2025-10-08T16:00:18.0125595Z Collecting feedgen==0.9.0 (from -r requirements.txt (line 29))
2025-10-08T16:00:18.0126827Z   Using cached feedgen-0.9.0-py2.py3-none-any.whl
2025-10-08T16:00:18.0648233Z Collecting celery==5.3.6 (from -r requirements.txt (line 30))
2025-10-08T16:00:18.0661772Z   Using cached celery-5.3.6-py3-none-any.whl.metadata (21 kB)
2025-10-08T16:00:18.1257966Z Collecting redis~=5.2.0 (from -r requirements.txt (line 31))
2025-10-08T16:00:18.1270498Z   Using cached redis-5.2.1-py3-none-any.whl.metadata (9.1 kB)
2025-10-08T16:00:18.1544099Z Collecting Werkzeug==3.1.3 (from -r requirements.txt (line 32))
2025-10-08T16:00:18.1556116Z   Using cached werkzeug-3.1.3-py3-none-any.whl.metadata (3.7 kB)
2025-10-08T16:00:18.1734654Z Collecting pytesseract==0.3.10 (from -r requirements.txt (line 33))
2025-10-08T16:00:18.1745979Z   Using cached pytesseract-0.3.10-py3-none-any.whl.metadata (11 kB)
2025-10-08T16:00:18.2319860Z Collecting sentry-sdk==2.27.0 (from -r requirements.txt (line 34))
2025-10-08T16:00:18.2332420Z   Using cached sentry_sdk-2.27.0-py2.py3-none-any.whl.metadata (10 kB)
2025-10-08T16:00:18.2662537Z Collecting python-slugify==8.0.4 (from -r requirements.txt (line 35))
2025-10-08T16:00:18.2674873Z   Using cached python_slugify-8.0.4-py2.py3-none-any.whl.metadata (8.5 kB)
2025-10-08T16:00:18.2866989Z Collecting furl==2.1.3 (from -r requirements.txt (line 36))
2025-10-08T16:00:18.2879286Z   Using cached furl-2.1.3-py2.py3-none-any.whl.metadata (1.2 kB)
2025-10-08T16:00:18.3048207Z Collecting captcha (from -r requirements.txt (line 38))
2025-10-08T16:00:18.3059614Z   Using cached captcha-0.7.1-py3-none-any.whl.metadata (2.2 kB)
2025-10-08T16:00:18.3474098Z Collecting pytest (from -r requirements.txt (line 39))
2025-10-08T16:00:18.3487214Z   Using cached pytest-8.4.2-py3-none-any.whl.metadata (7.7 kB)
2025-10-08T16:00:18.4293036Z Collecting stripe~=12.0.0 (from -r requirements.txt (line 40))
2025-10-08T16:00:18.4306320Z   Using cached stripe-12.0.1-py2.py3-none-any.whl.metadata (2.9 kB)
2025-10-08T16:00:18.4536944Z Collecting Authlib~=1.5.0 (from -r requirements.txt (line 41))
2025-10-08T16:00:18.4548913Z   Using cached authlib-1.5.2-py2.py3-none-any.whl.metadata (3.9 kB)
2025-10-08T16:00:18.4791145Z Collecting webauthn~=2.5.0 (from -r requirements.txt (line 42))
2025-10-08T16:00:18.4802906Z   Using cached webauthn-2.5.3-py3-none-any.whl.metadata (5.7 kB)
2025-10-08T16:00:18.5032453Z Collecting ldap3~=2.9.0 (from -r requirements.txt (line 43))
2025-10-08T16:00:18.5043802Z   Using cached ldap3-2.9.1-py2.py3-none-any.whl.metadata (5.4 kB)
2025-10-08T16:00:18.7981642Z Collecting sqlalchemy~=2.0.0 (from -r requirements.txt (line 44))
2025-10-08T16:00:18.7995252Z   Using cached sqlalchemy-2.0.43-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (9.6 kB)
2025-10-08T16:00:19.0484347Z Collecting orjson~=3.10.0 (from -r requirements.txt (line 45))
2025-10-08T16:00:19.0498272Z   Using cached orjson-3.10.18-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (41 kB)
2025-10-08T16:00:19.0970235Z Collecting marshmallow~=4.0.0 (from -r requirements.txt (line 46))
2025-10-08T16:00:19.0984098Z   Using cached marshmallow-4.0.1-py3-none-any.whl.metadata (7.4 kB)
2025-10-08T16:00:19.1233706Z Collecting flask-smorest~=0.46.1 (from -r requirements.txt (line 47))
2025-10-08T16:00:19.1245618Z   Using cached flask_smorest-0.46.2-py3-none-any.whl.metadata (5.3 kB)
2025-10-08T16:00:19.1437680Z Collecting ics~=0.7.0 (from -r requirements.txt (line 48))
2025-10-08T16:00:19.1449414Z   Using cached ics-0.7.2-py2.py3-none-any.whl.metadata (4.2 kB)
2025-10-08T16:00:19.1654252Z Collecting dateparser~=1.2.0 (from -r requirements.txt (line 49))
2025-10-08T16:00:19.1665655Z   Using cached dateparser-1.2.2-py3-none-any.whl.metadata (29 kB)
2025-10-08T16:00:19.2006071Z Collecting uvicorn==0.35.0 (from uvicorn[standard]==0.35.0->-r requirements.txt (line 50))
2025-10-08T16:00:19.2017302Z   Using cached uvicorn-0.35.0-py3-none-any.whl.metadata (6.5 kB)
2025-10-08T16:00:19.2273923Z Collecting asgiref==3.9.1 (from -r requirements.txt (line 51))
2025-10-08T16:00:19.2285353Z   Using cached asgiref-3.9.1-py3-none-any.whl.metadata (9.3 kB)
2025-10-08T16:00:19.2534909Z Collecting pygments~=2.19.0 (from -r requirements.txt (line 52))
2025-10-08T16:00:19.2546401Z   Using cached pygments-2.19.2-py3-none-any.whl.metadata (2.5 kB)
2025-10-08T16:00:19.3011403Z Collecting fastapi~=0.118.0 (from -r requirements.txt (line 53))
2025-10-08T16:00:19.3023916Z   Using cached fastapi-0.118.2-py3-none-any.whl.metadata (28 kB)
2025-10-08T16:00:19.3322968Z Collecting sqlakeyset~=2.0.0 (from -r requirements.txt (line 54))
2025-10-08T16:00:19.3334832Z   Using cached sqlakeyset-2.0.1746777265-py3-none-any.whl.metadata (9.1 kB)
2025-10-08T16:00:19.3632599Z Collecting Flask-Limiter[redis] (from -r requirements.txt (line 8))
2025-10-08T16:00:19.3644303Z   Using cached flask_limiter-4.0.0-py3-none-any.whl.metadata (6.2 kB)
2025-10-08T16:00:19.3836284Z Collecting ua-parser[regex] (from -r requirements.txt (line 37))
2025-10-08T16:00:19.3876856Z   Using cached ua_parser-1.0.1-py3-none-any.whl.metadata (5.6 kB)
2025-10-08T16:00:19.4061164Z Collecting blinker>=1.9.0 (from Flask==3.1.1->-r requirements.txt (line 2))
2025-10-08T16:00:19.4073576Z   Using cached blinker-1.9.0-py3-none-any.whl.metadata (1.6 kB)
2025-10-08T16:00:19.4296858Z Collecting click>=8.1.3 (from Flask==3.1.1->-r requirements.txt (line 2))
2025-10-08T16:00:19.4309616Z   Using cached click-8.3.0-py3-none-any.whl.metadata (2.6 kB)
2025-10-08T16:00:19.4474270Z Collecting itsdangerous>=2.2.0 (from Flask==3.1.1->-r requirements.txt (line 2))
2025-10-08T16:00:19.4486476Z   Using cached itsdangerous-2.2.0-py3-none-any.whl.metadata (1.9 kB)
2025-10-08T16:00:19.4682493Z Collecting jinja2>=3.1.2 (from Flask==3.1.1->-r requirements.txt (line 2))
2025-10-08T16:00:19.4694351Z   Using cached jinja2-3.1.6-py3-none-any.whl.metadata (2.9 kB)
2025-10-08T16:00:19.5268221Z Collecting markupsafe>=2.1.1 (from Flask==3.1.1->-r requirements.txt (line 2))
2025-10-08T16:00:19.5281899Z   Using cached markupsafe-3.0.3-cp313-cp313-manylinux2014_x86_64.manylinux_2_17_x86_64.manylinux_2_28_x86_64.whl.metadata (2.7 kB)
2025-10-08T16:00:19.5548532Z Collecting wtforms (from flask-wtf==1.2.2->-r requirements.txt (line 4))
2025-10-08T16:00:19.5560475Z   Using cached wtforms-3.2.1-py3-none-any.whl.metadata (5.3 kB)
2025-10-08T16:00:19.6022028Z Collecting dnspython>=2.0.0 (from email-validator==2.0.0->-r requirements.txt (line 9))
2025-10-08T16:00:19.6033825Z   Using cached dnspython-2.8.0-py3-none-any.whl.metadata (5.7 kB)
2025-10-08T16:00:19.6256779Z Collecting idna>=2.0.0 (from email-validator==2.0.0->-r requirements.txt (line 9))
2025-10-08T16:00:19.6268672Z   Using cached idna-3.10-py3-none-any.whl.metadata (10 kB)
2025-10-08T16:00:19.7785763Z Collecting cffi>=1.12 (from cryptography==44.0.2->-r requirements.txt (line 18))
2025-10-08T16:00:19.7799607Z   Using cached cffi-2.0.0-cp313-cp313-manylinux2014_x86_64.manylinux_2_17_x86_64.whl.metadata (2.6 kB)
2025-10-08T16:00:19.8011563Z Collecting python-dateutil>=2.7.0 (from arrow==1.2.3->-r requirements.txt (line 20))
2025-10-08T16:00:19.8023837Z   Using cached python_dateutil-2.9.0.post0-py2.py3-none-any.whl.metadata (8.4 kB)
2025-10-08T16:00:19.8258814Z Collecting cachetools (from pyld==2.0.4->-r requirements.txt (line 21))
2025-10-08T16:00:19.8271011Z   Using cached cachetools-6.2.0-py3-none-any.whl.metadata (5.4 kB)
2025-10-08T16:00:19.8759392Z Collecting frozendict (from pyld==2.0.4->-r requirements.txt (line 21))
2025-10-08T16:00:19.8772565Z   Using cached frozendict-2.4.6-py313-none-any.whl.metadata (23 kB)
2025-10-08T16:00:20.0656167Z Collecting lxml (from pyld==2.0.4->-r requirements.txt (line 21))
2025-10-08T16:00:20.0670500Z   Using cached lxml-6.0.2-cp313-cp313-manylinux_2_26_x86_64.manylinux_2_28_x86_64.whl.metadata (3.6 kB)
2025-10-08T16:00:20.0918709Z Collecting soupsieve>1.2 (from beautifulsoup4==4.12.2->-r requirements.txt (line 24))
2025-10-08T16:00:20.0930504Z   Using cached soupsieve-2.8-py3-none-any.whl.metadata (4.6 kB)
2025-10-08T16:00:20.1208939Z Collecting billiard<5.0,>=4.2.0 (from celery==5.3.6->-r requirements.txt (line 30))
2025-10-08T16:00:20.1220025Z   Using cached billiard-4.2.2-py3-none-any.whl.metadata (4.8 kB)
2025-10-08T16:00:20.1376132Z Collecting click-didyoumean>=0.3.0 (from celery==5.3.6->-r requirements.txt (line 30))
2025-10-08T16:00:20.1387135Z   Using cached click_didyoumean-0.3.1-py3-none-any.whl.metadata (3.9 kB)
2025-10-08T16:00:20.1555319Z Collecting click-plugins>=1.1.1 (from celery==5.3.6->-r requirements.txt (line 30))
2025-10-08T16:00:20.1566489Z   Using cached click_plugins-1.1.1.2-py2.py3-none-any.whl.metadata (6.5 kB)
2025-10-08T16:00:20.1754539Z Collecting click-repl>=0.2.0 (from celery==5.3.6->-r requirements.txt (line 30))
2025-10-08T16:00:20.1765962Z   Using cached click_repl-0.3.0-py3-none-any.whl.metadata (3.6 kB)
2025-10-08T16:00:20.2158973Z Collecting kombu<6.0,>=5.3.4 (from celery==5.3.6->-r requirements.txt (line 30))
2025-10-08T16:00:20.2170537Z   Using cached kombu-5.5.4-py3-none-any.whl.metadata (3.5 kB)
2025-10-08T16:00:20.2432131Z Collecting tzdata>=2022.7 (from celery==5.3.6->-r requirements.txt (line 30))
2025-10-08T16:00:20.2443732Z   Using cached tzdata-2025.2-py2.py3-none-any.whl.metadata (1.4 kB)
2025-10-08T16:00:20.2622261Z Collecting vine<6.0,>=5.1.0 (from celery==5.3.6->-r requirements.txt (line 30))
2025-10-08T16:00:20.2634331Z   Using cached vine-5.1.0-py3-none-any.whl.metadata (2.7 kB)
2025-10-08T16:00:20.2868142Z Collecting packaging>=21.3 (from pytesseract==0.3.10->-r requirements.txt (line 33))
2025-10-08T16:00:20.2880051Z   Using cached packaging-25.0-py3-none-any.whl.metadata (3.3 kB)
2025-10-08T16:00:20.3233005Z Collecting certifi (from sentry-sdk==2.27.0->-r requirements.txt (line 34))
2025-10-08T16:00:20.3245374Z   Using cached certifi-2025.10.5-py3-none-any.whl.metadata (2.5 kB)
2025-10-08T16:00:20.3427629Z Collecting text-unidecode>=1.3 (from python-slugify==8.0.4->-r requirements.txt (line 35))
2025-10-08T16:00:20.3439894Z   Using cached text_unidecode-1.3-py2.py3-none-any.whl.metadata (2.4 kB)
2025-10-08T16:00:20.3631317Z Collecting six>=1.8.0 (from furl==2.1.3->-r requirements.txt (line 36))
2025-10-08T16:00:20.3643144Z   Using cached six-1.17.0-py2.py3-none-any.whl.metadata (1.7 kB)
2025-10-08T16:00:20.3827056Z Collecting orderedmultidict>=1.0.1 (from furl==2.1.3->-r requirements.txt (line 36))
2025-10-08T16:00:20.3838955Z   Using cached orderedmultidict-1.0.1-py2.py3-none-any.whl.metadata (1.3 kB)
2025-10-08T16:00:20.4061945Z Collecting h11>=0.8 (from uvicorn==0.35.0->uvicorn[standard]==0.35.0->-r requirements.txt (line 50))
2025-10-08T16:00:20.4073777Z   Using cached h11-0.16.0-py3-none-any.whl.metadata (8.3 kB)
2025-10-08T16:00:20.4467516Z Collecting httptools>=0.6.3 (from uvicorn[standard]==0.35.0->-r requirements.txt (line 50))
2025-10-08T16:00:20.4480446Z   Using cached httptools-0.6.4-cp313-cp313-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.6 kB)
2025-10-08T16:00:20.4926793Z Collecting pyyaml>=5.1 (from uvicorn[standard]==0.35.0->-r requirements.txt (line 50))
2025-10-08T16:00:20.4939736Z   Using cached pyyaml-6.0.3-cp313-cp313-manylinux2014_x86_64.manylinux_2_17_x86_64.manylinux_2_28_x86_64.whl.metadata (2.4 kB)
2025-10-08T16:00:20.5351134Z Collecting uvloop>=0.15.1 (from uvicorn[standard]==0.35.0->-r requirements.txt (line 50))
2025-10-08T16:00:20.5363246Z   Using cached uvloop-0.21.0-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (4.9 kB)
2025-10-08T16:00:20.6122427Z Collecting watchfiles>=0.13 (from uvicorn[standard]==0.35.0->-r requirements.txt (line 50))
2025-10-08T16:00:20.6135187Z   Using cached watchfiles-1.1.0-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (4.9 kB)
2025-10-08T16:00:20.7050537Z Collecting websockets>=10.4 (from uvicorn[standard]==0.35.0->-r requirements.txt (line 50))
2025-10-08T16:00:20.7063520Z   Using cached websockets-15.0.1-cp313-cp313-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (6.8 kB)
2025-10-08T16:00:20.7424676Z Collecting alembic>=1.9.0 (from flask-migrate~=4.1.0->-r requirements.txt (line 6))
2025-10-08T16:00:20.7436507Z   Using cached alembic-1.16.5-py3-none-any.whl.metadata (7.3 kB)
2025-10-08T16:00:20.7675707Z Collecting Babel>=2.12 (from flask-babel~=4.0.0->-r requirements.txt (line 11))
2025-10-08T16:00:20.7687515Z   Using cached babel-2.17.0-py3-none-any.whl.metadata (2.0 kB)
2025-10-08T16:00:20.8145010Z Collecting pytz>=2022.7 (from flask-babel~=4.0.0->-r requirements.txt (line 11))
2025-10-08T16:00:20.8157066Z   Using cached pytz-2025.2-py2.py3-none-any.whl.metadata (22 kB)
2025-10-08T16:00:20.8654406Z Collecting bcrypt>=3.1.1 (from flask-bcrypt~=1.0.0->-r requirements.txt (line 12))
2025-10-08T16:00:20.8665969Z   Using cached bcrypt-5.0.0-cp39-abi3-manylinux_2_34_x86_64.whl.metadata (10 kB)
2025-10-08T16:00:20.8925311Z Collecting anyio (from httpx~=0.28.0->httpx[http2]~=0.28.0->-r requirements.txt (line 14))
2025-10-08T16:00:20.8937029Z   Using cached anyio-4.11.0-py3-none-any.whl.metadata (4.1 kB)
2025-10-08T16:00:20.9226292Z Collecting httpcore==1.* (from httpx~=0.28.0->httpx[http2]~=0.28.0->-r requirements.txt (line 14))
2025-10-08T16:00:20.9241235Z   Using cached httpcore-1.0.9-py3-none-any.whl.metadata (21 kB)
2025-10-08T16:00:21.3751913Z Collecting botocore<1.40.0,>=1.39.17 (from boto3~=1.39.0->-r requirements.txt (line 22))
2025-10-08T16:00:21.3765867Z   Using cached botocore-1.39.17-py3-none-any.whl.metadata (5.7 kB)
2025-10-08T16:00:21.3955601Z Collecting jmespath<2.0.0,>=0.7.1 (from boto3~=1.39.0->-r requirements.txt (line 22))
2025-10-08T16:00:21.3967292Z   Using cached jmespath-1.0.1-py3-none-any.whl.metadata (7.6 kB)
2025-10-08T16:00:21.4188610Z Collecting s3transfer<0.14.0,>=0.13.0 (from boto3~=1.39.0->-r requirements.txt (line 22))
2025-10-08T16:00:21.4200292Z   Using cached s3transfer-0.13.1-py3-none-any.whl.metadata (1.7 kB)
2025-10-08T16:00:21.4388148Z Collecting cachelib>=0.9.0 (from flask-caching~=2.3.0->-r requirements.txt (line 25))
2025-10-08T16:00:21.4399667Z   Using cached cachelib-0.13.0-py3-none-any.whl.metadata (2.0 kB)
2025-10-08T16:00:21.4681192Z Collecting typing_extensions>=4.5.0 (from stripe~=12.0.0->-r requirements.txt (line 40))
2025-10-08T16:00:21.4693041Z   Using cached typing_extensions-4.15.0-py3-none-any.whl.metadata (3.3 kB)
2025-10-08T16:00:21.4996111Z Collecting requests>=2.20 (from stripe~=12.0.0->-r requirements.txt (line 40))
2025-10-08T16:00:21.5008637Z   Using cached requests-2.32.5-py3-none-any.whl.metadata (4.9 kB)
2025-10-08T16:00:21.5248947Z Collecting asn1crypto>=1.5.1 (from webauthn~=2.5.0->-r requirements.txt (line 42))
2025-10-08T16:00:21.5260656Z   Using cached asn1crypto-1.5.1-py2.py3-none-any.whl.metadata (13 kB)
2025-10-08T16:00:21.5710787Z Collecting cbor2>=5.6.5 (from webauthn~=2.5.0->-r requirements.txt (line 42))
2025-10-08T16:00:21.5724205Z   Using cached cbor2-5.7.0-cp313-cp313-manylinux2014_x86_64.manylinux_2_17_x86_64.manylinux_2_28_x86_64.whl.metadata (5.4 kB)
2025-10-08T16:00:21.6053112Z Collecting pyOpenSSL>=25.0.0 (from webauthn~=2.5.0->-r requirements.txt (line 42))
2025-10-08T16:00:21.6066101Z   Using cached pyopenssl-25.3.0-py3-none-any.whl.metadata (17 kB)
2025-10-08T16:00:21.6351330Z Collecting pyasn1>=0.4.6 (from ldap3~=2.9.0->-r requirements.txt (line 43))
2025-10-08T16:00:21.6363217Z   Using cached pyasn1-0.6.1-py3-none-any.whl.metadata (8.4 kB)
2025-10-08T16:00:21.7705243Z Collecting greenlet>=1 (from sqlalchemy~=2.0.0->-r requirements.txt (line 44))
2025-10-08T16:00:21.7719055Z   Using cached greenlet-3.2.4-cp313-cp313-manylinux_2_24_x86_64.manylinux_2_28_x86_64.whl.metadata (4.1 kB)
2025-10-08T16:00:21.8325146Z Collecting webargs<9,>=8.0.0 (from flask-smorest~=0.46.1->-r requirements.txt (line 47))
2025-10-08T16:00:21.8336978Z   Using cached webargs-8.7.0-py3-none-any.whl.metadata (6.6 kB)
2025-10-08T16:00:21.8711827Z Collecting apispec<7,>=6.0.0 (from apispec[marshmallow]<7,>=6.0.0->flask-smorest~=0.46.1->-r requirements.txt (line 47))
2025-10-08T16:00:21.8723719Z   Using cached apispec-6.8.4-py3-none-any.whl.metadata (10 kB)
2025-10-08T16:00:21.9043178Z Collecting tatsu>4.2 (from ics~=0.7.0->-r requirements.txt (line 48))
2025-10-08T16:00:21.9055607Z   Using cached tatsu-5.13.2-py3-none-any.whl.metadata (14 kB)
2025-10-08T16:00:21.9277706Z Collecting attrs>=19.1.0 (from ics~=0.7.0->-r requirements.txt (line 48))
2025-10-08T16:00:21.9290414Z   Using cached attrs-25.4.0-py3-none-any.whl.metadata (10 kB)
2025-10-08T16:00:22.3023799Z Collecting regex>=2024.9.11 (from dateparser~=1.2.0->-r requirements.txt (line 49))
2025-10-08T16:00:22.3036910Z   Using cached regex-2025.9.18-cp313-cp313-manylinux2014_x86_64.manylinux_2_17_x86_64.manylinux_2_28_x86_64.whl.metadata (40 kB)
2025-10-08T16:00:22.3791885Z Collecting tzlocal>=0.2 (from dateparser~=1.2.0->-r requirements.txt (line 49))
2025-10-08T16:00:22.3804010Z   Using cached tzlocal-5.3.1-py3-none-any.whl.metadata (7.6 kB)
2025-10-08T16:00:22.4197835Z Collecting starlette<0.49.0,>=0.40.0 (from fastapi~=0.118.0->-r requirements.txt (line 53))
2025-10-08T16:00:22.4210688Z   Using cached starlette-0.48.0-py3-none-any.whl.metadata (6.3 kB)
2025-10-08T16:00:22.5648608Z Collecting pydantic!=1.8,!=1.8.1,!=2.0.0,!=2.0.1,!=2.1.0,<3.0.0,>=1.7.4 (from fastapi~=0.118.0->-r requirements.txt (line 53))
2025-10-08T16:00:22.5661557Z   Using cached pydantic-2.12.0-py3-none-any.whl.metadata (83 kB)
2025-10-08T16:00:22.6642347Z Collecting h2<5,>=3 (from httpx[http2]~=0.28.0->-r requirements.txt (line 14))
2025-10-08T16:00:22.6656801Z   Using cached h2-4.3.0-py3-none-any.whl.metadata (5.1 kB)
2025-10-08T16:00:22.6887563Z Collecting hyperframe<7,>=6.1 (from h2<5,>=3->httpx[http2]~=0.28.0->-r requirements.txt (line 14))
2025-10-08T16:00:22.6898692Z   Using cached hyperframe-6.1.0-py3-none-any.whl.metadata (4.3 kB)
2025-10-08T16:00:22.7070523Z Collecting hpack<5,>=4.1 (from h2<5,>=3->httpx[http2]~=0.28.0->-r requirements.txt (line 14))
2025-10-08T16:00:22.7081515Z   Using cached hpack-4.1.0-py3-none-any.whl.metadata (4.6 kB)
2025-10-08T16:00:22.7393127Z Collecting amqp<6.0.0,>=5.1.1 (from kombu<6.0,>=5.3.4->celery==5.3.6->-r requirements.txt (line 30))
2025-10-08T16:00:22.7404045Z   Using cached amqp-5.3.1-py3-none-any.whl.metadata (8.9 kB)
2025-10-08T16:00:22.7721002Z Collecting annotated-types>=0.6.0 (from pydantic!=1.8,!=1.8.1,!=2.0.0,!=2.0.1,!=2.1.0,<3.0.0,>=1.7.4->fastapi~=0.118.0->-r requirements.txt (line 53))
2025-10-08T16:00:22.7732083Z   Using cached annotated_types-0.7.0-py3-none-any.whl.metadata (15 kB)
2025-10-08T16:00:23.3957908Z Collecting pydantic-core==2.41.1 (from pydantic!=1.8,!=1.8.1,!=2.0.0,!=2.0.1,!=2.1.0,<3.0.0,>=1.7.4->fastapi~=0.118.0->-r requirements.txt (line 53))
2025-10-08T16:00:23.3971627Z   Using cached pydantic_core-2.41.1-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (7.3 kB)
2025-10-08T16:00:23.4163468Z Collecting typing-inspection>=0.4.2 (from pydantic!=1.8,!=1.8.1,!=2.0.0,!=2.0.1,!=2.1.0,<3.0.0,>=1.7.4->fastapi~=0.118.0->-r requirements.txt (line 53))
2025-10-08T16:00:23.4174842Z   Using cached typing_inspection-0.4.2-py3-none-any.whl.metadata (2.6 kB)
2025-10-08T16:00:23.6609836Z Collecting sniffio>=1.1 (from anyio->httpx~=0.28.0->httpx[http2]~=0.28.0->-r requirements.txt (line 14))
2025-10-08T16:00:23.6621668Z   Using cached sniffio-1.3.1-py3-none-any.whl.metadata (3.9 kB)
2025-10-08T16:00:23.7080008Z Collecting limits>=3.13 (from Flask-Limiter[redis]->-r requirements.txt (line 8))
2025-10-08T16:00:23.7091717Z   Using cached limits-5.6.0-py3-none-any.whl.metadata (10 kB)
2025-10-08T16:00:23.7277633Z Collecting ordered-set<5,>4 (from Flask-Limiter[redis]->-r requirements.txt (line 8))
2025-10-08T16:00:23.7289378Z   Using cached ordered_set-4.1.0-py3-none-any.whl.metadata (5.3 kB)
2025-10-08T16:00:23.7728243Z Collecting rich<15,>=12 (from Flask-Limiter[redis]->-r requirements.txt (line 8))
2025-10-08T16:00:23.7739942Z   Using cached rich-14.1.0-py3-none-any.whl.metadata (18 kB)
2025-10-08T16:00:23.8095661Z Collecting markdown-it-py>=2.2.0 (from rich<15,>=12->Flask-Limiter[redis]->-r requirements.txt (line 8))
2025-10-08T16:00:23.8107034Z   Using cached markdown_it_py-4.0.0-py3-none-any.whl.metadata (7.3 kB)
2025-10-08T16:00:23.8469259Z Collecting ua-parser-builtins (from ua-parser[regex]->-r requirements.txt (line 37))
2025-10-08T16:00:23.8480706Z   Using cached ua_parser_builtins-0.18.0.post1-py3-none-any.whl.metadata (1.4 kB)
2025-10-08T16:00:23.8670364Z Collecting ua-parser-rs (from ua-parser[regex]->-r requirements.txt (line 37))
2025-10-08T16:00:23.8681695Z   Using cached ua_parser_rs-0.1.3-cp39-abi3-manylinux_2_34_x86_64.whl.metadata (1.5 kB)
2025-10-08T16:00:23.8923337Z Collecting iniconfig>=1 (from pytest->-r requirements.txt (line 39))
2025-10-08T16:00:23.8934593Z   Using cached iniconfig-2.1.0-py3-none-any.whl.metadata (2.7 kB)
2025-10-08T16:00:23.9110109Z Collecting pluggy<2,>=1.5 (from pytest->-r requirements.txt (line 39))
2025-10-08T16:00:23.9121471Z   Using cached pluggy-1.6.0-py3-none-any.whl.metadata (4.8 kB)
2025-10-08T16:00:23.9432776Z Collecting Mako (from alembic>=1.9.0->flask-migrate~=4.1.0->-r requirements.txt (line 6))
2025-10-08T16:00:23.9445288Z   Using cached mako-1.3.10-py3-none-any.whl.metadata (2.9 kB)
2025-10-08T16:00:23.9857594Z Collecting pycparser (from cffi>=1.12->cryptography==44.0.2->-r requirements.txt (line 18))
2025-10-08T16:00:23.9869223Z   Using cached pycparser-2.23-py3-none-any.whl.metadata (993 bytes)
2025-10-08T16:00:24.0319324Z Collecting prompt-toolkit>=3.0.36 (from click-repl>=0.2.0->celery==5.3.6->-r requirements.txt (line 30))
2025-10-08T16:00:24.0330962Z   Using cached prompt_toolkit-3.0.52-py3-none-any.whl.metadata (6.4 kB)
2025-10-08T16:00:24.0783788Z Collecting deprecated>=1.2 (from limits>=3.13->Flask-Limiter[redis]->-r requirements.txt (line 8))
2025-10-08T16:00:24.0795257Z   Using cached Deprecated-1.2.18-py2.py3-none-any.whl.metadata (5.7 kB)
2025-10-08T16:00:24.1977567Z Collecting wrapt<2,>=1.10 (from deprecated>=1.2->limits>=3.13->Flask-Limiter[redis]->-r requirements.txt (line 8))
2025-10-08T16:00:24.1990729Z   Using cached wrapt-1.17.3-cp313-cp313-manylinux1_x86_64.manylinux_2_28_x86_64.manylinux_2_5_x86_64.whl.metadata (6.4 kB)
2025-10-08T16:00:24.2208026Z Collecting mdurl~=0.1 (from markdown-it-py>=2.2.0->rich<15,>=12->Flask-Limiter[redis]->-r requirements.txt (line 8))
2025-10-08T16:00:24.2219561Z   Using cached mdurl-0.1.2-py3-none-any.whl.metadata (1.6 kB)
2025-10-08T16:00:24.2551556Z Collecting wcwidth (from prompt-toolkit>=3.0.36->click-repl>=0.2.0->celery==5.3.6->-r requirements.txt (line 30))
2025-10-08T16:00:24.2563167Z   Using cached wcwidth-0.2.14-py2.py3-none-any.whl.metadata (15 kB)
2025-10-08T16:00:24.2751031Z INFO: pip is looking at multiple versions of pyopenssl to determine which version is compatible with other requirements. This could take a while.
2025-10-08T16:00:24.2755757Z Collecting pyOpenSSL>=25.0.0 (from webauthn~=2.5.0->-r requirements.txt (line 42))
2025-10-08T16:00:24.2767294Z   Using cached pyopenssl-25.2.0-py3-none-any.whl.metadata (17 kB)
2025-10-08T16:00:24.2926265Z   Using cached pyopenssl-25.1.0-py3-none-any.whl.metadata (17 kB)
2025-10-08T16:00:24.3996823Z Collecting charset_normalizer<4,>=2 (from requests>=2.20->stripe~=12.0.0->-r requirements.txt (line 40))
2025-10-08T16:00:24.4009469Z   Using cached charset_normalizer-3.4.3-cp313-cp313-manylinux2014_x86_64.manylinux_2_17_x86_64.manylinux_2_28_x86_64.whl.metadata (36 kB)
2025-10-08T16:00:24.5245145Z Using cached flask-3.1.1-py3-none-any.whl (103 kB)
2025-10-08T16:00:24.5257089Z Using cached python_dotenv-1.0.0-py3-none-any.whl (19 kB)
2025-10-08T16:00:24.5267994Z Using cached flask_wtf-1.2.2-py3-none-any.whl (12 kB)
2025-10-08T16:00:24.5278766Z Using cached flask_sqlalchemy-3.1.1-py3-none-any.whl (25 kB)
2025-10-08T16:00:24.5289245Z Using cached Flask_Login-0.6.3-py3-none-any.whl (17 kB)
2025-10-08T16:00:24.5299568Z Using cached email_validator-2.0.0-py3-none-any.whl (31 kB)
2025-10-08T16:00:24.5309818Z Using cached PyJWT-2.8.0-py3-none-any.whl (22 kB)
2025-10-08T16:00:24.5320429Z Using cached sqlalchemy_searchable-2.1.0-py3-none-any.whl (8.3 kB)
2025-10-08T16:00:24.5330591Z Using cached SQLAlchemy_Utils-0.41.1-py3-none-any.whl (92 kB)
2025-10-08T16:00:24.5341756Z Using cached cryptography-44.0.2-cp39-abi3-manylinux_2_34_x86_64.whl (4.2 MB)
2025-10-08T16:00:24.5381793Z Using cached bootstrap_flask-2.5.0-py3-none-any.whl (4.6 MB)
2025-10-08T16:00:24.5425987Z Using cached arrow-1.2.3-py3-none-any.whl (66 kB)
2025-10-08T16:00:24.5436612Z Using cached PyLD-2.0.4-py3-none-any.whl (70 kB)
2025-10-08T16:00:24.5447513Z Using cached markdown2-2.5.3-py3-none-any.whl (48 kB)
2025-10-08T16:00:24.5458305Z Using cached beautifulsoup4-4.12.2-py3-none-any.whl (142 kB)
2025-10-08T16:00:24.5469589Z Using cached celery-5.3.6-py3-none-any.whl (422 kB)
2025-10-08T16:00:24.5483002Z Using cached werkzeug-3.1.3-py3-none-any.whl (224 kB)
2025-10-08T16:00:24.5494727Z Using cached pytesseract-0.3.10-py3-none-any.whl (14 kB)
2025-10-08T16:00:24.5505089Z Using cached sentry_sdk-2.27.0-py2.py3-none-any.whl (340 kB)
2025-10-08T16:00:24.5517816Z Using cached python_slugify-8.0.4-py2.py3-none-any.whl (10 kB)
2025-10-08T16:00:24.5528744Z Using cached furl-2.1.3-py2.py3-none-any.whl (20 kB)
2025-10-08T16:00:24.5539488Z Using cached uvicorn-0.35.0-py3-none-any.whl (66 kB)
2025-10-08T16:00:24.5550079Z Using cached asgiref-3.9.1-py3-none-any.whl (23 kB)
2025-10-08T16:00:24.5560420Z Using cached urllib3-1.26.20-py2.py3-none-any.whl (144 kB)
2025-10-08T16:00:24.5571908Z Using cached Flask_Migrate-4.1.0-py3-none-any.whl (21 kB)
2025-10-08T16:00:24.5582358Z Using cached flask_mail-0.10.0-py3-none-any.whl (8.5 kB)
2025-10-08T16:00:24.5593328Z Using cached flask_babel-4.0.0-py3-none-any.whl (9.6 kB)
2025-10-08T16:00:24.5603861Z Using cached Flask_Bcrypt-1.0.1-py3-none-any.whl (6.0 kB)
2025-10-08T16:00:24.5614927Z Using cached httpx-0.28.1-py3-none-any.whl (73 kB)
2025-10-08T16:00:24.5625214Z Using cached boto3-1.39.17-py3-none-any.whl (139 kB)
2025-10-08T16:00:24.5636636Z Using cached Flask_Caching-2.3.1-py3-none-any.whl (28 kB)
2025-10-08T16:00:24.5647001Z Using cached redis-5.2.1-py3-none-any.whl (261 kB)
2025-10-08T16:00:24.5659350Z Using cached stripe-12.0.1-py2.py3-none-any.whl (1.6 MB)
2025-10-08T16:00:24.5681327Z Using cached authlib-1.5.2-py2.py3-none-any.whl (232 kB)
2025-10-08T16:00:24.5693063Z Using cached webauthn-2.5.3-py3-none-any.whl (70 kB)
2025-10-08T16:00:24.5703700Z Using cached ldap3-2.9.1-py2.py3-none-any.whl (432 kB)
2025-10-08T16:00:24.5717587Z Using cached sqlalchemy-2.0.43-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.3 MB)
2025-10-08T16:00:24.5751415Z Using cached orjson-3.10.18-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (133 kB)
2025-10-08T16:00:24.5762691Z Using cached marshmallow-4.0.1-py3-none-any.whl (48 kB)
2025-10-08T16:00:24.5773218Z Using cached flask_smorest-0.46.2-py3-none-any.whl (32 kB)
2025-10-08T16:00:24.5783926Z Using cached ics-0.7.2-py2.py3-none-any.whl (40 kB)
2025-10-08T16:00:24.5794507Z Using cached dateparser-1.2.2-py3-none-any.whl (315 kB)
2025-10-08T16:00:24.5806870Z Using cached pygments-2.19.2-py3-none-any.whl (1.2 MB)
2025-10-08T16:00:24.5826226Z Using cached fastapi-0.118.2-py3-none-any.whl (97 kB)
2025-10-08T16:00:24.5837686Z Using cached sqlakeyset-2.0.1746777265-py3-none-any.whl (26 kB)
2025-10-08T16:00:24.5848055Z Using cached apispec-6.8.4-py3-none-any.whl (30 kB)
2025-10-08T16:00:24.5858666Z Using cached billiard-4.2.2-py3-none-any.whl (86 kB)
2025-10-08T16:00:24.5869621Z Using cached botocore-1.39.17-py3-none-any.whl (13.9 MB)
2025-10-08T16:00:24.5979571Z Using cached click-8.3.0-py3-none-any.whl (107 kB)
2025-10-08T16:00:24.5990604Z Using cached httpcore-1.0.9-py3-none-any.whl (78 kB)
2025-10-08T16:00:24.6001341Z Using cached h2-4.3.0-py3-none-any.whl (61 kB)
2025-10-08T16:00:24.6012077Z Using cached hpack-4.1.0-py3-none-any.whl (34 kB)
2025-10-08T16:00:24.6022630Z Using cached hyperframe-6.1.0-py3-none-any.whl (13 kB)
2025-10-08T16:00:24.6033065Z Using cached jmespath-1.0.1-py3-none-any.whl (20 kB)
2025-10-08T16:00:24.6043593Z Using cached kombu-5.5.4-py3-none-any.whl (210 kB)
2025-10-08T16:00:24.6055207Z Using cached vine-5.1.0-py3-none-any.whl (9.6 kB)
2025-10-08T16:00:24.6065427Z Using cached amqp-5.3.1-py3-none-any.whl (50 kB)
2025-10-08T16:00:24.6076249Z Using cached pydantic-2.12.0-py3-none-any.whl (459 kB)
2025-10-08T16:00:24.6090396Z Using cached pydantic_core-2.41.1-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.1 MB)
2025-10-08T16:00:24.6115952Z Using cached python_dateutil-2.9.0.post0-py2.py3-none-any.whl (229 kB)
2025-10-08T16:00:24.6127949Z Using cached s3transfer-0.13.1-py3-none-any.whl (85 kB)
2025-10-08T16:00:24.6138903Z Using cached starlette-0.48.0-py3-none-any.whl (73 kB)
2025-10-08T16:00:24.6149640Z Using cached anyio-4.11.0-py3-none-any.whl (109 kB)
2025-10-08T16:00:24.6160589Z Using cached webargs-8.7.0-py3-none-any.whl (31 kB)
2025-10-08T16:00:24.6171146Z Using cached flask_limiter-4.0.0-py3-none-any.whl (29 kB)
2025-10-08T16:00:24.6181820Z Using cached ordered_set-4.1.0-py3-none-any.whl (7.6 kB)
2025-10-08T16:00:24.6192297Z Using cached rich-14.1.0-py3-none-any.whl (243 kB)
2025-10-08T16:00:24.6204573Z Using cached psycopg2_binary-2.9.10-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.0 MB)
2025-10-08T16:00:24.6236289Z Using cached pillow-11.3.0-cp313-cp313-manylinux_2_27_x86_64.manylinux_2_28_x86_64.whl (6.6 MB)
2025-10-08T16:00:24.6294352Z Using cached pillow_heif-1.1.1-cp313-cp313-manylinux_2_27_x86_64.manylinux_2_28_x86_64.whl (5.5 MB)
2025-10-08T16:00:24.6343158Z Using cached pillow_avif_plugin-1.5.2-cp313-cp313-manylinux_2_28_x86_64.whl (4.2 MB)
2025-10-08T16:00:24.6383614Z Using cached ua_parser-1.0.1-py3-none-any.whl (31 kB)
2025-10-08T16:00:24.6394277Z Using cached captcha-0.7.1-py3-none-any.whl (147 kB)
2025-10-08T16:00:24.6405515Z Using cached pytest-8.4.2-py3-none-any.whl (365 kB)
2025-10-08T16:00:24.6418898Z Using cached pluggy-1.6.0-py3-none-any.whl (20 kB)
2025-10-08T16:00:24.6429166Z Using cached alembic-1.16.5-py3-none-any.whl (247 kB)
2025-10-08T16:00:24.6441227Z Using cached annotated_types-0.7.0-py3-none-any.whl (13 kB)
2025-10-08T16:00:24.6451619Z Using cached asn1crypto-1.5.1-py2.py3-none-any.whl (105 kB)
2025-10-08T16:00:24.6462479Z Using cached attrs-25.4.0-py3-none-any.whl (67 kB)
2025-10-08T16:00:24.6473237Z Using cached babel-2.17.0-py3-none-any.whl (10.2 MB)
2025-10-08T16:00:24.6554584Z Using cached bcrypt-5.0.0-cp39-abi3-manylinux_2_34_x86_64.whl (278 kB)
2025-10-08T16:00:24.6566769Z Using cached blinker-1.9.0-py3-none-any.whl (8.5 kB)
2025-10-08T16:00:24.6577450Z Using cached cachelib-0.13.0-py3-none-any.whl (20 kB)
2025-10-08T16:00:24.6588736Z Using cached cbor2-5.7.0-cp313-cp313-manylinux2014_x86_64.manylinux_2_17_x86_64.manylinux_2_28_x86_64.whl (283 kB)
2025-10-08T16:00:24.6601326Z Using cached cffi-2.0.0-cp313-cp313-manylinux2014_x86_64.manylinux_2_17_x86_64.whl (219 kB)
2025-10-08T16:00:24.6612835Z Using cached click_didyoumean-0.3.1-py3-none-any.whl (3.6 kB)
2025-10-08T16:00:24.6625545Z Using cached click_plugins-1.1.1.2-py2.py3-none-any.whl (11 kB)
2025-10-08T16:00:24.6636173Z Using cached click_repl-0.3.0-py3-none-any.whl (10 kB)
2025-10-08T16:00:24.6646672Z Using cached dnspython-2.8.0-py3-none-any.whl (331 kB)
2025-10-08T16:00:24.6660745Z Using cached greenlet-3.2.4-cp313-cp313-manylinux_2_24_x86_64.manylinux_2_28_x86_64.whl (610 kB)
2025-10-08T16:00:24.6675109Z Using cached h11-0.16.0-py3-none-any.whl (37 kB)
2025-10-08T16:00:24.6686349Z Using cached httptools-0.6.4-cp313-cp313-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (473 kB)
2025-10-08T16:00:24.6700110Z Using cached idna-3.10-py3-none-any.whl (70 kB)
2025-10-08T16:00:24.6711055Z Using cached iniconfig-2.1.0-py3-none-any.whl (6.0 kB)
2025-10-08T16:00:24.6721467Z Using cached itsdangerous-2.2.0-py3-none-any.whl (16 kB)
2025-10-08T16:00:24.6732042Z Using cached jinja2-3.1.6-py3-none-any.whl (134 kB)
2025-10-08T16:00:24.6743222Z Using cached limits-5.6.0-py3-none-any.whl (60 kB)
2025-10-08T16:00:24.6754077Z Using cached Deprecated-1.2.18-py2.py3-none-any.whl (10.0 kB)
2025-10-08T16:00:24.6765018Z Using cached wrapt-1.17.3-cp313-cp313-manylinux1_x86_64.manylinux_2_28_x86_64.manylinux_2_5_x86_64.whl (88 kB)
2025-10-08T16:00:24.6775698Z Using cached markdown_it_py-4.0.0-py3-none-any.whl (87 kB)
2025-10-08T16:00:24.6786798Z Using cached mdurl-0.1.2-py3-none-any.whl (10.0 kB)
2025-10-08T16:00:24.6797866Z Using cached markupsafe-3.0.3-cp313-cp313-manylinux2014_x86_64.manylinux_2_17_x86_64.manylinux_2_28_x86_64.whl (22 kB)
2025-10-08T16:00:24.6808053Z Using cached orderedmultidict-1.0.1-py2.py3-none-any.whl (11 kB)
2025-10-08T16:00:24.6823166Z Using cached packaging-25.0-py3-none-any.whl (66 kB)
2025-10-08T16:00:24.6840144Z Using cached prompt_toolkit-3.0.52-py3-none-any.whl (391 kB)
2025-10-08T16:00:24.6860575Z Using cached pyasn1-0.6.1-py3-none-any.whl (83 kB)
2025-10-08T16:00:24.6894987Z Using cached pyopenssl-25.1.0-py3-none-any.whl (56 kB)
2025-10-08T16:00:24.6901871Z Using cached pytz-2025.2-py2.py3-none-any.whl (509 kB)
2025-10-08T16:00:24.6934622Z Using cached pyyaml-6.0.3-cp313-cp313-manylinux2014_x86_64.manylinux_2_17_x86_64.manylinux_2_28_x86_64.whl (801 kB)
2025-10-08T16:00:24.6957170Z Using cached regex-2025.9.18-cp313-cp313-manylinux2014_x86_64.manylinux_2_17_x86_64.manylinux_2_28_x86_64.whl (802 kB)
2025-10-08T16:00:24.6979572Z Using cached requests-2.32.5-py3-none-any.whl (64 kB)
2025-10-08T16:00:24.6995985Z Using cached charset_normalizer-3.4.3-cp313-cp313-manylinux2014_x86_64.manylinux_2_17_x86_64.manylinux_2_28_x86_64.whl (151 kB)
2025-10-08T16:00:24.7016770Z Using cached certifi-2025.10.5-py3-none-any.whl (163 kB)
2025-10-08T16:00:24.7031491Z Using cached six-1.17.0-py2.py3-none-any.whl (11 kB)
2025-10-08T16:00:24.7048907Z Using cached sniffio-1.3.1-py3-none-any.whl (10 kB)
2025-10-08T16:00:24.7064717Z Using cached soupsieve-2.8-py3-none-any.whl (36 kB)
2025-10-08T16:00:24.7086251Z Using cached tatsu-5.13.2-py3-none-any.whl (80 kB)
2025-10-08T16:00:24.7095215Z Using cached text_unidecode-1.3-py2.py3-none-any.whl (78 kB)
2025-10-08T16:00:24.7106914Z Using cached typing_extensions-4.15.0-py3-none-any.whl (44 kB)
2025-10-08T16:00:24.7118563Z Using cached typing_inspection-0.4.2-py3-none-any.whl (14 kB)
2025-10-08T16:00:24.7129544Z Using cached tzdata-2025.2-py2.py3-none-any.whl (347 kB)
2025-10-08T16:00:24.7144071Z Using cached tzlocal-5.3.1-py3-none-any.whl (18 kB)
2025-10-08T16:00:24.7156449Z Using cached uvloop-0.21.0-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (4.7 MB)
2025-10-08T16:00:24.7204057Z Using cached watchfiles-1.1.0-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (451 kB)
2025-10-08T16:00:24.7219973Z Using cached websockets-15.0.1-cp313-cp313-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (182 kB)
2025-10-08T16:00:24.7233303Z Using cached cachetools-6.2.0-py3-none-any.whl (11 kB)
2025-10-08T16:00:24.7244763Z Using cached frozendict-2.4.6-py313-none-any.whl (16 kB)
2025-10-08T16:00:24.7257683Z Using cached lxml-6.0.2-cp313-cp313-manylinux_2_26_x86_64.manylinux_2_28_x86_64.whl (5.2 MB)
2025-10-08T16:00:24.7308544Z Using cached mako-1.3.10-py3-none-any.whl (78 kB)
2025-10-08T16:00:24.7320924Z Using cached pycparser-2.23-py3-none-any.whl (118 kB)
2025-10-08T16:00:24.7334118Z Using cached ua_parser_builtins-0.18.0.post1-py3-none-any.whl (86 kB)
2025-10-08T16:00:24.7346658Z Using cached ua_parser_rs-0.1.3-cp39-abi3-manylinux_2_34_x86_64.whl (7.5 MB)
2025-10-08T16:00:24.7413766Z Using cached wcwidth-0.2.14-py2.py3-none-any.whl (37 kB)
2025-10-08T16:00:24.7425595Z Using cached wtforms-3.2.1-py3-none-any.whl (152 kB)
2025-10-08T16:00:25.1458550Z Installing collected packages: text-unidecode, pytz, pillow-avif-plugin, asn1crypto, wrapt, websockets, wcwidth, vine, uvloop, urllib3, ua-parser-rs, ua-parser-builtins, tzlocal, tzdata, typing_extensions, tatsu, soupsieve, sniffio, six, regex, redis, pyyaml, python-slugify, python-dotenv, pyjwt, pygments, pycparser, pyasn1, psycopg2-binary, pluggy, Pillow, packaging, orjson, ordered-set, mdurl, marshmallow, markupsafe, markdown2, lxml, jmespath, itsdangerous, iniconfig, idna, hyperframe, httptools, hpack, h11, greenlet, frozendict, dnspython, click, charset_normalizer, certifi, cbor2, cachetools, cachelib, blinker, billiard, bcrypt, Babel, attrs, asgiref, annotated-types, wtforms, Werkzeug, webargs, uvicorn, ua-parser, typing-inspection, sqlalchemy, sentry-sdk, requests, python-dateutil, pytest, pytesseract, pyld, pydantic-core, prompt-toolkit, pillow-heif, orderedmultidict, markdown-it-py, Mako, ldap3, jinja2, httpcore, h2, email-validator, deprecated, click-plugins, click-didyoumean, cffi, captcha, beautifulsoup4, apispec, anyio, amqp, watchfiles, stripe, starlette, SQLAlchemy-Utils, sqlakeyset, rich, pydantic, limits, kombu, httpx, furl, Flask, feedgen, dateparser, cryptography, click-repl, botocore, arrow, alembic, SQLAlchemy-Searchable, s3transfer, pyOpenSSL, ics, flask-wtf, flask-sqlalchemy, flask-smorest, flask-mail, flask-login, Flask-Limiter, flask-caching, flask-bcrypt, flask-babel, fastapi, celery, Bootstrap-Flask, Authlib, webauthn, flask-migrate, boto3
2025-10-08T16:00:37.3225781Z 
2025-10-08T16:00:37.3369986Z Successfully installed Authlib-1.5.2 Babel-2.17.0 Bootstrap-Flask-2.5.0 Flask-3.1.1 Flask-Limiter-4.0.0 Mako-1.3.10 Pillow-11.3.0 SQLAlchemy-Searchable-2.1.0 SQLAlchemy-Utils-0.41.1 Werkzeug-3.1.3 alembic-1.16.5 amqp-5.3.1 annotated-types-0.7.0 anyio-4.11.0 apispec-6.8.4 arrow-1.2.3 asgiref-3.9.1 asn1crypto-1.5.1 attrs-25.4.0 bcrypt-5.0.0 beautifulsoup4-4.12.2 billiard-4.2.2 blinker-1.9.0 boto3-1.39.17 botocore-1.39.17 cachelib-0.13.0 cachetools-6.2.0 captcha-0.7.1 cbor2-5.7.0 celery-5.3.6 certifi-2025.10.5 cffi-2.0.0 charset_normalizer-3.4.3 click-8.3.0 click-didyoumean-0.3.1 click-plugins-1.1.1.2 click-repl-0.3.0 cryptography-44.0.2 dateparser-1.2.2 deprecated-1.2.18 dnspython-2.8.0 email-validator-2.0.0 fastapi-0.118.2 feedgen-0.9.0 flask-babel-4.0.0 flask-bcrypt-1.0.1 flask-caching-2.3.1 flask-login-0.6.3 flask-mail-0.10.0 flask-migrate-4.1.0 flask-smorest-0.46.2 flask-sqlalchemy-3.1.1 flask-wtf-1.2.2 frozendict-2.4.6 furl-2.1.3 greenlet-3.2.4 h11-0.16.0 h2-4.3.0 hpack-4.1.0 httpcore-1.0.9 httptools-0.6.4 httpx-0.28.1 hyperframe-6.1.0 ics-0.7.2 idna-3.10 iniconfig-2.1.0 itsdangerous-2.2.0 jinja2-3.1.6 jmespath-1.0.1 kombu-5.5.4 ldap3-2.9.1 limits-5.6.0 lxml-6.0.2 markdown-it-py-4.0.0 markdown2-2.5.3 markupsafe-3.0.3 marshmallow-4.0.1 mdurl-0.1.2 ordered-set-4.1.0 orderedmultidict-1.0.1 orjson-3.10.18 packaging-25.0 pillow-avif-plugin-1.5.2 pillow-heif-1.1.1 pluggy-1.6.0 prompt-toolkit-3.0.52 psycopg2-binary-2.9.10 pyOpenSSL-25.1.0 pyasn1-0.6.1 pycparser-2.23 pydantic-2.12.0 pydantic-core-2.41.1 pygments-2.19.2 pyjwt-2.8.0 pyld-2.0.4 pytesseract-0.3.10 pytest-8.4.2 python-dateutil-2.9.0.post0 python-dotenv-1.0.0 python-slugify-8.0.4 pytz-2025.2 pyyaml-6.0.3 redis-5.2.1 regex-2025.9.18 requests-2.32.5 rich-14.1.0 s3transfer-0.13.1 sentry-sdk-2.27.0 six-1.17.0 sniffio-1.3.1 soupsieve-2.8 sqlakeyset-2.0.1746777265 sqlalchemy-2.0.43 starlette-0.48.0 stripe-12.0.1 tatsu-5.13.2 text-unidecode-1.3 typing-inspection-0.4.2 typing_extensions-4.15.0 tzdata-2025.2 tzlocal-5.3.1 ua-parser-1.0.1 ua-parser-builtins-0.18.0.post1 ua-parser-rs-0.1.3 urllib3-1.26.20 uvicorn-0.35.0 uvloop-0.21.0 vine-5.1.0 watchfiles-1.1.0 wcwidth-0.2.14 webargs-8.7.0 webauthn-2.5.3 websockets-15.0.1 wrapt-1.17.3 wtforms-3.2.1
2025-10-08T16:00:38.5363607Z Requirement already satisfied: pytest in /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages (8.4.2)
2025-10-08T16:00:38.5381953Z Requirement already satisfied: iniconfig>=1 in /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages (from pytest) (2.1.0)
2025-10-08T16:00:38.5387115Z Requirement already satisfied: packaging>=20 in /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages (from pytest) (25.0)
2025-10-08T16:00:38.5392658Z Requirement already satisfied: pluggy<2,>=1.5 in /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages (from pytest) (1.6.0)
2025-10-08T16:00:38.5397891Z Requirement already satisfied: pygments>=2.7.2 in /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages (from pytest) (2.19.2)
2025-10-08T16:00:38.7451427Z ##[group]Run echo "🔒 Testing database schema immutability"
2025-10-08T16:00:38.7451867Z [36;1mecho "🔒 Testing database schema immutability"[0m
2025-10-08T16:00:38.7452260Z [36;1mpython -m pytest tests/test_field_consistency_simple.py -v[0m
2025-10-08T16:00:38.7484923Z shell: /usr/bin/bash -e {0}
2025-10-08T16:00:38.7485151Z env:
2025-10-08T16:00:38.7485394Z   pythonLocation: /opt/hostedtoolcache/Python/3.13.7/x64
2025-10-08T16:00:38.7485796Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.13.7/x64/lib/pkgconfig
2025-10-08T16:00:38.7486183Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.13.7/x64
2025-10-08T16:00:38.7486542Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.13.7/x64
2025-10-08T16:00:38.7486887Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.13.7/x64
2025-10-08T16:00:38.7487234Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.13.7/x64/lib
2025-10-08T16:00:38.7487845Z   SERVER_NAME: test.localhost
2025-10-08T16:00:38.7488118Z   SECRET_KEY: test-secret-key-for-ci
2025-10-08T16:00:38.7488376Z   DATABASE_URL: sqlite:///memory:test.db
2025-10-08T16:00:38.7488631Z   CACHE_TYPE: NullCache
2025-10-08T16:00:38.7488839Z   CACHE_REDIS_URL: memory://
2025-10-08T16:00:38.7489052Z   TESTING: true
2025-10-08T16:00:38.7489230Z ##[endgroup]
2025-10-08T16:00:38.7540382Z 🔒 Testing database schema immutability
2025-10-08T16:00:39.4574298Z ============================= test session starts ==============================
2025-10-08T16:00:39.4575252Z platform linux -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
2025-10-08T16:00:39.4576101Z cachedir: .pytest_cache
2025-10-08T16:00:39.4576569Z rootdir: /home/runner/work/pyfedi/pyfedi
2025-10-08T16:00:39.4577014Z plugins: anyio-4.11.0
2025-10-08T16:00:39.4792738Z collecting ... collected 4 items
2025-10-08T16:00:39.4793140Z 
2025-10-08T16:00:41.2800418Z tests/test_field_consistency_simple.py::test_user_model_columns_exist PASSED [ 25%]
2025-10-08T16:00:41.2807697Z tests/test_field_consistency_simple.py::test_user_name_field_consistency PASSED [ 50%]
2025-10-08T16:00:41.2814642Z tests/test_field_consistency_simple.py::test_post_model_columns_exist PASSED [ 75%]
2025-10-08T16:00:41.5512451Z tests/test_field_consistency_simple.py::test_community_model_columns_exist PASSED [100%]
2025-10-08T16:00:41.5513219Z 
2025-10-08T16:00:41.5513475Z ============================== 4 passed in 1.83s ===============================
2025-10-08T16:00:41.7995231Z ##[group]Run echo "🧹 Testing HTML sanitization and processing"
2025-10-08T16:00:41.7995681Z [36;1mecho "🧹 Testing HTML sanitization and processing"[0m
2025-10-08T16:00:41.7996056Z [36;1mpython -m pytest tests/test_allowlist_html.py -v[0m
2025-10-08T16:00:41.8028640Z shell: /usr/bin/bash -e {0}
2025-10-08T16:00:41.8028867Z env:
2025-10-08T16:00:41.8029119Z   pythonLocation: /opt/hostedtoolcache/Python/3.13.7/x64
2025-10-08T16:00:41.8029540Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.13.7/x64/lib/pkgconfig
2025-10-08T16:00:41.8029923Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.13.7/x64
2025-10-08T16:00:41.8030271Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.13.7/x64
2025-10-08T16:00:41.8030621Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.13.7/x64
2025-10-08T16:00:41.8030980Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.13.7/x64/lib
2025-10-08T16:00:41.8031286Z   SERVER_NAME: test.localhost
2025-10-08T16:00:41.8031560Z   SECRET_KEY: test-secret-key-for-ci
2025-10-08T16:00:41.8031826Z   DATABASE_URL: sqlite:///memory:test.db
2025-10-08T16:00:41.8032083Z   CACHE_TYPE: NullCache
2025-10-08T16:00:41.8032297Z   CACHE_REDIS_URL: memory://
2025-10-08T16:00:41.8032517Z   TESTING: true
2025-10-08T16:00:41.8032716Z ##[endgroup]
2025-10-08T16:00:41.8085399Z 🧹 Testing HTML sanitization and processing
2025-10-08T16:00:42.0297758Z ============================= test session starts ==============================
2025-10-08T16:00:42.0298566Z platform linux -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
2025-10-08T16:00:42.0299134Z cachedir: .pytest_cache
2025-10-08T16:00:42.0299420Z rootdir: /home/runner/work/pyfedi/pyfedi
2025-10-08T16:00:42.0299742Z plugins: anyio-4.11.0
2025-10-08T16:00:43.3918372Z collecting ... collected 20 items
2025-10-08T16:00:43.3918773Z 
2025-10-08T16:00:43.3944698Z tests/test_allowlist_html.py::TestAllowlistHtml::test_angle_brackets_in_blockquote PASSED [  5%]
2025-10-08T16:00:43.3954602Z tests/test_allowlist_html.py::TestAllowlistHtml::test_angle_brackets_in_text PASSED [ 10%]
2025-10-08T16:00:43.3963713Z tests/test_allowlist_html.py::TestAllowlistHtml::test_attributes PASSED  [ 15%]
2025-10-08T16:00:43.3972522Z tests/test_allowlist_html.py::TestAllowlistHtml::test_basic_html PASSED  [ 20%]
2025-10-08T16:00:43.3980790Z tests/test_allowlist_html.py::TestAllowlistHtml::test_community_link_basic_html PASSED [ 25%]
2025-10-08T16:00:43.3987722Z tests/test_allowlist_html.py::TestAllowlistHtml::test_community_link_code_block PASSED [ 30%]
2025-10-08T16:00:43.3994421Z tests/test_allowlist_html.py::TestAllowlistHtml::test_community_link_markdown_link PASSED [ 35%]
2025-10-08T16:00:43.4001290Z tests/test_allowlist_html.py::TestAllowlistHtml::test_community_link_masto_link PASSED [ 40%]
2025-10-08T16:00:43.4011034Z tests/test_allowlist_html.py::TestAllowlistHtml::test_disallowed_tags PASSED [ 45%]
2025-10-08T16:00:43.4017631Z tests/test_allowlist_html.py::TestAllowlistHtml::test_empty_input PASSED [ 50%]
2025-10-08T16:00:43.4024666Z tests/test_allowlist_html.py::TestAllowlistHtml::test_feed_link_basic_html PASSED [ 55%]
2025-10-08T16:00:43.4031475Z tests/test_allowlist_html.py::TestAllowlistHtml::test_feed_link_code_block PASSED [ 60%]
2025-10-08T16:00:43.4037951Z tests/test_allowlist_html.py::TestAllowlistHtml::test_feed_link_markdown_link PASSED [ 65%]
2025-10-08T16:00:43.4044537Z tests/test_allowlist_html.py::TestAllowlistHtml::test_feed_link_masto_link PASSED [ 70%]
2025-10-08T16:00:43.4052959Z tests/test_allowlist_html.py::TestAllowlistHtml::test_nested_tags PASSED [ 75%]
2025-10-08T16:00:43.4060246Z tests/test_allowlist_html.py::TestAllowlistHtml::test_person_link_basic_html PASSED [ 80%]
2025-10-08T16:00:43.4066790Z tests/test_allowlist_html.py::TestAllowlistHtml::test_person_link_code_block PASSED [ 85%]
2025-10-08T16:00:43.4073650Z tests/test_allowlist_html.py::TestAllowlistHtml::test_person_link_markdown_link PASSED [ 90%]
2025-10-08T16:00:43.4080541Z tests/test_allowlist_html.py::TestAllowlistHtml::test_person_link_masto_link PASSED [ 95%]
2025-10-08T16:00:43.7745144Z tests/test_allowlist_html.py::TestAllowlistHtml::test_plain_text_urls PASSED [100%]
2025-10-08T16:00:43.7745583Z 
2025-10-08T16:00:43.7745733Z ============================== 20 passed in 1.39s ==============================
2025-10-08T16:00:44.1126396Z ##[group]Run echo "🗄️ Testing database migration consistency"
2025-10-08T16:00:44.1126836Z [36;1mecho "🗄️ Testing database migration consistency"[0m
2025-10-08T16:00:44.1127208Z [36;1mpython -m pytest tests/test_migration_heads.py -v[0m
2025-10-08T16:00:44.1160242Z shell: /usr/bin/bash -e {0}
2025-10-08T16:00:44.1160481Z env:
2025-10-08T16:00:44.1160738Z   pythonLocation: /opt/hostedtoolcache/Python/3.13.7/x64
2025-10-08T16:00:44.1161153Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.13.7/x64/lib/pkgconfig
2025-10-08T16:00:44.1161540Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.13.7/x64
2025-10-08T16:00:44.1161885Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.13.7/x64
2025-10-08T16:00:44.1162230Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.13.7/x64
2025-10-08T16:00:44.1162579Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.13.7/x64/lib
2025-10-08T16:00:44.1162894Z   SERVER_NAME: test.localhost
2025-10-08T16:00:44.1163186Z   SECRET_KEY: test-secret-key-for-ci
2025-10-08T16:00:44.1163449Z   DATABASE_URL: sqlite:///memory:test.db
2025-10-08T16:00:44.1163697Z   CACHE_TYPE: NullCache
2025-10-08T16:00:44.1163910Z   CACHE_REDIS_URL: memory://
2025-10-08T16:00:44.1164154Z   CELERY_BROKER_URL: memory://localhost/
2025-10-08T16:00:44.1164402Z   TESTING: true
2025-10-08T16:00:44.1164585Z ##[endgroup]
2025-10-08T16:00:44.1216784Z 🗄️ Testing database migration consistency
2025-10-08T16:00:44.3440684Z ============================= test session starts ==============================
2025-10-08T16:00:44.3441528Z platform linux -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
2025-10-08T16:00:44.3442019Z cachedir: .pytest_cache
2025-10-08T16:00:44.3442268Z rootdir: /home/runner/work/pyfedi/pyfedi
2025-10-08T16:00:44.3442534Z plugins: anyio-4.11.0
2025-10-08T16:00:45.4607738Z collecting ... collected 2 items
2025-10-08T16:00:45.4608209Z 
2025-10-08T16:00:49.1221430Z tests/test_migration_heads.py::test_single_migration_head PASSED         [ 50%]
2025-10-08T16:00:52.4298105Z tests/test_migration_heads.py::test_migration_history_linear PASSED      [100%]
2025-10-08T16:00:52.4298636Z 
2025-10-08T16:00:52.4298829Z =============================== warnings summary ===============================
2025-10-08T16:00:52.4299412Z tests/test_migration_heads.py::test_single_migration_head
2025-10-08T16:00:52.4300876Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pytesseract/pytesseract.py:32: DeprecationWarning: 'pkgutil.find_loader' is deprecated and slated for removal in Python 3.14; use importlib.util.find_spec() instead
2025-10-08T16:00:52.4302187Z     numpy_installed = find_loader('numpy') is not None
2025-10-08T16:00:52.4302432Z 
2025-10-08T16:00:52.4302610Z tests/test_migration_heads.py::test_single_migration_head
2025-10-08T16:00:52.4303728Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pytesseract/pytesseract.py:36: DeprecationWarning: 'pkgutil.find_loader' is deprecated and slated for removal in Python 3.14; use importlib.util.find_spec() instead
2025-10-08T16:00:52.4304784Z     pandas_installed = find_loader('pandas') is not None
2025-10-08T16:00:52.4305032Z 
2025-10-08T16:00:52.4305190Z tests/test_migration_heads.py::test_single_migration_head
2025-10-08T16:00:52.4306060Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pyasn1/codec/ber/encoder.py:952: DeprecationWarning: tagMap is deprecated. Please use TAG_MAP instead.
2025-10-08T16:00:52.4307028Z     warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)
2025-10-08T16:00:52.4307633Z 
2025-10-08T16:00:52.4308031Z tests/test_migration_heads.py::test_single_migration_head
2025-10-08T16:00:52.4309400Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pyasn1/codec/ber/encoder.py:952: DeprecationWarning: typeMap is deprecated. Please use TYPE_MAP instead.
2025-10-08T16:00:52.4311424Z     warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)
2025-10-08T16:00:52.4312251Z 
2025-10-08T16:00:52.4312621Z -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
2025-10-08T16:00:52.4313396Z ======================== 2 passed, 4 warnings in 7.52s =========================
2025-10-08T16:00:52.9259732Z ##[group]Run echo "🔍 Testing explore page rendering and content"
2025-10-08T16:00:52.9260183Z [36;1mecho "🔍 Testing explore page rendering and content"[0m
2025-10-08T16:00:52.9260529Z [36;1mpython tests/test_explore_ci_real_world.py[0m
2025-10-08T16:00:52.9292636Z shell: /usr/bin/bash -e {0}
2025-10-08T16:00:52.9292856Z env:
2025-10-08T16:00:52.9293099Z   pythonLocation: /opt/hostedtoolcache/Python/3.13.7/x64
2025-10-08T16:00:52.9293494Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.13.7/x64/lib/pkgconfig
2025-10-08T16:00:52.9293875Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.13.7/x64
2025-10-08T16:00:52.9294217Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.13.7/x64
2025-10-08T16:00:52.9294579Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.13.7/x64
2025-10-08T16:00:52.9294923Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.13.7/x64/lib
2025-10-08T16:00:52.9295226Z   SERVER_NAME: test.localhost
2025-10-08T16:00:52.9295505Z   SECRET_KEY: test-secret-key-for-ci
2025-10-08T16:00:52.9295763Z   DATABASE_URL: sqlite:///memory:test.db
2025-10-08T16:00:52.9296016Z   CACHE_TYPE: NullCache
2025-10-08T16:00:52.9296221Z   CACHE_REDIS_URL: memory://
2025-10-08T16:00:52.9296467Z   CELERY_BROKER_URL: memory://localhost/
2025-10-08T16:00:52.9296706Z   TESTING: true
2025-10-08T16:00:52.9296890Z ##[endgroup]
2025-10-08T16:00:52.9349327Z 🔍 Testing explore page rendering and content
2025-10-08T16:00:53.0846037Z ============================================================
2025-10-08T16:00:53.0846921Z 🧪 REAL-WORLD EXPLORE PAGE TESTS (CI/CD Compatible)
2025-10-08T16:00:53.0847594Z ============================================================
2025-10-08T16:00:53.0847917Z 
2025-10-08T16:00:53.0848053Z Running: Template Compilation
2025-10-08T16:00:53.0848357Z ----------------------------------------
2025-10-08T16:00:53.0848758Z ✅ Template compiles successfully
2025-10-08T16:00:53.0849124Z    Correct syntax found: topics|length
2025-10-08T16:00:53.0849355Z 
2025-10-08T16:00:53.0849491Z Running: Render Empty Data
2025-10-08T16:00:53.0849749Z ----------------------------------------
2025-10-08T16:00:53.0850085Z ✅ Empty state renders correctly
2025-10-08T16:00:53.0850262Z 
2025-10-08T16:00:53.0850367Z Running: Render With Topics
2025-10-08T16:00:53.0850630Z ----------------------------------------
2025-10-08T16:00:53.0850942Z ✅ Topics render correctly
2025-10-08T16:00:53.0851223Z    Found: Technology, Science, Programming
2025-10-08T16:00:53.0851536Z    Links are properly formatted
2025-10-08T16:00:53.0851713Z 
2025-10-08T16:00:53.0851811Z Running: No Syntax Leakage
2025-10-08T16:00:53.0852066Z ----------------------------------------
2025-10-08T16:00:53.0852404Z ✅ No template syntax leaked to output
2025-10-08T16:00:53.0852612Z 
2025-10-08T16:00:53.0852717Z ============================================================
2025-10-08T16:00:53.0853045Z 📊 TEST SUMMARY
2025-10-08T16:00:53.0853279Z ============================================================
2025-10-08T16:00:53.0853636Z ✅ PASS: Template Compilation
2025-10-08T16:00:53.0853932Z ✅ PASS: Render Empty Data
2025-10-08T16:00:53.0854223Z ✅ PASS: Render With Topics
2025-10-08T16:00:53.0854510Z ✅ PASS: No Syntax Leakage
2025-10-08T16:00:53.0854664Z 
2025-10-08T16:00:53.0854886Z 🎉 All tests passed! The explore page is working correctly.
2025-10-08T16:00:53.1007220Z ##[group]Run echo "📝 Running additional core logic tests"
2025-10-08T16:00:53.1007847Z [36;1mecho "📝 Running additional core logic tests"[0m
2025-10-08T16:00:53.1008164Z [36;1m# Run any other fast unit tests[0m
2025-10-08T16:00:53.1008879Z [36;1mfind tests/ -name "test_*.py" -not -name "test_startup_validation.py" -not -name "test_field_consistency_simple.py" -not -name "test_allowlist_html.py" -exec python -m pytest {} -v \; || true[0m
2025-10-08T16:00:53.1041557Z shell: /usr/bin/bash -e {0}
2025-10-08T16:00:53.1041793Z env:
2025-10-08T16:00:53.1042047Z   pythonLocation: /opt/hostedtoolcache/Python/3.13.7/x64
2025-10-08T16:00:53.1042446Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.13.7/x64/lib/pkgconfig
2025-10-08T16:00:53.1042841Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.13.7/x64
2025-10-08T16:00:53.1043183Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.13.7/x64
2025-10-08T16:00:53.1043526Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.13.7/x64
2025-10-08T16:00:53.1043990Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.13.7/x64/lib
2025-10-08T16:00:53.1044305Z   SERVER_NAME: test.localhost
2025-10-08T16:00:53.1044542Z   SECRET_KEY: test-secret-key-for-ci
2025-10-08T16:00:53.1044804Z   DATABASE_URL: sqlite:///memory:test.db
2025-10-08T16:00:53.1045053Z   CACHE_TYPE: NullCache
2025-10-08T16:00:53.1045256Z   CACHE_REDIS_URL: memory://
2025-10-08T16:00:53.1045480Z   TESTING: true
2025-10-08T16:00:53.1045666Z ##[endgroup]
2025-10-08T16:00:53.1097893Z 📝 Running additional core logic tests
2025-10-08T16:00:53.3251840Z ============================= test session starts ==============================
2025-10-08T16:00:53.3252776Z platform linux -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
2025-10-08T16:00:53.3253624Z cachedir: .pytest_cache
2025-10-08T16:00:53.3254064Z rootdir: /home/runner/work/pyfedi/pyfedi
2025-10-08T16:00:53.3254529Z plugins: anyio-4.11.0
2025-10-08T16:00:53.4922543Z collecting ... collected 13 items
2025-10-08T16:00:53.4922947Z 
2025-10-08T16:00:54.4352851Z tests/test_private_registration_endpoints.py::TestPrivateRegistrationHealthEndpoint::test_health_check_success SKIPPED [  7%]
2025-10-08T16:00:54.4373973Z tests/test_private_registration_endpoints.py::TestPrivateRegistrationHealthEndpoint::test_health_check_invalid_secret SKIPPED [ 15%]
2025-10-08T16:00:54.4393998Z tests/test_private_registration_endpoints.py::TestPrivateRegistrationHealthEndpoint::test_health_check_no_secret SKIPPED [ 23%]
2025-10-08T16:00:54.4413854Z tests/test_private_registration_endpoints.py::TestPrivateRegistrationHealthEndpoint::test_health_check_feature_disabled SKIPPED [ 30%]
2025-10-08T16:00:54.4436609Z tests/test_private_registration_endpoints.py::TestPrivateRegistrationEndpoint::test_private_registration_success SKIPPED [ 38%]
2025-10-08T16:00:54.4455920Z tests/test_private_registration_endpoints.py::TestPrivateRegistrationEndpoint::test_private_registration_generated_password SKIPPED [ 46%]
2025-10-08T16:00:54.4474973Z tests/test_private_registration_endpoints.py::TestPrivateRegistrationEndpoint::test_private_registration_duplicate_user SKIPPED [ 53%]
2025-10-08T16:00:54.4494337Z tests/test_private_registration_endpoints.py::TestPrivateRegistrationEndpoint::test_private_registration_invalid_data SKIPPED [ 61%]
2025-10-08T16:00:54.4513664Z tests/test_private_registration_endpoints.py::TestPrivateRegistrationEndpoint::test_private_registration_unauthorized_ip SKIPPED [ 69%]
2025-10-08T16:00:54.4533286Z tests/test_private_registration_endpoints.py::TestUserValidationEndpoint::test_user_validation_available SKIPPED [ 76%]
2025-10-08T16:00:54.4553921Z tests/test_private_registration_endpoints.py::TestUserValidationEndpoint::test_user_validation_taken SKIPPED [ 84%]
2025-10-08T16:00:54.4578201Z tests/test_private_registration_endpoints.py::TestEnvironmentConfiguration::test_feature_disabled_via_env SKIPPED [ 92%]
2025-10-08T16:00:54.7331963Z tests/test_private_registration_endpoints.py::TestEnvironmentConfiguration::test_secret_from_environment SKIPPED [100%]
2025-10-08T16:00:54.7332783Z 
2025-10-08T16:00:54.7332993Z ============================= 13 skipped in 1.14s ==============================
2025-10-08T16:00:55.1780063Z ============================= test session starts ==============================
2025-10-08T16:00:55.1780806Z platform linux -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
2025-10-08T16:00:55.1781657Z cachedir: .pytest_cache
2025-10-08T16:00:55.1781964Z rootdir: /home/runner/work/pyfedi/pyfedi
2025-10-08T16:00:55.1782308Z plugins: anyio-4.11.0
2025-10-08T16:00:56.5966691Z collecting ... collected 1 item
2025-10-08T16:00:56.5967060Z 
2025-10-08T16:00:57.9678846Z tests/test_activitypub_util.py::test_find_actor_or_create FAILED         [100%]
2025-10-08T16:00:57.9679494Z 
2025-10-08T16:00:57.9679705Z =================================== FAILURES ===================================
2025-10-08T16:00:57.9680383Z __________________________ test_find_actor_or_create ___________________________
2025-10-08T16:00:57.9680831Z 
2025-10-08T16:00:57.9681204Z self = <sqlalchemy.engine.base.Connection object at 0x7f40d2d2b820>
2025-10-08T16:00:57.9682244Z dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f40d4e617f0>
2025-10-08T16:00:57.9683467Z context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f40d292c690>
2025-10-08T16:00:57.9684652Z statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f40d2f38440>
2025-10-08T16:00:57.9685468Z parameters = [('use_allowlist', 1, 0)]
2025-10-08T16:00:57.9685794Z 
2025-10-08T16:00:57.9685968Z     def _exec_single_context(
2025-10-08T16:00:57.9686358Z         self,
2025-10-08T16:00:57.9686690Z         dialect: Dialect,
2025-10-08T16:00:57.9687115Z         context: ExecutionContext,
2025-10-08T16:00:57.9687795Z         statement: Union[str, Compiled],
2025-10-08T16:00:57.9688364Z         parameters: Optional[_AnyMultiExecuteParams],
2025-10-08T16:00:57.9688980Z     ) -> CursorResult[Any]:
2025-10-08T16:00:57.9689492Z         """continue the _execute_context() method for a single DBAPI
2025-10-08T16:00:57.9690133Z         cursor.execute() or cursor.executemany() call.
2025-10-08T16:00:57.9690637Z     
2025-10-08T16:00:57.9690927Z         """
2025-10-08T16:00:57.9691369Z         if dialect.bind_typing is BindTyping.SETINPUTSIZES:
2025-10-08T16:00:57.9692036Z             generic_setinputsizes = context._prepare_set_input_sizes()
2025-10-08T16:00:57.9692555Z     
2025-10-08T16:00:57.9692858Z             if generic_setinputsizes:
2025-10-08T16:00:57.9693230Z                 try:
2025-10-08T16:00:57.9693547Z                     dialect.do_set_input_sizes(
2025-10-08T16:00:57.9694017Z                         context.cursor, generic_setinputsizes, context
2025-10-08T16:00:57.9694477Z                     )
2025-10-08T16:00:57.9694797Z                 except BaseException as e:
2025-10-08T16:00:57.9695202Z                     self._handle_dbapi_exception(
2025-10-08T16:00:57.9695664Z                         e, str(statement), parameters, None, context
2025-10-08T16:00:57.9696068Z                     )
2025-10-08T16:00:57.9696334Z     
2025-10-08T16:00:57.9696605Z         cursor, str_statement, parameters = (
2025-10-08T16:00:57.9696992Z             context.cursor,
2025-10-08T16:00:57.9697318Z             context.statement,
2025-10-08T16:00:57.9697861Z             context.parameters,
2025-10-08T16:00:57.9698186Z         )
2025-10-08T16:00:57.9698415Z     
2025-10-08T16:00:57.9698748Z         effective_parameters: Optional[_AnyExecuteParams]
2025-10-08T16:00:57.9699167Z     
2025-10-08T16:00:57.9699432Z         if not context.executemany:
2025-10-08T16:00:57.9699818Z             effective_parameters = parameters[0]
2025-10-08T16:00:57.9700193Z         else:
2025-10-08T16:00:57.9700487Z             effective_parameters = parameters
2025-10-08T16:00:57.9700848Z     
2025-10-08T16:00:57.9701142Z         if self._has_events or self.engine._has_events:
2025-10-08T16:00:57.9701896Z             for fn in self.dispatch.before_cursor_execute:
2025-10-08T16:00:57.9702386Z                 str_statement, effective_parameters = fn(
2025-10-08T16:00:57.9702784Z                     self,
2025-10-08T16:00:57.9703085Z                     cursor,
2025-10-08T16:00:57.9703400Z                     str_statement,
2025-10-08T16:00:57.9703754Z                     effective_parameters,
2025-10-08T16:00:57.9704408Z                     context,
2025-10-08T16:00:57.9704741Z                     context.executemany,
2025-10-08T16:00:57.9705088Z                 )
2025-10-08T16:00:57.9705347Z     
2025-10-08T16:00:57.9705587Z         if self._echo:
2025-10-08T16:00:57.9705894Z             self._log_info(str_statement)
2025-10-08T16:00:57.9706256Z     
2025-10-08T16:00:57.9706531Z             stats = context._get_cache_stats()
2025-10-08T16:00:57.9706895Z     
2025-10-08T16:00:57.9707171Z             if not self.engine.hide_parameters:
2025-10-08T16:00:57.9707718Z                 self._log_info(
2025-10-08T16:00:57.9708050Z                     "[%s] %r",
2025-10-08T16:00:57.9708360Z                     stats,
2025-10-08T16:00:57.9708679Z                     sql_util._repr_params(
2025-10-08T16:00:57.9709071Z                         effective_parameters,
2025-10-08T16:00:57.9709433Z                         batches=10,
2025-10-08T16:00:57.9709811Z                         ismulti=context.executemany,
2025-10-08T16:00:57.9710205Z                     ),
2025-10-08T16:00:57.9710469Z                 )
2025-10-08T16:00:57.9710726Z             else:
2025-10-08T16:00:57.9710991Z                 self._log_info(
2025-10-08T16:00:57.9711420Z                     "[%s] [SQL parameters hidden due to hide_parameters=True]",
2025-10-08T16:00:57.9711872Z                     stats,
2025-10-08T16:00:57.9712169Z                 )
2025-10-08T16:00:57.9712428Z     
2025-10-08T16:00:57.9712682Z         evt_handled: bool = False
2025-10-08T16:00:57.9713017Z         try:
2025-10-08T16:00:57.9713391Z             if context.execute_style is ExecuteStyle.EXECUTEMANY:
2025-10-08T16:00:57.9713855Z                 effective_parameters = cast(
2025-10-08T16:00:57.9714300Z                     "_CoreMultiExecuteParams", effective_parameters
2025-10-08T16:00:57.9714720Z                 )
2025-10-08T16:00:57.9715001Z                 if self.dialect._has_events:
2025-10-08T16:00:57.9715437Z                     for fn in self.dialect.dispatch.do_executemany:
2025-10-08T16:00:57.9715865Z                         if fn(
2025-10-08T16:00:57.9716188Z                             cursor,
2025-10-08T16:00:57.9716522Z                             str_statement,
2025-10-08T16:00:57.9716902Z                             effective_parameters,
2025-10-08T16:00:57.9717278Z                             context,
2025-10-08T16:00:57.9717769Z                         ):
2025-10-08T16:00:57.9718100Z                             evt_handled = True
2025-10-08T16:00:57.9718479Z                             break
2025-10-08T16:00:57.9718809Z                 if not evt_handled:
2025-10-08T16:00:57.9719195Z                     self.dialect.do_executemany(
2025-10-08T16:00:57.9719590Z                         cursor,
2025-10-08T16:00:57.9719905Z                         str_statement,
2025-10-08T16:00:57.9720266Z                         effective_parameters,
2025-10-08T16:00:57.9720627Z                         context,
2025-10-08T16:00:57.9720937Z                     )
2025-10-08T16:00:57.9721340Z             elif not effective_parameters and context.no_parameters:
2025-10-08T16:00:57.9721833Z                 if self.dialect._has_events:
2025-10-08T16:00:57.9722286Z                     for fn in self.dialect.dispatch.do_execute_no_params:
2025-10-08T16:00:57.9722780Z                         if fn(cursor, str_statement, context):
2025-10-08T16:00:57.9723201Z                             evt_handled = True
2025-10-08T16:00:57.9723564Z                             break
2025-10-08T16:00:57.9723887Z                 if not evt_handled:
2025-10-08T16:00:57.9724444Z                     self.dialect.do_execute_no_params(
2025-10-08T16:00:57.9724876Z                         cursor, str_statement, context
2025-10-08T16:00:57.9725242Z                     )
2025-10-08T16:00:57.9725508Z             else:
2025-10-08T16:00:57.9725798Z                 effective_parameters = cast(
2025-10-08T16:00:57.9726254Z                     "_CoreSingleExecuteParams", effective_parameters
2025-10-08T16:00:57.9726665Z                 )
2025-10-08T16:00:57.9727173Z                 if self.dialect._has_events:
2025-10-08T16:00:57.9727812Z                     for fn in self.dialect.dispatch.do_execute:
2025-10-08T16:00:57.9728233Z                         if fn(
2025-10-08T16:00:57.9728577Z                             cursor,
2025-10-08T16:00:57.9728926Z                             str_statement,
2025-10-08T16:00:57.9729310Z                             effective_parameters,
2025-10-08T16:00:57.9729689Z                             context,
2025-10-08T16:00:57.9730028Z                         ):
2025-10-08T16:00:57.9730361Z                             evt_handled = True
2025-10-08T16:00:57.9730716Z                             break
2025-10-08T16:00:57.9731042Z                 if not evt_handled:
2025-10-08T16:00:57.9731426Z >                   self.dialect.do_execute(
2025-10-08T16:00:57.9731875Z                         cursor, str_statement, effective_parameters, context
2025-10-08T16:00:57.9732310Z                     )
2025-10-08T16:00:57.9732498Z 
2025-10-08T16:00:57.9732941Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1967: 
2025-10-08T16:00:57.9733720Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:00:57.9734046Z 
2025-10-08T16:00:57.9734463Z self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f40d4e617f0>
2025-10-08T16:00:57.9735193Z cursor = <sqlite3.Cursor object at 0x7f40d296c540>
2025-10-08T16:00:57.9736106Z statement = 'SELECT settings.name AS settings_name, settings.value AS settings_value \nFROM settings \nWHERE settings.name = ?\n LIMIT ? OFFSET ?'
2025-10-08T16:00:57.9736995Z parameters = ('use_allowlist', 1, 0)
2025-10-08T16:00:57.9737808Z context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f40d292c690>
2025-10-08T16:00:57.9738371Z 
2025-10-08T16:00:57.9738618Z     def do_execute(self, cursor, statement, parameters, context=None):
2025-10-08T16:00:57.9739145Z >       cursor.execute(statement, parameters)
2025-10-08T16:00:57.9739620Z E       sqlite3.OperationalError: no such table: settings
2025-10-08T16:00:57.9739941Z 
2025-10-08T16:00:57.9740481Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/default.py:951: OperationalError
2025-10-08T16:00:57.9741132Z 
2025-10-08T16:00:57.9741393Z The above exception was the direct cause of the following exception:
2025-10-08T16:00:57.9741778Z 
2025-10-08T16:00:57.9741891Z app = <Flask 'app'>
2025-10-08T16:00:57.9742074Z 
2025-10-08T16:00:57.9742203Z     def test_find_actor_or_create(app):
2025-10-08T16:00:57.9742590Z         with app.app_context():
2025-10-08T16:00:57.9742958Z             server_name = app.config['SERVER_NAME']
2025-10-08T16:00:57.9743550Z             user_name = 'rimu'  # Note to others: change this to your login before running this test
2025-10-08T16:00:57.9744083Z     
2025-10-08T16:00:57.9744369Z             # Test with a local URL
2025-10-08T16:00:57.9744981Z >           local_user = find_actor_or_create(f"https://{server_name}/u/{user_name}", create_if_not_found=False)
2025-10-08T16:00:57.9745647Z                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:00:57.9745958Z 
2025-10-08T16:00:57.9746120Z tests/test_activitypub_util.py:29: 
2025-10-08T16:00:57.9746558Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:00:57.9747051Z app/activitypub/util.py:269: in find_actor_or_create
2025-10-08T16:00:57.9747663Z     if not validate_remote_actor(actor_url):
2025-10-08T16:00:57.9748239Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:00:57.9748699Z app/activitypub/actor.py:41: in validate_remote_actor
2025-10-08T16:00:57.9749295Z     if get_setting('use_allowlist', False):
2025-10-08T16:00:57.9749914Z        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:00:57.9750817Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask_caching/__init__.py:899: in decorated_function
2025-10-08T16:00:57.9812396Z     rv = self._call_fn(f, *args, **kwargs)
2025-10-08T16:00:57.9812899Z          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:00:57.9813644Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask_caching/__init__.py:185: in _call_fn
2025-10-08T16:00:57.9814389Z     return ensure_sync(fn)(*args, **kwargs)
2025-10-08T16:00:57.9814799Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:00:57.9815178Z app/utils.py:181: in get_setting
2025-10-08T16:00:57.9815704Z     setting = db.session.query(Settings).filter_by(name=name).first()
2025-10-08T16:00:57.9816286Z               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:00:57.9817079Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/query.py:2759: in first
2025-10-08T16:00:57.9818030Z     return self.limit(1)._iter().first()  # type: ignore
2025-10-08T16:00:57.9818453Z            ^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:00:57.9819137Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/query.py:2857: in _iter
2025-10-08T16:00:57.9820022Z     result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
2025-10-08T16:00:57.9820902Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2365: in execute
2025-10-08T16:00:57.9821679Z     return self._execute_internal(
2025-10-08T16:00:57.9822469Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
2025-10-08T16:00:58.5409262Z     result: Result[Any] = compile_state_cls.orm_execute_statement(
2025-10-08T16:00:58.5410386Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
2025-10-08T16:00:58.5410998Z     result = conn.execute(
2025-10-08T16:00:58.5411515Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
2025-10-08T16:00:58.5412061Z     return meth(
2025-10-08T16:00:58.5412612Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
2025-10-08T16:00:58.5413238Z     return connection._execute_clauseelement(
2025-10-08T16:00:58.5413857Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
2025-10-08T16:00:58.5414461Z     ret = self._execute_context(
2025-10-08T16:00:58.5415016Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
2025-10-08T16:00:58.5415588Z     return self._exec_single_context(
2025-10-08T16:00:58.5416174Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
2025-10-08T16:00:58.5416766Z     self._handle_dbapi_exception(
2025-10-08T16:00:58.5417581Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
2025-10-08T16:00:58.5418302Z     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
2025-10-08T16:00:58.5418983Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
2025-10-08T16:00:58.5419587Z     self.dialect.do_execute(
2025-10-08T16:00:58.5419879Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:00:58.5420108Z 
2025-10-08T16:00:58.5420409Z self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f40d4e617f0>
2025-10-08T16:00:58.5421216Z cursor = <sqlite3.Cursor object at 0x7f40d296c540>
2025-10-08T16:00:58.5421909Z statement = 'SELECT settings.name AS settings_name, settings.value AS settings_value \nFROM settings \nWHERE settings.name = ?\n LIMIT ? OFFSET ?'
2025-10-08T16:00:58.5422542Z parameters = ('use_allowlist', 1, 0)
2025-10-08T16:00:58.5422990Z context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f40d292c690>
2025-10-08T16:00:58.5423506Z 
2025-10-08T16:00:58.5423679Z     def do_execute(self, cursor, statement, parameters, context=None):
2025-10-08T16:00:58.5424048Z >       cursor.execute(statement, parameters)
2025-10-08T16:00:58.5424470Z E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: settings
2025-10-08T16:00:58.5425000Z E       [SQL: SELECT settings.name AS settings_name, settings.value AS settings_value 
2025-10-08T16:00:58.5425367Z E       FROM settings 
2025-10-08T16:00:58.5425580Z E       WHERE settings.name = ?
2025-10-08T16:00:58.5425808Z E        LIMIT ? OFFSET ?]
2025-10-08T16:00:58.5426043Z E       [parameters: ('use_allowlist', 1, 0)]
2025-10-08T16:00:58.5426404Z E       (Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-08T16:00:58.5426664Z 
2025-10-08T16:00:58.5427029Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/default.py:951: OperationalError
2025-10-08T16:00:58.5427746Z ------------------------------ Captured log setup ------------------------------
2025-10-08T16:00:58.5428093Z INFO     app:__init__.py:298 Started!
2025-10-08T16:00:58.5428422Z INFO     app:startup_validation.py:102 Running startup validations...
2025-10-08T16:00:58.5428830Z INFO     app:startup_validation.py:118 Startup validations completed
2025-10-08T16:00:58.5429185Z =============================== warnings summary ===============================
2025-10-08T16:00:58.5429682Z ../../../../../opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pytesseract/pytesseract.py:32
2025-10-08T16:00:58.5430793Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pytesseract/pytesseract.py:32: DeprecationWarning: 'pkgutil.find_loader' is deprecated and slated for removal in Python 3.14; use importlib.util.find_spec() instead
2025-10-08T16:00:58.5431712Z     numpy_installed = find_loader('numpy') is not None
2025-10-08T16:00:58.5431927Z 
2025-10-08T16:00:58.5432218Z ../../../../../opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pytesseract/pytesseract.py:36
2025-10-08T16:00:58.5433290Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pytesseract/pytesseract.py:36: DeprecationWarning: 'pkgutil.find_loader' is deprecated and slated for removal in Python 3.14; use importlib.util.find_spec() instead
2025-10-08T16:00:58.5434195Z     pandas_installed = find_loader('pandas') is not None
2025-10-08T16:00:58.5434401Z 
2025-10-08T16:00:58.5434683Z ../../../../../opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pyasn1/codec/ber/encoder.py:952
2025-10-08T16:00:58.5435573Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pyasn1/codec/ber/encoder.py:952: DeprecationWarning: tagMap is deprecated. Please use TAG_MAP instead.
2025-10-08T16:00:58.5436405Z     warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)
2025-10-08T16:00:58.5436718Z 
2025-10-08T16:00:58.5437009Z ../../../../../opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pyasn1/codec/ber/encoder.py:952
2025-10-08T16:00:58.5438009Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pyasn1/codec/ber/encoder.py:952: DeprecationWarning: typeMap is deprecated. Please use TYPE_MAP instead.
2025-10-08T16:00:58.5438833Z     warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)
2025-10-08T16:00:58.5439145Z 
2025-10-08T16:00:58.5439336Z -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
2025-10-08T16:00:58.5439850Z =========================== short test summary info ============================
2025-10-08T16:00:58.5440532Z FAILED tests/test_activitypub_util.py::test_find_actor_or_create - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: settings
2025-10-08T16:00:58.5441238Z [SQL: SELECT settings.name AS settings_name, settings.value AS settings_value 
2025-10-08T16:00:58.5441598Z FROM settings 
2025-10-08T16:00:58.5441791Z WHERE settings.name = ?
2025-10-08T16:00:58.5442100Z  LIMIT ? OFFSET ?]
2025-10-08T16:00:58.5442312Z [parameters: ('use_allowlist', 1, 0)]
2025-10-08T16:00:58.5442639Z (Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-08T16:00:58.5443000Z ======================== 1 failed, 4 warnings in 2.80s =========================
2025-10-08T16:00:59.2827275Z ============================= test session starts ==============================
2025-10-08T16:00:59.2828410Z platform linux -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
2025-10-08T16:00:59.2828993Z cachedir: .pytest_cache
2025-10-08T16:00:59.2829270Z rootdir: /home/runner/work/pyfedi/pyfedi
2025-10-08T16:00:59.2829584Z plugins: anyio-4.11.0
2025-10-08T16:00:59.3174049Z collecting ... collected 4 items
2025-10-08T16:00:59.3174403Z 
2025-10-08T16:01:00.7934849Z tests/test_private_registration_activitypub.py::TestPrivateRegistrationActivityPubSetup::test_create_private_user_calls_finalize_user_setup FAILED [ 25%]
2025-10-08T16:01:00.8895353Z tests/test_private_registration_activitypub.py::TestPrivateRegistrationActivityPubSetup::test_create_private_user_skips_finalize_when_not_activated FAILED [ 50%]
2025-10-08T16:01:00.9876637Z tests/test_private_registration_activitypub.py::TestFinalizeUserSetupBehavior::test_finalize_user_setup_preserves_existing_keys FAILED [ 75%]
2025-10-08T16:01:01.2370478Z tests/test_private_registration_activitypub.py::TestFinalizeUserSetupBehavior::test_finalize_user_setup_sets_activitypub_fields FAILED [100%]
2025-10-08T16:01:01.2371313Z 
2025-10-08T16:01:01.2371498Z =================================== FAILURES ===================================
2025-10-08T16:01:01.2372227Z _ TestPrivateRegistrationActivityPubSetup.test_create_private_user_calls_finalize_user_setup _
2025-10-08T16:01:01.2373091Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:1423: in patched
2025-10-08T16:01:01.2373660Z     with self.decoration_helper(patched,
2025-10-08T16:01:01.2374191Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/contextlib.py:141: in __enter__
2025-10-08T16:01:01.2374726Z     return next(self.gen)
2025-10-08T16:01:01.2375000Z            ^^^^^^^^^^^^^^
2025-10-08T16:01:01.2375521Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:1405: in decoration_helper
2025-10-08T16:01:01.2376119Z     arg = exit_stack.enter_context(patching)
2025-10-08T16:01:01.2376459Z           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:01.2376986Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/contextlib.py:530: in enter_context
2025-10-08T16:01:01.2377854Z     result = _enter(cm)
2025-10-08T16:01:01.2378123Z              ^^^^^^^^^^
2025-10-08T16:01:01.2378602Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:1524: in __enter__
2025-10-08T16:01:01.2379182Z     elif spec is None and _is_async_obj(original):
2025-10-08T16:01:01.2379541Z                           ^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:01.2380084Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:58: in _is_async_obj
2025-10-08T16:01:01.2380639Z     if hasattr(obj, '__func__'):
2025-10-08T16:01:01.2380928Z        ^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:01.2381477Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/werkzeug/local.py:318: in __get__
2025-10-08T16:01:01.2382093Z     obj = instance._get_current_object()
2025-10-08T16:01:01.2382450Z           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:01.2382806Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:01.2383086Z 
2025-10-08T16:01:01.2383424Z     def _get_current_object() -> T:
2025-10-08T16:01:01.2383684Z         try:
2025-10-08T16:01:01.2383877Z             obj = local.get()
2025-10-08T16:01:01.2384103Z         except LookupError:
2025-10-08T16:01:01.2384368Z >           raise RuntimeError(unbound_message) from None
2025-10-08T16:01:01.2384719Z E           RuntimeError: Working outside of application context.
2025-10-08T16:01:01.2385154Z E           
2025-10-08T16:01:01.2385449Z E           This typically means that you attempted to use functionality that needed
2025-10-08T16:01:01.2385911Z E           the current application. To solve this, set up an application context
2025-10-08T16:01:01.2386356Z E           with app.app_context(). See the documentation for more information.
2025-10-08T16:01:01.2386609Z 
2025-10-08T16:01:01.2386907Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/werkzeug/local.py:519: RuntimeError
2025-10-08T16:01:01.2387905Z _ TestPrivateRegistrationActivityPubSetup.test_create_private_user_skips_finalize_when_not_activated _
2025-10-08T16:01:01.2388555Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:1423: in patched
2025-10-08T16:01:01.2388972Z     with self.decoration_helper(patched,
2025-10-08T16:01:01.2389363Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/contextlib.py:141: in __enter__
2025-10-08T16:01:01.2389756Z     return next(self.gen)
2025-10-08T16:01:01.2389977Z            ^^^^^^^^^^^^^^
2025-10-08T16:01:01.2390359Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:1405: in decoration_helper
2025-10-08T16:01:01.2390811Z     arg = exit_stack.enter_context(patching)
2025-10-08T16:01:01.2391081Z           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:01.2391468Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/contextlib.py:530: in enter_context
2025-10-08T16:01:01.2391870Z     result = _enter(cm)
2025-10-08T16:01:01.2392072Z              ^^^^^^^^^^
2025-10-08T16:01:01.2392433Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:1524: in __enter__
2025-10-08T16:01:01.2392861Z     elif spec is None and _is_async_obj(original):
2025-10-08T16:01:01.2393144Z                           ^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:01.2393554Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:58: in _is_async_obj
2025-10-08T16:01:01.2393965Z     if hasattr(obj, '__func__'):
2025-10-08T16:01:01.2394201Z        ^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:01.2394624Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/werkzeug/local.py:318: in __get__
2025-10-08T16:01:01.2395096Z     obj = instance._get_current_object()
2025-10-08T16:01:01.2395341Z           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:01.2395611Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:01.2395824Z 
2025-10-08T16:01:01.2395925Z     def _get_current_object() -> T:
2025-10-08T16:01:01.2396158Z         try:
2025-10-08T16:01:01.2396342Z             obj = local.get()
2025-10-08T16:01:01.2396572Z         except LookupError:
2025-10-08T16:01:01.2396819Z >           raise RuntimeError(unbound_message) from None
2025-10-08T16:01:01.2397158Z E           RuntimeError: Working outside of application context.
2025-10-08T16:01:01.2397652Z E           
2025-10-08T16:01:01.2397941Z E           This typically means that you attempted to use functionality that needed
2025-10-08T16:01:01.2398400Z E           the current application. To solve this, set up an application context
2025-10-08T16:01:01.2398829Z E           with app.app_context(). See the documentation for more information.
2025-10-08T16:01:01.2399083Z 
2025-10-08T16:01:01.2399379Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/werkzeug/local.py:519: RuntimeError
2025-10-08T16:01:01.2399982Z _ TestFinalizeUserSetupBehavior.test_finalize_user_setup_preserves_existing_keys _
2025-10-08T16:01:01.2400530Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:1423: in patched
2025-10-08T16:01:01.2401076Z     with self.decoration_helper(patched,
2025-10-08T16:01:01.2401480Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/contextlib.py:141: in __enter__
2025-10-08T16:01:01.2401862Z     return next(self.gen)
2025-10-08T16:01:01.2402072Z            ^^^^^^^^^^^^^^
2025-10-08T16:01:01.2402469Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:1405: in decoration_helper
2025-10-08T16:01:01.2403028Z     arg = exit_stack.enter_context(patching)
2025-10-08T16:01:01.2403286Z           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:01.2403680Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/contextlib.py:530: in enter_context
2025-10-08T16:01:01.2404075Z     result = _enter(cm)
2025-10-08T16:01:01.2404274Z              ^^^^^^^^^^
2025-10-08T16:01:01.2404617Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:1524: in __enter__
2025-10-08T16:01:01.2405047Z     elif spec is None and _is_async_obj(original):
2025-10-08T16:01:01.2405326Z                           ^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:01.2405731Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:58: in _is_async_obj
2025-10-08T16:01:01.2406144Z     if hasattr(obj, '__func__'):
2025-10-08T16:01:01.2406365Z        ^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:01.2406782Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/werkzeug/local.py:318: in __get__
2025-10-08T16:01:01.2407244Z     obj = instance._get_current_object()
2025-10-08T16:01:01.2407607Z           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:01.2407871Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:01.2408076Z 
2025-10-08T16:01:01.2408169Z     def _get_current_object() -> T:
2025-10-08T16:01:01.2408399Z         try:
2025-10-08T16:01:01.2408575Z             obj = local.get()
2025-10-08T16:01:01.2408800Z         except LookupError:
2025-10-08T16:01:01.2409056Z >           raise RuntimeError(unbound_message) from None
2025-10-08T16:01:01.2409391Z E           RuntimeError: Working outside of application context.
2025-10-08T16:01:01.2409683Z E           
2025-10-08T16:01:01.2409967Z E           This typically means that you attempted to use functionality that needed
2025-10-08T16:01:01.2410417Z E           the current application. To solve this, set up an application context
2025-10-08T16:01:01.2410838Z E           with app.app_context(). See the documentation for more information.
2025-10-08T16:01:01.2411108Z 
2025-10-08T16:01:01.2411395Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/werkzeug/local.py:519: RuntimeError
2025-10-08T16:01:01.2411999Z _ TestFinalizeUserSetupBehavior.test_finalize_user_setup_sets_activitypub_fields _
2025-10-08T16:01:01.2412583Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:1423: in patched
2025-10-08T16:01:01.2412987Z     with self.decoration_helper(patched,
2025-10-08T16:01:01.2413380Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/contextlib.py:141: in __enter__
2025-10-08T16:01:01.2413767Z     return next(self.gen)
2025-10-08T16:01:01.2413965Z            ^^^^^^^^^^^^^^
2025-10-08T16:01:01.2414352Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:1405: in decoration_helper
2025-10-08T16:01:01.2414799Z     arg = exit_stack.enter_context(patching)
2025-10-08T16:01:01.2415059Z           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:01.2415443Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/contextlib.py:530: in enter_context
2025-10-08T16:01:01.2415841Z     result = _enter(cm)
2025-10-08T16:01:01.2416036Z              ^^^^^^^^^^
2025-10-08T16:01:01.2416372Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:1524: in __enter__
2025-10-08T16:01:01.2416801Z     elif spec is None and _is_async_obj(original):
2025-10-08T16:01:01.2417080Z                           ^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:01.2417576Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:58: in _is_async_obj
2025-10-08T16:01:01.2418116Z     if hasattr(obj, '__func__'):
2025-10-08T16:01:01.2418346Z        ^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:01.2418755Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/werkzeug/local.py:318: in __get__
2025-10-08T16:01:01.2419197Z     obj = instance._get_current_object()
2025-10-08T16:01:01.2419444Z           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:01.2419716Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:01.2420030Z 
2025-10-08T16:01:01.2420122Z     def _get_current_object() -> T:
2025-10-08T16:01:01.2420357Z         try:
2025-10-08T16:01:01.2420543Z             obj = local.get()
2025-10-08T16:01:01.2420768Z         except LookupError:
2025-10-08T16:01:01.2421016Z >           raise RuntimeError(unbound_message) from None
2025-10-08T16:01:01.2421353Z E           RuntimeError: Working outside of application context.
2025-10-08T16:01:01.2421648Z E           
2025-10-08T16:01:01.2421937Z E           This typically means that you attempted to use functionality that needed
2025-10-08T16:01:01.2422390Z E           the current application. To solve this, set up an application context
2025-10-08T16:01:01.2422822Z E           with app.app_context(). See the documentation for more information.
2025-10-08T16:01:01.2423073Z 
2025-10-08T16:01:01.2423368Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/werkzeug/local.py:519: RuntimeError
2025-10-08T16:01:01.2423856Z =============================== warnings summary ===============================
2025-10-08T16:01:01.2424462Z tests/test_private_registration_activitypub.py::TestFinalizeUserSetupBehavior::test_finalize_user_setup_sets_activitypub_fields
2025-10-08T16:01:01.2425651Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pytesseract/pytesseract.py:32: DeprecationWarning: 'pkgutil.find_loader' is deprecated and slated for removal in Python 3.14; use importlib.util.find_spec() instead
2025-10-08T16:01:01.2426575Z     numpy_installed = find_loader('numpy') is not None
2025-10-08T16:01:01.2426781Z 
2025-10-08T16:01:01.6115735Z tests/test_private_registration_activitypub.py::TestFinalizeUserSetupBehavior::test_finalize_user_setup_sets_activitypub_fields
2025-10-08T16:01:01.6117656Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pytesseract/pytesseract.py:36: DeprecationWarning: 'pkgutil.find_loader' is deprecated and slated for removal in Python 3.14; use importlib.util.find_spec() instead
2025-10-08T16:01:01.6119085Z     pandas_installed = find_loader('pandas') is not None
2025-10-08T16:01:01.6119424Z 
2025-10-08T16:01:01.6119932Z tests/test_private_registration_activitypub.py::TestFinalizeUserSetupBehavior::test_finalize_user_setup_sets_activitypub_fields
2025-10-08T16:01:01.6121178Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pyasn1/codec/ber/encoder.py:952: DeprecationWarning: tagMap is deprecated. Please use TAG_MAP instead.
2025-10-08T16:01:01.6122225Z     warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)
2025-10-08T16:01:01.6122612Z 
2025-10-08T16:01:01.6123093Z tests/test_private_registration_activitypub.py::TestFinalizeUserSetupBehavior::test_finalize_user_setup_sets_activitypub_fields
2025-10-08T16:01:01.6124324Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pyasn1/codec/ber/encoder.py:952: DeprecationWarning: typeMap is deprecated. Please use TYPE_MAP instead.
2025-10-08T16:01:01.6125352Z     warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)
2025-10-08T16:01:01.6125737Z 
2025-10-08T16:01:01.6125974Z -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
2025-10-08T16:01:01.6126460Z =========================== short test summary info ============================
2025-10-08T16:01:01.6128012Z FAILED tests/test_private_registration_activitypub.py::TestPrivateRegistrationActivityPubSetup::test_create_private_user_calls_finalize_user_setup - RuntimeError: Working outside of application context.
2025-10-08T16:01:01.6128934Z 
2025-10-08T16:01:01.6129161Z This typically means that you attempted to use functionality that needed
2025-10-08T16:01:01.6129718Z the current application. To solve this, set up an application context
2025-10-08T16:01:01.6130191Z with app.app_context(). See the documentation for more information.
2025-10-08T16:01:01.6131080Z FAILED tests/test_private_registration_activitypub.py::TestPrivateRegistrationActivityPubSetup::test_create_private_user_skips_finalize_when_not_activated - RuntimeError: Working outside of application context.
2025-10-08T16:01:01.6131960Z 
2025-10-08T16:01:01.6132141Z This typically means that you attempted to use functionality that needed
2025-10-08T16:01:01.6132580Z the current application. To solve this, set up an application context
2025-10-08T16:01:01.6132995Z with app.app_context(). See the documentation for more information.
2025-10-08T16:01:01.6133818Z FAILED tests/test_private_registration_activitypub.py::TestFinalizeUserSetupBehavior::test_finalize_user_setup_preserves_existing_keys - RuntimeError: Working outside of application context.
2025-10-08T16:01:01.6134474Z 
2025-10-08T16:01:01.6134651Z This typically means that you attempted to use functionality that needed
2025-10-08T16:01:01.6135082Z the current application. To solve this, set up an application context
2025-10-08T16:01:01.6135490Z with app.app_context(). See the documentation for more information.
2025-10-08T16:01:01.6136303Z FAILED tests/test_private_registration_activitypub.py::TestFinalizeUserSetupBehavior::test_finalize_user_setup_sets_activitypub_fields - RuntimeError: Working outside of application context.
2025-10-08T16:01:01.6136950Z 
2025-10-08T16:01:01.6137127Z This typically means that you attempted to use functionality that needed
2025-10-08T16:01:01.6137674Z the current application. To solve this, set up an application context
2025-10-08T16:01:01.6138078Z with app.app_context(). See the documentation for more information.
2025-10-08T16:01:01.6138444Z ======================== 4 failed, 4 warnings in 1.96s =========================
2025-10-08T16:01:02.2254281Z ============================= test session starts ==============================
2025-10-08T16:01:02.2255221Z platform linux -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
2025-10-08T16:01:02.2256056Z cachedir: .pytest_cache
2025-10-08T16:01:02.2256485Z rootdir: /home/runner/work/pyfedi/pyfedi
2025-10-08T16:01:02.2257004Z plugins: anyio-4.11.0
2025-10-08T16:01:03.2762959Z collecting ... collected 1 item
2025-10-08T16:01:03.2763377Z 
2025-10-08T16:01:04.8152529Z tests/test_api_reply_bookmarks.py::test_api_reply_bookmarks FAILED       [100%]
2025-10-08T16:01:04.8153185Z 
2025-10-08T16:01:04.8153403Z =================================== FAILURES ===================================
2025-10-08T16:01:04.8154069Z ___________________________ test_api_reply_bookmarks ___________________________
2025-10-08T16:01:04.8154505Z 
2025-10-08T16:01:04.8154869Z self = <sqlalchemy.engine.base.Connection object at 0x7ffa40103ce0>
2025-10-08T16:01:04.8155897Z dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7ffa49bac2f0>
2025-10-08T16:01:04.8157066Z context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7ffa3fd5ca50>
2025-10-08T16:01:04.8158494Z statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7ffa40365400>
2025-10-08T16:01:04.8159177Z parameters = [(1,)]
2025-10-08T16:01:04.8159369Z 
2025-10-08T16:01:04.8159521Z     def _exec_single_context(
2025-10-08T16:01:04.8159867Z         self,
2025-10-08T16:01:04.8160142Z         dialect: Dialect,
2025-10-08T16:01:04.8160481Z         context: ExecutionContext,
2025-10-08T16:01:04.8160866Z         statement: Union[str, Compiled],
2025-10-08T16:01:04.8161315Z         parameters: Optional[_AnyMultiExecuteParams],
2025-10-08T16:01:04.8161756Z     ) -> CursorResult[Any]:
2025-10-08T16:01:04.8162179Z         """continue the _execute_context() method for a single DBAPI
2025-10-08T16:01:04.8163061Z         cursor.execute() or cursor.executemany() call.
2025-10-08T16:01:04.8163486Z     
2025-10-08T16:01:04.8163725Z         """
2025-10-08T16:01:04.8164087Z         if dialect.bind_typing is BindTyping.SETINPUTSIZES:
2025-10-08T16:01:04.8164667Z             generic_setinputsizes = context._prepare_set_input_sizes()
2025-10-08T16:01:04.8165128Z     
2025-10-08T16:01:04.8165393Z             if generic_setinputsizes:
2025-10-08T16:01:04.8165984Z                 try:
2025-10-08T16:01:04.8166343Z                     dialect.do_set_input_sizes(
2025-10-08T16:01:04.8166789Z                         context.cursor, generic_setinputsizes, context
2025-10-08T16:01:04.8167230Z                     )
2025-10-08T16:01:04.8167697Z                 except BaseException as e:
2025-10-08T16:01:04.8168146Z                     self._handle_dbapi_exception(
2025-10-08T16:01:04.8168598Z                         e, str(statement), parameters, None, context
2025-10-08T16:01:04.8169003Z                     )
2025-10-08T16:01:04.8169287Z     
2025-10-08T16:01:04.8169565Z         cursor, str_statement, parameters = (
2025-10-08T16:01:04.8169968Z             context.cursor,
2025-10-08T16:01:04.8170332Z             context.statement,
2025-10-08T16:01:04.8170683Z             context.parameters,
2025-10-08T16:01:04.8171000Z         )
2025-10-08T16:01:04.8171231Z     
2025-10-08T16:01:04.8171555Z         effective_parameters: Optional[_AnyExecuteParams]
2025-10-08T16:01:04.8171987Z     
2025-10-08T16:01:04.8172240Z         if not context.executemany:
2025-10-08T16:01:04.8172649Z             effective_parameters = parameters[0]
2025-10-08T16:01:04.8173034Z         else:
2025-10-08T16:01:04.8173326Z             effective_parameters = parameters
2025-10-08T16:01:04.8173695Z     
2025-10-08T16:01:04.8173993Z         if self._has_events or self.engine._has_events:
2025-10-08T16:01:04.8174464Z             for fn in self.dispatch.before_cursor_execute:
2025-10-08T16:01:04.8174941Z                 str_statement, effective_parameters = fn(
2025-10-08T16:01:04.8175360Z                     self,
2025-10-08T16:01:04.8175653Z                     cursor,
2025-10-08T16:01:04.8175966Z                     str_statement,
2025-10-08T16:01:04.8176329Z                     effective_parameters,
2025-10-08T16:01:04.8176689Z                     context,
2025-10-08T16:01:04.8177036Z                     context.executemany,
2025-10-08T16:01:04.8177548Z                 )
2025-10-08T16:01:04.8177813Z     
2025-10-08T16:01:04.8178056Z         if self._echo:
2025-10-08T16:01:04.8178401Z             self._log_info(str_statement)
2025-10-08T16:01:04.8178745Z     
2025-10-08T16:01:04.8179004Z             stats = context._get_cache_stats()
2025-10-08T16:01:04.8179371Z     
2025-10-08T16:01:04.8179651Z             if not self.engine.hide_parameters:
2025-10-08T16:01:04.8180052Z                 self._log_info(
2025-10-08T16:01:04.8180376Z                     "[%s] %r",
2025-10-08T16:01:04.8180680Z                     stats,
2025-10-08T16:01:04.8180989Z                     sql_util._repr_params(
2025-10-08T16:01:04.8181382Z                         effective_parameters,
2025-10-08T16:01:04.8181752Z                         batches=10,
2025-10-08T16:01:04.8182143Z                         ismulti=context.executemany,
2025-10-08T16:01:04.8182528Z                     ),
2025-10-08T16:01:04.8182805Z                 )
2025-10-08T16:01:04.8183070Z             else:
2025-10-08T16:01:04.8183338Z                 self._log_info(
2025-10-08T16:01:04.8183761Z                     "[%s] [SQL parameters hidden due to hide_parameters=True]",
2025-10-08T16:01:04.8184219Z                     stats,
2025-10-08T16:01:04.8184508Z                 )
2025-10-08T16:01:04.8184765Z     
2025-10-08T16:01:04.8185022Z         evt_handled: bool = False
2025-10-08T16:01:04.8185349Z         try:
2025-10-08T16:01:04.8185700Z             if context.execute_style is ExecuteStyle.EXECUTEMANY:
2025-10-08T16:01:04.8186181Z                 effective_parameters = cast(
2025-10-08T16:01:04.8186804Z                     "_CoreMultiExecuteParams", effective_parameters
2025-10-08T16:01:04.8187245Z                 )
2025-10-08T16:01:04.8187708Z                 if self.dialect._has_events:
2025-10-08T16:01:04.8188171Z                     for fn in self.dialect.dispatch.do_executemany:
2025-10-08T16:01:04.8188611Z                         if fn(
2025-10-08T16:01:04.8188931Z                             cursor,
2025-10-08T16:01:04.8189456Z                             str_statement,
2025-10-08T16:01:04.8189844Z                             effective_parameters,
2025-10-08T16:01:04.8190232Z                             context,
2025-10-08T16:01:04.8190568Z                         ):
2025-10-08T16:01:04.8190880Z                             evt_handled = True
2025-10-08T16:01:04.8191266Z                             break
2025-10-08T16:01:04.8191600Z                 if not evt_handled:
2025-10-08T16:01:04.8191974Z                     self.dialect.do_executemany(
2025-10-08T16:01:04.8192348Z                         cursor,
2025-10-08T16:01:04.8192672Z                         str_statement,
2025-10-08T16:01:04.8193038Z                         effective_parameters,
2025-10-08T16:01:04.8193415Z                         context,
2025-10-08T16:01:04.8193727Z                     )
2025-10-08T16:01:04.8194112Z             elif not effective_parameters and context.no_parameters:
2025-10-08T16:01:04.8194584Z                 if self.dialect._has_events:
2025-10-08T16:01:04.8195046Z                     for fn in self.dialect.dispatch.do_execute_no_params:
2025-10-08T16:01:04.8195530Z                         if fn(cursor, str_statement, context):
2025-10-08T16:01:04.8195928Z                             evt_handled = True
2025-10-08T16:01:04.8196294Z                             break
2025-10-08T16:01:04.8196631Z                 if not evt_handled:
2025-10-08T16:01:04.8197015Z                     self.dialect.do_execute_no_params(
2025-10-08T16:01:04.8197594Z                         cursor, str_statement, context
2025-10-08T16:01:04.8197978Z                     )
2025-10-08T16:01:04.8198253Z             else:
2025-10-08T16:01:04.8198546Z                 effective_parameters = cast(
2025-10-08T16:01:04.8199018Z                     "_CoreSingleExecuteParams", effective_parameters
2025-10-08T16:01:04.8199449Z                 )
2025-10-08T16:01:04.8199737Z                 if self.dialect._has_events:
2025-10-08T16:01:04.8200165Z                     for fn in self.dialect.dispatch.do_execute:
2025-10-08T16:01:04.8200586Z                         if fn(
2025-10-08T16:01:04.8200905Z                             cursor,
2025-10-08T16:01:04.8201239Z                             str_statement,
2025-10-08T16:01:04.8201612Z                             effective_parameters,
2025-10-08T16:01:04.8201996Z                             context,
2025-10-08T16:01:04.8202322Z                         ):
2025-10-08T16:01:04.8202646Z                             evt_handled = True
2025-10-08T16:01:04.8203007Z                             break
2025-10-08T16:01:04.8203364Z                 if not evt_handled:
2025-10-08T16:01:04.8203738Z >                   self.dialect.do_execute(
2025-10-08T16:01:04.8204199Z                         cursor, str_statement, effective_parameters, context
2025-10-08T16:01:04.8204648Z                     )
2025-10-08T16:01:04.8204823Z 
2025-10-08T16:01:04.8205280Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1967: 
2025-10-08T16:01:04.8206041Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:04.8206345Z 
2025-10-08T16:01:04.8206778Z self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7ffa49bac2f0>
2025-10-08T16:01:04.8207666Z cursor = <sqlite3.Cursor object at 0x7ffa3fd446c0>
2025-10-08T16:01:04.8209113Z statement = 'SELECT user.id AS user_id, user.user_name AS user_user_name, user.alt_user_name AS user_alt_user_name, user.title AS ...le_2.id = user.cover_id LEFT OUTER JOIN instance AS instance_1 ON instance_1.id = user.instance_id \nWHERE user.id = ?'
2025-10-08T16:01:04.8210356Z parameters = (1,)
2025-10-08T16:01:04.8210966Z context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7ffa3fd5ca50>
2025-10-08T16:01:04.8211533Z 
2025-10-08T16:01:04.8211794Z     def do_execute(self, cursor, statement, parameters, context=None):
2025-10-08T16:01:04.8212385Z >       cursor.execute(statement, parameters)
2025-10-08T16:01:04.8213022Z E       sqlite3.OperationalError: no such table: user
2025-10-08T16:01:04.8213341Z 
2025-10-08T16:01:04.8213895Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/default.py:951: OperationalError
2025-10-08T16:01:04.8214574Z 
2025-10-08T16:01:04.8214835Z The above exception was the direct cause of the following exception:
2025-10-08T16:01:04.8215253Z 
2025-10-08T16:01:04.8215371Z app = <Flask 'app'>
2025-10-08T16:01:04.8215552Z 
2025-10-08T16:01:04.8215695Z     def test_api_reply_bookmarks(app):
2025-10-08T16:01:04.8216087Z         with app.app_context():
2025-10-08T16:01:04.8216518Z             from app.api.alpha.utils.reply import put_reply_save
2025-10-08T16:01:04.8216952Z     
2025-10-08T16:01:04.8217195Z             user_id = 1
2025-10-08T16:01:04.8217699Z >           user = User.query.get(user_id)
2025-10-08T16:01:04.8218068Z                    ^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:04.8218315Z 
2025-10-08T16:01:04.8218461Z tests/test_api_reply_bookmarks.py:29: 
2025-10-08T16:01:04.8218904Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:04.8219338Z <string>:2: in get
2025-10-08T16:01:04.8219618Z     ???
2025-10-08T16:01:04.8220302Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/util/deprecations.py:386: in warned
2025-10-08T16:01:04.8221196Z     return fn(*args, **kwargs)  # type: ignore[no-any-return]
2025-10-08T16:01:04.8221658Z            ^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:04.8222320Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/query.py:1126: in get
2025-10-08T16:01:04.8223111Z     return self._get_impl(ident, loading.load_on_pk_identity)
2025-10-08T16:01:04.8223561Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:04.8224278Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/query.py:1135: in _get_impl
2025-10-08T16:01:04.8225028Z     return self.session._get_impl(
2025-10-08T16:01:04.8225740Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/session.py:3873: in _get_impl
2025-10-08T16:01:04.8226474Z     return db_load_fn(
2025-10-08T16:01:04.8227202Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/loading.py:695: in load_on_pk_identity
2025-10-08T16:01:04.8228143Z     session.execute(
2025-10-08T16:01:04.8228782Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2365: in execute
2025-10-08T16:01:04.8229511Z     return self._execute_internal(
2025-10-08T16:01:04.8230285Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
2025-10-08T16:01:04.8231159Z     result: Result[Any] = compile_state_cls.orm_execute_statement(
2025-10-08T16:01:04.8232050Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
2025-10-08T16:01:04.8232838Z     result = conn.execute(
2025-10-08T16:01:04.8233517Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
2025-10-08T16:01:04.8234215Z     return meth(
2025-10-08T16:01:04.8234927Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
2025-10-08T16:01:04.8235801Z     return connection._execute_clauseelement(
2025-10-08T16:01:04.8236696Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
2025-10-08T16:01:04.8237824Z     ret = self._execute_context(
2025-10-08T16:01:04.8238598Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
2025-10-08T16:01:04.8239374Z     return self._exec_single_context(
2025-10-08T16:01:04.8240153Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
2025-10-08T16:01:04.8241129Z     self._handle_dbapi_exception(
2025-10-08T16:01:04.8241938Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
2025-10-08T16:01:04.8242877Z     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
2025-10-08T16:01:04.8243800Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
2025-10-08T16:01:04.8244623Z     self.dialect.do_execute(
2025-10-08T16:01:04.8245035Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:04.8245344Z 
2025-10-08T16:01:04.8245790Z self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7ffa49bac2f0>
2025-10-08T16:01:04.8246552Z cursor = <sqlite3.Cursor object at 0x7ffa3fd446c0>
2025-10-08T16:01:04.8248033Z statement = 'SELECT user.id AS user_id, user.user_name AS user_user_name, user.alt_user_name AS user_alt_user_name, user.title AS ...le_2.id = user.cover_id LEFT OUTER JOIN instance AS instance_1 ON instance_1.id = user.instance_id \nWHERE user.id = ?'
2025-10-08T16:01:04.8249230Z parameters = (1,)
2025-10-08T16:01:04.8249818Z context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7ffa3fd5ca50>
2025-10-08T16:01:04.8250377Z 
2025-10-08T16:01:04.8250618Z     def do_execute(self, cursor, statement, parameters, context=None):
2025-10-08T16:01:04.8251143Z >       cursor.execute(statement, parameters)
2025-10-08T16:01:04.8251760Z E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: user
2025-10-08T16:01:04.8276493Z E       [SQL: SELECT user.id AS user_id, user.user_name AS user_user_name, user.alt_user_name AS user_alt_user_name, user.title AS user_title, user.email AS user_email, user.password_hash AS user_password_hash, user.verified AS user_verified, user.verification_token AS user_verification_token, user.banned AS user_banned, user.banned_until AS user_banned_until, user.ban_posts AS user_ban_posts, user.ban_comments AS user_ban_comments, user.deleted AS user_deleted, user.deleted_by AS user_deleted_by, user.about AS user_about, user.about_html AS user_about_html, user.keywords AS user_keywords, user.matrix_user_id AS user_matrix_user_id, user.hide_nsfw AS user_hide_nsfw, user.hide_nsfl AS user_hide_nsfl, user.created AS user_created, user.last_seen AS user_last_seen, user.avatar_id AS user_avatar_id, user.cover_id AS user_cover_id, user.public_key AS user_public_key, user.private_key AS user_private_key, user.newsletter AS user_newsletter, user.email_unread AS user_email_unread, user.email_unread_sent AS user_email_unread_sent, user.receive_message_mode AS user_receive_message_mode, user.bounces AS user_bounces, user.timezone AS user_timezone, user.reputation AS user_reputation, user.attitude AS user_attitude, user.post_count AS user_post_count, user.post_reply_count AS user_post_reply_count, user.stripe_customer_id AS user_stripe_customer_id, user.stripe_subscription_id AS user_stripe_subscription_id, user.searchable AS user_searchable, user.indexable AS user_indexable, user.bot AS user_bot, user.bot_override AS user_bot_override, user.suppress_crossposts AS user_suppress_crossposts, user.vote_privately AS user_vote_privately, user.ignore_bots AS user_ignore_bots, user.unread_notifications AS user_unread_notifications, user.ip_address AS user_ip_address, user.ip_address_country AS user_ip_address_country, user.instance_id AS user_instance_id, user.reports AS user_reports, user.default_sort AS user_default_sort, user.default_comment_sort AS user_default_comment_sort, user.default_filter AS user_default_filter, user.theme AS user_theme, user.font AS user_font, user.community_keyword_filter AS user_community_keyword_filter, user.referrer AS user_referrer, user.markdown_editor AS user_markdown_editor, user.interface_language AS user_interface_language, user.language_id AS user_language_id, user.read_language_ids AS user_read_language_ids, user.reply_collapse_threshold AS user_reply_collapse_threshold, user.reply_hide_threshold AS user_reply_hide_threshold, user.feed_auto_follow AS user_feed_auto_follow, user.feed_auto_leave AS user_feed_auto_leave, user.accept_private_messages AS user_accept_private_messages, user.google_oauth_id AS user_google_oauth_id, user.hide_low_quality AS user_hide_low_quality, user.show_subscribed_communities AS user_show_subscribed_communities, user.additional_css AS user_additional_css, user.mastodon_oauth_id AS user_mastodon_oauth_id, user.discord_oauth_id AS user_discord_oauth_id, user.password_updated_at AS user_password_updated_at, user.ap_id AS user_ap_id, user.ap_profile_id AS user_ap_profile_id, user.ap_public_url AS user_ap_public_url, user.ap_fetched_at AS user_ap_fetched_at, user.ap_followers_url AS user_ap_followers_url, user.ap_preferred_username AS user_ap_preferred_username, user.ap_manually_approves_followers AS user_ap_manually_approves_followers, user.ap_deleted_at AS user_ap_deleted_at, user.ap_inbox_url AS user_ap_inbox_url, user.ap_domain AS user_ap_domain, user.search_vector AS user_search_vector, user.hide_read_posts AS user_hide_read_posts, file_1.id AS file_1_id, file_1.file_path AS file_1_file_path, file_1.file_name AS file_1_file_name, file_1.width AS file_1_width, file_1.height AS file_1_height, file_1.alt_text AS file_1_alt_text, file_1.source_url AS file_1_source_url, file_1.thumbnail_path AS file_1_thumbnail_path, file_1.thumbnail_width AS file_1_thumbnail_width, file_1.thumbnail_height AS file_1_thumbnail_height, file_1.hash AS file_1_hash, file_2.id AS file_2_id, file_2.file_path AS file_2_file_path, file_2.file_name AS file_2_file_name, file_2.width AS file_2_width, file_2.height AS file_2_height, file_2.alt_text AS file_2_alt_text, file_2.source_url AS file_2_source_url, file_2.thumbnail_path AS file_2_thumbnail_path, file_2.thumbnail_width AS file_2_thumbnail_width, file_2.thumbnail_height AS file_2_thumbnail_height, file_2.hash AS file_2_hash, instance_1.id AS instance_1_id, instance_1.domain AS instance_1_domain, instance_1.inbox AS instance_1_inbox, instance_1.shared_inbox AS instance_1_shared_inbox, instance_1.outbox AS instance_1_outbox, instance_1.vote_weight AS instance_1_vote_weight, instance_1.software AS instance_1_software, instance_1.version AS instance_1_version, instance_1.created_at AS instance_1_created_at, instance_1.updated_at AS instance_1_updated_at, instance_1.last_seen AS instance_1_last_seen, instance_1.last_successful_send AS instance_1_last_successful_send, instance_1.failures AS instance_1_failures, instance_1.most_recent_attempt AS instance_1_most_recent_attempt, instance_1.dormant AS instance_1_dormant, instance_1.start_trying_again AS instance_1_start_trying_again, instance_1.gone_forever AS instance_1_gone_forever, instance_1.ip_address AS instance_1_ip_address, instance_1.trusted AS instance_1_trusted, instance_1.posting_warning AS instance_1_posting_warning, instance_1.nodeinfo_href AS instance_1_nodeinfo_href 
2025-10-08T16:01:04.8302158Z E       FROM user LEFT OUTER JOIN file AS file_1 ON file_1.id = user.avatar_id LEFT OUTER JOIN file AS file_2 ON file_2.id = user.cover_id LEFT OUTER JOIN instance AS instance_1 ON instance_1.id = user.instance_id 
2025-10-08T16:01:04.8303170Z E       WHERE user.id = ?]
2025-10-08T16:01:04.8303484Z E       [parameters: (1,)]
2025-10-08T16:01:04.8303934Z E       (Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-08T16:01:04.8304296Z 
2025-10-08T16:01:04.8304830Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/default.py:951: OperationalError
2025-10-08T16:01:04.8305888Z ------------------------------ Captured log setup ------------------------------
2025-10-08T16:01:04.8306397Z INFO     app:__init__.py:298 Started!
2025-10-08T16:01:04.8306882Z INFO     app:startup_validation.py:102 Running startup validations...
2025-10-08T16:01:04.8307637Z INFO     app:startup_validation.py:118 Startup validations completed
2025-10-08T16:01:04.8308194Z =============================== warnings summary ===============================
2025-10-08T16:01:04.8308935Z tests/test_api_reply_bookmarks.py::test_api_reply_bookmarks
2025-10-08T16:01:04.8310357Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pytesseract/pytesseract.py:32: DeprecationWarning: 'pkgutil.find_loader' is deprecated and slated for removal in Python 3.14; use importlib.util.find_spec() instead
2025-10-08T16:01:04.8311775Z     numpy_installed = find_loader('numpy') is not None
2025-10-08T16:01:04.8312080Z 
2025-10-08T16:01:04.8312511Z tests/test_api_reply_bookmarks.py::test_api_reply_bookmarks
2025-10-08T16:01:04.8313982Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pytesseract/pytesseract.py:36: DeprecationWarning: 'pkgutil.find_loader' is deprecated and slated for removal in Python 3.14; use importlib.util.find_spec() instead
2025-10-08T16:01:05.3846285Z     pandas_installed = find_loader('pandas') is not None
2025-10-08T16:01:05.3846777Z 
2025-10-08T16:01:05.3847194Z tests/test_api_reply_bookmarks.py::test_api_reply_bookmarks
2025-10-08T16:01:05.3848763Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pyasn1/codec/ber/encoder.py:952: DeprecationWarning: tagMap is deprecated. Please use TAG_MAP instead.
2025-10-08T16:01:05.3850123Z     warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)
2025-10-08T16:01:05.3850634Z 
2025-10-08T16:01:05.3850858Z tests/test_api_reply_bookmarks.py::test_api_reply_bookmarks
2025-10-08T16:01:05.3852061Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pyasn1/codec/ber/encoder.py:952: DeprecationWarning: typeMap is deprecated. Please use TYPE_MAP instead.
2025-10-08T16:01:05.3853386Z     warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)
2025-10-08T16:01:05.3853886Z 
2025-10-08T16:01:05.3854123Z tests/test_api_reply_bookmarks.py::test_api_reply_bookmarks
2025-10-08T16:01:05.3856003Z   /home/runner/work/pyfedi/pyfedi/tests/test_api_reply_bookmarks.py:29: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
2025-10-08T16:01:05.3857940Z     user = User.query.get(user_id)
2025-10-08T16:01:05.3858189Z 
2025-10-08T16:01:05.3858475Z -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
2025-10-08T16:01:05.3859114Z =========================== short test summary info ============================
2025-10-08T16:01:05.3860127Z FAILED tests/test_api_reply_bookmarks.py::test_api_reply_bookmarks - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: user
2025-10-08T16:01:05.3885430Z [SQL: SELECT user.id AS user_id, user.user_name AS user_user_name, user.alt_user_name AS user_alt_user_name, user.title AS user_title, user.email AS user_email, user.password_hash AS user_password_hash, user.verified AS user_verified, user.verification_token AS user_verification_token, user.banned AS user_banned, user.banned_until AS user_banned_until, user.ban_posts AS user_ban_posts, user.ban_comments AS user_ban_comments, user.deleted AS user_deleted, user.deleted_by AS user_deleted_by, user.about AS user_about, user.about_html AS user_about_html, user.keywords AS user_keywords, user.matrix_user_id AS user_matrix_user_id, user.hide_nsfw AS user_hide_nsfw, user.hide_nsfl AS user_hide_nsfl, user.created AS user_created, user.last_seen AS user_last_seen, user.avatar_id AS user_avatar_id, user.cover_id AS user_cover_id, user.public_key AS user_public_key, user.private_key AS user_private_key, user.newsletter AS user_newsletter, user.email_unread AS user_email_unread, user.email_unread_sent AS user_email_unread_sent, user.receive_message_mode AS user_receive_message_mode, user.bounces AS user_bounces, user.timezone AS user_timezone, user.reputation AS user_reputation, user.attitude AS user_attitude, user.post_count AS user_post_count, user.post_reply_count AS user_post_reply_count, user.stripe_customer_id AS user_stripe_customer_id, user.stripe_subscription_id AS user_stripe_subscription_id, user.searchable AS user_searchable, user.indexable AS user_indexable, user.bot AS user_bot, user.bot_override AS user_bot_override, user.suppress_crossposts AS user_suppress_crossposts, user.vote_privately AS user_vote_privately, user.ignore_bots AS user_ignore_bots, user.unread_notifications AS user_unread_notifications, user.ip_address AS user_ip_address, user.ip_address_country AS user_ip_address_country, user.instance_id AS user_instance_id, user.reports AS user_reports, user.default_sort AS user_default_sort, user.default_comment_sort AS user_default_comment_sort, user.default_filter AS user_default_filter, user.theme AS user_theme, user.font AS user_font, user.community_keyword_filter AS user_community_keyword_filter, user.referrer AS user_referrer, user.markdown_editor AS user_markdown_editor, user.interface_language AS user_interface_language, user.language_id AS user_language_id, user.read_language_ids AS user_read_language_ids, user.reply_collapse_threshold AS user_reply_collapse_threshold, user.reply_hide_threshold AS user_reply_hide_threshold, user.feed_auto_follow AS user_feed_auto_follow, user.feed_auto_leave AS user_feed_auto_leave, user.accept_private_messages AS user_accept_private_messages, user.google_oauth_id AS user_google_oauth_id, user.hide_low_quality AS user_hide_low_quality, user.show_subscribed_communities AS user_show_subscribed_communities, user.additional_css AS user_additional_css, user.mastodon_oauth_id AS user_mastodon_oauth_id, user.discord_oauth_id AS user_discord_oauth_id, user.password_updated_at AS user_password_updated_at, user.ap_id AS user_ap_id, user.ap_profile_id AS user_ap_profile_id, user.ap_public_url AS user_ap_public_url, user.ap_fetched_at AS user_ap_fetched_at, user.ap_followers_url AS user_ap_followers_url, user.ap_preferred_username AS user_ap_preferred_username, user.ap_manually_approves_followers AS user_ap_manually_approves_followers, user.ap_deleted_at AS user_ap_deleted_at, user.ap_inbox_url AS user_ap_inbox_url, user.ap_domain AS user_ap_domain, user.search_vector AS user_search_vector, user.hide_read_posts AS user_hide_read_posts, file_1.id AS file_1_id, file_1.file_path AS file_1_file_path, file_1.file_name AS file_1_file_name, file_1.width AS file_1_width, file_1.height AS file_1_height, file_1.alt_text AS file_1_alt_text, file_1.source_url AS file_1_source_url, file_1.thumbnail_path AS file_1_thumbnail_path, file_1.thumbnail_width AS file_1_thumbnail_width, file_1.thumbnail_height AS file_1_thumbnail_height, file_1.hash AS file_1_hash, file_2.id AS file_2_id, file_2.file_path AS file_2_file_path, file_2.file_name AS file_2_file_name, file_2.width AS file_2_width, file_2.height AS file_2_height, file_2.alt_text AS file_2_alt_text, file_2.source_url AS file_2_source_url, file_2.thumbnail_path AS file_2_thumbnail_path, file_2.thumbnail_width AS file_2_thumbnail_width, file_2.thumbnail_height AS file_2_thumbnail_height, file_2.hash AS file_2_hash, instance_1.id AS instance_1_id, instance_1.domain AS instance_1_domain, instance_1.inbox AS instance_1_inbox, instance_1.shared_inbox AS instance_1_shared_inbox, instance_1.outbox AS instance_1_outbox, instance_1.vote_weight AS instance_1_vote_weight, instance_1.software AS instance_1_software, instance_1.version AS instance_1_version, instance_1.created_at AS instance_1_created_at, instance_1.updated_at AS instance_1_updated_at, instance_1.last_seen AS instance_1_last_seen, instance_1.last_successful_send AS instance_1_last_successful_send, instance_1.failures AS instance_1_failures, instance_1.most_recent_attempt AS instance_1_most_recent_attempt, instance_1.dormant AS instance_1_dormant, instance_1.start_trying_again AS instance_1_start_trying_again, instance_1.gone_forever AS instance_1_gone_forever, instance_1.ip_address AS instance_1_ip_address, instance_1.trusted AS instance_1_trusted, instance_1.posting_warning AS instance_1_posting_warning, instance_1.nodeinfo_href AS instance_1_nodeinfo_href 
2025-10-08T16:01:05.3910997Z FROM user LEFT OUTER JOIN file AS file_1 ON file_1.id = user.avatar_id LEFT OUTER JOIN file AS file_2 ON file_2.id = user.cover_id LEFT OUTER JOIN instance AS instance_1 ON instance_1.id = user.instance_id 
2025-10-08T16:01:05.3912005Z WHERE user.id = ?]
2025-10-08T16:01:05.3912300Z [parameters: (1,)]
2025-10-08T16:01:05.3912707Z (Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-08T16:01:05.3913258Z ======================== 1 failed, 5 warnings in 2.60s =========================
2025-10-08T16:01:06.1620129Z ============================= test session starts ==============================
2025-10-08T16:01:06.1621612Z platform linux -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
2025-10-08T16:01:06.1623539Z cachedir: .pytest_cache
2025-10-08T16:01:06.1623964Z rootdir: /home/runner/work/pyfedi/pyfedi
2025-10-08T16:01:06.1624431Z plugins: anyio-4.11.0
2025-10-08T16:01:07.2550264Z collecting ... collected 4 items
2025-10-08T16:01:07.2550729Z 
2025-10-08T16:01:08.1864331Z tests/test_api_blueprint_registration.py::test_all_api_blueprints_registered FAILED [ 25%]
2025-10-08T16:01:08.5052783Z tests/test_api_blueprint_registration.py::test_api_routes_accessible PASSED [ 50%]
2025-10-08T16:01:08.9192853Z tests/test_api_blueprint_registration.py::test_blueprint_route_coverage PASSED [ 75%]
2025-10-08T16:01:09.4359321Z tests/test_api_blueprint_registration.py::test_api_blueprint_imports PASSED [100%]
2025-10-08T16:01:09.4359991Z 
2025-10-08T16:01:09.4360237Z =================================== FAILURES ===================================
2025-10-08T16:01:09.4361002Z ______________________ test_all_api_blueprints_registered ______________________
2025-10-08T16:01:09.4361497Z 
2025-10-08T16:01:09.4361714Z     def test_all_api_blueprints_registered():
2025-10-08T16:01:09.4362370Z         """Verify all defined API blueprints are properly registered."""
2025-10-08T16:01:09.4363050Z         app = create_app()
2025-10-08T16:01:09.4363320Z     
2025-10-08T16:01:09.4363627Z         # Expected API blueprints that should be registered
2025-10-08T16:01:09.4364018Z         expected_api_blueprints = {
2025-10-08T16:01:09.4364328Z             'Site',           # site_bp
2025-10-08T16:01:09.4364638Z             'Misc',           # misc_bp
2025-10-08T16:01:09.4364957Z             'Community',      # comm_bp
2025-10-08T16:01:09.4365256Z             'Feed',           # feed_bp
2025-10-08T16:01:09.4365547Z             'Topic',          # topic_bp
2025-10-08T16:01:09.4365861Z             'User',           # user_bp
2025-10-08T16:01:09.4366217Z             'Comment',        # reply_bp
2025-10-08T16:01:09.4366531Z             'Post',           # post_bp
2025-10-08T16:01:09.4366839Z             'Private Message',# private_message_bp
2025-10-08T16:01:09.4367166Z             'Upload',         # upload_bp
2025-10-08T16:01:09.4367977Z             'Admin',          # admin_bp (special case with different prefix)
2025-10-08T16:01:09.4368477Z         }
2025-10-08T16:01:09.4368694Z     
2025-10-08T16:01:09.4368977Z         # Get all registered blueprints from the Flask-Smorest API
2025-10-08T16:01:09.4369362Z         registered_blueprints = set()
2025-10-08T16:01:09.4369688Z         if hasattr(app.extensions, 'smorest'):
2025-10-08T16:01:09.4370023Z             api = app.extensions.get('smorest')
2025-10-08T16:01:09.4370353Z             if api and hasattr(api, '_app'):
2025-10-08T16:01:09.4370694Z                 for bp in api._app.blueprints.values():
2025-10-08T16:01:09.4371077Z                     if hasattr(bp, 'name') and bp.name != 'api_alpha':
2025-10-08T16:01:09.4371759Z                         registered_blueprints.add(bp.name)
2025-10-08T16:01:09.4372079Z     
2025-10-08T16:01:09.4372332Z         # Check if all expected blueprints are registered
2025-10-08T16:01:09.4372799Z         missing_blueprints = expected_api_blueprints - registered_blueprints
2025-10-08T16:01:09.4373211Z     
2025-10-08T16:01:09.4373569Z >       assert not missing_blueprints, f"Missing API blueprints: {missing_blueprints}"
2025-10-08T16:01:09.4374542Z E       AssertionError: Missing API blueprints: {'Topic', 'Upload', 'Private Message', 'Site', 'Post', 'Feed', 'Admin', 'Misc', 'Comment', 'User', 'Community'}
2025-10-08T16:01:09.4375317Z E       assert not {'Admin', 'Comment', 'Community', 'Feed', 'Misc', 'Post', ...}
2025-10-08T16:01:09.4375634Z 
2025-10-08T16:01:09.4375816Z tests/test_api_blueprint_registration.py:43: AssertionError
2025-10-08T16:01:09.4376285Z ------------------------------ Captured log call -------------------------------
2025-10-08T16:01:09.4376682Z INFO     app:__init__.py:298 Started!
2025-10-08T16:01:09.4377042Z INFO     app:startup_validation.py:102 Running startup validations...
2025-10-08T16:01:09.4377591Z INFO     app:startup_validation.py:118 Startup validations completed
2025-10-08T16:01:09.4378026Z =============================== warnings summary ===============================
2025-10-08T16:01:09.4378434Z tests/test_api_blueprint_registration.py::test_all_api_blueprints_registered
2025-10-08T16:01:09.4379440Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pytesseract/pytesseract.py:32: DeprecationWarning: 'pkgutil.find_loader' is deprecated and slated for removal in Python 3.14; use importlib.util.find_spec() instead
2025-10-08T16:01:09.4380498Z     numpy_installed = find_loader('numpy') is not None
2025-10-08T16:01:09.4380701Z 
2025-10-08T16:01:09.4380907Z tests/test_api_blueprint_registration.py::test_all_api_blueprints_registered
2025-10-08T16:01:09.4381889Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pytesseract/pytesseract.py:36: DeprecationWarning: 'pkgutil.find_loader' is deprecated and slated for removal in Python 3.14; use importlib.util.find_spec() instead
2025-10-08T16:01:09.4382790Z     pandas_installed = find_loader('pandas') is not None
2025-10-08T16:01:09.4383004Z 
2025-10-08T16:01:09.4383201Z tests/test_api_blueprint_registration.py::test_all_api_blueprints_registered
2025-10-08T16:01:09.4384009Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pyasn1/codec/ber/encoder.py:952: DeprecationWarning: tagMap is deprecated. Please use TAG_MAP instead.
2025-10-08T16:01:09.4384847Z     warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)
2025-10-08T16:01:09.4385164Z 
2025-10-08T16:01:09.4385360Z tests/test_api_blueprint_registration.py::test_all_api_blueprints_registered
2025-10-08T16:01:09.4386176Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pyasn1/codec/ber/encoder.py:952: DeprecationWarning: typeMap is deprecated. Please use TYPE_MAP instead.
2025-10-08T16:01:09.4387007Z     warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)
2025-10-08T16:01:09.4387319Z 
2025-10-08T16:01:09.4387595Z tests/test_api_blueprint_registration.py::test_api_routes_accessible
2025-10-08T16:01:09.4388607Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/_pytest/python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but tests/test_api_blueprint_registration.py::test_api_routes_accessible returned <class 'bool'>.
2025-10-08T16:01:09.4389557Z   Did you mean to use `assert` instead of `return`?
2025-10-08T16:01:09.4390036Z   See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
2025-10-08T16:01:09.4390463Z     warnings.warn(
2025-10-08T16:01:09.4390579Z 
2025-10-08T16:01:09.4390772Z tests/test_api_blueprint_registration.py::test_blueprint_route_coverage
2025-10-08T16:01:09.4391920Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/_pytest/python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but tests/test_api_blueprint_registration.py::test_blueprint_route_coverage returned <class 'bool'>.
2025-10-08T16:01:09.4392881Z   Did you mean to use `assert` instead of `return`?
2025-10-08T16:01:09.4393334Z   See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
2025-10-08T16:01:09.4393852Z     warnings.warn(
2025-10-08T16:01:09.4393967Z 
2025-10-08T16:01:09.4394144Z tests/test_api_blueprint_registration.py::test_api_blueprint_imports
2025-10-08T16:01:09.4395157Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/_pytest/python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but tests/test_api_blueprint_registration.py::test_api_blueprint_imports returned <class 'bool'>.
2025-10-08T16:01:09.4396099Z   Did you mean to use `assert` instead of `return`?
2025-10-08T16:01:09.4396560Z   See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
2025-10-08T16:01:09.4396968Z     warnings.warn(
2025-10-08T16:01:09.4397088Z 
2025-10-08T16:01:09.4397269Z -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
2025-10-08T16:01:09.4397771Z =========================== short test summary info ============================
2025-10-08T16:01:09.4398630Z FAILED tests/test_api_blueprint_registration.py::test_all_api_blueprints_registered - AssertionError: Missing API blueprints: {'Topic', 'Upload', 'Private Message', 'Site', 'Post', 'Feed', 'Admin', 'Misc', 'Comment', 'User', 'Community'}
2025-10-08T16:01:09.4399516Z assert not {'Admin', 'Comment', 'Community', 'Feed', 'Misc', 'Post', ...}
2025-10-08T16:01:09.4399913Z =================== 1 failed, 3 passed, 7 warnings in 2.77s ====================
2025-10-08T16:01:10.1281326Z ============================= test session starts ==============================
2025-10-08T16:01:10.1282171Z platform linux -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
2025-10-08T16:01:10.1282852Z cachedir: .pytest_cache
2025-10-08T16:01:10.1283195Z rootdir: /home/runner/work/pyfedi/pyfedi
2025-10-08T16:01:10.1283578Z plugins: anyio-4.11.0
2025-10-08T16:01:11.6849851Z collecting ... collected 11 items
2025-10-08T16:01:11.6850265Z 
2025-10-08T16:01:11.8265205Z tests/test_field_consistency.py::TestFieldConsistency::test_user_model_has_required_fields ERROR [  9%]
2025-10-08T16:01:11.8667724Z tests/test_field_consistency.py::TestFieldConsistency::test_api_schema_matches_model_fields ERROR [ 18%]
2025-10-08T16:01:11.9083769Z tests/test_field_consistency.py::TestFieldConsistency::test_user_view_field_mapping ERROR [ 27%]
2025-10-08T16:01:11.9491397Z tests/test_field_consistency.py::TestFieldConsistency::test_no_username_vs_user_name_confusion ERROR [ 36%]
2025-10-08T16:01:11.9902959Z tests/test_field_consistency.py::TestBaselineFunctionality::test_user_model_instantiation ERROR [ 45%]
2025-10-08T16:01:12.0333534Z tests/test_field_consistency.py::TestBaselineFunctionality::test_api_schema_validation ERROR [ 54%]
2025-10-08T16:01:12.0761646Z tests/test_field_consistency.py::TestAPIEndpointImmutability::test_critical_api_endpoints_exist ERROR [ 63%]
2025-10-08T16:01:12.1193671Z tests/test_field_consistency.py::TestAPIEndpointImmutability::test_api_response_field_names_unchanged ERROR [ 72%]
2025-10-08T16:01:12.1600849Z tests/test_field_consistency.py::TestDatabaseSchemaImmutability::test_user_table_columns_unchanged ERROR [ 81%]
2025-10-08T16:01:12.3008121Z tests/test_field_consistency.py::TestDatabaseSchemaImmutability::test_post_table_columns_unchanged ERROR [ 90%]
2025-10-08T16:01:12.3442229Z tests/test_field_consistency.py::TestDatabaseSchemaImmutability::test_community_table_columns_unchanged ERROR [100%]
2025-10-08T16:01:12.3443164Z 
2025-10-08T16:01:12.3443424Z ==================================== ERRORS ====================================
2025-10-08T16:01:12.3443966Z __ ERROR at setup of TestFieldConsistency.test_user_model_has_required_fields __
2025-10-08T16:01:12.3444631Z 
2025-10-08T16:01:12.3444742Z     @pytest.fixture
2025-10-08T16:01:12.3445136Z     def app():
2025-10-08T16:01:12.3445629Z         """Create test app instance"""
2025-10-08T16:01:12.3446041Z >       app = create_app(TestConfig)
2025-10-08T16:01:12.3446352Z               ^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.3446541Z 
2025-10-08T16:01:12.3446669Z tests/test_field_consistency.py:30: 
2025-10-08T16:01:12.3447209Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:12.3447834Z app/__init__.py:141: in create_app
2025-10-08T16:01:12.3448144Z     db.init_app(app)
2025-10-08T16:01:12.3448744Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask_sqlalchemy/extension.py:374: in init_app
2025-10-08T16:01:12.3449445Z     engines[key] = self._make_engine(key, options, app)
2025-10-08T16:01:12.3449819Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.3450485Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask_sqlalchemy/extension.py:665: in _make_engine
2025-10-08T16:01:12.3451531Z     return sa.engine_from_config(options, prefix="")
2025-10-08T16:01:12.3452069Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.3452768Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/create.py:838: in engine_from_config
2025-10-08T16:01:12.3453485Z     return create_engine(url, **options)
2025-10-08T16:01:12.3453802Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.3454117Z <string>:2: in create_engine
2025-10-08T16:01:12.3454396Z     ???
2025-10-08T16:01:12.3454955Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/util/deprecations.py:281: in warned
2025-10-08T16:01:12.3455681Z     return fn(*args, **kwargs)  # type: ignore[no-any-return]
2025-10-08T16:01:12.3456063Z            ^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.3456397Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:12.3456664Z 
2025-10-08T16:01:12.3456877Z url = 'sqlite:///:memory:', kwargs = {'max_overflow': 30, 'pool_size': 10}
2025-10-08T16:01:12.3457317Z u = sqlite:///:memory:, plugins = []
2025-10-08T16:01:12.3458040Z entrypoint = <class 'sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite'>
2025-10-08T16:01:12.3458559Z _is_async = False
2025-10-08T16:01:12.3458931Z pop_kwarg = <function create_engine.<locals>.pop_kwarg at 0x7f308dd06de0>
2025-10-08T16:01:12.3459822Z dialect_args = {'compiler_linting': 1, 'dbapi': <module 'sqlite3.dbapi2' from '/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/sqlite3/dbapi2.py'>}
2025-10-08T16:01:12.3460816Z 
2025-10-08T16:01:12.3461000Z     @util.deprecated_params(
2025-10-08T16:01:12.3461442Z         strategy=(
2025-10-08T16:01:12.3461746Z             "1.4",
2025-10-08T16:01:12.3462101Z             "The :paramref:`_sa.create_engine.strategy` keyword is deprecated, "
2025-10-08T16:01:12.3462512Z             "and the only argument accepted is 'mock'; please use "
2025-10-08T16:01:12.3462878Z             ":func:`.create_mock_engine` going forward.  For general "
2025-10-08T16:01:12.3463275Z             "customization of create_engine which may have been accomplished "
2025-10-08T16:01:12.3463674Z             "using strategies, see :class:`.CreateEnginePlugin`.",
2025-10-08T16:01:12.3463958Z         ),
2025-10-08T16:01:12.3464139Z         empty_in_strategy=(
2025-10-08T16:01:12.3464352Z             "1.4",
2025-10-08T16:01:12.3464620Z             "The :paramref:`_sa.create_engine.empty_in_strategy` keyword is "
2025-10-08T16:01:12.3465025Z             "deprecated, and no longer has any effect.  All IN expressions "
2025-10-08T16:01:12.3465543Z             "are now rendered using "
2025-10-08T16:01:12.3466002Z             'the "expanding parameter" strategy which renders a set of bound'
2025-10-08T16:01:12.3466398Z             'expressions, or an "empty set" SELECT, at statement execution'
2025-10-08T16:01:12.3466713Z             "time.",
2025-10-08T16:01:12.3467069Z         ),
2025-10-08T16:01:12.3467256Z         implicit_returning=(
2025-10-08T16:01:12.3467674Z             "2.0",
2025-10-08T16:01:12.3467953Z             "The :paramref:`_sa.create_engine.implicit_returning` parameter "
2025-10-08T16:01:12.3468342Z             "is deprecated and will be removed in a future release. ",
2025-10-08T16:01:12.3468630Z         ),
2025-10-08T16:01:12.3468924Z     )
2025-10-08T16:01:12.3469192Z     def create_engine(url: Union[str, _url.URL], **kwargs: Any) -> Engine:
2025-10-08T16:01:12.3469566Z         """Create a new :class:`_engine.Engine` instance.
2025-10-08T16:01:12.3470006Z     
2025-10-08T16:01:12.3470436Z         The standard calling form is to send the :ref:`URL <database_urls>` as the
2025-10-08T16:01:12.3470817Z         first positional argument, usually a string
2025-10-08T16:01:12.3471172Z         that indicates database dialect and connection arguments::
2025-10-08T16:01:12.3471469Z     
2025-10-08T16:01:12.3472777Z             engine = create_engine("***localhost/test")
2025-10-08T16:01:12.3473210Z     
2025-10-08T16:01:12.3473507Z         .. note::
2025-10-08T16:01:12.3473806Z     
2025-10-08T16:01:12.3474265Z             Please review :ref:`database_urls` for general guidelines in composing
2025-10-08T16:01:12.3475021Z             URL strings.  In particular, special characters, such as those often
2025-10-08T16:01:12.3475715Z             part of passwords, must be URL encoded to be properly parsed.
2025-10-08T16:01:12.3476247Z     
2025-10-08T16:01:12.3476634Z         Additional keyword arguments may then follow it which
2025-10-08T16:01:12.3477317Z         establish various options on the resulting :class:`_engine.Engine`
2025-10-08T16:01:12.3478253Z         and its underlying :class:`.Dialect` and :class:`_pool.Pool`
2025-10-08T16:01:12.3478816Z         constructs::
2025-10-08T16:01:12.3479154Z     
2025-10-08T16:01:12.3479471Z             engine = create_engine(
2025-10-08T16:01:12.3480143Z                 "***hostname/dbname",
2025-10-08T16:01:12.3480593Z                 pool_recycle=3600,
2025-10-08T16:01:12.3480992Z                 echo=True,
2025-10-08T16:01:12.3481349Z             )
2025-10-08T16:01:12.3481645Z     
2025-10-08T16:01:12.3481962Z         The string form of the URL is
2025-10-08T16:01:12.3482544Z         ``dialect[+driver]://user:password@host/dbname[?key=value..]``, where
2025-10-08T16:01:12.3483236Z         ``dialect`` is a database name such as ``mysql``, ``oracle``,
2025-10-08T16:01:12.3483935Z         ``postgresql``, etc., and ``driver`` the name of a DBAPI, such as
2025-10-08T16:01:12.3484640Z         ``psycopg2``, ``pyodbc``, ``cx_oracle``, etc.  Alternatively,
2025-10-08T16:01:12.3485341Z         the URL can be an instance of :class:`~sqlalchemy.engine.url.URL`.
2025-10-08T16:01:12.3485922Z     
2025-10-08T16:01:12.3486347Z         ``**kwargs`` takes a wide variety of options which are routed
2025-10-08T16:01:12.3487077Z         towards their appropriate components.  Arguments may be specific to
2025-10-08T16:01:12.3488066Z         the :class:`_engine.Engine`, the underlying :class:`.Dialect`,
2025-10-08T16:01:12.3488632Z         as well as the
2025-10-08T16:01:12.3489195Z         :class:`_pool.Pool`.  Specific dialects also accept keyword arguments that
2025-10-08T16:01:12.3489955Z         are unique to that dialect.   Here, we describe the parameters
2025-10-08T16:01:12.3504181Z         that are common to most :func:`_sa.create_engine()` usage.
2025-10-08T16:01:12.3504801Z     
2025-10-08T16:01:12.3505298Z         Once established, the newly resulting :class:`_engine.Engine` will
2025-10-08T16:01:12.3506111Z         request a connection from the underlying :class:`_pool.Pool` once
2025-10-08T16:01:12.3506911Z         :meth:`_engine.Engine.connect` is called, or a method which depends on it
2025-10-08T16:01:12.3507885Z         such as :meth:`_engine.Engine.execute` is invoked.   The
2025-10-08T16:01:12.3508466Z         :class:`_pool.Pool` in turn
2025-10-08T16:01:12.3509291Z         will establish the first actual DBAPI connection when this request
2025-10-08T16:01:12.3510072Z         is received.   The :func:`_sa.create_engine` call itself does **not**
2025-10-08T16:01:12.3510767Z         establish any actual DBAPI connections directly.
2025-10-08T16:01:12.3511271Z     
2025-10-08T16:01:12.3511577Z         .. seealso::
2025-10-08T16:01:12.3511909Z     
2025-10-08T16:01:12.3512216Z             :doc:`/core/engines`
2025-10-08T16:01:12.3512817Z     
2025-10-08T16:01:12.3513129Z             :doc:`/dialects/index`
2025-10-08T16:01:12.3513531Z     
2025-10-08T16:01:12.3513843Z             :ref:`connections_toplevel`
2025-10-08T16:01:12.3514282Z     
2025-10-08T16:01:12.3514533Z         :param connect_args: a dictionary of options which will be
2025-10-08T16:01:12.3514907Z             passed directly to the DBAPI's ``connect()`` method as
2025-10-08T16:01:12.3515258Z             additional keyword arguments.  See the example
2025-10-08T16:01:12.3515565Z             at :ref:`custom_dbapi_args`.
2025-10-08T16:01:12.3515811Z     
2025-10-08T16:01:12.3516071Z         :param creator: a callable which returns a DBAPI connection.
2025-10-08T16:01:12.3516466Z             This creation function will be passed to the underlying
2025-10-08T16:01:12.3516850Z             connection pool and will be used to create all new database
2025-10-08T16:01:12.3517224Z             connections. Usage of this function causes connection
2025-10-08T16:01:12.3517863Z             parameters specified in the URL argument to be bypassed.
2025-10-08T16:01:12.3518166Z     
2025-10-08T16:01:12.3518367Z             This hook is not as flexible as the newer
2025-10-08T16:01:12.3518732Z             :meth:`_events.DialectEvents.do_connect` hook which allows complete
2025-10-08T16:01:12.3519176Z             control over how a connection is made to the database, given the full
2025-10-08T16:01:12.3519547Z             set of URL arguments and state beforehand.
2025-10-08T16:01:12.3519803Z     
2025-10-08T16:01:12.3520010Z             .. seealso::
2025-10-08T16:01:12.3520365Z     
2025-10-08T16:01:12.3520821Z                 :meth:`_events.DialectEvents.do_connect` - event hook that allows
2025-10-08T16:01:12.3521451Z                 full control over DBAPI connection mechanics.
2025-10-08T16:01:12.3521731Z     
2025-10-08T16:01:12.3521913Z                 :ref:`custom_dbapi_args`
2025-10-08T16:01:12.3522146Z     
2025-10-08T16:01:12.3522393Z         :param echo=False: if True, the Engine will log all statements
2025-10-08T16:01:12.3522792Z             as well as a ``repr()`` of their parameter lists to the default log
2025-10-08T16:01:12.3523196Z             handler, which defaults to ``sys.stdout`` for output.   If set to the
2025-10-08T16:01:12.3523624Z             string ``"debug"``, result rows will be printed to the standard output
2025-10-08T16:01:12.3524204Z             as well. The ``echo`` attribute of ``Engine`` can be modified at any
2025-10-08T16:01:12.3524882Z             time to turn logging on and off; direct control of logging is also
2025-10-08T16:01:12.3525533Z             available using the standard Python ``logging`` module.
2025-10-08T16:01:12.3526030Z     
2025-10-08T16:01:12.3526311Z             .. seealso::
2025-10-08T16:01:12.3526632Z     
2025-10-08T16:01:12.3527030Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.3527709Z                 logging.
2025-10-08T16:01:12.3528024Z     
2025-10-08T16:01:12.3528293Z     
2025-10-08T16:01:12.3528696Z         :param echo_pool=False: if True, the connection pool will log
2025-10-08T16:01:12.3529363Z             informational output such as when connections are invalidated
2025-10-08T16:01:12.3530067Z             as well as when connections are recycled to the default log handler,
2025-10-08T16:01:12.3530743Z             which defaults to ``sys.stdout`` for output.   If set to the string
2025-10-08T16:01:12.3531152Z             ``"debug"``, the logging will include pool checkouts and checkins.
2025-10-08T16:01:12.3531731Z             Direct control of logging is also available using the standard Python
2025-10-08T16:01:12.3532089Z             ``logging`` module.
2025-10-08T16:01:12.3532348Z     
2025-10-08T16:01:12.3532639Z             .. seealso::
2025-10-08T16:01:12.3532959Z     
2025-10-08T16:01:12.3533353Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.3533874Z                 logging.
2025-10-08T16:01:12.3534184Z     
2025-10-08T16:01:12.3534610Z     
2025-10-08T16:01:12.3535023Z         :param empty_in_strategy:   No longer used; SQLAlchemy now uses
2025-10-08T16:01:12.3535907Z             "empty set" behavior for IN in all cases.
2025-10-08T16:01:12.3536168Z     
2025-10-08T16:01:12.3536422Z         :param enable_from_linting: defaults to True.  Will emit a warning
2025-10-08T16:01:12.3536831Z             if a given SELECT statement is found to have un-linked FROM elements
2025-10-08T16:01:12.3537187Z             which would cause a cartesian product.
2025-10-08T16:01:12.3537670Z     
2025-10-08T16:01:12.3537861Z             .. versionadded:: 1.4
2025-10-08T16:01:12.3538082Z     
2025-10-08T16:01:12.3538251Z             .. seealso::
2025-10-08T16:01:12.3538446Z     
2025-10-08T16:01:12.3538614Z                 :ref:`change_4737`
2025-10-08T16:01:12.3538838Z     
2025-10-08T16:01:12.3539101Z         :param execution_options: Dictionary execution options which will
2025-10-08T16:01:12.3539662Z             be applied to all connections.  See
2025-10-08T16:01:12.3540252Z             :meth:`~sqlalchemy.engine.Connection.execution_options`
2025-10-08T16:01:12.3540772Z     
2025-10-08T16:01:12.3541162Z         :param future: Use the 2.0 style :class:`_engine.Engine` and
2025-10-08T16:01:12.3541721Z             :class:`_engine.Connection` API.
2025-10-08T16:01:12.3542135Z     
2025-10-08T16:01:12.3542532Z             As of SQLAlchemy 2.0, this parameter is present for backwards
2025-10-08T16:01:12.3543226Z             compatibility only and must remain at its default value of ``True``.
2025-10-08T16:01:12.3543789Z     
2025-10-08T16:01:12.3544191Z             The :paramref:`_sa.create_engine.future` parameter will be
2025-10-08T16:01:12.3544845Z             deprecated in a subsequent 2.x release and eventually removed.
2025-10-08T16:01:12.3545421Z     
2025-10-08T16:01:12.3545719Z             .. versionadded:: 1.4
2025-10-08T16:01:12.3546081Z     
2025-10-08T16:01:12.3546503Z             .. versionchanged:: 2.0 All :class:`_engine.Engine` objects are
2025-10-08T16:01:12.3547189Z                "future" style engines and there is no longer a ``future=False``
2025-10-08T16:01:12.3547884Z                mode of operation.
2025-10-08T16:01:12.3548241Z     
2025-10-08T16:01:12.3548518Z             .. seealso::
2025-10-08T16:01:12.3548842Z     
2025-10-08T16:01:12.3549138Z                 :ref:`migration_20_toplevel`
2025-10-08T16:01:12.3549532Z     
2025-10-08T16:01:12.3550010Z         :param hide_parameters: Boolean, when set to True, SQL statement parameters
2025-10-08T16:01:12.3550770Z             will not be displayed in INFO logging nor will they be formatted into
2025-10-08T16:01:12.3551494Z             the string representation of :class:`.StatementError` objects.
2025-10-08T16:01:12.3552022Z     
2025-10-08T16:01:12.3552317Z             .. versionadded:: 1.3.8
2025-10-08T16:01:12.3552685Z     
2025-10-08T16:01:12.3552960Z             .. seealso::
2025-10-08T16:01:12.3553283Z     
2025-10-08T16:01:12.3553673Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.3554201Z                 logging.
2025-10-08T16:01:12.3554516Z     
2025-10-08T16:01:12.3554963Z         :param implicit_returning=True:  Legacy parameter that may only be set
2025-10-08T16:01:12.3555698Z             to True. In SQLAlchemy 2.0, this parameter does nothing. In order to
2025-10-08T16:01:12.3556432Z             disable "implicit returning" for statements invoked by the ORM,
2025-10-08T16:01:12.3556809Z             configure this on a per-table basis using the
2025-10-08T16:01:12.3557597Z             :paramref:`.Table.implicit_returning` parameter.
2025-10-08T16:01:12.3558099Z     
2025-10-08T16:01:12.3558361Z     
2025-10-08T16:01:12.3558802Z         :param insertmanyvalues_page_size: number of rows to format into an
2025-10-08T16:01:12.3559584Z          INSERT statement when the statement uses "insertmanyvalues" mode, which is
2025-10-08T16:01:12.3560347Z          a paged form of bulk insert that is used for many backends when using
2025-10-08T16:01:12.3561257Z          :term:`executemany` execution typically in conjunction with RETURNING.
2025-10-08T16:01:12.3561997Z          Defaults to 1000, but may also be subject to dialect-specific limiting
2025-10-08T16:01:12.3562699Z          factors which may override this value on a per-statement basis.
2025-10-08T16:01:12.3563228Z     
2025-10-08T16:01:12.3563516Z          .. versionadded:: 2.0
2025-10-08T16:01:12.3563868Z     
2025-10-08T16:01:12.3564151Z          .. seealso::
2025-10-08T16:01:12.3564453Z     
2025-10-08T16:01:12.3564757Z             :ref:`engine_insertmanyvalues`
2025-10-08T16:01:12.3565165Z     
2025-10-08T16:01:12.3565483Z             :ref:`engine_insertmanyvalues_page_size`
2025-10-08T16:01:12.3565912Z     
2025-10-08T16:01:12.3566423Z             :paramref:`_engine.Connection.execution_options.insertmanyvalues_page_size`
2025-10-08T16:01:12.3567044Z     
2025-10-08T16:01:12.3567629Z         :param isolation_level: optional string name of an isolation level
2025-10-08T16:01:12.3568316Z             which will be set on all new connections unconditionally.
2025-10-08T16:01:12.3568963Z             Isolation levels are typically some subset of the string names
2025-10-08T16:01:12.3569449Z             ``"SERIALIZABLE"``, ``"REPEATABLE READ"``,
2025-10-08T16:01:12.3569789Z             ``"READ COMMITTED"``, ``"READ UNCOMMITTED"`` and ``"AUTOCOMMIT"``
2025-10-08T16:01:12.3570101Z             based on backend.
2025-10-08T16:01:12.3570308Z     
2025-10-08T16:01:12.3570547Z             The :paramref:`_sa.create_engine.isolation_level` parameter is
2025-10-08T16:01:12.3570870Z             in contrast to the
2025-10-08T16:01:12.3571164Z             :paramref:`.Connection.execution_options.isolation_level`
2025-10-08T16:01:12.3571767Z             execution option, which may be set on an individual
2025-10-08T16:01:12.3572375Z             :class:`.Connection`, as well as the same parameter passed to
2025-10-08T16:01:12.3573042Z             :meth:`.Engine.execution_options`, where it may be used to create
2025-10-08T16:01:12.3573764Z             multiple engines with different isolation levels that share a common
2025-10-08T16:01:12.3574357Z             connection pool and dialect.
2025-10-08T16:01:12.3574723Z     
2025-10-08T16:01:12.3575029Z             .. versionchanged:: 2.0 The
2025-10-08T16:01:12.3575499Z                :paramref:`_sa.create_engine.isolation_level`
2025-10-08T16:01:12.3576134Z                parameter has been generalized to work on all dialects which support
2025-10-08T16:01:12.3576892Z                the concept of isolation level, and is provided as a more succinct,
2025-10-08T16:01:12.3577762Z                up front configuration switch in contrast to the execution option
2025-10-08T16:01:12.3578390Z                which is more of an ad-hoc programmatic option.
2025-10-08T16:01:12.3578844Z     
2025-10-08T16:01:12.3579120Z             .. seealso::
2025-10-08T16:01:12.3579434Z     
2025-10-08T16:01:12.3579723Z                 :ref:`dbapi_autocommit`
2025-10-08T16:01:12.3580111Z     
2025-10-08T16:01:12.3580480Z         :param json_deserializer: for dialects that support the
2025-10-08T16:01:12.3580985Z             :class:`_types.JSON`
2025-10-08T16:01:12.3581512Z             datatype, this is a Python callable that will convert a JSON string
2025-10-08T16:01:12.3582219Z             to a Python object.  By default, the Python ``json.loads`` function is
2025-10-08T16:01:12.3582764Z             used.
2025-10-08T16:01:12.3583053Z     
2025-10-08T16:01:12.3583467Z             .. versionchanged:: 1.3.7  The SQLite dialect renamed this from
2025-10-08T16:01:12.3584192Z                ``_json_deserializer``.
2025-10-08T16:01:12.3584584Z     
2025-10-08T16:01:12.3585044Z         :param json_serializer: for dialects that support the :class:`_types.JSON`
2025-10-08T16:01:12.3585781Z             datatype, this is a Python callable that will render a given object
2025-10-08T16:01:12.3586465Z             as JSON.   By default, the Python ``json.dumps`` function is used.
2025-10-08T16:01:12.3587029Z     
2025-10-08T16:01:12.3587289Z             .. versionchanged:: 1.3.7  The SQLite dialect renamed this from
2025-10-08T16:01:12.3587815Z                ``_json_serializer``.
2025-10-08T16:01:12.3588045Z     
2025-10-08T16:01:12.3588200Z     
2025-10-08T16:01:12.3588441Z         :param label_length=None: optional integer value which limits
2025-10-08T16:01:12.3589089Z             the size of dynamically generated column labels to that many
2025-10-08T16:01:12.3589704Z             characters. If less than 6, labels are generated as
2025-10-08T16:01:12.3590225Z             "_(counter)". If ``None``, the value of
2025-10-08T16:01:12.3590801Z             ``dialect.max_identifier_length``, which may be affected via the
2025-10-08T16:01:12.3591484Z             :paramref:`_sa.create_engine.max_identifier_length` parameter,
2025-10-08T16:01:12.3592052Z             is used instead.   The value of
2025-10-08T16:01:12.3592525Z             :paramref:`_sa.create_engine.label_length`
2025-10-08T16:01:12.3593034Z             may not be larger than that of
2025-10-08T16:01:12.3593565Z             :paramref:`_sa.create_engine.max_identfier_length`.
2025-10-08T16:01:12.3594061Z     
2025-10-08T16:01:12.3594376Z             .. seealso::
2025-10-08T16:01:12.3594730Z     
2025-10-08T16:01:12.3595130Z                 :paramref:`_sa.create_engine.max_identifier_length`
2025-10-08T16:01:12.3595624Z     
2025-10-08T16:01:12.3596053Z         :param logging_name:  String identifier which will be used within
2025-10-08T16:01:12.3596700Z             the "name" field of logging records generated within the
2025-10-08T16:01:12.3597508Z             "sqlalchemy.engine" logger. Defaults to a hexstring of the
2025-10-08T16:01:12.3598053Z             object's id.
2025-10-08T16:01:12.3598380Z     
2025-10-08T16:01:12.3598650Z             .. seealso::
2025-10-08T16:01:12.3598965Z     
2025-10-08T16:01:12.3599360Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.3599870Z                 logging.
2025-10-08T16:01:12.3600190Z     
2025-10-08T16:01:12.3600623Z                 :paramref:`_engine.Connection.execution_options.logging_token`
2025-10-08T16:01:12.3601207Z     
2025-10-08T16:01:12.3601662Z         :param max_identifier_length: integer; override the max_identifier_length
2025-10-08T16:01:12.3602410Z             determined by the dialect.  if ``None`` or zero, has no effect.  This
2025-10-08T16:01:12.3603129Z             is the database's configured maximum number of characters that may be
2025-10-08T16:01:12.3603836Z             used in a SQL identifier such as a table name, column name, or label
2025-10-08T16:01:12.3604361Z             name. All dialects determine this value automatically, however in the
2025-10-08T16:01:12.3604776Z             case of a new database version for which this value has changed but
2025-10-08T16:01:12.3605179Z             SQLAlchemy's dialect has not been adjusted, the value may be passed
2025-10-08T16:01:12.3605495Z             here.
2025-10-08T16:01:12.3605676Z     
2025-10-08T16:01:12.3605849Z             .. versionadded:: 1.3.9
2025-10-08T16:01:12.3606063Z     
2025-10-08T16:01:12.3606225Z             .. seealso::
2025-10-08T16:01:12.3606410Z     
2025-10-08T16:01:12.3606601Z                 :paramref:`_sa.create_engine.label_length`
2025-10-08T16:01:12.3606922Z     
2025-10-08T16:01:12.3607468Z         :param max_overflow=10: the number of connections to allow in
2025-10-08T16:01:12.3608123Z             connection pool "overflow", that is connections that can be
2025-10-08T16:01:12.3609055Z             opened above and beyond the pool_size setting, which defaults
2025-10-08T16:01:12.3609756Z             to five. this is only used with :class:`~sqlalchemy.pool.QueuePool`.
2025-10-08T16:01:12.3610302Z     
2025-10-08T16:01:12.3610749Z         :param module=None: reference to a Python module object (the module
2025-10-08T16:01:12.3611462Z             itself, not its string name).  Specifies an alternate DBAPI module to
2025-10-08T16:01:12.3612146Z             be used by the engine's dialect.  Each sub-dialect references a
2025-10-08T16:01:12.3612994Z             specific DBAPI which will be imported before first connect.  This
2025-10-08T16:01:12.3613719Z             parameter causes the import to be bypassed, and the given module to
2025-10-08T16:01:12.3614346Z             be used instead. Can be used for testing of DBAPIs as well as to
2025-10-08T16:01:12.3615050Z             inject "mock" DBAPI implementations into the :class:`_engine.Engine`.
2025-10-08T16:01:12.3615597Z     
2025-10-08T16:01:12.3616226Z         :param paramstyle=None: The `paramstyle <https://legacy.python.org/dev/peps/pep-0249/#paramstyle>`_
2025-10-08T16:01:12.3617125Z             to use when rendering bound parameters.  This style defaults to the
2025-10-08T16:01:12.3617767Z             one recommended by the DBAPI itself, which is retrieved from the
2025-10-08T16:01:12.3618177Z             ``.paramstyle`` attribute of the DBAPI.  However, most DBAPIs accept
2025-10-08T16:01:12.3618588Z             more than one paramstyle, and in particular it may be desirable
2025-10-08T16:01:12.3618990Z             to change a "named" paramstyle into a "positional" one, or vice versa.
2025-10-08T16:01:12.3619379Z             When this attribute is passed, it should be one of the values
2025-10-08T16:01:12.3619727Z             ``"qmark"``, ``"numeric"``, ``"named"``, ``"format"`` or
2025-10-08T16:01:12.3620072Z             ``"pyformat"``, and should correspond to a parameter style known
2025-10-08T16:01:12.3620419Z             to be supported by the DBAPI in use.
2025-10-08T16:01:12.3620653Z     
2025-10-08T16:01:12.3620930Z         :param pool=None: an already-constructed instance of
2025-10-08T16:01:12.3621500Z             :class:`~sqlalchemy.pool.Pool`, such as a
2025-10-08T16:01:12.3622099Z             :class:`~sqlalchemy.pool.QueuePool` instance. If non-None, this
2025-10-08T16:01:12.3622772Z             pool will be used directly as the underlying connection pool
2025-10-08T16:01:12.3623419Z             for the engine, bypassing whatever connection parameters are
2025-10-08T16:01:12.3624081Z             present in the URL argument. For information on constructing
2025-10-08T16:01:12.3624560Z             connection pools manually, see :ref:`pooling_toplevel`.
2025-10-08T16:01:12.3625071Z     
2025-10-08T16:01:12.3625459Z         :param poolclass=None: a :class:`~sqlalchemy.pool.Pool`
2025-10-08T16:01:12.3626073Z             subclass, which will be used to create a connection pool
2025-10-08T16:01:12.3626725Z             instance using the connection parameters given in the URL. Note
2025-10-08T16:01:12.3627494Z             this differs from ``pool`` in that you don't actually
2025-10-08T16:01:12.3628137Z             instantiate the pool in this case, you just indicate what type
2025-10-08T16:01:12.3628687Z             of pool to be used.
2025-10-08T16:01:12.3629034Z     
2025-10-08T16:01:12.3629470Z         :param pool_logging_name:  String identifier which will be used within
2025-10-08T16:01:12.3630134Z            the "name" field of logging records generated within the
2025-10-08T16:01:12.3630782Z            "sqlalchemy.pool" logger. Defaults to a hexstring of the object's
2025-10-08T16:01:12.3631336Z            id.
2025-10-08T16:01:12.3631539Z     
2025-10-08T16:01:12.3631797Z            .. seealso::
2025-10-08T16:01:12.3632116Z     
2025-10-08T16:01:12.3632509Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.3633017Z                 logging.
2025-10-08T16:01:12.3633333Z     
2025-10-08T16:01:12.3633943Z         :param pool_pre_ping: boolean, if True will enable the connection pool
2025-10-08T16:01:12.3634638Z             "pre-ping" feature that tests connections for liveness upon
2025-10-08T16:01:12.3635052Z             each checkout.
2025-10-08T16:01:12.3635247Z     
2025-10-08T16:01:12.3635416Z             .. versionadded:: 1.2
2025-10-08T16:01:12.3635630Z     
2025-10-08T16:01:12.3635790Z             .. seealso::
2025-10-08T16:01:12.3635971Z     
2025-10-08T16:01:12.3636285Z                 :ref:`pool_disconnects_pessimistic`
2025-10-08T16:01:12.3636536Z     
2025-10-08T16:01:12.3636757Z         :param pool_size=5: the number of connections to keep open
2025-10-08T16:01:12.3637085Z             inside the connection pool. This used with
2025-10-08T16:01:12.3637596Z             :class:`~sqlalchemy.pool.QueuePool` as
2025-10-08T16:01:12.3637948Z             well as :class:`~sqlalchemy.pool.SingletonThreadPool`.  With
2025-10-08T16:01:12.3638324Z             :class:`~sqlalchemy.pool.QueuePool`, a ``pool_size`` setting
2025-10-08T16:01:12.3638722Z             of 0 indicates no limit; to disable pooling, set ``poolclass`` to
2025-10-08T16:01:12.3639082Z             :class:`~sqlalchemy.pool.NullPool` instead.
2025-10-08T16:01:12.3639343Z     
2025-10-08T16:01:12.3639587Z         :param pool_recycle=-1: this setting causes the pool to recycle
2025-10-08T16:01:12.3639968Z             connections after the given number of seconds has passed. It
2025-10-08T16:01:12.3640345Z             defaults to -1, or no timeout. For example, setting to 3600
2025-10-08T16:01:12.3640705Z             means connections will be recycled after one hour. Note that
2025-10-08T16:01:12.3641074Z             MySQL in particular will disconnect automatically if no
2025-10-08T16:01:12.3641445Z             activity is detected on a connection for eight hours (although
2025-10-08T16:01:12.3641834Z             this is configurable with the MySQLDB connection itself and the
2025-10-08T16:01:12.3642160Z             server configuration as well).
2025-10-08T16:01:12.3642392Z     
2025-10-08T16:01:12.3642560Z             .. seealso::
2025-10-08T16:01:12.3642745Z     
2025-10-08T16:01:12.3642919Z                 :ref:`pool_setting_recycle`
2025-10-08T16:01:12.3643146Z     
2025-10-08T16:01:12.3643338Z         :param pool_reset_on_return='rollback': set the
2025-10-08T16:01:12.3643694Z             :paramref:`_pool.Pool.reset_on_return` parameter of the underlying
2025-10-08T16:01:12.3644082Z             :class:`_pool.Pool` object, which can be set to the values
2025-10-08T16:01:12.3644396Z             ``"rollback"``, ``"commit"``, or ``None``.
2025-10-08T16:01:12.3644640Z     
2025-10-08T16:01:12.3644806Z             .. seealso::
2025-10-08T16:01:12.3644994Z     
2025-10-08T16:01:12.3645162Z                 :ref:`pool_reset_on_return`
2025-10-08T16:01:12.3645426Z     
2025-10-08T16:01:12.3645665Z                 :ref:`dbapi_autocommit_skip_rollback` - a more modern approach
2025-10-08T16:01:12.3646027Z                 to using connections with no transactional instructions
2025-10-08T16:01:12.3646315Z     
2025-10-08T16:01:12.3646549Z         :param pool_timeout=30: number of seconds to wait before giving
2025-10-08T16:01:12.3646904Z             up on getting a connection from the pool. This is only used
2025-10-08T16:01:12.3647300Z             with :class:`~sqlalchemy.pool.QueuePool`. This can be a float but is
2025-10-08T16:01:12.3647939Z             subject to the limitations of Python time functions which may not be
2025-10-08T16:01:12.3648302Z             reliable in the tens of milliseconds.
2025-10-08T16:01:12.3648540Z     
2025-10-08T16:01:12.3648776Z             .. note: don't use 30.0 above, it seems to break with the :param tag
2025-10-08T16:01:12.3649075Z     
2025-10-08T16:01:12.3649330Z         :param pool_use_lifo=False: use LIFO (last-in-first-out) when retrieving
2025-10-08T16:01:12.3649723Z             connections from :class:`.QueuePool` instead of FIFO
2025-10-08T16:01:12.3650104Z             (first-in-first-out). Using LIFO, a server-side timeout scheme can
2025-10-08T16:01:12.3650640Z             reduce the number of connections used during non- peak   periods of
2025-10-08T16:01:12.3651076Z             use.   When planning for server-side timeouts, ensure that a recycle or
2025-10-08T16:01:12.3651513Z             pre-ping strategy is in use to gracefully   handle stale connections.
2025-10-08T16:01:12.3651845Z     
2025-10-08T16:01:12.3652015Z               .. versionadded:: 1.3
2025-10-08T16:01:12.3652343Z     
2025-10-08T16:01:12.3652509Z               .. seealso::
2025-10-08T16:01:12.3652697Z     
2025-10-08T16:01:12.3652864Z                 :ref:`pool_use_lifo`
2025-10-08T16:01:12.3653082Z     
2025-10-08T16:01:12.3653246Z                 :ref:`pool_disconnects`
2025-10-08T16:01:12.3653474Z     
2025-10-08T16:01:12.3653700Z         :param plugins: string list of plugin names to load.  See
2025-10-08T16:01:12.3654035Z             :class:`.CreateEnginePlugin` for background.
2025-10-08T16:01:12.3654292Z     
2025-10-08T16:01:12.3654463Z             .. versionadded:: 1.2.3
2025-10-08T16:01:12.3654688Z     
2025-10-08T16:01:12.3654939Z         :param query_cache_size: size of the cache used to cache the SQL string
2025-10-08T16:01:12.3655309Z          form of queries.  Set to zero to disable caching.
2025-10-08T16:01:12.3655571Z     
2025-10-08T16:01:12.3655824Z          The cache is pruned of its least recently used items when its size reaches
2025-10-08T16:01:12.3656246Z          N * 1.5.  Defaults to 500, meaning the cache will always store at least
2025-10-08T16:01:12.3656660Z          500 SQL statements when filled, and will grow up to 750 items at which
2025-10-08T16:01:12.3657066Z          point it is pruned back down to 500 by removing the 250 least recently
2025-10-08T16:01:12.3657590Z          used items.
2025-10-08T16:01:12.3657783Z     
2025-10-08T16:01:12.3658036Z          Caching is accomplished on a per-statement basis by generating a
2025-10-08T16:01:12.3658447Z          cache key that represents the statement's structure, then generating
2025-10-08T16:01:12.3658863Z          string SQL for the current dialect only if that key is not present
2025-10-08T16:01:12.3659264Z          in the cache.   All statements support caching, however some features
2025-10-08T16:01:12.3659660Z          such as an INSERT with a large set of parameters will intentionally
2025-10-08T16:01:12.3660059Z          bypass the cache.   SQL logging will indicate statistics for each
2025-10-08T16:01:12.3660435Z          statement whether or not it were pull from the cache.
2025-10-08T16:01:12.3660714Z     
2025-10-08T16:01:12.3660969Z          .. note:: some ORM functions related to unit-of-work persistence as well
2025-10-08T16:01:12.3661385Z             as some attribute loading strategies will make use of individual
2025-10-08T16:01:12.3661741Z             per-mapper caches outside of the main cache.
2025-10-08T16:01:12.3661992Z     
2025-10-08T16:01:12.3662143Z     
2025-10-08T16:01:12.3662308Z          .. seealso::
2025-10-08T16:01:12.3662488Z     
2025-10-08T16:01:12.3662658Z             :ref:`sql_caching`
2025-10-08T16:01:12.3662864Z     
2025-10-08T16:01:12.3663037Z          .. versionadded:: 1.4
2025-10-08T16:01:12.3663238Z     
2025-10-08T16:01:12.3663471Z         :param skip_autocommit_rollback: When True, the dialect will
2025-10-08T16:01:12.3663888Z            unconditionally skip all calls to the DBAPI ``connection.rollback()``
2025-10-08T16:01:12.3664325Z            method if the DBAPI connection is confirmed to be in "autocommit" mode.
2025-10-08T16:01:12.3664765Z            The availability of this feature is dialect specific; if not available,
2025-10-08T16:01:12.3665210Z            a ``NotImplementedError`` is raised by the dialect when rollback occurs.
2025-10-08T16:01:12.3665538Z     
2025-10-08T16:01:12.3665700Z            .. seealso::
2025-10-08T16:01:12.3665882Z     
2025-10-08T16:01:12.3666067Z                 :ref:`dbapi_autocommit_skip_rollback`
2025-10-08T16:01:12.3666311Z     
2025-10-08T16:01:12.3666482Z            .. versionadded:: 2.0.43
2025-10-08T16:01:12.3666702Z     
2025-10-08T16:01:12.3667086Z         :param use_insertmanyvalues: True by default, use the "insertmanyvalues"
2025-10-08T16:01:12.3667625Z          execution style for INSERT..RETURNING statements by default.
2025-10-08T16:01:12.3667926Z     
2025-10-08T16:01:12.3668089Z          .. versionadded:: 2.0
2025-10-08T16:01:12.3668292Z     
2025-10-08T16:01:12.3668453Z          .. seealso::
2025-10-08T16:01:12.3668625Z     
2025-10-08T16:01:12.3668915Z             :ref:`engine_insertmanyvalues`
2025-10-08T16:01:12.3669149Z     
2025-10-08T16:01:12.3669297Z         """  # noqa
2025-10-08T16:01:12.3669470Z     
2025-10-08T16:01:12.3669636Z         if "strategy" in kwargs:
2025-10-08T16:01:12.3669872Z             strat = kwargs.pop("strategy")
2025-10-08T16:01:12.3670113Z             if strat == "mock":
2025-10-08T16:01:12.3670340Z                 # this case is deprecated
2025-10-08T16:01:12.3670642Z                 return create_mock_engine(url, **kwargs)  # type: ignore
2025-10-08T16:01:12.3670930Z             else:
2025-10-08T16:01:12.3671185Z                 raise exc.ArgumentError("unknown strategy: %r" % strat)
2025-10-08T16:01:12.3671476Z     
2025-10-08T16:01:12.3671654Z         kwargs.pop("empty_in_strategy", None)
2025-10-08T16:01:12.3671900Z     
2025-10-08T16:01:12.3672066Z         # create url.URL object
2025-10-08T16:01:12.3672280Z         u = _url.make_url(url)
2025-10-08T16:01:12.3672483Z     
2025-10-08T16:01:12.3672708Z         u, plugins, kwargs = u._instantiate_plugins(kwargs)
2025-10-08T16:01:12.3672980Z     
2025-10-08T16:01:12.3673147Z         entrypoint = u._get_entrypoint()
2025-10-08T16:01:12.3673419Z         _is_async = kwargs.pop("_is_async", False)
2025-10-08T16:01:12.3673675Z         if _is_async:
2025-10-08T16:01:12.3673911Z             dialect_cls = entrypoint.get_async_dialect_cls(u)
2025-10-08T16:01:12.3674183Z         else:
2025-10-08T16:01:12.3674392Z             dialect_cls = entrypoint.get_dialect_cls(u)
2025-10-08T16:01:12.3674638Z     
2025-10-08T16:01:12.3674830Z         if kwargs.pop("_coerce_config", False):
2025-10-08T16:01:12.3675074Z     
2025-10-08T16:01:12.3675304Z             def pop_kwarg(key: str, default: Optional[Any] = None) -> Any:
2025-10-08T16:01:12.3675634Z                 value = kwargs.pop(key, default)
2025-10-08T16:01:12.3675921Z                 if key in dialect_cls.engine_config_types:
2025-10-08T16:01:12.3676243Z                     value = dialect_cls.engine_config_types[key](value)
2025-10-08T16:01:12.3676533Z                 return value
2025-10-08T16:01:12.3676735Z     
2025-10-08T16:01:12.3676888Z         else:
2025-10-08T16:01:12.3677081Z             pop_kwarg = kwargs.pop  # type: ignore
2025-10-08T16:01:12.3677434Z     
2025-10-08T16:01:12.3677602Z         dialect_args = {}
2025-10-08T16:01:12.3677824Z         # consume dialect arguments from kwargs
2025-10-08T16:01:12.3678097Z         for k in util.get_cls_kwargs(dialect_cls):
2025-10-08T16:01:12.3678355Z             if k in kwargs:
2025-10-08T16:01:12.3678571Z                 dialect_args[k] = pop_kwarg(k)
2025-10-08T16:01:12.3678808Z     
2025-10-08T16:01:12.3678983Z         dbapi = kwargs.pop("module", None)
2025-10-08T16:01:12.3679228Z         if dbapi is None:
2025-10-08T16:01:12.3679425Z             dbapi_args = {}
2025-10-08T16:01:12.3679618Z     
2025-10-08T16:01:12.3679808Z             if "import_dbapi" in dialect_cls.__dict__:
2025-10-08T16:01:12.3680087Z                 dbapi_meth = dialect_cls.import_dbapi
2025-10-08T16:01:12.3680339Z     
2025-10-08T16:01:12.3680564Z             elif hasattr(dialect_cls, "dbapi") and inspect.ismethod(
2025-10-08T16:01:12.3680864Z                 dialect_cls.dbapi
2025-10-08T16:01:12.3681080Z             ):
2025-10-08T16:01:12.3681269Z                 util.warn_deprecated(
2025-10-08T16:01:12.3681553Z                     "The dbapi() classmethod on dialect classes has been "
2025-10-08T16:01:12.3681926Z                     "renamed to import_dbapi().  Implement an import_dbapi() "
2025-10-08T16:01:12.3682429Z                     f"classmethod directly on class {dialect_cls} to remove this "
2025-10-08T16:01:12.3682832Z                     "warning; the old .dbapi() classmethod may be maintained for "
2025-10-08T16:01:12.3683169Z                     "backwards compatibility.",
2025-10-08T16:01:12.3683420Z                     "2.0",
2025-10-08T16:01:12.3683612Z                 )
2025-10-08T16:01:12.3683809Z                 dbapi_meth = dialect_cls.dbapi
2025-10-08T16:01:12.3684153Z             else:
2025-10-08T16:01:12.3684361Z                 dbapi_meth = dialect_cls.import_dbapi
2025-10-08T16:01:12.3684604Z     
2025-10-08T16:01:12.3684797Z             for k in util.get_func_kwargs(dbapi_meth):
2025-10-08T16:01:12.3685060Z                 if k in kwargs:
2025-10-08T16:01:12.3685296Z                     dbapi_args[k] = pop_kwarg(k)
2025-10-08T16:01:12.3685552Z             dbapi = dbapi_meth(**dbapi_args)
2025-10-08T16:01:12.3685785Z     
2025-10-08T16:01:12.3685964Z         dialect_args["dbapi"] = dbapi
2025-10-08T16:01:12.3686183Z     
2025-10-08T16:01:12.3686440Z         dialect_args.setdefault("compiler_linting", compiler.NO_LINTING)
2025-10-08T16:01:12.3686835Z         enable_from_linting = kwargs.pop("enable_from_linting", True)
2025-10-08T16:01:12.3687147Z         if enable_from_linting:
2025-10-08T16:01:12.3687673Z             dialect_args["compiler_linting"] ^= compiler.COLLECT_CARTESIAN_PRODUCTS
2025-10-08T16:01:12.3688014Z     
2025-10-08T16:01:12.3688184Z         for plugin in plugins:
2025-10-08T16:01:12.3688469Z             plugin.handle_dialect_kwargs(dialect_cls, dialect_args)
2025-10-08T16:01:12.3688757Z     
2025-10-08T16:01:12.3688919Z         # create dialect
2025-10-08T16:01:12.3689137Z         dialect = dialect_cls(**dialect_args)
2025-10-08T16:01:12.3689371Z     
2025-10-08T16:01:12.3689546Z         # assemble connection arguments
2025-10-08T16:01:12.3689831Z         (cargs_tup, cparams) = dialect.create_connect_args(u)
2025-10-08T16:01:12.3690151Z         cparams.update(pop_kwarg("connect_args", {}))
2025-10-08T16:01:12.3690405Z     
2025-10-08T16:01:12.3690667Z         if "async_fallback" in cparams and util.asbool(cparams["async_fallback"]):
2025-10-08T16:01:12.3691016Z             util.warn_deprecated(
2025-10-08T16:01:12.3691326Z                 "The async_fallback dialect argument is deprecated and will be "
2025-10-08T16:01:12.3691669Z                 "removed in SQLAlchemy 2.1.",
2025-10-08T16:01:12.3691905Z                 "2.0",
2025-10-08T16:01:12.3692092Z             )
2025-10-08T16:01:12.3692254Z     
2025-10-08T16:01:12.3692438Z         cargs = list(cargs_tup)  # allow mutability
2025-10-08T16:01:12.3692684Z     
2025-10-08T16:01:12.3692860Z         # look for existing pool or create
2025-10-08T16:01:12.3693116Z         pool = pop_kwarg("pool", None)
2025-10-08T16:01:12.3693358Z         if pool is None:
2025-10-08T16:01:12.3693553Z     
2025-10-08T16:01:12.3693705Z             def connect(
2025-10-08T16:01:12.3693979Z                 connection_record: Optional[ConnectionPoolEntry] = None,
2025-10-08T16:01:12.3694298Z             ) -> DBAPIConnection:
2025-10-08T16:01:12.3694539Z                 if dialect._has_events:
2025-10-08T16:01:12.3694813Z                     for fn in dialect.dispatch.do_connect:
2025-10-08T16:01:12.3695097Z                         connection = cast(
2025-10-08T16:01:12.3695354Z                             DBAPIConnection,
2025-10-08T16:01:12.3695642Z                             fn(dialect, connection_record, cargs, cparams),
2025-10-08T16:01:12.3695936Z                         )
2025-10-08T16:01:12.3696162Z                         if connection is not None:
2025-10-08T16:01:12.3696423Z                             return connection
2025-10-08T16:01:12.3696669Z     
2025-10-08T16:01:12.3696868Z                 return dialect.connect(*cargs, **cparams)
2025-10-08T16:01:12.3697118Z     
2025-10-08T16:01:12.3697305Z             creator = pop_kwarg("creator", connect)
2025-10-08T16:01:12.3697751Z     
2025-10-08T16:01:12.3697957Z             poolclass = pop_kwarg("poolclass", None)
2025-10-08T16:01:12.3698366Z             if poolclass is None:
2025-10-08T16:01:12.3698644Z                 poolclass = dialect.get_dialect_pool_class(u)
2025-10-08T16:01:12.3698936Z             pool_args = {"dialect": dialect}
2025-10-08T16:01:12.3699168Z     
2025-10-08T16:01:12.3699401Z             # consume pool arguments from kwargs, translating a few of
2025-10-08T16:01:12.3699706Z             # the arguments
2025-10-08T16:01:12.3699939Z             for k in util.get_cls_kwargs(poolclass):
2025-10-08T16:01:12.3700336Z                 tk = _pool_translate_kwargs.get(k, k)
2025-10-08T16:01:12.3700601Z                 if tk in kwargs:
2025-10-08T16:01:12.3700847Z                     pool_args[k] = pop_kwarg(tk)
2025-10-08T16:01:12.3701083Z     
2025-10-08T16:01:12.3701255Z             for plugin in plugins:
2025-10-08T16:01:12.3701540Z                 plugin.handle_pool_kwargs(poolclass, pool_args)
2025-10-08T16:01:12.3701811Z     
2025-10-08T16:01:12.3702000Z             pool = poolclass(creator, **pool_args)
2025-10-08T16:01:12.3702250Z         else:
2025-10-08T16:01:12.3702438Z             pool._dialect = dialect
2025-10-08T16:01:12.3702660Z     
2025-10-08T16:01:12.3702813Z         if (
2025-10-08T16:01:12.3702994Z             hasattr(pool, "_is_asyncio")
2025-10-08T16:01:12.3703275Z             and pool._is_asyncio is not dialect.is_async
2025-10-08T16:01:12.3703534Z         ):
2025-10-08T16:01:12.3703711Z             raise exc.ArgumentError(
2025-10-08T16:01:12.3703998Z                 f"Pool class {pool.__class__.__name__} cannot be "
2025-10-08T16:01:12.3704331Z                 f"used with {'non-' if not dialect.is_async else ''}"
2025-10-08T16:01:12.3704622Z                 "asyncio engine",
2025-10-08T16:01:12.3704848Z                 code="pcls",
2025-10-08T16:01:12.3705054Z             )
2025-10-08T16:01:12.3705216Z     
2025-10-08T16:01:12.3705375Z         # create engine.
2025-10-08T16:01:12.3705593Z         if not pop_kwarg("future", True):
2025-10-08T16:01:12.3705852Z             raise exc.ArgumentError(
2025-10-08T16:01:12.3706113Z                 "The 'future' parameter passed to "
2025-10-08T16:01:12.3706402Z                 "create_engine() may only be set to True."
2025-10-08T16:01:12.3706658Z             )
2025-10-08T16:01:12.3706815Z     
2025-10-08T16:01:12.3706987Z         engineclass = base.Engine
2025-10-08T16:01:12.3707205Z     
2025-10-08T16:01:12.3707478Z         engine_args = {}
2025-10-08T16:01:12.3707707Z         for k in util.get_cls_kwargs(engineclass):
2025-10-08T16:01:12.3707974Z             if k in kwargs:
2025-10-08T16:01:12.3708199Z                 engine_args[k] = pop_kwarg(k)
2025-10-08T16:01:12.3708429Z     
2025-10-08T16:01:12.3708683Z         # internal flags used by the test suite for instrumenting / proxying
2025-10-08T16:01:12.3709015Z         # engines with mocks etc.
2025-10-08T16:01:12.3709269Z         _initialize = kwargs.pop("_initialize", True)
2025-10-08T16:01:12.3709523Z     
2025-10-08T16:01:12.3709701Z         # all kwargs should be consumed
2025-10-08T16:01:12.3709934Z         if kwargs:
2025-10-08T16:01:12.3710129Z >           raise TypeError(
2025-10-08T16:01:12.3710396Z                 "Invalid argument(s) %s sent to create_engine(), "
2025-10-08T16:01:12.3710740Z                 "using configuration %s/%s/%s.  Please check that the "
2025-10-08T16:01:12.3711101Z                 "keyword arguments are appropriate for this combination "
2025-10-08T16:01:12.3711413Z                 "of components."
2025-10-08T16:01:12.3711641Z                 % (
2025-10-08T16:01:12.3711844Z                     ",".join("'%s'" % k for k in kwargs),
2025-10-08T16:01:12.3712115Z                     dialect.__class__.__name__,
2025-10-08T16:01:12.3712375Z                     pool.__class__.__name__,
2025-10-08T16:01:12.3712619Z                     engineclass.__name__,
2025-10-08T16:01:12.3712850Z                 )
2025-10-08T16:01:12.3713022Z             )
2025-10-08T16:01:12.3713982Z E           TypeError: Invalid argument(s) 'pool_size','max_overflow' sent to create_engine(), using configuration SQLiteDialect_pysqlite/StaticPool/Engine.  Please check that the keyword arguments are appropriate for this combination of components.
2025-10-08T16:01:12.3714773Z 
2025-10-08T16:01:12.3715099Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/create.py:715: TypeError
2025-10-08T16:01:12.3715715Z _ ERROR at setup of TestFieldConsistency.test_api_schema_matches_model_fields __
2025-10-08T16:01:12.3716115Z 
2025-10-08T16:01:12.3716191Z     @pytest.fixture
2025-10-08T16:01:12.3716376Z     def app():
2025-10-08T16:01:12.3716564Z         """Create test app instance"""
2025-10-08T16:01:12.3716816Z >       app = create_app(TestConfig)
2025-10-08T16:01:12.3717048Z               ^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.3717192Z 
2025-10-08T16:01:12.3717283Z tests/test_field_consistency.py:30: 
2025-10-08T16:01:12.3717661Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:12.3717947Z app/__init__.py:141: in create_app
2025-10-08T16:01:12.3718179Z     db.init_app(app)
2025-10-08T16:01:12.3718632Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask_sqlalchemy/extension.py:374: in init_app
2025-10-08T16:01:12.3719170Z     engines[key] = self._make_engine(key, options, app)
2025-10-08T16:01:12.3719457Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.3719961Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask_sqlalchemy/extension.py:665: in _make_engine
2025-10-08T16:01:12.3720509Z     return sa.engine_from_config(options, prefix="")
2025-10-08T16:01:12.3720790Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.3721312Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/create.py:838: in engine_from_config
2025-10-08T16:01:12.3721847Z     return create_engine(url, **options)
2025-10-08T16:01:12.3722092Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.3722331Z <string>:2: in create_engine
2025-10-08T16:01:12.3722534Z     ???
2025-10-08T16:01:12.3722960Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/util/deprecations.py:281: in warned
2025-10-08T16:01:12.3723509Z     return fn(*args, **kwargs)  # type: ignore[no-any-return]
2025-10-08T16:01:12.3723797Z            ^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.3724048Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:12.3724258Z 
2025-10-08T16:01:12.3724424Z url = 'sqlite:///:memory:', kwargs = {'max_overflow': 30, 'pool_size': 10}
2025-10-08T16:01:12.3724763Z u = sqlite:///:memory:, plugins = []
2025-10-08T16:01:12.3725157Z entrypoint = <class 'sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite'>
2025-10-08T16:01:12.3725550Z _is_async = False
2025-10-08T16:01:12.3725842Z pop_kwarg = <function create_engine.<locals>.pop_kwarg at 0x7f308ddc6160>
2025-10-08T16:01:12.3726520Z dialect_args = {'compiler_linting': 1, 'dbapi': <module 'sqlite3.dbapi2' from '/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/sqlite3/dbapi2.py'>}
2025-10-08T16:01:12.3727011Z 
2025-10-08T16:01:12.3727098Z     @util.deprecated_params(
2025-10-08T16:01:12.3727317Z         strategy=(
2025-10-08T16:01:12.3727711Z             "1.4",
2025-10-08T16:01:12.3727994Z             "The :paramref:`_sa.create_engine.strategy` keyword is deprecated, "
2025-10-08T16:01:12.3728390Z             "and the only argument accepted is 'mock'; please use "
2025-10-08T16:01:12.3728752Z             ":func:`.create_mock_engine` going forward.  For general "
2025-10-08T16:01:12.3729141Z             "customization of create_engine which may have been accomplished "
2025-10-08T16:01:12.3729531Z             "using strategies, see :class:`.CreateEnginePlugin`.",
2025-10-08T16:01:12.3729817Z         ),
2025-10-08T16:01:12.3729996Z         empty_in_strategy=(
2025-10-08T16:01:12.3730196Z             "1.4",
2025-10-08T16:01:12.3730463Z             "The :paramref:`_sa.create_engine.empty_in_strategy` keyword is "
2025-10-08T16:01:12.3730985Z             "deprecated, and no longer has any effect.  All IN expressions "
2025-10-08T16:01:12.3731317Z             "are now rendered using "
2025-10-08T16:01:12.3731640Z             'the "expanding parameter" strategy which renders a set of bound'
2025-10-08T16:01:12.3732046Z             'expressions, or an "empty set" SELECT, at statement execution'
2025-10-08T16:01:12.3732357Z             "time.",
2025-10-08T16:01:12.3732532Z         ),
2025-10-08T16:01:12.3732813Z         implicit_returning=(
2025-10-08T16:01:12.3733022Z             "2.0",
2025-10-08T16:01:12.3733280Z             "The :paramref:`_sa.create_engine.implicit_returning` parameter "
2025-10-08T16:01:12.3733657Z             "is deprecated and will be removed in a future release. ",
2025-10-08T16:01:12.3733945Z         ),
2025-10-08T16:01:12.3734100Z     )
2025-10-08T16:01:12.3734360Z     def create_engine(url: Union[str, _url.URL], **kwargs: Any) -> Engine:
2025-10-08T16:01:12.3734728Z         """Create a new :class:`_engine.Engine` instance.
2025-10-08T16:01:12.3734995Z     
2025-10-08T16:01:12.3735268Z         The standard calling form is to send the :ref:`URL <database_urls>` as the
2025-10-08T16:01:12.3735644Z         first positional argument, usually a string
2025-10-08T16:01:12.3735988Z         that indicates database dialect and connection arguments::
2025-10-08T16:01:12.3736273Z     
2025-10-08T16:01:12.3737055Z             engine = create_engine("***localhost/test")
2025-10-08T16:01:12.3737641Z     
2025-10-08T16:01:12.3737907Z         .. note::
2025-10-08T16:01:12.3738190Z     
2025-10-08T16:01:12.3738686Z             Please review :ref:`database_urls` for general guidelines in composing
2025-10-08T16:01:12.3739196Z             URL strings.  In particular, special characters, such as those often
2025-10-08T16:01:12.3739621Z             part of passwords, must be URL encoded to be properly parsed.
2025-10-08T16:01:12.3739933Z     
2025-10-08T16:01:12.3740160Z         Additional keyword arguments may then follow it which
2025-10-08T16:01:12.3740555Z         establish various options on the resulting :class:`_engine.Engine`
2025-10-08T16:01:12.3740967Z         and its underlying :class:`.Dialect` and :class:`_pool.Pool`
2025-10-08T16:01:12.3741282Z         constructs::
2025-10-08T16:01:12.3741464Z     
2025-10-08T16:01:12.3741642Z             engine = create_engine(
2025-10-08T16:01:12.3742140Z                 "***hostname/dbname",
2025-10-08T16:01:12.3742562Z                 pool_recycle=3600,
2025-10-08T16:01:12.3742952Z                 echo=True,
2025-10-08T16:01:12.3743256Z             )
2025-10-08T16:01:12.3743526Z     
2025-10-08T16:01:12.3743821Z         The string form of the URL is
2025-10-08T16:01:12.3744365Z         ``dialect[+driver]://user:password@host/dbname[?key=value..]``, where
2025-10-08T16:01:12.3745044Z         ``dialect`` is a database name such as ``mysql``, ``oracle``,
2025-10-08T16:01:12.3745772Z         ``postgresql``, etc., and ``driver`` the name of a DBAPI, such as
2025-10-08T16:01:12.3746464Z         ``psycopg2``, ``pyodbc``, ``cx_oracle``, etc.  Alternatively,
2025-10-08T16:01:12.3747136Z         the URL can be an instance of :class:`~sqlalchemy.engine.url.URL`.
2025-10-08T16:01:12.3747881Z     
2025-10-08T16:01:12.3748312Z         ``**kwargs`` takes a wide variety of options which are routed
2025-10-08T16:01:12.3749064Z         towards their appropriate components.  Arguments may be specific to
2025-10-08T16:01:12.3749844Z         the :class:`_engine.Engine`, the underlying :class:`.Dialect`,
2025-10-08T16:01:12.3750416Z         as well as the
2025-10-08T16:01:12.3750953Z         :class:`_pool.Pool`.  Specific dialects also accept keyword arguments that
2025-10-08T16:01:12.3751711Z         are unique to that dialect.   Here, we describe the parameters
2025-10-08T16:01:12.3752400Z         that are common to most :func:`_sa.create_engine()` usage.
2025-10-08T16:01:12.3752918Z     
2025-10-08T16:01:12.3753388Z         Once established, the newly resulting :class:`_engine.Engine` will
2025-10-08T16:01:12.3754385Z         request a connection from the underlying :class:`_pool.Pool` once
2025-10-08T16:01:12.3755293Z         :meth:`_engine.Engine.connect` is called, or a method which depends on it
2025-10-08T16:01:12.3756042Z         such as :meth:`_engine.Engine.execute` is invoked.   The
2025-10-08T16:01:12.3756593Z         :class:`_pool.Pool` in turn
2025-10-08T16:01:12.3757172Z         will establish the first actual DBAPI connection when this request
2025-10-08T16:01:12.3758376Z         is received.   The :func:`_sa.create_engine` call itself does **not**
2025-10-08T16:01:12.3759048Z         establish any actual DBAPI connections directly.
2025-10-08T16:01:12.3759533Z     
2025-10-08T16:01:12.3759848Z         .. seealso::
2025-10-08T16:01:12.3760168Z     
2025-10-08T16:01:12.3760467Z             :doc:`/core/engines`
2025-10-08T16:01:12.3760844Z     
2025-10-08T16:01:12.3761198Z             :doc:`/dialects/index`
2025-10-08T16:01:12.3761667Z     
2025-10-08T16:01:12.3762002Z             :ref:`connections_toplevel`
2025-10-08T16:01:12.3762429Z     
2025-10-08T16:01:12.3762857Z         :param connect_args: a dictionary of options which will be
2025-10-08T16:01:12.3763533Z             passed directly to the DBAPI's ``connect()`` method as
2025-10-08T16:01:12.3764151Z             additional keyword arguments.  See the example
2025-10-08T16:01:12.3764672Z             at :ref:`custom_dbapi_args`.
2025-10-08T16:01:12.3765094Z     
2025-10-08T16:01:12.3765545Z         :param creator: a callable which returns a DBAPI connection.
2025-10-08T16:01:12.3766250Z             This creation function will be passed to the underlying
2025-10-08T16:01:12.3766950Z             connection pool and will be used to create all new database
2025-10-08T16:01:12.3767851Z             connections. Usage of this function causes connection
2025-10-08T16:01:12.3768553Z             parameters specified in the URL argument to be bypassed.
2025-10-08T16:01:12.3769113Z     
2025-10-08T16:01:12.3783506Z             This hook is not as flexible as the newer
2025-10-08T16:01:12.3783989Z             :meth:`_events.DialectEvents.do_connect` hook which allows complete
2025-10-08T16:01:12.3784443Z             control over how a connection is made to the database, given the full
2025-10-08T16:01:12.3784825Z             set of URL arguments and state beforehand.
2025-10-08T16:01:12.3785089Z     
2025-10-08T16:01:12.3785263Z             .. seealso::
2025-10-08T16:01:12.3785456Z     
2025-10-08T16:01:12.3785863Z                 :meth:`_events.DialectEvents.do_connect` - event hook that allows
2025-10-08T16:01:12.3786469Z                 full control over DBAPI connection mechanics.
2025-10-08T16:01:12.3786927Z     
2025-10-08T16:01:12.3787223Z                 :ref:`custom_dbapi_args`
2025-10-08T16:01:12.3787762Z     
2025-10-08T16:01:12.3788007Z         :param echo=False: if True, the Engine will log all statements
2025-10-08T16:01:12.3788411Z             as well as a ``repr()`` of their parameter lists to the default log
2025-10-08T16:01:12.3788837Z             handler, which defaults to ``sys.stdout`` for output.   If set to the
2025-10-08T16:01:12.3789270Z             string ``"debug"``, result rows will be printed to the standard output
2025-10-08T16:01:12.3789674Z             as well. The ``echo`` attribute of ``Engine`` can be modified at any
2025-10-08T16:01:12.3790067Z             time to turn logging on and off; direct control of logging is also
2025-10-08T16:01:12.3790447Z             available using the standard Python ``logging`` module.
2025-10-08T16:01:12.3790732Z     
2025-10-08T16:01:12.3790904Z             .. seealso::
2025-10-08T16:01:12.3791103Z     
2025-10-08T16:01:12.3791335Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.3791651Z                 logging.
2025-10-08T16:01:12.3791843Z     
2025-10-08T16:01:12.3791991Z     
2025-10-08T16:01:12.3792229Z         :param echo_pool=False: if True, the connection pool will log
2025-10-08T16:01:12.3792631Z             informational output such as when connections are invalidated
2025-10-08T16:01:12.3793224Z             as well as when connections are recycled to the default log handler,
2025-10-08T16:01:12.3793657Z             which defaults to ``sys.stdout`` for output.   If set to the string
2025-10-08T16:01:12.3794065Z             ``"debug"``, the logging will include pool checkouts and checkins.
2025-10-08T16:01:12.3794491Z             Direct control of logging is also available using the standard Python
2025-10-08T16:01:12.3794949Z             ``logging`` module.
2025-10-08T16:01:12.3795161Z     
2025-10-08T16:01:12.3795330Z             .. seealso::
2025-10-08T16:01:12.3795522Z     
2025-10-08T16:01:12.3795759Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.3796070Z                 logging.
2025-10-08T16:01:12.3796259Z     
2025-10-08T16:01:12.3796410Z     
2025-10-08T16:01:12.3796657Z         :param empty_in_strategy:   No longer used; SQLAlchemy now uses
2025-10-08T16:01:12.3797007Z             "empty set" behavior for IN in all cases.
2025-10-08T16:01:12.3797264Z     
2025-10-08T16:01:12.3797743Z         :param enable_from_linting: defaults to True.  Will emit a warning
2025-10-08T16:01:12.3798166Z             if a given SELECT statement is found to have un-linked FROM elements
2025-10-08T16:01:12.3798520Z             which would cause a cartesian product.
2025-10-08T16:01:12.3798766Z     
2025-10-08T16:01:12.3798941Z             .. versionadded:: 1.4
2025-10-08T16:01:12.3799173Z     
2025-10-08T16:01:12.3799334Z             .. seealso::
2025-10-08T16:01:12.3799528Z     
2025-10-08T16:01:12.3799700Z                 :ref:`change_4737`
2025-10-08T16:01:12.3799915Z     
2025-10-08T16:01:12.3800178Z         :param execution_options: Dictionary execution options which will
2025-10-08T16:01:12.3800537Z             be applied to all connections.  See
2025-10-08T16:01:12.3800868Z             :meth:`~sqlalchemy.engine.Connection.execution_options`
2025-10-08T16:01:12.3801175Z     
2025-10-08T16:01:12.3801411Z         :param future: Use the 2.0 style :class:`_engine.Engine` and
2025-10-08T16:01:12.3801738Z             :class:`_engine.Connection` API.
2025-10-08T16:01:12.3801980Z     
2025-10-08T16:01:12.3802218Z             As of SQLAlchemy 2.0, this parameter is present for backwards
2025-10-08T16:01:12.3802627Z             compatibility only and must remain at its default value of ``True``.
2025-10-08T16:01:12.3802950Z     
2025-10-08T16:01:12.3803186Z             The :paramref:`_sa.create_engine.future` parameter will be
2025-10-08T16:01:12.3803578Z             deprecated in a subsequent 2.x release and eventually removed.
2025-10-08T16:01:12.3803876Z     
2025-10-08T16:01:12.3804040Z             .. versionadded:: 1.4
2025-10-08T16:01:12.3804256Z     
2025-10-08T16:01:12.3804496Z             .. versionchanged:: 2.0 All :class:`_engine.Engine` objects are
2025-10-08T16:01:12.3804901Z                "future" style engines and there is no longer a ``future=False``
2025-10-08T16:01:12.3805229Z                mode of operation.
2025-10-08T16:01:12.3805444Z     
2025-10-08T16:01:12.3805607Z             .. seealso::
2025-10-08T16:01:12.3805799Z     
2025-10-08T16:01:12.3805980Z                 :ref:`migration_20_toplevel`
2025-10-08T16:01:12.3806210Z     
2025-10-08T16:01:12.3806490Z         :param hide_parameters: Boolean, when set to True, SQL statement parameters
2025-10-08T16:01:12.3806935Z             will not be displayed in INFO logging nor will they be formatted into
2025-10-08T16:01:12.3807497Z             the string representation of :class:`.StatementError` objects.
2025-10-08T16:01:12.3807854Z     
2025-10-08T16:01:12.3808031Z             .. versionadded:: 1.3.8
2025-10-08T16:01:12.3808254Z     
2025-10-08T16:01:12.3808414Z             .. seealso::
2025-10-08T16:01:12.3808607Z     
2025-10-08T16:01:12.3808838Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.3809138Z                 logging.
2025-10-08T16:01:12.3809327Z     
2025-10-08T16:01:12.3809725Z         :param implicit_returning=True:  Legacy parameter that may only be set
2025-10-08T16:01:12.3810151Z             to True. In SQLAlchemy 2.0, this parameter does nothing. In order to
2025-10-08T16:01:12.3810555Z             disable "implicit returning" for statements invoked by the ORM,
2025-10-08T16:01:12.3810922Z             configure this on a per-table basis using the
2025-10-08T16:01:12.3811246Z             :paramref:`.Table.implicit_returning` parameter.
2025-10-08T16:01:12.3811623Z     
2025-10-08T16:01:12.3811779Z     
2025-10-08T16:01:12.3812047Z         :param insertmanyvalues_page_size: number of rows to format into an
2025-10-08T16:01:12.3812491Z          INSERT statement when the statement uses "insertmanyvalues" mode, which is
2025-10-08T16:01:12.3812938Z          a paged form of bulk insert that is used for many backends when using
2025-10-08T16:01:12.3813380Z          :term:`executemany` execution typically in conjunction with RETURNING.
2025-10-08T16:01:12.3813817Z          Defaults to 1000, but may also be subject to dialect-specific limiting
2025-10-08T16:01:12.3814237Z          factors which may override this value on a per-statement basis.
2025-10-08T16:01:12.3814558Z     
2025-10-08T16:01:12.3814738Z          .. versionadded:: 2.0
2025-10-08T16:01:12.3814942Z     
2025-10-08T16:01:12.3815104Z          .. seealso::
2025-10-08T16:01:12.3815280Z     
2025-10-08T16:01:12.3815459Z             :ref:`engine_insertmanyvalues`
2025-10-08T16:01:12.3815708Z     
2025-10-08T16:01:12.3815929Z             :ref:`engine_insertmanyvalues_page_size`
2025-10-08T16:01:12.3816180Z     
2025-10-08T16:01:12.3816480Z             :paramref:`_engine.Connection.execution_options.insertmanyvalues_page_size`
2025-10-08T16:01:12.3816846Z     
2025-10-08T16:01:12.3817085Z         :param isolation_level: optional string name of an isolation level
2025-10-08T16:01:12.3817675Z             which will be set on all new connections unconditionally.
2025-10-08T16:01:12.3818062Z             Isolation levels are typically some subset of the string names
2025-10-08T16:01:12.3818408Z             ``"SERIALIZABLE"``, ``"REPEATABLE READ"``,
2025-10-08T16:01:12.3818744Z             ``"READ COMMITTED"``, ``"READ UNCOMMITTED"`` and ``"AUTOCOMMIT"``
2025-10-08T16:01:12.3819064Z             based on backend.
2025-10-08T16:01:12.3819277Z     
2025-10-08T16:01:12.3819524Z             The :paramref:`_sa.create_engine.isolation_level` parameter is
2025-10-08T16:01:12.3819849Z             in contrast to the
2025-10-08T16:01:12.3820141Z             :paramref:`.Connection.execution_options.isolation_level`
2025-10-08T16:01:12.3820502Z             execution option, which may be set on an individual
2025-10-08T16:01:12.3820863Z             :class:`.Connection`, as well as the same parameter passed to
2025-10-08T16:01:12.3821270Z             :meth:`.Engine.execution_options`, where it may be used to create
2025-10-08T16:01:12.3821692Z             multiple engines with different isolation levels that share a common
2025-10-08T16:01:12.3822046Z             connection pool and dialect.
2025-10-08T16:01:12.3822288Z     
2025-10-08T16:01:12.3822478Z             .. versionchanged:: 2.0 The
2025-10-08T16:01:12.3822767Z                :paramref:`_sa.create_engine.isolation_level`
2025-10-08T16:01:12.3823140Z                parameter has been generalized to work on all dialects which support
2025-10-08T16:01:12.3823571Z                the concept of isolation level, and is provided as a more succinct,
2025-10-08T16:01:12.3823987Z                up front configuration switch in contrast to the execution option
2025-10-08T16:01:12.3824350Z                which is more of an ad-hoc programmatic option.
2025-10-08T16:01:12.3824617Z     
2025-10-08T16:01:12.3824789Z             .. seealso::
2025-10-08T16:01:12.3824980Z     
2025-10-08T16:01:12.3825160Z                 :ref:`dbapi_autocommit`
2025-10-08T16:01:12.3825392Z     
2025-10-08T16:01:12.3825620Z         :param json_deserializer: for dialects that support the
2025-10-08T16:01:12.3825927Z             :class:`_types.JSON`
2025-10-08T16:01:12.3826376Z             datatype, this is a Python callable that will convert a JSON string
2025-10-08T16:01:12.3826811Z             to a Python object.  By default, the Python ``json.loads`` function is
2025-10-08T16:01:12.3827130Z             used.
2025-10-08T16:01:12.3827319Z     
2025-10-08T16:01:12.3827680Z             .. versionchanged:: 1.3.7  The SQLite dialect renamed this from
2025-10-08T16:01:12.3828006Z                ``_json_deserializer``.
2025-10-08T16:01:12.3828351Z     
2025-10-08T16:01:12.3828621Z         :param json_serializer: for dialects that support the :class:`_types.JSON`
2025-10-08T16:01:12.3829060Z             datatype, this is a Python callable that will render a given object
2025-10-08T16:01:12.3829464Z             as JSON.   By default, the Python ``json.dumps`` function is used.
2025-10-08T16:01:12.3829772Z     
2025-10-08T16:01:12.3830022Z             .. versionchanged:: 1.3.7  The SQLite dialect renamed this from
2025-10-08T16:01:12.3830338Z                ``_json_serializer``.
2025-10-08T16:01:12.3830560Z     
2025-10-08T16:01:12.3830712Z     
2025-10-08T16:01:12.3830949Z         :param label_length=None: optional integer value which limits
2025-10-08T16:01:12.3831338Z             the size of dynamically generated column labels to that many
2025-10-08T16:01:12.3831699Z             characters. If less than 6, labels are generated as
2025-10-08T16:01:12.3832016Z             "_(counter)". If ``None``, the value of
2025-10-08T16:01:12.3832354Z             ``dialect.max_identifier_length``, which may be affected via the
2025-10-08T16:01:12.3832753Z             :paramref:`_sa.create_engine.max_identifier_length` parameter,
2025-10-08T16:01:12.3833087Z             is used instead.   The value of
2025-10-08T16:01:12.3833363Z             :paramref:`_sa.create_engine.label_length`
2025-10-08T16:01:12.3833635Z             may not be larger than that of
2025-10-08T16:01:12.3833931Z             :paramref:`_sa.create_engine.max_identfier_length`.
2025-10-08T16:01:12.3834203Z     
2025-10-08T16:01:12.3834361Z             .. seealso::
2025-10-08T16:01:12.3834562Z     
2025-10-08T16:01:12.3834777Z                 :paramref:`_sa.create_engine.max_identifier_length`
2025-10-08T16:01:12.3835048Z     
2025-10-08T16:01:12.3835294Z         :param logging_name:  String identifier which will be used within
2025-10-08T16:01:12.3835671Z             the "name" field of logging records generated within the
2025-10-08T16:01:12.3836029Z             "sqlalchemy.engine" logger. Defaults to a hexstring of the
2025-10-08T16:01:12.3836342Z             object's id.
2025-10-08T16:01:12.3836534Z     
2025-10-08T16:01:12.3836696Z             .. seealso::
2025-10-08T16:01:12.3836878Z     
2025-10-08T16:01:12.3837111Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.3837515Z                 logging.
2025-10-08T16:01:12.3837699Z     
2025-10-08T16:01:12.3837946Z                 :paramref:`_engine.Connection.execution_options.logging_token`
2025-10-08T16:01:12.3838257Z     
2025-10-08T16:01:12.3838523Z         :param max_identifier_length: integer; override the max_identifier_length
2025-10-08T16:01:12.3838960Z             determined by the dialect.  if ``None`` or zero, has no effect.  This
2025-10-08T16:01:12.3839377Z             is the database's configured maximum number of characters that may be
2025-10-08T16:01:12.3839790Z             used in a SQL identifier such as a table name, column name, or label
2025-10-08T16:01:12.3840201Z             name. All dialects determine this value automatically, however in the
2025-10-08T16:01:12.3840610Z             case of a new database version for which this value has changed but
2025-10-08T16:01:12.3841016Z             SQLAlchemy's dialect has not been adjusted, the value may be passed
2025-10-08T16:01:12.3841329Z             here.
2025-10-08T16:01:12.3841504Z     
2025-10-08T16:01:12.3841682Z             .. versionadded:: 1.3.9
2025-10-08T16:01:12.3841911Z     
2025-10-08T16:01:12.3842069Z             .. seealso::
2025-10-08T16:01:12.3842258Z     
2025-10-08T16:01:12.3842564Z                 :paramref:`_sa.create_engine.label_length`
2025-10-08T16:01:12.3842818Z     
2025-10-08T16:01:12.3843050Z         :param max_overflow=10: the number of connections to allow in
2025-10-08T16:01:12.3843434Z             connection pool "overflow", that is connections that can be
2025-10-08T16:01:12.3843817Z             opened above and beyond the pool_size setting, which defaults
2025-10-08T16:01:12.3844372Z             to five. this is only used with :class:`~sqlalchemy.pool.QueuePool`.
2025-10-08T16:01:12.3844689Z     
2025-10-08T16:01:12.3844936Z         :param module=None: reference to a Python module object (the module
2025-10-08T16:01:12.3845385Z             itself, not its string name).  Specifies an alternate DBAPI module to
2025-10-08T16:01:12.3845783Z             be used by the engine's dialect.  Each sub-dialect references a
2025-10-08T16:01:12.3846174Z             specific DBAPI which will be imported before first connect.  This
2025-10-08T16:01:12.3846593Z             parameter causes the import to be bypassed, and the given module to
2025-10-08T16:01:12.3847000Z             be used instead. Can be used for testing of DBAPIs as well as to
2025-10-08T16:01:12.3847598Z             inject "mock" DBAPI implementations into the :class:`_engine.Engine`.
2025-10-08T16:01:12.3847928Z     
2025-10-08T16:01:12.3848294Z         :param paramstyle=None: The `paramstyle <https://legacy.python.org/dev/peps/pep-0249/#paramstyle>`_
2025-10-08T16:01:12.3848827Z             to use when rendering bound parameters.  This style defaults to the
2025-10-08T16:01:12.3849250Z             one recommended by the DBAPI itself, which is retrieved from the
2025-10-08T16:01:12.3849664Z             ``.paramstyle`` attribute of the DBAPI.  However, most DBAPIs accept
2025-10-08T16:01:12.3850076Z             more than one paramstyle, and in particular it may be desirable
2025-10-08T16:01:12.3850489Z             to change a "named" paramstyle into a "positional" one, or vice versa.
2025-10-08T16:01:12.3850903Z             When this attribute is passed, it should be one of the values
2025-10-08T16:01:12.3851261Z             ``"qmark"``, ``"numeric"``, ``"named"``, ``"format"`` or
2025-10-08T16:01:12.3851618Z             ``"pyformat"``, and should correspond to a parameter style known
2025-10-08T16:01:12.3851962Z             to be supported by the DBAPI in use.
2025-10-08T16:01:12.3852208Z     
2025-10-08T16:01:12.3852439Z         :param pool=None: an already-constructed instance of
2025-10-08T16:01:12.3852761Z             :class:`~sqlalchemy.pool.Pool`, such as a
2025-10-08T16:01:12.3853112Z             :class:`~sqlalchemy.pool.QueuePool` instance. If non-None, this
2025-10-08T16:01:12.3853501Z             pool will be used directly as the underlying connection pool
2025-10-08T16:01:12.3853880Z             for the engine, bypassing whatever connection parameters are
2025-10-08T16:01:12.3854255Z             present in the URL argument. For information on constructing
2025-10-08T16:01:12.3854627Z             connection pools manually, see :ref:`pooling_toplevel`.
2025-10-08T16:01:12.3854919Z     
2025-10-08T16:01:12.3855159Z         :param poolclass=None: a :class:`~sqlalchemy.pool.Pool`
2025-10-08T16:01:12.3855303Z             subclass, which will be used to create a connection pool
2025-10-08T16:01:12.3855468Z             instance using the connection parameters given in the URL. Note
2025-10-08T16:01:12.3855598Z             this differs from ``pool`` in that you don't actually
2025-10-08T16:01:12.3855762Z             instantiate the pool in this case, you just indicate what type
2025-10-08T16:01:12.3855851Z             of pool to be used.
2025-10-08T16:01:12.3855919Z     
2025-10-08T16:01:12.3856088Z         :param pool_logging_name:  String identifier which will be used within
2025-10-08T16:01:12.3856224Z            the "name" field of logging records generated within the
2025-10-08T16:01:12.3856390Z            "sqlalchemy.pool" logger. Defaults to a hexstring of the object's
2025-10-08T16:01:12.3856467Z            id.
2025-10-08T16:01:12.3856655Z     
2025-10-08T16:01:12.3856740Z            .. seealso::
2025-10-08T16:01:12.3856811Z     
2025-10-08T16:01:12.3856957Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.3857033Z                 logging.
2025-10-08T16:01:12.3857105Z     
2025-10-08T16:01:12.3857278Z         :param pool_pre_ping: boolean, if True will enable the connection pool
2025-10-08T16:01:12.3857765Z             "pre-ping" feature that tests connections for liveness upon
2025-10-08T16:01:12.3857854Z             each checkout.
2025-10-08T16:01:12.3857921Z     
2025-10-08T16:01:12.3858017Z             .. versionadded:: 1.2
2025-10-08T16:01:12.3858083Z     
2025-10-08T16:01:12.3858160Z             .. seealso::
2025-10-08T16:01:12.3858227Z     
2025-10-08T16:01:12.3858332Z                 :ref:`pool_disconnects_pessimistic`
2025-10-08T16:01:12.3858395Z     
2025-10-08T16:01:12.3858544Z         :param pool_size=5: the number of connections to keep open
2025-10-08T16:01:12.3858657Z             inside the connection pool. This used with
2025-10-08T16:01:12.3858765Z             :class:`~sqlalchemy.pool.QueuePool` as
2025-10-08T16:01:12.3858934Z             well as :class:`~sqlalchemy.pool.SingletonThreadPool`.  With
2025-10-08T16:01:12.3859085Z             :class:`~sqlalchemy.pool.QueuePool`, a ``pool_size`` setting
2025-10-08T16:01:12.3859251Z             of 0 indicates no limit; to disable pooling, set ``poolclass`` to
2025-10-08T16:01:12.3859371Z             :class:`~sqlalchemy.pool.NullPool` instead.
2025-10-08T16:01:12.3859438Z     
2025-10-08T16:01:12.3859598Z         :param pool_recycle=-1: this setting causes the pool to recycle
2025-10-08T16:01:12.3859752Z             connections after the given number of seconds has passed. It
2025-10-08T16:01:12.3859894Z             defaults to -1, or no timeout. For example, setting to 3600
2025-10-08T16:01:12.3860048Z             means connections will be recycled after one hour. Note that
2025-10-08T16:01:12.3860194Z             MySQL in particular will disconnect automatically if no
2025-10-08T16:01:12.3860358Z             activity is detected on a connection for eight hours (although
2025-10-08T16:01:12.3860516Z             this is configurable with the MySQLDB connection itself and the
2025-10-08T16:01:12.3860616Z             server configuration as well).
2025-10-08T16:01:12.3860687Z     
2025-10-08T16:01:12.3860765Z             .. seealso::
2025-10-08T16:01:12.3860837Z     
2025-10-08T16:01:12.3860934Z                 :ref:`pool_setting_recycle`
2025-10-08T16:01:12.3861000Z     
2025-10-08T16:01:12.3861116Z         :param pool_reset_on_return='rollback': set the
2025-10-08T16:01:12.3861288Z             :paramref:`_pool.Pool.reset_on_return` parameter of the underlying
2025-10-08T16:01:12.3861426Z             :class:`_pool.Pool` object, which can be set to the values
2025-10-08T16:01:12.3861528Z             ``"rollback"``, ``"commit"``, or ``None``.
2025-10-08T16:01:12.3861593Z     
2025-10-08T16:01:12.3861667Z             .. seealso::
2025-10-08T16:01:12.3861742Z     
2025-10-08T16:01:12.3861832Z                 :ref:`pool_reset_on_return`
2025-10-08T16:01:12.3861898Z     
2025-10-08T16:01:12.3862056Z                 :ref:`dbapi_autocommit_skip_rollback` - a more modern approach
2025-10-08T16:01:12.3862192Z                 to using connections with no transactional instructions
2025-10-08T16:01:12.3862258Z     
2025-10-08T16:01:12.3862416Z         :param pool_timeout=30: number of seconds to wait before giving
2025-10-08T16:01:12.3862556Z             up on getting a connection from the pool. This is only used
2025-10-08T16:01:12.3862735Z             with :class:`~sqlalchemy.pool.QueuePool`. This can be a float but is
2025-10-08T16:01:12.3862904Z             subject to the limitations of Python time functions which may not be
2025-10-08T16:01:12.3863006Z             reliable in the tens of milliseconds.
2025-10-08T16:01:12.3863079Z     
2025-10-08T16:01:12.3863344Z             .. note: don't use 30.0 above, it seems to break with the :param tag
2025-10-08T16:01:12.3863417Z     
2025-10-08T16:01:12.3863598Z         :param pool_use_lifo=False: use LIFO (last-in-first-out) when retrieving
2025-10-08T16:01:12.3863731Z             connections from :class:`.QueuePool` instead of FIFO
2025-10-08T16:01:12.3863902Z             (first-in-first-out). Using LIFO, a server-side timeout scheme can
2025-10-08T16:01:12.3864072Z             reduce the number of connections used during non- peak   periods of
2025-10-08T16:01:12.3864347Z             use.   When planning for server-side timeouts, ensure that a recycle or
2025-10-08T16:01:12.3864525Z             pre-ping strategy is in use to gracefully   handle stale connections.
2025-10-08T16:01:12.3864590Z     
2025-10-08T16:01:12.3864679Z               .. versionadded:: 1.3
2025-10-08T16:01:12.3864750Z     
2025-10-08T16:01:12.3864829Z               .. seealso::
2025-10-08T16:01:12.3864899Z     
2025-10-08T16:01:12.3864983Z                 :ref:`pool_use_lifo`
2025-10-08T16:01:12.3865055Z     
2025-10-08T16:01:12.3865153Z                 :ref:`pool_disconnects`
2025-10-08T16:01:12.3865219Z     
2025-10-08T16:01:12.3865360Z         :param plugins: string list of plugin names to load.  See
2025-10-08T16:01:12.3865481Z             :class:`.CreateEnginePlugin` for background.
2025-10-08T16:01:12.3865547Z     
2025-10-08T16:01:12.3865632Z             .. versionadded:: 1.2.3
2025-10-08T16:01:12.3865702Z     
2025-10-08T16:01:12.3865879Z         :param query_cache_size: size of the cache used to cache the SQL string
2025-10-08T16:01:12.3866002Z          form of queries.  Set to zero to disable caching.
2025-10-08T16:01:12.3866068Z     
2025-10-08T16:01:12.3866240Z          The cache is pruned of its least recently used items when its size reaches
2025-10-08T16:01:12.3866402Z          N * 1.5.  Defaults to 500, meaning the cache will always store at least
2025-10-08T16:01:12.3866570Z          500 SQL statements when filled, and will grow up to 750 items at which
2025-10-08T16:01:12.3866734Z          point it is pruned back down to 500 by removing the 250 least recently
2025-10-08T16:01:12.3866815Z          used items.
2025-10-08T16:01:12.3866879Z     
2025-10-08T16:01:12.3867049Z          Caching is accomplished on a per-statement basis by generating a
2025-10-08T16:01:12.3867217Z          cache key that represents the statement's structure, then generating
2025-10-08T16:01:12.3867486Z          string SQL for the current dialect only if that key is not present
2025-10-08T16:01:12.3867660Z          in the cache.   All statements support caching, however some features
2025-10-08T16:01:12.3867818Z          such as an INSERT with a large set of parameters will intentionally
2025-10-08T16:01:12.3867974Z          bypass the cache.   SQL logging will indicate statistics for each
2025-10-08T16:01:12.3868116Z          statement whether or not it were pull from the cache.
2025-10-08T16:01:12.3868181Z     
2025-10-08T16:01:12.3868362Z          .. note:: some ORM functions related to unit-of-work persistence as well
2025-10-08T16:01:12.3868524Z             as some attribute loading strategies will make use of individual
2025-10-08T16:01:12.3868641Z             per-mapper caches outside of the main cache.
2025-10-08T16:01:12.3868711Z     
2025-10-08T16:01:12.3868775Z     
2025-10-08T16:01:12.3868849Z          .. seealso::
2025-10-08T16:01:12.3868919Z     
2025-10-08T16:01:12.3869002Z             :ref:`sql_caching`
2025-10-08T16:01:12.3869070Z     
2025-10-08T16:01:12.3869161Z          .. versionadded:: 1.4
2025-10-08T16:01:12.3869227Z     
2025-10-08T16:01:12.3869384Z         :param skip_autocommit_rollback: When True, the dialect will
2025-10-08T16:01:12.3869565Z            unconditionally skip all calls to the DBAPI ``connection.rollback()``
2025-10-08T16:01:12.3869741Z            method if the DBAPI connection is confirmed to be in "autocommit" mode.
2025-10-08T16:01:12.3869924Z            The availability of this feature is dialect specific; if not available,
2025-10-08T16:01:12.3870228Z            a ``NotImplementedError`` is raised by the dialect when rollback occurs.
2025-10-08T16:01:12.3870298Z     
2025-10-08T16:01:12.3870381Z            .. seealso::
2025-10-08T16:01:12.3870447Z     
2025-10-08T16:01:12.3870552Z                 :ref:`dbapi_autocommit_skip_rollback`
2025-10-08T16:01:12.3870623Z     
2025-10-08T16:01:12.3870710Z            .. versionadded:: 2.0.43
2025-10-08T16:01:12.3870792Z     
2025-10-08T16:01:12.3870974Z         :param use_insertmanyvalues: True by default, use the "insertmanyvalues"
2025-10-08T16:01:12.3871242Z          execution style for INSERT..RETURNING statements by default.
2025-10-08T16:01:12.3871314Z     
2025-10-08T16:01:12.3871398Z          .. versionadded:: 2.0
2025-10-08T16:01:12.3871468Z     
2025-10-08T16:01:12.3871547Z          .. seealso::
2025-10-08T16:01:12.3871613Z     
2025-10-08T16:01:12.3871710Z             :ref:`engine_insertmanyvalues`
2025-10-08T16:01:12.3871782Z     
2025-10-08T16:01:12.3871853Z         """  # noqa
2025-10-08T16:01:12.3871923Z     
2025-10-08T16:01:12.3872014Z         if "strategy" in kwargs:
2025-10-08T16:01:12.3872109Z             strat = kwargs.pop("strategy")
2025-10-08T16:01:12.3872195Z             if strat == "mock":
2025-10-08T16:01:12.3872285Z                 # this case is deprecated
2025-10-08T16:01:12.3872426Z                 return create_mock_engine(url, **kwargs)  # type: ignore
2025-10-08T16:01:12.3872498Z             else:
2025-10-08T16:01:12.3872644Z                 raise exc.ArgumentError("unknown strategy: %r" % strat)
2025-10-08T16:01:12.3872709Z     
2025-10-08T16:01:12.3872816Z         kwargs.pop("empty_in_strategy", None)
2025-10-08T16:01:12.3872884Z     
2025-10-08T16:01:12.3872971Z         # create url.URL object
2025-10-08T16:01:12.3873051Z         u = _url.make_url(url)
2025-10-08T16:01:12.3873121Z     
2025-10-08T16:01:12.3873255Z         u, plugins, kwargs = u._instantiate_plugins(kwargs)
2025-10-08T16:01:12.3873321Z     
2025-10-08T16:01:12.3873414Z         entrypoint = u._get_entrypoint()
2025-10-08T16:01:12.3873528Z         _is_async = kwargs.pop("_is_async", False)
2025-10-08T16:01:12.3873603Z         if _is_async:
2025-10-08T16:01:12.3873732Z             dialect_cls = entrypoint.get_async_dialect_cls(u)
2025-10-08T16:01:12.3873806Z         else:
2025-10-08T16:01:12.3873915Z             dialect_cls = entrypoint.get_dialect_cls(u)
2025-10-08T16:01:12.3873985Z     
2025-10-08T16:01:12.3874086Z         if kwargs.pop("_coerce_config", False):
2025-10-08T16:01:12.3874156Z     
2025-10-08T16:01:12.3874314Z             def pop_kwarg(key: str, default: Optional[Any] = None) -> Any:
2025-10-08T16:01:12.3874415Z                 value = kwargs.pop(key, default)
2025-10-08T16:01:12.3874523Z                 if key in dialect_cls.engine_config_types:
2025-10-08T16:01:12.3874655Z                     value = dialect_cls.engine_config_types[key](value)
2025-10-08T16:01:12.3874736Z                 return value
2025-10-08T16:01:12.3874802Z     
2025-10-08T16:01:12.3874875Z         else:
2025-10-08T16:01:12.3874979Z             pop_kwarg = kwargs.pop  # type: ignore
2025-10-08T16:01:12.3875052Z     
2025-10-08T16:01:12.3875132Z         dialect_args = {}
2025-10-08T16:01:12.3875233Z         # consume dialect arguments from kwargs
2025-10-08T16:01:12.3875337Z         for k in util.get_cls_kwargs(dialect_cls):
2025-10-08T16:01:12.3875414Z             if k in kwargs:
2025-10-08T16:01:12.3875510Z                 dialect_args[k] = pop_kwarg(k)
2025-10-08T16:01:12.3875586Z     
2025-10-08T16:01:12.3875679Z         dbapi = kwargs.pop("module", None)
2025-10-08T16:01:12.3875759Z         if dbapi is None:
2025-10-08T16:01:12.3875842Z             dbapi_args = {}
2025-10-08T16:01:12.3875909Z     
2025-10-08T16:01:12.3876014Z             if "import_dbapi" in dialect_cls.__dict__:
2025-10-08T16:01:12.3876122Z                 dbapi_meth = dialect_cls.import_dbapi
2025-10-08T16:01:12.3876188Z     
2025-10-08T16:01:12.3876333Z             elif hasattr(dialect_cls, "dbapi") and inspect.ismethod(
2025-10-08T16:01:12.3876419Z                 dialect_cls.dbapi
2025-10-08T16:01:12.3876583Z             ):
2025-10-08T16:01:12.3876681Z                 util.warn_deprecated(
2025-10-08T16:01:12.3876817Z                     "The dbapi() classmethod on dialect classes has been "
2025-10-08T16:01:12.3876965Z                     "renamed to import_dbapi().  Implement an import_dbapi() "
2025-10-08T16:01:12.3877130Z                     f"classmethod directly on class {dialect_cls} to remove this "
2025-10-08T16:01:12.3877458Z                     "warning; the old .dbapi() classmethod may be maintained for "
2025-10-08T16:01:12.3877564Z                     "backwards compatibility.",
2025-10-08T16:01:12.3877638Z                     "2.0",
2025-10-08T16:01:12.3877706Z                 )
2025-10-08T16:01:12.3877804Z                 dbapi_meth = dialect_cls.dbapi
2025-10-08T16:01:12.3877872Z             else:
2025-10-08T16:01:12.3877976Z                 dbapi_meth = dialect_cls.import_dbapi
2025-10-08T16:01:12.3878047Z     
2025-10-08T16:01:12.3878150Z             for k in util.get_func_kwargs(dbapi_meth):
2025-10-08T16:01:12.3878235Z                 if k in kwargs:
2025-10-08T16:01:12.3878337Z                     dbapi_args[k] = pop_kwarg(k)
2025-10-08T16:01:12.3878430Z             dbapi = dbapi_meth(**dbapi_args)
2025-10-08T16:01:12.3878500Z     
2025-10-08T16:01:12.3878592Z         dialect_args["dbapi"] = dbapi
2025-10-08T16:01:12.3878658Z     
2025-10-08T16:01:12.3878827Z         dialect_args.setdefault("compiler_linting", compiler.NO_LINTING)
2025-10-08T16:01:12.3878985Z         enable_from_linting = kwargs.pop("enable_from_linting", True)
2025-10-08T16:01:12.3879069Z         if enable_from_linting:
2025-10-08T16:01:12.3879260Z             dialect_args["compiler_linting"] ^= compiler.COLLECT_CARTESIAN_PRODUCTS
2025-10-08T16:01:12.3879327Z     
2025-10-08T16:01:12.3879411Z         for plugin in plugins:
2025-10-08T16:01:12.3879563Z             plugin.handle_dialect_kwargs(dialect_cls, dialect_args)
2025-10-08T16:01:12.3879629Z     
2025-10-08T16:01:12.3879712Z         # create dialect
2025-10-08T16:01:12.3879815Z         dialect = dialect_cls(**dialect_args)
2025-10-08T16:01:12.3879884Z     
2025-10-08T16:01:12.3879980Z         # assemble connection arguments
2025-10-08T16:01:12.3880109Z         (cargs_tup, cparams) = dialect.create_connect_args(u)
2025-10-08T16:01:12.3880225Z         cparams.update(pop_kwarg("connect_args", {}))
2025-10-08T16:01:12.3880296Z     
2025-10-08T16:01:12.3880478Z         if "async_fallback" in cparams and util.asbool(cparams["async_fallback"]):
2025-10-08T16:01:12.3880573Z             util.warn_deprecated(
2025-10-08T16:01:12.3880739Z                 "The async_fallback dialect argument is deprecated and will be "
2025-10-08T16:01:12.3880832Z                 "removed in SQLAlchemy 2.1.",
2025-10-08T16:01:12.3880914Z                 "2.0",
2025-10-08T16:01:12.3880983Z             )
2025-10-08T16:01:12.3881048Z     
2025-10-08T16:01:12.3881166Z         cargs = list(cargs_tup)  # allow mutability
2025-10-08T16:01:12.3881234Z     
2025-10-08T16:01:12.3881333Z         # look for existing pool or create
2025-10-08T16:01:12.3881434Z         pool = pop_kwarg("pool", None)
2025-10-08T16:01:12.3881514Z         if pool is None:
2025-10-08T16:01:12.3881591Z     
2025-10-08T16:01:12.3881667Z             def connect(
2025-10-08T16:01:12.3881820Z                 connection_record: Optional[ConnectionPoolEntry] = None,
2025-10-08T16:01:12.3881915Z             ) -> DBAPIConnection:
2025-10-08T16:01:12.3882004Z                 if dialect._has_events:
2025-10-08T16:01:12.3882111Z                     for fn in dialect.dispatch.do_connect:
2025-10-08T16:01:12.3882206Z                         connection = cast(
2025-10-08T16:01:12.3882296Z                             DBAPIConnection,
2025-10-08T16:01:12.3882422Z                             fn(dialect, connection_record, cargs, cparams),
2025-10-08T16:01:12.3882501Z                         )
2025-10-08T16:01:12.3882597Z                         if connection is not None:
2025-10-08T16:01:12.3882689Z                             return connection
2025-10-08T16:01:12.3882870Z     
2025-10-08T16:01:12.3882984Z                 return dialect.connect(*cargs, **cparams)
2025-10-08T16:01:12.3883055Z     
2025-10-08T16:01:12.3883155Z             creator = pop_kwarg("creator", connect)
2025-10-08T16:01:12.3883220Z     
2025-10-08T16:01:12.3883334Z             poolclass = pop_kwarg("poolclass", None)
2025-10-08T16:01:12.3883418Z             if poolclass is None:
2025-10-08T16:01:12.3883640Z                 poolclass = dialect.get_dialect_pool_class(u)
2025-10-08T16:01:12.3883736Z             pool_args = {"dialect": dialect}
2025-10-08T16:01:12.3883801Z     
2025-10-08T16:01:12.3883950Z             # consume pool arguments from kwargs, translating a few of
2025-10-08T16:01:12.3884030Z             # the arguments
2025-10-08T16:01:12.3884132Z             for k in util.get_cls_kwargs(poolclass):
2025-10-08T16:01:12.3884237Z                 tk = _pool_translate_kwargs.get(k, k)
2025-10-08T16:01:12.3884317Z                 if tk in kwargs:
2025-10-08T16:01:12.3884416Z                     pool_args[k] = pop_kwarg(tk)
2025-10-08T16:01:12.3884487Z     
2025-10-08T16:01:12.3884573Z             for plugin in plugins:
2025-10-08T16:01:12.3884702Z                 plugin.handle_pool_kwargs(poolclass, pool_args)
2025-10-08T16:01:12.3884773Z     
2025-10-08T16:01:12.3884871Z             pool = poolclass(creator, **pool_args)
2025-10-08T16:01:12.3884947Z         else:
2025-10-08T16:01:12.3885039Z             pool._dialect = dialect
2025-10-08T16:01:12.3885106Z     
2025-10-08T16:01:12.3885180Z         if (
2025-10-08T16:01:12.3885272Z             hasattr(pool, "_is_asyncio")
2025-10-08T16:01:12.3885386Z             and pool._is_asyncio is not dialect.is_async
2025-10-08T16:01:12.3885459Z         ):
2025-10-08T16:01:12.3885549Z             raise exc.ArgumentError(
2025-10-08T16:01:12.3885674Z                 f"Pool class {pool.__class__.__name__} cannot be "
2025-10-08T16:01:12.3885808Z                 f"used with {'non-' if not dialect.is_async else ''}"
2025-10-08T16:01:12.3885893Z                 "asyncio engine",
2025-10-08T16:01:12.3885980Z                 code="pcls",
2025-10-08T16:01:12.3886049Z             )
2025-10-08T16:01:12.3886117Z     
2025-10-08T16:01:12.3886200Z         # create engine.
2025-10-08T16:01:12.3886293Z         if not pop_kwarg("future", True):
2025-10-08T16:01:12.3886384Z             raise exc.ArgumentError(
2025-10-08T16:01:12.3886490Z                 "The 'future' parameter passed to "
2025-10-08T16:01:12.3886602Z                 "create_engine() may only be set to True."
2025-10-08T16:01:12.3886671Z             )
2025-10-08T16:01:12.3886742Z     
2025-10-08T16:01:12.3886828Z         engineclass = base.Engine
2025-10-08T16:01:12.3886894Z     
2025-10-08T16:01:12.3886977Z         engine_args = {}
2025-10-08T16:01:12.3887080Z         for k in util.get_cls_kwargs(engineclass):
2025-10-08T16:01:12.3887161Z             if k in kwargs:
2025-10-08T16:01:12.3887273Z                 engine_args[k] = pop_kwarg(k)
2025-10-08T16:01:12.3887496Z     
2025-10-08T16:01:12.3887729Z         # internal flags used by the test suite for instrumenting / proxying
2025-10-08T16:01:12.3887815Z         # engines with mocks etc.
2025-10-08T16:01:12.3887929Z         _initialize = kwargs.pop("_initialize", True)
2025-10-08T16:01:12.3888004Z     
2025-10-08T16:01:12.3888092Z         # all kwargs should be consumed
2025-10-08T16:01:12.3888164Z         if kwargs:
2025-10-08T16:01:12.3888255Z >           raise TypeError(
2025-10-08T16:01:12.3888385Z                 "Invalid argument(s) %s sent to create_engine(), "
2025-10-08T16:01:12.3888532Z                 "using configuration %s/%s/%s.  Please check that the "
2025-10-08T16:01:12.3888681Z                 "keyword arguments are appropriate for this combination "
2025-10-08T16:01:12.3888764Z                 "of components."
2025-10-08T16:01:12.3888839Z                 % (
2025-10-08T16:01:12.3888939Z                     ",".join("'%s'" % k for k in kwargs),
2025-10-08T16:01:12.3889031Z                     dialect.__class__.__name__,
2025-10-08T16:01:12.3889247Z                     pool.__class__.__name__,
2025-10-08T16:01:12.3889339Z                     engineclass.__name__,
2025-10-08T16:01:12.3889408Z                 )
2025-10-08T16:01:12.3889485Z             )
2025-10-08T16:01:12.3890189Z E           TypeError: Invalid argument(s) 'pool_size','max_overflow' sent to create_engine(), using configuration SQLiteDialect_pysqlite/StaticPool/Engine.  Please check that the keyword arguments are appropriate for this combination of components.
2025-10-08T16:01:12.3890296Z 
2025-10-08T16:01:12.3890636Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/create.py:715: TypeError
2025-10-08T16:01:12.3890843Z _____ ERROR at setup of TestFieldConsistency.test_user_view_field_mapping ______
2025-10-08T16:01:12.3890848Z 
2025-10-08T16:01:12.3890928Z     @pytest.fixture
2025-10-08T16:01:12.3891006Z     def app():
2025-10-08T16:01:12.3891099Z         """Create test app instance"""
2025-10-08T16:01:12.3891192Z >       app = create_app(TestConfig)
2025-10-08T16:01:12.3891270Z               ^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.3891275Z 
2025-10-08T16:01:12.3891367Z tests/test_field_consistency.py:30: 
2025-10-08T16:01:12.3891486Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:12.3891576Z app/__init__.py:141: in create_app
2025-10-08T16:01:12.3891655Z     db.init_app(app)
2025-10-08T16:01:12.3891995Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask_sqlalchemy/extension.py:374: in init_app
2025-10-08T16:01:12.3892126Z     engines[key] = self._make_engine(key, options, app)
2025-10-08T16:01:12.3892219Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.3892556Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask_sqlalchemy/extension.py:665: in _make_engine
2025-10-08T16:01:12.3892675Z     return sa.engine_from_config(options, prefix="")
2025-10-08T16:01:12.3892775Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.3893139Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/create.py:838: in engine_from_config
2025-10-08T16:01:12.3893242Z     return create_engine(url, **options)
2025-10-08T16:01:12.3893320Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.3893406Z <string>:2: in create_engine
2025-10-08T16:01:12.3893508Z     ???
2025-10-08T16:01:12.3893845Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/util/deprecations.py:281: in warned
2025-10-08T16:01:12.3893983Z     return fn(*args, **kwargs)  # type: ignore[no-any-return]
2025-10-08T16:01:12.3894067Z            ^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.3894179Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:12.3894184Z 
2025-10-08T16:01:12.3894361Z url = 'sqlite:///:memory:', kwargs = {'max_overflow': 30, 'pool_size': 10}
2025-10-08T16:01:12.3894455Z u = sqlite:///:memory:, plugins = []
2025-10-08T16:01:12.3894693Z entrypoint = <class 'sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite'>
2025-10-08T16:01:12.3894774Z _is_async = False
2025-10-08T16:01:12.3894956Z pop_kwarg = <function create_engine.<locals>.pop_kwarg at 0x7f308ddc6b60>
2025-10-08T16:01:12.3895372Z dialect_args = {'compiler_linting': 1, 'dbapi': <module 'sqlite3.dbapi2' from '/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/sqlite3/dbapi2.py'>}
2025-10-08T16:01:12.3895386Z 
2025-10-08T16:01:12.3895475Z     @util.deprecated_params(
2025-10-08T16:01:12.3895549Z         strategy=(
2025-10-08T16:01:12.3895625Z             "1.4",
2025-10-08T16:01:12.3895796Z             "The :paramref:`_sa.create_engine.strategy` keyword is deprecated, "
2025-10-08T16:01:12.3895934Z             "and the only argument accepted is 'mock'; please use "
2025-10-08T16:01:12.3896081Z             ":func:`.create_mock_engine` going forward.  For general "
2025-10-08T16:01:12.3896251Z             "customization of create_engine which may have been accomplished "
2025-10-08T16:01:12.3896474Z             "using strategies, see :class:`.CreateEnginePlugin`.",
2025-10-08T16:01:12.3896553Z         ),
2025-10-08T16:01:12.3896637Z         empty_in_strategy=(
2025-10-08T16:01:12.3896710Z             "1.4",
2025-10-08T16:01:12.3896872Z             "The :paramref:`_sa.create_engine.empty_in_strategy` keyword is "
2025-10-08T16:01:12.3897029Z             "deprecated, and no longer has any effect.  All IN expressions "
2025-10-08T16:01:12.3897199Z             "are now rendered using "
2025-10-08T16:01:12.3897535Z             'the "expanding parameter" strategy which renders a set of bound'
2025-10-08T16:01:12.3897733Z             'expressions, or an "empty set" SELECT, at statement execution'
2025-10-08T16:01:12.3897814Z             "time.",
2025-10-08T16:01:12.3897883Z         ),
2025-10-08T16:01:12.3897974Z         implicit_returning=(
2025-10-08T16:01:12.3898044Z             "2.0",
2025-10-08T16:01:12.3898204Z             "The :paramref:`_sa.create_engine.implicit_returning` parameter "
2025-10-08T16:01:12.3898360Z             "is deprecated and will be removed in a future release. ",
2025-10-08T16:01:12.3898433Z         ),
2025-10-08T16:01:12.3898502Z     )
2025-10-08T16:01:12.3898681Z     def create_engine(url: Union[str, _url.URL], **kwargs: Any) -> Engine:
2025-10-08T16:01:12.3898801Z         """Create a new :class:`_engine.Engine` instance.
2025-10-08T16:01:12.3898869Z     
2025-10-08T16:01:12.3899068Z         The standard calling form is to send the :ref:`URL <database_urls>` as the
2025-10-08T16:01:12.3899183Z         first positional argument, usually a string
2025-10-08T16:01:12.3899342Z         that indicates database dialect and connection arguments::
2025-10-08T16:01:12.3899410Z     
2025-10-08T16:01:12.3900788Z             engine = create_engine("***localhost/test")
2025-10-08T16:01:12.3900964Z     
2025-10-08T16:01:12.3901089Z         .. note::
2025-10-08T16:01:12.3901197Z     
2025-10-08T16:01:12.3901521Z             Please review :ref:`database_urls` for general guidelines in composing
2025-10-08T16:01:12.3901832Z             URL strings.  In particular, special characters, such as those often
2025-10-08T16:01:12.3902108Z             part of passwords, must be URL encoded to be properly parsed.
2025-10-08T16:01:12.3902232Z     
2025-10-08T16:01:12.3902457Z         Additional keyword arguments may then follow it which
2025-10-08T16:01:12.3902760Z         establish various options on the resulting :class:`_engine.Engine`
2025-10-08T16:01:12.3903024Z         and its underlying :class:`.Dialect` and :class:`_pool.Pool`
2025-10-08T16:01:12.3903164Z         constructs::
2025-10-08T16:01:12.3903287Z     
2025-10-08T16:01:12.3903435Z             engine = create_engine(
2025-10-08T16:01:12.3903773Z                 "***hostname/dbname",
2025-10-08T16:01:12.3903930Z                 pool_recycle=3600,
2025-10-08T16:01:12.3904072Z                 echo=True,
2025-10-08T16:01:12.3904190Z             )
2025-10-08T16:01:12.3904303Z     
2025-10-08T16:01:12.3904465Z         The string form of the URL is
2025-10-08T16:01:12.3904771Z         ``dialect[+driver]://user:password@host/dbname[?key=value..]``, where
2025-10-08T16:01:12.3905009Z         ``dialect`` is a database name such as ``mysql``, ``oracle``,
2025-10-08T16:01:12.3905271Z         ``postgresql``, etc., and ``driver`` the name of a DBAPI, such as
2025-10-08T16:01:12.3905497Z         ``psycopg2``, ``pyodbc``, ``cx_oracle``, etc.  Alternatively,
2025-10-08T16:01:12.3905775Z         the URL can be an instance of :class:`~sqlalchemy.engine.url.URL`.
2025-10-08T16:01:12.3905885Z     
2025-10-08T16:01:12.3906116Z         ``**kwargs`` takes a wide variety of options which are routed
2025-10-08T16:01:12.3906434Z         towards their appropriate components.  Arguments may be specific to
2025-10-08T16:01:12.3906704Z         the :class:`_engine.Engine`, the underlying :class:`.Dialect`,
2025-10-08T16:01:12.3906863Z         as well as the
2025-10-08T16:01:12.3907180Z         :class:`_pool.Pool`.  Specific dialects also accept keyword arguments that
2025-10-08T16:01:12.3907990Z         are unique to that dialect.   Here, we describe the parameters
2025-10-08T16:01:12.3908310Z         that are common to most :func:`_sa.create_engine()` usage.
2025-10-08T16:01:12.3908439Z     
2025-10-08T16:01:12.3908733Z         Once established, the newly resulting :class:`_engine.Engine` will
2025-10-08T16:01:12.3909020Z         request a connection from the underlying :class:`_pool.Pool` once
2025-10-08T16:01:12.3909725Z         :meth:`_engine.Engine.connect` is called, or a method which depends on it
2025-10-08T16:01:12.3909980Z         such as :meth:`_engine.Engine.execute` is invoked.   The
2025-10-08T16:01:12.3910140Z         :class:`_pool.Pool` in turn
2025-10-08T16:01:12.3910450Z         will establish the first actual DBAPI connection when this request
2025-10-08T16:01:12.3910752Z         is received.   The :func:`_sa.create_engine` call itself does **not**
2025-10-08T16:01:12.3910977Z         establish any actual DBAPI connections directly.
2025-10-08T16:01:12.3911094Z     
2025-10-08T16:01:12.3911251Z         .. seealso::
2025-10-08T16:01:12.3911366Z     
2025-10-08T16:01:12.3911514Z             :doc:`/core/engines`
2025-10-08T16:01:12.3911629Z     
2025-10-08T16:01:12.3911772Z             :doc:`/dialects/index`
2025-10-08T16:01:12.3911900Z     
2025-10-08T16:01:12.3912073Z             :ref:`connections_toplevel`
2025-10-08T16:01:12.3912196Z     
2025-10-08T16:01:12.3912498Z         :param connect_args: a dictionary of options which will be
2025-10-08T16:01:12.3912753Z             passed directly to the DBAPI's ``connect()`` method as
2025-10-08T16:01:12.3912976Z             additional keyword arguments.  See the example
2025-10-08T16:01:12.3913155Z             at :ref:`custom_dbapi_args`.
2025-10-08T16:01:12.3913273Z     
2025-10-08T16:01:12.3913539Z         :param creator: a callable which returns a DBAPI connection.
2025-10-08T16:01:12.3913768Z             This creation function will be passed to the underlying
2025-10-08T16:01:12.3913939Z             connection pool and will be used to create all new database
2025-10-08T16:01:12.3914108Z             connections. Usage of this function causes connection
2025-10-08T16:01:12.3914263Z             parameters specified in the URL argument to be bypassed.
2025-10-08T16:01:12.3914331Z     
2025-10-08T16:01:12.3914446Z             This hook is not as flexible as the newer
2025-10-08T16:01:12.3914628Z             :meth:`_events.DialectEvents.do_connect` hook which allows complete
2025-10-08T16:01:12.3914812Z             control over how a connection is made to the database, given the full
2025-10-08T16:01:12.3914931Z             set of URL arguments and state beforehand.
2025-10-08T16:01:12.3914999Z     
2025-10-08T16:01:12.3915092Z             .. seealso::
2025-10-08T16:01:12.3915162Z     
2025-10-08T16:01:12.3915332Z                 :meth:`_events.DialectEvents.do_connect` - event hook that allows
2025-10-08T16:01:12.3915460Z                 full control over DBAPI connection mechanics.
2025-10-08T16:01:12.3915528Z     
2025-10-08T16:01:12.3915623Z                 :ref:`custom_dbapi_args`
2025-10-08T16:01:12.3915698Z     
2025-10-08T16:01:12.3915851Z         :param echo=False: if True, the Engine will log all statements
2025-10-08T16:01:12.3916000Z             as well as a ``repr()`` of their parameter lists to the default log
2025-10-08T16:01:12.3916177Z             handler, which defaults to ``sys.stdout`` for output.   If set to the
2025-10-08T16:01:12.3916363Z             string ``"debug"``, result rows will be printed to the standard output
2025-10-08T16:01:12.3916525Z             as well. The ``echo`` attribute of ``Engine`` can be modified at any
2025-10-08T16:01:12.3916684Z             time to turn logging on and off; direct control of logging is also
2025-10-08T16:01:12.3916827Z             available using the standard Python ``logging`` module.
2025-10-08T16:01:12.3916900Z     
2025-10-08T16:01:12.3916980Z             .. seealso::
2025-10-08T16:01:12.3917046Z     
2025-10-08T16:01:12.3917519Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.3917627Z                 logging.
2025-10-08T16:01:12.3917703Z     
2025-10-08T16:01:12.3917769Z     
2025-10-08T16:01:12.3917923Z         :param echo_pool=False: if True, the connection pool will log
2025-10-08T16:01:12.3918094Z             informational output such as when connections are invalidated
2025-10-08T16:01:12.3918257Z             as well as when connections are recycled to the default log handler,
2025-10-08T16:01:12.3918556Z             which defaults to ``sys.stdout`` for output.   If set to the string
2025-10-08T16:01:12.3918720Z             ``"debug"``, the logging will include pool checkouts and checkins.
2025-10-08T16:01:12.3918902Z             Direct control of logging is also available using the standard Python
2025-10-08T16:01:12.3918993Z             ``logging`` module.
2025-10-08T16:01:12.3919059Z     
2025-10-08T16:01:12.3919137Z             .. seealso::
2025-10-08T16:01:12.3919209Z     
2025-10-08T16:01:12.3919369Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.3919445Z                 logging.
2025-10-08T16:01:12.3919522Z     
2025-10-08T16:01:12.3919588Z     
2025-10-08T16:01:12.3919746Z         :param empty_in_strategy:   No longer used; SQLAlchemy now uses
2025-10-08T16:01:12.3919861Z             "empty set" behavior for IN in all cases.
2025-10-08T16:01:12.3919930Z     
2025-10-08T16:01:12.3920106Z         :param enable_from_linting: defaults to True.  Will emit a warning
2025-10-08T16:01:12.3920274Z             if a given SELECT statement is found to have un-linked FROM elements
2025-10-08T16:01:12.3920380Z             which would cause a cartesian product.
2025-10-08T16:01:12.3920458Z     
2025-10-08T16:01:12.3920551Z             .. versionadded:: 1.4
2025-10-08T16:01:12.3920618Z     
2025-10-08T16:01:12.3920703Z             .. seealso::
2025-10-08T16:01:12.3920770Z     
2025-10-08T16:01:12.3920853Z                 :ref:`change_4737`
2025-10-08T16:01:12.3920928Z     
2025-10-08T16:01:12.3921100Z         :param execution_options: Dictionary execution options which will
2025-10-08T16:01:12.3921386Z             be applied to all connections.  See
2025-10-08T16:01:12.3921640Z             :meth:`~sqlalchemy.engine.Connection.execution_options`
2025-10-08T16:01:12.3921714Z     
2025-10-08T16:01:12.3921870Z         :param future: Use the 2.0 style :class:`_engine.Engine` and
2025-10-08T16:01:12.3921979Z             :class:`_engine.Connection` API.
2025-10-08T16:01:12.3922051Z     
2025-10-08T16:01:12.3922207Z             As of SQLAlchemy 2.0, this parameter is present for backwards
2025-10-08T16:01:12.3922386Z             compatibility only and must remain at its default value of ``True``.
2025-10-08T16:01:12.3922453Z     
2025-10-08T16:01:12.3922601Z             The :paramref:`_sa.create_engine.future` parameter will be
2025-10-08T16:01:12.3922756Z             deprecated in a subsequent 2.x release and eventually removed.
2025-10-08T16:01:12.3922827Z     
2025-10-08T16:01:12.3922918Z             .. versionadded:: 1.4
2025-10-08T16:01:12.3922984Z     
2025-10-08T16:01:12.3923149Z             .. versionchanged:: 2.0 All :class:`_engine.Engine` objects are
2025-10-08T16:01:12.3923316Z                "future" style engines and there is no longer a ``future=False``
2025-10-08T16:01:12.3923398Z                mode of operation.
2025-10-08T16:01:12.3923470Z     
2025-10-08T16:01:12.3923549Z             .. seealso::
2025-10-08T16:01:12.3923617Z     
2025-10-08T16:01:12.3923716Z                 :ref:`migration_20_toplevel`
2025-10-08T16:01:12.3923782Z     
2025-10-08T16:01:12.3923987Z         :param hide_parameters: Boolean, when set to True, SQL statement parameters
2025-10-08T16:01:12.3924158Z             will not be displayed in INFO logging nor will they be formatted into
2025-10-08T16:01:12.3924320Z             the string representation of :class:`.StatementError` objects.
2025-10-08T16:01:12.3924397Z     
2025-10-08T16:01:12.3924485Z             .. versionadded:: 1.3.8
2025-10-08T16:01:12.3924681Z     
2025-10-08T16:01:12.3924771Z             .. seealso::
2025-10-08T16:01:12.3924836Z     
2025-10-08T16:01:12.3924999Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.3925076Z                 logging.
2025-10-08T16:01:12.3925141Z     
2025-10-08T16:01:12.3925329Z         :param implicit_returning=True:  Legacy parameter that may only be set
2025-10-08T16:01:12.3925574Z             to True. In SQLAlchemy 2.0, this parameter does nothing. In order to
2025-10-08T16:01:12.3925737Z             disable "implicit returning" for statements invoked by the ORM,
2025-10-08T16:01:12.3925864Z             configure this on a per-table basis using the
2025-10-08T16:01:12.3925994Z             :paramref:`.Table.implicit_returning` parameter.
2025-10-08T16:01:12.3926060Z     
2025-10-08T16:01:12.3926132Z     
2025-10-08T16:01:12.3926305Z         :param insertmanyvalues_page_size: number of rows to format into an
2025-10-08T16:01:12.3926509Z          INSERT statement when the statement uses "insertmanyvalues" mode, which is
2025-10-08T16:01:12.3926678Z          a paged form of bulk insert that is used for many backends when using
2025-10-08T16:01:12.3926856Z          :term:`executemany` execution typically in conjunction with RETURNING.
2025-10-08T16:01:12.3927031Z          Defaults to 1000, but may also be subject to dialect-specific limiting
2025-10-08T16:01:12.3927201Z          factors which may override this value on a per-statement basis.
2025-10-08T16:01:12.3927275Z     
2025-10-08T16:01:12.3927548Z          .. versionadded:: 2.0
2025-10-08T16:01:12.3927619Z     
2025-10-08T16:01:12.3927704Z          .. seealso::
2025-10-08T16:01:12.3927772Z     
2025-10-08T16:01:12.3927869Z             :ref:`engine_insertmanyvalues`
2025-10-08T16:01:12.3927941Z     
2025-10-08T16:01:12.3928051Z             :ref:`engine_insertmanyvalues_page_size`
2025-10-08T16:01:12.3928119Z     
2025-10-08T16:01:12.3928346Z             :paramref:`_engine.Connection.execution_options.insertmanyvalues_page_size`
2025-10-08T16:01:12.3928414Z     
2025-10-08T16:01:12.3928581Z         :param isolation_level: optional string name of an isolation level
2025-10-08T16:01:12.3928731Z             which will be set on all new connections unconditionally.
2025-10-08T16:01:12.3928889Z             Isolation levels are typically some subset of the string names
2025-10-08T16:01:12.3929003Z             ``"SERIALIZABLE"``, ``"REPEATABLE READ"``,
2025-10-08T16:01:12.3929196Z             ``"READ COMMITTED"``, ``"READ UNCOMMITTED"`` and ``"AUTOCOMMIT"``
2025-10-08T16:01:12.3929342Z             based on backend.
2025-10-08T16:01:12.3929435Z     
2025-10-08T16:01:12.3929591Z             The :paramref:`_sa.create_engine.isolation_level` parameter is
2025-10-08T16:01:12.3929673Z             in contrast to the
2025-10-08T16:01:12.3929829Z             :paramref:`.Connection.execution_options.isolation_level`
2025-10-08T16:01:12.3929959Z             execution option, which may be set on an individual
2025-10-08T16:01:12.3930122Z             :class:`.Connection`, as well as the same parameter passed to
2025-10-08T16:01:12.3930279Z             :meth:`.Engine.execution_options`, where it may be used to create
2025-10-08T16:01:12.3930457Z             multiple engines with different isolation levels that share a common
2025-10-08T16:01:12.3930557Z             connection pool and dialect.
2025-10-08T16:01:12.3930625Z     
2025-10-08T16:01:12.3930722Z             .. versionchanged:: 2.0 The
2025-10-08T16:01:12.3930850Z                :paramref:`_sa.create_engine.isolation_level`
2025-10-08T16:01:12.3931027Z                parameter has been generalized to work on all dialects which support
2025-10-08T16:01:12.3931202Z                the concept of isolation level, and is provided as a more succinct,
2025-10-08T16:01:12.3931370Z                up front configuration switch in contrast to the execution option
2025-10-08T16:01:12.3931493Z                which is more of an ad-hoc programmatic option.
2025-10-08T16:01:12.3931568Z     
2025-10-08T16:01:12.3931772Z             .. seealso::
2025-10-08T16:01:12.3931841Z     
2025-10-08T16:01:12.3931936Z                 :ref:`dbapi_autocommit`
2025-10-08T16:01:12.3932002Z     
2025-10-08T16:01:12.3932249Z         :param json_deserializer: for dialects that support the
2025-10-08T16:01:12.3932395Z             :class:`_types.JSON`
2025-10-08T16:01:12.3932644Z             datatype, this is a Python callable that will convert a JSON string
2025-10-08T16:01:12.3932962Z             to a Python object.  By default, the Python ``json.loads`` function is
2025-10-08T16:01:12.3933035Z             used.
2025-10-08T16:01:12.3933102Z     
2025-10-08T16:01:12.3933269Z             .. versionchanged:: 1.3.7  The SQLite dialect renamed this from
2025-10-08T16:01:12.3933360Z                ``_json_deserializer``.
2025-10-08T16:01:12.3933428Z     
2025-10-08T16:01:12.3933622Z         :param json_serializer: for dialects that support the :class:`_types.JSON`
2025-10-08T16:01:12.3933794Z             datatype, this is a Python callable that will render a given object
2025-10-08T16:01:12.3933954Z             as JSON.   By default, the Python ``json.dumps`` function is used.
2025-10-08T16:01:12.3934021Z     
2025-10-08T16:01:12.3934175Z             .. versionchanged:: 1.3.7  The SQLite dialect renamed this from
2025-10-08T16:01:12.3934266Z                ``_json_serializer``.
2025-10-08T16:01:12.3934332Z     
2025-10-08T16:01:12.3934405Z     
2025-10-08T16:01:12.3934563Z         :param label_length=None: optional integer value which limits
2025-10-08T16:01:12.3934712Z             the size of dynamically generated column labels to that many
2025-10-08T16:01:12.3934838Z             characters. If less than 6, labels are generated as
2025-10-08T16:01:12.3934943Z             "_(counter)". If ``None``, the value of
2025-10-08T16:01:12.3935101Z             ``dialect.max_identifier_length``, which may be affected via the
2025-10-08T16:01:12.3935262Z             :paramref:`_sa.create_engine.max_identifier_length` parameter,
2025-10-08T16:01:12.3935359Z             is used instead.   The value of
2025-10-08T16:01:12.3935463Z             :paramref:`_sa.create_engine.label_length`
2025-10-08T16:01:12.3935559Z             may not be larger than that of
2025-10-08T16:01:12.3935683Z             :paramref:`_sa.create_engine.max_identfier_length`.
2025-10-08T16:01:12.3935749Z     
2025-10-08T16:01:12.3935831Z             .. seealso::
2025-10-08T16:01:12.3935902Z     
2025-10-08T16:01:12.3936036Z                 :paramref:`_sa.create_engine.max_identifier_length`
2025-10-08T16:01:12.3936100Z     
2025-10-08T16:01:12.3936257Z         :param logging_name:  String identifier which will be used within
2025-10-08T16:01:12.3936397Z             the "name" field of logging records generated within the
2025-10-08T16:01:12.3936543Z             "sqlalchemy.engine" logger. Defaults to a hexstring of the
2025-10-08T16:01:12.3936618Z             object's id.
2025-10-08T16:01:12.3936689Z     
2025-10-08T16:01:12.3936764Z             .. seealso::
2025-10-08T16:01:12.3936832Z     
2025-10-08T16:01:12.3936984Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.3937057Z                 logging.
2025-10-08T16:01:12.3937126Z     
2025-10-08T16:01:12.3937288Z                 :paramref:`_engine.Connection.execution_options.logging_token`
2025-10-08T16:01:12.3937531Z     
2025-10-08T16:01:12.3937737Z         :param max_identifier_length: integer; override the max_identifier_length
2025-10-08T16:01:12.3937912Z             determined by the dialect.  if ``None`` or zero, has no effect.  This
2025-10-08T16:01:12.3938080Z             is the database's configured maximum number of characters that may be
2025-10-08T16:01:12.3938244Z             used in a SQL identifier such as a table name, column name, or label
2025-10-08T16:01:12.3938413Z             name. All dialects determine this value automatically, however in the
2025-10-08T16:01:12.3938574Z             case of a new database version for which this value has changed but
2025-10-08T16:01:12.3938861Z             SQLAlchemy's dialect has not been adjusted, the value may be passed
2025-10-08T16:01:12.3938935Z             here.
2025-10-08T16:01:12.3939007Z     
2025-10-08T16:01:12.3939098Z             .. versionadded:: 1.3.9
2025-10-08T16:01:12.3939167Z     
2025-10-08T16:01:12.3939249Z             .. seealso::
2025-10-08T16:01:12.3939315Z     
2025-10-08T16:01:12.3939426Z                 :paramref:`_sa.create_engine.label_length`
2025-10-08T16:01:12.3939611Z     
2025-10-08T16:01:12.3939759Z         :param max_overflow=10: the number of connections to allow in
2025-10-08T16:01:12.3939916Z             connection pool "overflow", that is connections that can be
2025-10-08T16:01:12.3940071Z             opened above and beyond the pool_size setting, which defaults
2025-10-08T16:01:12.3940239Z             to five. this is only used with :class:`~sqlalchemy.pool.QueuePool`.
2025-10-08T16:01:12.3940312Z     
2025-10-08T16:01:12.3940483Z         :param module=None: reference to a Python module object (the module
2025-10-08T16:01:12.3940646Z             itself, not its string name).  Specifies an alternate DBAPI module to
2025-10-08T16:01:12.3940799Z             be used by the engine's dialect.  Each sub-dialect references a
2025-10-08T16:01:12.3940966Z             specific DBAPI which will be imported before first connect.  This
2025-10-08T16:01:12.3941141Z             parameter causes the import to be bypassed, and the given module to
2025-10-08T16:01:12.3941296Z             be used instead. Can be used for testing of DBAPIs as well as to
2025-10-08T16:01:12.3941470Z             inject "mock" DBAPI implementations into the :class:`_engine.Engine`.
2025-10-08T16:01:12.3941545Z     
2025-10-08T16:01:12.3941837Z         :param paramstyle=None: The `paramstyle <https://legacy.python.org/dev/peps/pep-0249/#paramstyle>`_
2025-10-08T16:01:12.3942013Z             to use when rendering bound parameters.  This style defaults to the
2025-10-08T16:01:12.3942186Z             one recommended by the DBAPI itself, which is retrieved from the
2025-10-08T16:01:12.3942356Z             ``.paramstyle`` attribute of the DBAPI.  However, most DBAPIs accept
2025-10-08T16:01:12.3942515Z             more than one paramstyle, and in particular it may be desirable
2025-10-08T16:01:12.3942686Z             to change a "named" paramstyle into a "positional" one, or vice versa.
2025-10-08T16:01:12.3942836Z             When this attribute is passed, it should be one of the values
2025-10-08T16:01:12.3942966Z             ``"qmark"``, ``"numeric"``, ``"named"``, ``"format"`` or
2025-10-08T16:01:12.3943115Z             ``"pyformat"``, and should correspond to a parameter style known
2025-10-08T16:01:12.3943224Z             to be supported by the DBAPI in use.
2025-10-08T16:01:12.3943290Z     
2025-10-08T16:01:12.3943423Z         :param pool=None: an already-constructed instance of
2025-10-08T16:01:12.3943540Z             :class:`~sqlalchemy.pool.Pool`, such as a
2025-10-08T16:01:12.3943704Z             :class:`~sqlalchemy.pool.QueuePool` instance. If non-None, this
2025-10-08T16:01:12.3943849Z             pool will be used directly as the underlying connection pool
2025-10-08T16:01:12.3944012Z             for the engine, bypassing whatever connection parameters are
2025-10-08T16:01:12.3944165Z             present in the URL argument. For information on constructing
2025-10-08T16:01:12.3944315Z             connection pools manually, see :ref:`pooling_toplevel`.
2025-10-08T16:01:12.3944386Z     
2025-10-08T16:01:12.3944529Z         :param poolclass=None: a :class:`~sqlalchemy.pool.Pool`
2025-10-08T16:01:12.3944676Z             subclass, which will be used to create a connection pool
2025-10-08T16:01:12.3944836Z             instance using the connection parameters given in the URL. Note
2025-10-08T16:01:12.3944968Z             this differs from ``pool`` in that you don't actually
2025-10-08T16:01:12.3945132Z             instantiate the pool in this case, you just indicate what type
2025-10-08T16:01:12.3945218Z             of pool to be used.
2025-10-08T16:01:12.3945411Z     
2025-10-08T16:01:12.3945588Z         :param pool_logging_name:  String identifier which will be used within
2025-10-08T16:01:12.3945723Z            the "name" field of logging records generated within the
2025-10-08T16:01:12.3945898Z            "sqlalchemy.pool" logger. Defaults to a hexstring of the object's
2025-10-08T16:01:12.3945970Z            id.
2025-10-08T16:01:12.3946111Z     
2025-10-08T16:01:12.3946197Z            .. seealso::
2025-10-08T16:01:12.3946262Z     
2025-10-08T16:01:12.3946407Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.3946489Z                 logging.
2025-10-08T16:01:12.3946555Z     
2025-10-08T16:01:12.3946731Z         :param pool_pre_ping: boolean, if True will enable the connection pool
2025-10-08T16:01:12.3946880Z             "pre-ping" feature that tests connections for liveness upon
2025-10-08T16:01:12.3946960Z             each checkout.
2025-10-08T16:01:12.3947030Z     
2025-10-08T16:01:12.3947122Z             .. versionadded:: 1.2
2025-10-08T16:01:12.3947187Z     
2025-10-08T16:01:12.3947270Z             .. seealso::
2025-10-08T16:01:12.3947487Z     
2025-10-08T16:01:12.3947607Z                 :ref:`pool_disconnects_pessimistic`
2025-10-08T16:01:12.3947679Z     
2025-10-08T16:01:12.3947825Z         :param pool_size=5: the number of connections to keep open
2025-10-08T16:01:12.3947940Z             inside the connection pool. This used with
2025-10-08T16:01:12.3948055Z             :class:`~sqlalchemy.pool.QueuePool` as
2025-10-08T16:01:12.3948211Z             well as :class:`~sqlalchemy.pool.SingletonThreadPool`.  With
2025-10-08T16:01:12.3948363Z             :class:`~sqlalchemy.pool.QueuePool`, a ``pool_size`` setting
2025-10-08T16:01:12.3948520Z             of 0 indicates no limit; to disable pooling, set ``poolclass`` to
2025-10-08T16:01:12.3948634Z             :class:`~sqlalchemy.pool.NullPool` instead.
2025-10-08T16:01:12.3948706Z     
2025-10-08T16:01:12.3948865Z         :param pool_recycle=-1: this setting causes the pool to recycle
2025-10-08T16:01:12.3949031Z             connections after the given number of seconds has passed. It
2025-10-08T16:01:12.3949174Z             defaults to -1, or no timeout. For example, setting to 3600
2025-10-08T16:01:12.3949325Z             means connections will be recycled after one hour. Note that
2025-10-08T16:01:12.3949469Z             MySQL in particular will disconnect automatically if no
2025-10-08T16:01:12.3949630Z             activity is detected on a connection for eight hours (although
2025-10-08T16:01:12.3949784Z             this is configurable with the MySQLDB connection itself and the
2025-10-08T16:01:12.3949885Z             server configuration as well).
2025-10-08T16:01:12.3949952Z     
2025-10-08T16:01:12.3950034Z             .. seealso::
2025-10-08T16:01:12.3950099Z     
2025-10-08T16:01:12.3950192Z                 :ref:`pool_setting_recycle`
2025-10-08T16:01:12.3950263Z     
2025-10-08T16:01:12.3950381Z         :param pool_reset_on_return='rollback': set the
2025-10-08T16:01:12.3950547Z             :paramref:`_pool.Pool.reset_on_return` parameter of the underlying
2025-10-08T16:01:12.3950690Z             :class:`_pool.Pool` object, which can be set to the values
2025-10-08T16:01:12.3950787Z             ``"rollback"``, ``"commit"``, or ``None``.
2025-10-08T16:01:12.3950853Z     
2025-10-08T16:01:12.3950934Z             .. seealso::
2025-10-08T16:01:12.3951002Z     
2025-10-08T16:01:12.3951099Z                 :ref:`pool_reset_on_return`
2025-10-08T16:01:12.3951166Z     
2025-10-08T16:01:12.3951318Z                 :ref:`dbapi_autocommit_skip_rollback` - a more modern approach
2025-10-08T16:01:12.3951460Z                 to using connections with no transactional instructions
2025-10-08T16:01:12.3951527Z     
2025-10-08T16:01:12.3951672Z         :param pool_timeout=30: number of seconds to wait before giving
2025-10-08T16:01:12.3951812Z             up on getting a connection from the pool. This is only used
2025-10-08T16:01:12.3952111Z             with :class:`~sqlalchemy.pool.QueuePool`. This can be a float but is
2025-10-08T16:01:12.3952283Z             subject to the limitations of Python time functions which may not be
2025-10-08T16:01:12.3952390Z             reliable in the tens of milliseconds.
2025-10-08T16:01:12.3952457Z     
2025-10-08T16:01:12.3952613Z             .. note: don't use 30.0 above, it seems to break with the :param tag
2025-10-08T16:01:12.3952779Z     
2025-10-08T16:01:12.3952954Z         :param pool_use_lifo=False: use LIFO (last-in-first-out) when retrieving
2025-10-08T16:01:12.3953093Z             connections from :class:`.QueuePool` instead of FIFO
2025-10-08T16:01:12.3953258Z             (first-in-first-out). Using LIFO, a server-side timeout scheme can
2025-10-08T16:01:12.3953425Z             reduce the number of connections used during non- peak   periods of
2025-10-08T16:01:12.3953607Z             use.   When planning for server-side timeouts, ensure that a recycle or
2025-10-08T16:01:12.3953786Z             pre-ping strategy is in use to gracefully   handle stale connections.
2025-10-08T16:01:12.3953859Z     
2025-10-08T16:01:12.3953947Z               .. versionadded:: 1.3
2025-10-08T16:01:12.3954013Z     
2025-10-08T16:01:12.3954100Z               .. seealso::
2025-10-08T16:01:12.3954166Z     
2025-10-08T16:01:12.3954249Z                 :ref:`pool_use_lifo`
2025-10-08T16:01:12.3954322Z     
2025-10-08T16:01:12.3954416Z                 :ref:`pool_disconnects`
2025-10-08T16:01:12.3954483Z     
2025-10-08T16:01:12.3954631Z         :param plugins: string list of plugin names to load.  See
2025-10-08T16:01:12.3954747Z             :class:`.CreateEnginePlugin` for background.
2025-10-08T16:01:12.3954819Z     
2025-10-08T16:01:12.3954905Z             .. versionadded:: 1.2.3
2025-10-08T16:01:12.3954971Z     
2025-10-08T16:01:12.3955148Z         :param query_cache_size: size of the cache used to cache the SQL string
2025-10-08T16:01:12.3955266Z          form of queries.  Set to zero to disable caching.
2025-10-08T16:01:12.3955333Z     
2025-10-08T16:01:12.3955522Z          The cache is pruned of its least recently used items when its size reaches
2025-10-08T16:01:12.3955678Z          N * 1.5.  Defaults to 500, meaning the cache will always store at least
2025-10-08T16:01:12.3955855Z          500 SQL statements when filled, and will grow up to 750 items at which
2025-10-08T16:01:12.3956017Z          point it is pruned back down to 500 by removing the 250 least recently
2025-10-08T16:01:12.3956099Z          used items.
2025-10-08T16:01:12.3956171Z     
2025-10-08T16:01:12.3956337Z          Caching is accomplished on a per-statement basis by generating a
2025-10-08T16:01:12.3956507Z          cache key that represents the statement's structure, then generating
2025-10-08T16:01:12.3956672Z          string SQL for the current dialect only if that key is not present
2025-10-08T16:01:12.3956835Z          in the cache.   All statements support caching, however some features
2025-10-08T16:01:12.3957010Z          such as an INSERT with a large set of parameters will intentionally
2025-10-08T16:01:12.3957173Z          bypass the cache.   SQL logging will indicate statistics for each
2025-10-08T16:01:12.3957309Z          statement whether or not it were pull from the cache.
2025-10-08T16:01:12.3957543Z     
2025-10-08T16:01:12.3957726Z          .. note:: some ORM functions related to unit-of-work persistence as well
2025-10-08T16:01:12.3957887Z             as some attribute loading strategies will make use of individual
2025-10-08T16:01:12.3958016Z             per-mapper caches outside of the main cache.
2025-10-08T16:01:12.3958082Z     
2025-10-08T16:01:12.3958154Z     
2025-10-08T16:01:12.3958231Z          .. seealso::
2025-10-08T16:01:12.3958296Z     
2025-10-08T16:01:12.3958387Z             :ref:`sql_caching`
2025-10-08T16:01:12.3958452Z     
2025-10-08T16:01:12.3958536Z          .. versionadded:: 1.4
2025-10-08T16:01:12.3958607Z     
2025-10-08T16:01:12.3958757Z         :param skip_autocommit_rollback: When True, the dialect will
2025-10-08T16:01:12.3959061Z            unconditionally skip all calls to the DBAPI ``connection.rollback()``
2025-10-08T16:01:12.3959248Z            method if the DBAPI connection is confirmed to be in "autocommit" mode.
2025-10-08T16:01:12.3959427Z            The availability of this feature is dialect specific; if not available,
2025-10-08T16:01:12.3959616Z            a ``NotImplementedError`` is raised by the dialect when rollback occurs.
2025-10-08T16:01:12.3959786Z     
2025-10-08T16:01:12.3959865Z            .. seealso::
2025-10-08T16:01:12.3959935Z     
2025-10-08T16:01:12.3960041Z                 :ref:`dbapi_autocommit_skip_rollback`
2025-10-08T16:01:12.3960107Z     
2025-10-08T16:01:12.3960198Z            .. versionadded:: 2.0.43
2025-10-08T16:01:12.3960263Z     
2025-10-08T16:01:12.3960448Z         :param use_insertmanyvalues: True by default, use the "insertmanyvalues"
2025-10-08T16:01:12.3960611Z          execution style for INSERT..RETURNING statements by default.
2025-10-08T16:01:12.3960677Z     
2025-10-08T16:01:12.3960771Z          .. versionadded:: 2.0
2025-10-08T16:01:12.3960837Z     
2025-10-08T16:01:12.3960911Z          .. seealso::
2025-10-08T16:01:12.3960981Z     
2025-10-08T16:01:12.3961077Z             :ref:`engine_insertmanyvalues`
2025-10-08T16:01:12.3961142Z     
2025-10-08T16:01:12.3961218Z         """  # noqa
2025-10-08T16:01:12.3961283Z     
2025-10-08T16:01:12.3961367Z         if "strategy" in kwargs:
2025-10-08T16:01:12.3961473Z             strat = kwargs.pop("strategy")
2025-10-08T16:01:12.3961554Z             if strat == "mock":
2025-10-08T16:01:12.3961643Z                 # this case is deprecated
2025-10-08T16:01:12.3961792Z                 return create_mock_engine(url, **kwargs)  # type: ignore
2025-10-08T16:01:12.3961861Z             else:
2025-10-08T16:01:12.3962006Z                 raise exc.ArgumentError("unknown strategy: %r" % strat)
2025-10-08T16:01:12.3962074Z     
2025-10-08T16:01:12.3962178Z         kwargs.pop("empty_in_strategy", None)
2025-10-08T16:01:12.3962251Z     
2025-10-08T16:01:12.3962338Z         # create url.URL object
2025-10-08T16:01:12.3962419Z         u = _url.make_url(url)
2025-10-08T16:01:12.3962491Z     
2025-10-08T16:01:12.3962615Z         u, plugins, kwargs = u._instantiate_plugins(kwargs)
2025-10-08T16:01:12.3962681Z     
2025-10-08T16:01:12.3962782Z         entrypoint = u._get_entrypoint()
2025-10-08T16:01:12.3962886Z         _is_async = kwargs.pop("_is_async", False)
2025-10-08T16:01:12.3962969Z         if _is_async:
2025-10-08T16:01:12.3963096Z             dialect_cls = entrypoint.get_async_dialect_cls(u)
2025-10-08T16:01:12.3963166Z         else:
2025-10-08T16:01:12.3963283Z             dialect_cls = entrypoint.get_dialect_cls(u)
2025-10-08T16:01:12.3963350Z     
2025-10-08T16:01:12.3963455Z         if kwargs.pop("_coerce_config", False):
2025-10-08T16:01:12.3963527Z     
2025-10-08T16:01:12.3963679Z             def pop_kwarg(key: str, default: Optional[Any] = None) -> Any:
2025-10-08T16:01:12.3963777Z                 value = kwargs.pop(key, default)
2025-10-08T16:01:12.3963915Z                 if key in dialect_cls.engine_config_types:
2025-10-08T16:01:12.3964040Z                     value = dialect_cls.engine_config_types[key](value)
2025-10-08T16:01:12.3964126Z                 return value
2025-10-08T16:01:12.3964192Z     
2025-10-08T16:01:12.3964260Z         else:
2025-10-08T16:01:12.3964368Z             pop_kwarg = kwargs.pop  # type: ignore
2025-10-08T16:01:12.3964438Z     
2025-10-08T16:01:12.3964519Z         dialect_args = {}
2025-10-08T16:01:12.3964625Z         # consume dialect arguments from kwargs
2025-10-08T16:01:12.3964727Z         for k in util.get_cls_kwargs(dialect_cls):
2025-10-08T16:01:12.3964805Z             if k in kwargs:
2025-10-08T16:01:12.3964905Z                 dialect_args[k] = pop_kwarg(k)
2025-10-08T16:01:12.3964971Z     
2025-10-08T16:01:12.3965070Z         dbapi = kwargs.pop("module", None)
2025-10-08T16:01:12.3965149Z         if dbapi is None:
2025-10-08T16:01:12.3965227Z             dbapi_args = {}
2025-10-08T16:01:12.3965297Z     
2025-10-08T16:01:12.3965532Z             if "import_dbapi" in dialect_cls.__dict__:
2025-10-08T16:01:12.3965641Z                 dbapi_meth = dialect_cls.import_dbapi
2025-10-08T16:01:12.3965716Z     
2025-10-08T16:01:12.3965856Z             elif hasattr(dialect_cls, "dbapi") and inspect.ismethod(
2025-10-08T16:01:12.3965941Z                 dialect_cls.dbapi
2025-10-08T16:01:12.3966019Z             ):
2025-10-08T16:01:12.3966184Z                 util.warn_deprecated(
2025-10-08T16:01:12.3966324Z                     "The dbapi() classmethod on dialect classes has been "
2025-10-08T16:01:12.3966469Z                     "renamed to import_dbapi().  Implement an import_dbapi() "
2025-10-08T16:01:12.3966631Z                     f"classmethod directly on class {dialect_cls} to remove this "
2025-10-08T16:01:12.3966791Z                     "warning; the old .dbapi() classmethod may be maintained for "
2025-10-08T16:01:12.3966888Z                     "backwards compatibility.",
2025-10-08T16:01:12.3966968Z                     "2.0",
2025-10-08T16:01:12.3967042Z                 )
2025-10-08T16:01:12.3967138Z                 dbapi_meth = dialect_cls.dbapi
2025-10-08T16:01:12.3967206Z             else:
2025-10-08T16:01:12.3967312Z                 dbapi_meth = dialect_cls.import_dbapi
2025-10-08T16:01:12.3967539Z     
2025-10-08T16:01:12.3967663Z             for k in util.get_func_kwargs(dbapi_meth):
2025-10-08T16:01:12.3967755Z                 if k in kwargs:
2025-10-08T16:01:12.3967871Z                     dbapi_args[k] = pop_kwarg(k)
2025-10-08T16:01:12.3967976Z             dbapi = dbapi_meth(**dbapi_args)
2025-10-08T16:01:12.3968044Z     
2025-10-08T16:01:12.3968135Z         dialect_args["dbapi"] = dbapi
2025-10-08T16:01:12.3968205Z     
2025-10-08T16:01:12.3968374Z         dialect_args.setdefault("compiler_linting", compiler.NO_LINTING)
2025-10-08T16:01:12.3968528Z         enable_from_linting = kwargs.pop("enable_from_linting", True)
2025-10-08T16:01:12.3968618Z         if enable_from_linting:
2025-10-08T16:01:12.3968810Z             dialect_args["compiler_linting"] ^= compiler.COLLECT_CARTESIAN_PRODUCTS
2025-10-08T16:01:12.3968882Z     
2025-10-08T16:01:12.3968968Z         for plugin in plugins:
2025-10-08T16:01:12.3969112Z             plugin.handle_dialect_kwargs(dialect_cls, dialect_args)
2025-10-08T16:01:12.3969184Z     
2025-10-08T16:01:12.3969262Z         # create dialect
2025-10-08T16:01:12.3969359Z         dialect = dialect_cls(**dialect_args)
2025-10-08T16:01:12.3969436Z     
2025-10-08T16:01:12.3969527Z         # assemble connection arguments
2025-10-08T16:01:12.3969659Z         (cargs_tup, cparams) = dialect.create_connect_args(u)
2025-10-08T16:01:12.3969783Z         cparams.update(pop_kwarg("connect_args", {}))
2025-10-08T16:01:12.3969849Z     
2025-10-08T16:01:12.3970032Z         if "async_fallback" in cparams and util.asbool(cparams["async_fallback"]):
2025-10-08T16:01:12.3970122Z             util.warn_deprecated(
2025-10-08T16:01:12.3970286Z                 "The async_fallback dialect argument is deprecated and will be "
2025-10-08T16:01:12.3970387Z                 "removed in SQLAlchemy 2.1.",
2025-10-08T16:01:12.3970459Z                 "2.0",
2025-10-08T16:01:12.3970527Z             )
2025-10-08T16:01:12.3970599Z     
2025-10-08T16:01:12.3970702Z         cargs = list(cargs_tup)  # allow mutability
2025-10-08T16:01:12.3970769Z     
2025-10-08T16:01:12.3970869Z         # look for existing pool or create
2025-10-08T16:01:12.3970963Z         pool = pop_kwarg("pool", None)
2025-10-08T16:01:12.3971046Z         if pool is None:
2025-10-08T16:01:12.3971114Z     
2025-10-08T16:01:12.3971188Z             def connect(
2025-10-08T16:01:12.3971344Z                 connection_record: Optional[ConnectionPoolEntry] = None,
2025-10-08T16:01:12.3971431Z             ) -> DBAPIConnection:
2025-10-08T16:01:12.3971517Z                 if dialect._has_events:
2025-10-08T16:01:12.3971638Z                     for fn in dialect.dispatch.do_connect:
2025-10-08T16:01:12.3971730Z                         connection = cast(
2025-10-08T16:01:12.3971940Z                             DBAPIConnection,
2025-10-08T16:01:12.3972083Z                             fn(dialect, connection_record, cargs, cparams),
2025-10-08T16:01:12.3972158Z                         )
2025-10-08T16:01:12.3972259Z                         if connection is not None:
2025-10-08T16:01:12.3972349Z                             return connection
2025-10-08T16:01:12.3972416Z     
2025-10-08T16:01:12.3972635Z                 return dialect.connect(*cargs, **cparams)
2025-10-08T16:01:12.3972702Z     
2025-10-08T16:01:12.3972805Z             creator = pop_kwarg("creator", connect)
2025-10-08T16:01:12.3972876Z     
2025-10-08T16:01:12.3972984Z             poolclass = pop_kwarg("poolclass", None)
2025-10-08T16:01:12.3973078Z             if poolclass is None:
2025-10-08T16:01:12.3973199Z                 poolclass = dialect.get_dialect_pool_class(u)
2025-10-08T16:01:12.3973291Z             pool_args = {"dialect": dialect}
2025-10-08T16:01:12.3973365Z     
2025-10-08T16:01:12.3973515Z             # consume pool arguments from kwargs, translating a few of
2025-10-08T16:01:12.3973594Z             # the arguments
2025-10-08T16:01:12.3973707Z             for k in util.get_cls_kwargs(poolclass):
2025-10-08T16:01:12.3973809Z                 tk = _pool_translate_kwargs.get(k, k)
2025-10-08T16:01:12.3973891Z                 if tk in kwargs:
2025-10-08T16:01:12.3974000Z                     pool_args[k] = pop_kwarg(tk)
2025-10-08T16:01:12.3974072Z     
2025-10-08T16:01:12.3974166Z             for plugin in plugins:
2025-10-08T16:01:12.3974295Z                 plugin.handle_pool_kwargs(poolclass, pool_args)
2025-10-08T16:01:12.3974362Z     
2025-10-08T16:01:12.3974468Z             pool = poolclass(creator, **pool_args)
2025-10-08T16:01:12.3974537Z         else:
2025-10-08T16:01:12.3974624Z             pool._dialect = dialect
2025-10-08T16:01:12.3974699Z     
2025-10-08T16:01:12.3974769Z         if (
2025-10-08T16:01:12.3974860Z             hasattr(pool, "_is_asyncio")
2025-10-08T16:01:12.3974985Z             and pool._is_asyncio is not dialect.is_async
2025-10-08T16:01:12.3975055Z         ):
2025-10-08T16:01:12.3975146Z             raise exc.ArgumentError(
2025-10-08T16:01:12.3975277Z                 f"Pool class {pool.__class__.__name__} cannot be "
2025-10-08T16:01:12.3975404Z                 f"used with {'non-' if not dialect.is_async else ''}"
2025-10-08T16:01:12.3975493Z                 "asyncio engine",
2025-10-08T16:01:12.3975580Z                 code="pcls",
2025-10-08T16:01:12.3975650Z             )
2025-10-08T16:01:12.3975722Z     
2025-10-08T16:01:12.3975799Z         # create engine.
2025-10-08T16:01:12.3975892Z         if not pop_kwarg("future", True):
2025-10-08T16:01:12.3975988Z             raise exc.ArgumentError(
2025-10-08T16:01:12.3976090Z                 "The 'future' parameter passed to "
2025-10-08T16:01:12.3976196Z                 "create_engine() may only be set to True."
2025-10-08T16:01:12.3976272Z             )
2025-10-08T16:01:12.3976341Z     
2025-10-08T16:01:12.3976443Z         engineclass = base.Engine
2025-10-08T16:01:12.3976509Z     
2025-10-08T16:01:12.3976587Z         engine_args = {}
2025-10-08T16:01:12.3976698Z         for k in util.get_cls_kwargs(engineclass):
2025-10-08T16:01:12.3976777Z             if k in kwargs:
2025-10-08T16:01:12.3976873Z                 engine_args[k] = pop_kwarg(k)
2025-10-08T16:01:12.3976945Z     
2025-10-08T16:01:12.3977117Z         # internal flags used by the test suite for instrumenting / proxying
2025-10-08T16:01:12.3977211Z         # engines with mocks etc.
2025-10-08T16:01:12.3977464Z         _initialize = kwargs.pop("_initialize", True)
2025-10-08T16:01:12.3977564Z     
2025-10-08T16:01:12.3977664Z         # all kwargs should be consumed
2025-10-08T16:01:12.3977736Z         if kwargs:
2025-10-08T16:01:12.3977818Z >           raise TypeError(
2025-10-08T16:01:12.3977949Z                 "Invalid argument(s) %s sent to create_engine(), "
2025-10-08T16:01:12.3978090Z                 "using configuration %s/%s/%s.  Please check that the "
2025-10-08T16:01:12.3978356Z                 "keyword arguments are appropriate for this combination "
2025-10-08T16:01:12.3978446Z                 "of components."
2025-10-08T16:01:12.3978517Z                 % (
2025-10-08T16:01:12.3978615Z                     ",".join("'%s'" % k for k in kwargs),
2025-10-08T16:01:12.3978713Z                     dialect.__class__.__name__,
2025-10-08T16:01:12.3978800Z                     pool.__class__.__name__,
2025-10-08T16:01:12.3978994Z                     engineclass.__name__,
2025-10-08T16:01:12.3979063Z                 )
2025-10-08T16:01:12.3979129Z             )
2025-10-08T16:01:12.3979837Z E           TypeError: Invalid argument(s) 'pool_size','max_overflow' sent to create_engine(), using configuration SQLiteDialect_pysqlite/StaticPool/Engine.  Please check that the keyword arguments are appropriate for this combination of components.
2025-10-08T16:01:12.3979844Z 
2025-10-08T16:01:12.3980186Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/create.py:715: TypeError
2025-10-08T16:01:12.3980415Z _ ERROR at setup of TestFieldConsistency.test_no_username_vs_user_name_confusion _
2025-10-08T16:01:12.3980421Z 
2025-10-08T16:01:12.3980498Z     @pytest.fixture
2025-10-08T16:01:12.3980571Z     def app():
2025-10-08T16:01:12.3980671Z         """Create test app instance"""
2025-10-08T16:01:12.3980761Z >       app = create_app(TestConfig)
2025-10-08T16:01:12.3980841Z               ^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.3980845Z 
2025-10-08T16:01:12.3980951Z tests/test_field_consistency.py:30: 
2025-10-08T16:01:12.3981073Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:12.3981169Z app/__init__.py:141: in create_app
2025-10-08T16:01:12.3981250Z     db.init_app(app)
2025-10-08T16:01:12.3981591Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask_sqlalchemy/extension.py:374: in init_app
2025-10-08T16:01:12.3981725Z     engines[key] = self._make_engine(key, options, app)
2025-10-08T16:01:12.3981816Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.3982157Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask_sqlalchemy/extension.py:665: in _make_engine
2025-10-08T16:01:12.3982289Z     return sa.engine_from_config(options, prefix="")
2025-10-08T16:01:12.3982375Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.3982741Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/create.py:838: in engine_from_config
2025-10-08T16:01:12.3982840Z     return create_engine(url, **options)
2025-10-08T16:01:12.3982917Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.3983009Z <string>:2: in create_engine
2025-10-08T16:01:12.3983081Z     ???
2025-10-08T16:01:12.3983410Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/util/deprecations.py:281: in warned
2025-10-08T16:01:12.3983560Z     return fn(*args, **kwargs)  # type: ignore[no-any-return]
2025-10-08T16:01:12.3983644Z            ^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.3983769Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:12.3983775Z 
2025-10-08T16:01:12.3983945Z url = 'sqlite:///:memory:', kwargs = {'max_overflow': 30, 'pool_size': 10}
2025-10-08T16:01:12.3984040Z u = sqlite:///:memory:, plugins = []
2025-10-08T16:01:12.3984285Z entrypoint = <class 'sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite'>
2025-10-08T16:01:12.3984366Z _is_async = False
2025-10-08T16:01:12.3984551Z pop_kwarg = <function create_engine.<locals>.pop_kwarg at 0x7f308ddc6f20>
2025-10-08T16:01:12.3984972Z dialect_args = {'compiler_linting': 1, 'dbapi': <module 'sqlite3.dbapi2' from '/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/sqlite3/dbapi2.py'>}
2025-10-08T16:01:12.3984977Z 
2025-10-08T16:01:12.3985067Z     @util.deprecated_params(
2025-10-08T16:01:12.3985150Z         strategy=(
2025-10-08T16:01:12.3985219Z             "1.4",
2025-10-08T16:01:12.3985475Z             "The :paramref:`_sa.create_engine.strategy` keyword is deprecated, "
2025-10-08T16:01:12.3985622Z             "and the only argument accepted is 'mock'; please use "
2025-10-08T16:01:12.3985762Z             ":func:`.create_mock_engine` going forward.  For general "
2025-10-08T16:01:12.3985942Z             "customization of create_engine which may have been accomplished "
2025-10-08T16:01:12.3986084Z             "using strategies, see :class:`.CreateEnginePlugin`.",
2025-10-08T16:01:12.3986245Z         ),
2025-10-08T16:01:12.3986334Z         empty_in_strategy=(
2025-10-08T16:01:12.3986404Z             "1.4",
2025-10-08T16:01:12.3986566Z             "The :paramref:`_sa.create_engine.empty_in_strategy` keyword is "
2025-10-08T16:01:12.3986729Z             "deprecated, and no longer has any effect.  All IN expressions "
2025-10-08T16:01:12.3986820Z             "are now rendered using "
2025-10-08T16:01:12.3986987Z             'the "expanding parameter" strategy which renders a set of bound'
2025-10-08T16:01:12.3987147Z             'expressions, or an "empty set" SELECT, at statement execution'
2025-10-08T16:01:12.3987220Z             "time.",
2025-10-08T16:01:12.3987295Z         ),
2025-10-08T16:01:12.3987540Z         implicit_returning=(
2025-10-08T16:01:12.3987617Z             "2.0",
2025-10-08T16:01:12.3987783Z             "The :paramref:`_sa.create_engine.implicit_returning` parameter "
2025-10-08T16:01:12.3987935Z             "is deprecated and will be removed in a future release. ",
2025-10-08T16:01:12.3988004Z         ),
2025-10-08T16:01:12.3994665Z     )
2025-10-08T16:01:12.3994898Z     def create_engine(url: Union[str, _url.URL], **kwargs: Any) -> Engine:
2025-10-08T16:01:12.3995041Z         """Create a new :class:`_engine.Engine` instance.
2025-10-08T16:01:12.3995112Z     
2025-10-08T16:01:12.3995310Z         The standard calling form is to send the :ref:`URL <database_urls>` as the
2025-10-08T16:01:12.3995439Z         first positional argument, usually a string
2025-10-08T16:01:12.3995613Z         that indicates database dialect and connection arguments::
2025-10-08T16:01:12.3995680Z     
2025-10-08T16:01:12.3996070Z             engine = create_engine("***localhost/test")
2025-10-08T16:01:12.3996142Z     
2025-10-08T16:01:12.3996218Z         .. note::
2025-10-08T16:01:12.3996295Z     
2025-10-08T16:01:12.3996484Z             Please review :ref:`database_urls` for general guidelines in composing
2025-10-08T16:01:12.3996665Z             URL strings.  In particular, special characters, such as those often
2025-10-08T16:01:12.3996840Z             part of passwords, must be URL encoded to be properly parsed.
2025-10-08T16:01:12.3996908Z     
2025-10-08T16:01:12.3997050Z         Additional keyword arguments may then follow it which
2025-10-08T16:01:12.3997224Z         establish various options on the resulting :class:`_engine.Engine`
2025-10-08T16:01:12.3997589Z         and its underlying :class:`.Dialect` and :class:`_pool.Pool`
2025-10-08T16:01:12.3997714Z         constructs::
2025-10-08T16:01:12.3997783Z     
2025-10-08T16:01:12.3997876Z             engine = create_engine(
2025-10-08T16:01:12.3998064Z                 "***hostname/dbname",
2025-10-08T16:01:12.3998161Z                 pool_recycle=3600,
2025-10-08T16:01:12.3998243Z                 echo=True,
2025-10-08T16:01:12.3998314Z             )
2025-10-08T16:01:12.3998390Z     
2025-10-08T16:01:12.3998481Z         The string form of the URL is
2025-10-08T16:01:12.3998670Z         ``dialect[+driver]://user:password@host/dbname[?key=value..]``, where
2025-10-08T16:01:12.3998814Z         ``dialect`` is a database name such as ``mysql``, ``oracle``,
2025-10-08T16:01:12.3998969Z         ``postgresql``, etc., and ``driver`` the name of a DBAPI, such as
2025-10-08T16:01:12.3999114Z         ``psycopg2``, ``pyodbc``, ``cx_oracle``, etc.  Alternatively,
2025-10-08T16:01:12.3999275Z         the URL can be an instance of :class:`~sqlalchemy.engine.url.URL`.
2025-10-08T16:01:12.3999343Z     
2025-10-08T16:01:12.3999652Z         ``**kwargs`` takes a wide variety of options which are routed
2025-10-08T16:01:12.3999840Z         towards their appropriate components.  Arguments may be specific to
2025-10-08T16:01:12.4000000Z         the :class:`_engine.Engine`, the underlying :class:`.Dialect`,
2025-10-08T16:01:12.4000079Z         as well as the
2025-10-08T16:01:12.4000259Z         :class:`_pool.Pool`.  Specific dialects also accept keyword arguments that
2025-10-08T16:01:12.4000532Z         are unique to that dialect.   Here, we describe the parameters
2025-10-08T16:01:12.4000673Z         that are common to most :func:`_sa.create_engine()` usage.
2025-10-08T16:01:12.4000740Z     
2025-10-08T16:01:12.4000913Z         Once established, the newly resulting :class:`_engine.Engine` will
2025-10-08T16:01:12.4001076Z         request a connection from the underlying :class:`_pool.Pool` once
2025-10-08T16:01:12.4001268Z         :meth:`_engine.Engine.connect` is called, or a method which depends on it
2025-10-08T16:01:12.4001409Z         such as :meth:`_engine.Engine.execute` is invoked.   The
2025-10-08T16:01:12.4001502Z         :class:`_pool.Pool` in turn
2025-10-08T16:01:12.4001670Z         will establish the first actual DBAPI connection when this request
2025-10-08T16:01:12.4001831Z         is received.   The :func:`_sa.create_engine` call itself does **not**
2025-10-08T16:01:12.4001959Z         establish any actual DBAPI connections directly.
2025-10-08T16:01:12.4002033Z     
2025-10-08T16:01:12.4002115Z         .. seealso::
2025-10-08T16:01:12.4002195Z     
2025-10-08T16:01:12.4002282Z             :doc:`/core/engines`
2025-10-08T16:01:12.4002347Z     
2025-10-08T16:01:12.4002444Z             :doc:`/dialects/index`
2025-10-08T16:01:12.4002510Z     
2025-10-08T16:01:12.4002602Z             :ref:`connections_toplevel`
2025-10-08T16:01:12.4002679Z     
2025-10-08T16:01:12.4002825Z         :param connect_args: a dictionary of options which will be
2025-10-08T16:01:12.4002959Z             passed directly to the DBAPI's ``connect()`` method as
2025-10-08T16:01:12.4003089Z             additional keyword arguments.  See the example
2025-10-08T16:01:12.4003184Z             at :ref:`custom_dbapi_args`.
2025-10-08T16:01:12.4003257Z     
2025-10-08T16:01:12.4003404Z         :param creator: a callable which returns a DBAPI connection.
2025-10-08T16:01:12.4003546Z             This creation function will be passed to the underlying
2025-10-08T16:01:12.4003705Z             connection pool and will be used to create all new database
2025-10-08T16:01:12.4003849Z             connections. Usage of this function causes connection
2025-10-08T16:01:12.4003991Z             parameters specified in the URL argument to be bypassed.
2025-10-08T16:01:12.4004068Z     
2025-10-08T16:01:12.4004174Z             This hook is not as flexible as the newer
2025-10-08T16:01:12.4004353Z             :meth:`_events.DialectEvents.do_connect` hook which allows complete
2025-10-08T16:01:12.4004524Z             control over how a connection is made to the database, given the full
2025-10-08T16:01:12.4004634Z             set of URL arguments and state beforehand.
2025-10-08T16:01:12.4004709Z     
2025-10-08T16:01:12.4004788Z             .. seealso::
2025-10-08T16:01:12.4004854Z     
2025-10-08T16:01:12.4005027Z                 :meth:`_events.DialectEvents.do_connect` - event hook that allows
2025-10-08T16:01:12.4005146Z                 full control over DBAPI connection mechanics.
2025-10-08T16:01:12.4005214Z     
2025-10-08T16:01:12.4005316Z                 :ref:`custom_dbapi_args`
2025-10-08T16:01:12.4005383Z     
2025-10-08T16:01:12.4005542Z         :param echo=False: if True, the Engine will log all statements
2025-10-08T16:01:12.4005691Z             as well as a ``repr()`` of their parameter lists to the default log
2025-10-08T16:01:12.4005861Z             handler, which defaults to ``sys.stdout`` for output.   If set to the
2025-10-08T16:01:12.4006032Z             string ``"debug"``, result rows will be printed to the standard output
2025-10-08T16:01:12.4006187Z             as well. The ``echo`` attribute of ``Engine`` can be modified at any
2025-10-08T16:01:12.4006430Z             time to turn logging on and off; direct control of logging is also
2025-10-08T16:01:12.4006581Z             available using the standard Python ``logging`` module.
2025-10-08T16:01:12.4006648Z     
2025-10-08T16:01:12.4006736Z             .. seealso::
2025-10-08T16:01:12.4006803Z     
2025-10-08T16:01:12.4006949Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.4007112Z                 logging.
2025-10-08T16:01:12.4007180Z     
2025-10-08T16:01:12.4007246Z     
2025-10-08T16:01:12.4007616Z         :param echo_pool=False: if True, the connection pool will log
2025-10-08T16:01:12.4007787Z             informational output such as when connections are invalidated
2025-10-08T16:01:12.4007949Z             as well as when connections are recycled to the default log handler,
2025-10-08T16:01:12.4008119Z             which defaults to ``sys.stdout`` for output.   If set to the string
2025-10-08T16:01:12.4008276Z             ``"debug"``, the logging will include pool checkouts and checkins.
2025-10-08T16:01:12.4008456Z             Direct control of logging is also available using the standard Python
2025-10-08T16:01:12.4008539Z             ``logging`` module.
2025-10-08T16:01:12.4008605Z     
2025-10-08T16:01:12.4008690Z             .. seealso::
2025-10-08T16:01:12.4008757Z     
2025-10-08T16:01:12.4008904Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.4008994Z                 logging.
2025-10-08T16:01:12.4009060Z     
2025-10-08T16:01:12.4009126Z     
2025-10-08T16:01:12.4009293Z         :param empty_in_strategy:   No longer used; SQLAlchemy now uses
2025-10-08T16:01:12.4009402Z             "empty set" behavior for IN in all cases.
2025-10-08T16:01:12.4009478Z     
2025-10-08T16:01:12.4009640Z         :param enable_from_linting: defaults to True.  Will emit a warning
2025-10-08T16:01:12.4009807Z             if a given SELECT statement is found to have un-linked FROM elements
2025-10-08T16:01:12.4009923Z             which would cause a cartesian product.
2025-10-08T16:01:12.4009991Z     
2025-10-08T16:01:12.4010081Z             .. versionadded:: 1.4
2025-10-08T16:01:12.4010153Z     
2025-10-08T16:01:12.4010230Z             .. seealso::
2025-10-08T16:01:12.4010301Z     
2025-10-08T16:01:12.4010384Z                 :ref:`change_4737`
2025-10-08T16:01:12.4010455Z     
2025-10-08T16:01:12.4010632Z         :param execution_options: Dictionary execution options which will
2025-10-08T16:01:12.4010736Z             be applied to all connections.  See
2025-10-08T16:01:12.4010888Z             :meth:`~sqlalchemy.engine.Connection.execution_options`
2025-10-08T16:01:12.4010964Z     
2025-10-08T16:01:12.4011108Z         :param future: Use the 2.0 style :class:`_engine.Engine` and
2025-10-08T16:01:12.4011208Z             :class:`_engine.Connection` API.
2025-10-08T16:01:12.4011282Z     
2025-10-08T16:01:12.4011427Z             As of SQLAlchemy 2.0, this parameter is present for backwards
2025-10-08T16:01:12.4011608Z             compatibility only and must remain at its default value of ``True``.
2025-10-08T16:01:12.4011676Z     
2025-10-08T16:01:12.4011821Z             The :paramref:`_sa.create_engine.future` parameter will be
2025-10-08T16:01:12.4011979Z             deprecated in a subsequent 2.x release and eventually removed.
2025-10-08T16:01:12.4012047Z     
2025-10-08T16:01:12.4012134Z             .. versionadded:: 1.4
2025-10-08T16:01:12.4012215Z     
2025-10-08T16:01:12.4012373Z             .. versionchanged:: 2.0 All :class:`_engine.Engine` objects are
2025-10-08T16:01:12.4012532Z                "future" style engines and there is no longer a ``future=False``
2025-10-08T16:01:12.4012625Z                mode of operation.
2025-10-08T16:01:12.4012691Z     
2025-10-08T16:01:12.4012772Z             .. seealso::
2025-10-08T16:01:12.4012839Z     
2025-10-08T16:01:12.4012930Z                 :ref:`migration_20_toplevel`
2025-10-08T16:01:12.4013002Z     
2025-10-08T16:01:12.4013326Z         :param hide_parameters: Boolean, when set to True, SQL statement parameters
2025-10-08T16:01:12.4013502Z             will not be displayed in INFO logging nor will they be formatted into
2025-10-08T16:01:12.4013664Z             the string representation of :class:`.StatementError` objects.
2025-10-08T16:01:12.4013733Z     
2025-10-08T16:01:12.4013829Z             .. versionadded:: 1.3.8
2025-10-08T16:01:12.4013895Z     
2025-10-08T16:01:12.4014074Z             .. seealso::
2025-10-08T16:01:12.4014147Z     
2025-10-08T16:01:12.4014291Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.4014366Z                 logging.
2025-10-08T16:01:12.4014437Z     
2025-10-08T16:01:12.4014615Z         :param implicit_returning=True:  Legacy parameter that may only be set
2025-10-08T16:01:12.4014771Z             to True. In SQLAlchemy 2.0, this parameter does nothing. In order to
2025-10-08T16:01:12.4014937Z             disable "implicit returning" for statements invoked by the ORM,
2025-10-08T16:01:12.4015059Z             configure this on a per-table basis using the
2025-10-08T16:01:12.4015193Z             :paramref:`.Table.implicit_returning` parameter.
2025-10-08T16:01:12.4015259Z     
2025-10-08T16:01:12.4015324Z     
2025-10-08T16:01:12.4015500Z         :param insertmanyvalues_page_size: number of rows to format into an
2025-10-08T16:01:12.4015693Z          INSERT statement when the statement uses "insertmanyvalues" mode, which is
2025-10-08T16:01:12.4015863Z          a paged form of bulk insert that is used for many backends when using
2025-10-08T16:01:12.4016047Z          :term:`executemany` execution typically in conjunction with RETURNING.
2025-10-08T16:01:12.4016221Z          Defaults to 1000, but may also be subject to dialect-specific limiting
2025-10-08T16:01:12.4016390Z          factors which may override this value on a per-statement basis.
2025-10-08T16:01:12.4016457Z     
2025-10-08T16:01:12.4016545Z          .. versionadded:: 2.0
2025-10-08T16:01:12.4016619Z     
2025-10-08T16:01:12.4016700Z          .. seealso::
2025-10-08T16:01:12.4016766Z     
2025-10-08T16:01:12.4016868Z             :ref:`engine_insertmanyvalues`
2025-10-08T16:01:12.4016934Z     
2025-10-08T16:01:12.4017042Z             :ref:`engine_insertmanyvalues_page_size`
2025-10-08T16:01:12.4017120Z     
2025-10-08T16:01:12.4017503Z             :paramref:`_engine.Connection.execution_options.insertmanyvalues_page_size`
2025-10-08T16:01:12.4017625Z     
2025-10-08T16:01:12.4017798Z         :param isolation_level: optional string name of an isolation level
2025-10-08T16:01:12.4017940Z             which will be set on all new connections unconditionally.
2025-10-08T16:01:12.4018105Z             Isolation levels are typically some subset of the string names
2025-10-08T16:01:12.4018208Z             ``"SERIALIZABLE"``, ``"REPEATABLE READ"``,
2025-10-08T16:01:12.4018357Z             ``"READ COMMITTED"``, ``"READ UNCOMMITTED"`` and ``"AUTOCOMMIT"``
2025-10-08T16:01:12.4018449Z             based on backend.
2025-10-08T16:01:12.4018516Z     
2025-10-08T16:01:12.4018673Z             The :paramref:`_sa.create_engine.isolation_level` parameter is
2025-10-08T16:01:12.4018768Z             in contrast to the
2025-10-08T16:01:12.4018914Z             :paramref:`.Connection.execution_options.isolation_level`
2025-10-08T16:01:12.4019049Z             execution option, which may be set on an individual
2025-10-08T16:01:12.4019201Z             :class:`.Connection`, as well as the same parameter passed to
2025-10-08T16:01:12.4019361Z             :meth:`.Engine.execution_options`, where it may be used to create
2025-10-08T16:01:12.4019546Z             multiple engines with different isolation levels that share a common
2025-10-08T16:01:12.4019638Z             connection pool and dialect.
2025-10-08T16:01:12.4019707Z     
2025-10-08T16:01:12.4019809Z             .. versionchanged:: 2.0 The
2025-10-08T16:01:12.4019929Z                :paramref:`_sa.create_engine.isolation_level`
2025-10-08T16:01:12.4020233Z                parameter has been generalized to work on all dialects which support
2025-10-08T16:01:12.4020409Z                the concept of isolation level, and is provided as a more succinct,
2025-10-08T16:01:12.4020576Z                up front configuration switch in contrast to the execution option
2025-10-08T16:01:12.4020706Z                which is more of an ad-hoc programmatic option.
2025-10-08T16:01:12.4020774Z     
2025-10-08T16:01:12.4020991Z             .. seealso::
2025-10-08T16:01:12.4021064Z     
2025-10-08T16:01:12.4021152Z                 :ref:`dbapi_autocommit`
2025-10-08T16:01:12.4021224Z     
2025-10-08T16:01:12.4021360Z         :param json_deserializer: for dialects that support the
2025-10-08T16:01:12.4021447Z             :class:`_types.JSON`
2025-10-08T16:01:12.4021619Z             datatype, this is a Python callable that will convert a JSON string
2025-10-08T16:01:12.4021788Z             to a Python object.  By default, the Python ``json.loads`` function is
2025-10-08T16:01:12.4021862Z             used.
2025-10-08T16:01:12.4021937Z     
2025-10-08T16:01:12.4022106Z             .. versionchanged:: 1.3.7  The SQLite dialect renamed this from
2025-10-08T16:01:12.4022201Z                ``_json_deserializer``.
2025-10-08T16:01:12.4022269Z     
2025-10-08T16:01:12.4022457Z         :param json_serializer: for dialects that support the :class:`_types.JSON`
2025-10-08T16:01:12.4022627Z             datatype, this is a Python callable that will render a given object
2025-10-08T16:01:12.4022782Z             as JSON.   By default, the Python ``json.dumps`` function is used.
2025-10-08T16:01:12.4022848Z     
2025-10-08T16:01:12.4023006Z             .. versionchanged:: 1.3.7  The SQLite dialect renamed this from
2025-10-08T16:01:12.4023094Z                ``_json_serializer``.
2025-10-08T16:01:12.4023160Z     
2025-10-08T16:01:12.4023236Z     
2025-10-08T16:01:12.4023385Z         :param label_length=None: optional integer value which limits
2025-10-08T16:01:12.4023540Z             the size of dynamically generated column labels to that many
2025-10-08T16:01:12.4023670Z             characters. If less than 6, labels are generated as
2025-10-08T16:01:12.4023769Z             "_(counter)". If ``None``, the value of
2025-10-08T16:01:12.4023936Z             ``dialect.max_identifier_length``, which may be affected via the
2025-10-08T16:01:12.4024090Z             :paramref:`_sa.create_engine.max_identifier_length` parameter,
2025-10-08T16:01:12.4024187Z             is used instead.   The value of
2025-10-08T16:01:12.4024299Z             :paramref:`_sa.create_engine.label_length`
2025-10-08T16:01:12.4024391Z             may not be larger than that of
2025-10-08T16:01:12.4024523Z             :paramref:`_sa.create_engine.max_identfier_length`.
2025-10-08T16:01:12.4024589Z     
2025-10-08T16:01:12.4024666Z             .. seealso::
2025-10-08T16:01:12.4024736Z     
2025-10-08T16:01:12.4024868Z                 :paramref:`_sa.create_engine.max_identifier_length`
2025-10-08T16:01:12.4024934Z     
2025-10-08T16:01:12.4025103Z         :param logging_name:  String identifier which will be used within
2025-10-08T16:01:12.4025239Z             the "name" field of logging records generated within the
2025-10-08T16:01:12.4025388Z             "sqlalchemy.engine" logger. Defaults to a hexstring of the
2025-10-08T16:01:12.4025472Z             object's id.
2025-10-08T16:01:12.4025539Z     
2025-10-08T16:01:12.4025622Z             .. seealso::
2025-10-08T16:01:12.4025688Z     
2025-10-08T16:01:12.4025840Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.4025921Z                 logging.
2025-10-08T16:01:12.4025986Z     
2025-10-08T16:01:12.4026149Z                 :paramref:`_engine.Connection.execution_options.logging_token`
2025-10-08T16:01:12.4026222Z     
2025-10-08T16:01:12.4026404Z         :param max_identifier_length: integer; override the max_identifier_length
2025-10-08T16:01:12.4026571Z             determined by the dialect.  if ``None`` or zero, has no effect.  This
2025-10-08T16:01:12.4026827Z             is the database's configured maximum number of characters that may be
2025-10-08T16:01:12.4026993Z             used in a SQL identifier such as a table name, column name, or label
2025-10-08T16:01:12.4027173Z             name. All dialects determine this value automatically, however in the
2025-10-08T16:01:12.4027430Z             case of a new database version for which this value has changed but
2025-10-08T16:01:12.4027716Z             SQLAlchemy's dialect has not been adjusted, the value may be passed
2025-10-08T16:01:12.4027798Z             here.
2025-10-08T16:01:12.4027864Z     
2025-10-08T16:01:12.4027958Z             .. versionadded:: 1.3.9
2025-10-08T16:01:12.4028025Z     
2025-10-08T16:01:12.4028100Z             .. seealso::
2025-10-08T16:01:12.4028174Z     
2025-10-08T16:01:12.4028284Z                 :paramref:`_sa.create_engine.label_length`
2025-10-08T16:01:12.4028349Z     
2025-10-08T16:01:12.4028504Z         :param max_overflow=10: the number of connections to allow in
2025-10-08T16:01:12.4028663Z             connection pool "overflow", that is connections that can be
2025-10-08T16:01:12.4028817Z             opened above and beyond the pool_size setting, which defaults
2025-10-08T16:01:12.4028991Z             to five. this is only used with :class:`~sqlalchemy.pool.QueuePool`.
2025-10-08T16:01:12.4029057Z     
2025-10-08T16:01:12.4029232Z         :param module=None: reference to a Python module object (the module
2025-10-08T16:01:12.4029401Z             itself, not its string name).  Specifies an alternate DBAPI module to
2025-10-08T16:01:12.4029548Z             be used by the engine's dialect.  Each sub-dialect references a
2025-10-08T16:01:12.4029723Z             specific DBAPI which will be imported before first connect.  This
2025-10-08T16:01:12.4029969Z             parameter causes the import to be bypassed, and the given module to
2025-10-08T16:01:12.4030228Z             be used instead. Can be used for testing of DBAPIs as well as to
2025-10-08T16:01:12.4030427Z             inject "mock" DBAPI implementations into the :class:`_engine.Engine`.
2025-10-08T16:01:12.4030496Z     
2025-10-08T16:01:12.4030787Z         :param paramstyle=None: The `paramstyle <https://legacy.python.org/dev/peps/pep-0249/#paramstyle>`_
2025-10-08T16:01:12.4030950Z             to use when rendering bound parameters.  This style defaults to the
2025-10-08T16:01:12.4031112Z             one recommended by the DBAPI itself, which is retrieved from the
2025-10-08T16:01:12.4031293Z             ``.paramstyle`` attribute of the DBAPI.  However, most DBAPIs accept
2025-10-08T16:01:12.4031448Z             more than one paramstyle, and in particular it may be desirable
2025-10-08T16:01:12.4031624Z             to change a "named" paramstyle into a "positional" one, or vice versa.
2025-10-08T16:01:12.4031772Z             When this attribute is passed, it should be one of the values
2025-10-08T16:01:12.4031890Z             ``"qmark"``, ``"numeric"``, ``"named"``, ``"format"`` or
2025-10-08T16:01:12.4032050Z             ``"pyformat"``, and should correspond to a parameter style known
2025-10-08T16:01:12.4032160Z             to be supported by the DBAPI in use.
2025-10-08T16:01:12.4032229Z     
2025-10-08T16:01:12.4032368Z         :param pool=None: an already-constructed instance of
2025-10-08T16:01:12.4032478Z             :class:`~sqlalchemy.pool.Pool`, such as a
2025-10-08T16:01:12.4032639Z             :class:`~sqlalchemy.pool.QueuePool` instance. If non-None, this
2025-10-08T16:01:12.4032797Z             pool will be used directly as the underlying connection pool
2025-10-08T16:01:12.4032946Z             for the engine, bypassing whatever connection parameters are
2025-10-08T16:01:12.4033098Z             present in the URL argument. For information on constructing
2025-10-08T16:01:12.4033244Z             connection pools manually, see :ref:`pooling_toplevel`.
2025-10-08T16:01:12.4033311Z     
2025-10-08T16:01:12.4033463Z         :param poolclass=None: a :class:`~sqlalchemy.pool.Pool`
2025-10-08T16:01:12.4033733Z             subclass, which will be used to create a connection pool
2025-10-08T16:01:12.4033900Z             instance using the connection parameters given in the URL. Note
2025-10-08T16:01:12.4034039Z             this differs from ``pool`` in that you don't actually
2025-10-08T16:01:12.4034202Z             instantiate the pool in this case, you just indicate what type
2025-10-08T16:01:12.4034298Z             of pool to be used.
2025-10-08T16:01:12.4034444Z     
2025-10-08T16:01:12.4034615Z         :param pool_logging_name:  String identifier which will be used within
2025-10-08T16:01:12.4034764Z            the "name" field of logging records generated within the
2025-10-08T16:01:12.4034929Z            "sqlalchemy.pool" logger. Defaults to a hexstring of the object's
2025-10-08T16:01:12.4035004Z            id.
2025-10-08T16:01:12.4035070Z     
2025-10-08T16:01:12.4035148Z            .. seealso::
2025-10-08T16:01:12.4035217Z     
2025-10-08T16:01:12.4035361Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.4035440Z                 logging.
2025-10-08T16:01:12.4035510Z     
2025-10-08T16:01:12.4035679Z         :param pool_pre_ping: boolean, if True will enable the connection pool
2025-10-08T16:01:12.4035826Z             "pre-ping" feature that tests connections for liveness upon
2025-10-08T16:01:12.4035909Z             each checkout.
2025-10-08T16:01:12.4035975Z     
2025-10-08T16:01:12.4036066Z             .. versionadded:: 1.2
2025-10-08T16:01:12.4036136Z     
2025-10-08T16:01:12.4036211Z             .. seealso::
2025-10-08T16:01:12.4036282Z     
2025-10-08T16:01:12.4036383Z                 :ref:`pool_disconnects_pessimistic`
2025-10-08T16:01:12.4036449Z     
2025-10-08T16:01:12.4036597Z         :param pool_size=5: the number of connections to keep open
2025-10-08T16:01:12.4036705Z             inside the connection pool. This used with
2025-10-08T16:01:12.4036810Z             :class:`~sqlalchemy.pool.QueuePool` as
2025-10-08T16:01:12.4036968Z             well as :class:`~sqlalchemy.pool.SingletonThreadPool`.  With
2025-10-08T16:01:12.4037116Z             :class:`~sqlalchemy.pool.QueuePool`, a ``pool_size`` setting
2025-10-08T16:01:12.4037279Z             of 0 indicates no limit; to disable pooling, set ``poolclass`` to
2025-10-08T16:01:12.4037503Z             :class:`~sqlalchemy.pool.NullPool` instead.
2025-10-08T16:01:12.4037570Z     
2025-10-08T16:01:12.4037727Z         :param pool_recycle=-1: this setting causes the pool to recycle
2025-10-08T16:01:12.4037881Z             connections after the given number of seconds has passed. It
2025-10-08T16:01:12.4038020Z             defaults to -1, or no timeout. For example, setting to 3600
2025-10-08T16:01:12.4038172Z             means connections will be recycled after one hour. Note that
2025-10-08T16:01:12.4038308Z             MySQL in particular will disconnect automatically if no
2025-10-08T16:01:12.4038471Z             activity is detected on a connection for eight hours (although
2025-10-08T16:01:12.4038629Z             this is configurable with the MySQLDB connection itself and the
2025-10-08T16:01:12.4038724Z             server configuration as well).
2025-10-08T16:01:12.4038794Z     
2025-10-08T16:01:12.4038871Z             .. seealso::
2025-10-08T16:01:12.4038936Z     
2025-10-08T16:01:12.4039033Z                 :ref:`pool_setting_recycle`
2025-10-08T16:01:12.4039098Z     
2025-10-08T16:01:12.4039219Z         :param pool_reset_on_return='rollback': set the
2025-10-08T16:01:12.4039388Z             :paramref:`_pool.Pool.reset_on_return` parameter of the underlying
2025-10-08T16:01:12.4039526Z             :class:`_pool.Pool` object, which can be set to the values
2025-10-08T16:01:12.4039630Z             ``"rollback"``, ``"commit"``, or ``None``.
2025-10-08T16:01:12.4039696Z     
2025-10-08T16:01:12.4039772Z             .. seealso::
2025-10-08T16:01:12.4039844Z     
2025-10-08T16:01:12.4039931Z                 :ref:`pool_reset_on_return`
2025-10-08T16:01:12.4039996Z     
2025-10-08T16:01:12.4040294Z                 :ref:`dbapi_autocommit_skip_rollback` - a more modern approach
2025-10-08T16:01:12.4040436Z                 to using connections with no transactional instructions
2025-10-08T16:01:12.4040507Z     
2025-10-08T16:01:12.4040652Z         :param pool_timeout=30: number of seconds to wait before giving
2025-10-08T16:01:12.4040787Z             up on getting a connection from the pool. This is only used
2025-10-08T16:01:12.4040963Z             with :class:`~sqlalchemy.pool.QueuePool`. This can be a float but is
2025-10-08T16:01:12.4041236Z             subject to the limitations of Python time functions which may not be
2025-10-08T16:01:12.4041337Z             reliable in the tens of milliseconds.
2025-10-08T16:01:12.4041410Z     
2025-10-08T16:01:12.4041558Z             .. note: don't use 30.0 above, it seems to break with the :param tag
2025-10-08T16:01:12.4041631Z     
2025-10-08T16:01:12.4041806Z         :param pool_use_lifo=False: use LIFO (last-in-first-out) when retrieving
2025-10-08T16:01:12.4041941Z             connections from :class:`.QueuePool` instead of FIFO
2025-10-08T16:01:12.4042115Z             (first-in-first-out). Using LIFO, a server-side timeout scheme can
2025-10-08T16:01:12.4042284Z             reduce the number of connections used during non- peak   periods of
2025-10-08T16:01:12.4042459Z             use.   When planning for server-side timeouts, ensure that a recycle or
2025-10-08T16:01:12.4042634Z             pre-ping strategy is in use to gracefully   handle stale connections.
2025-10-08T16:01:12.4042707Z     
2025-10-08T16:01:12.4042801Z               .. versionadded:: 1.3
2025-10-08T16:01:12.4042866Z     
2025-10-08T16:01:12.4042953Z               .. seealso::
2025-10-08T16:01:12.4043035Z     
2025-10-08T16:01:12.4043119Z                 :ref:`pool_use_lifo`
2025-10-08T16:01:12.4043185Z     
2025-10-08T16:01:12.4043275Z                 :ref:`pool_disconnects`
2025-10-08T16:01:12.4043339Z     
2025-10-08T16:01:12.4043481Z         :param plugins: string list of plugin names to load.  See
2025-10-08T16:01:12.4043604Z             :class:`.CreateEnginePlugin` for background.
2025-10-08T16:01:12.4043669Z     
2025-10-08T16:01:12.4043755Z             .. versionadded:: 1.2.3
2025-10-08T16:01:12.4043825Z     
2025-10-08T16:01:12.4043995Z         :param query_cache_size: size of the cache used to cache the SQL string
2025-10-08T16:01:12.4044115Z          form of queries.  Set to zero to disable caching.
2025-10-08T16:01:12.4044186Z     
2025-10-08T16:01:12.4044367Z          The cache is pruned of its least recently used items when its size reaches
2025-10-08T16:01:12.4044529Z          N * 1.5.  Defaults to 500, meaning the cache will always store at least
2025-10-08T16:01:12.4044695Z          500 SQL statements when filled, and will grow up to 750 items at which
2025-10-08T16:01:12.4044856Z          point it is pruned back down to 500 by removing the 250 least recently
2025-10-08T16:01:12.4044936Z          used items.
2025-10-08T16:01:12.4045001Z     
2025-10-08T16:01:12.4045170Z          Caching is accomplished on a per-statement basis by generating a
2025-10-08T16:01:12.4045371Z          cache key that represents the statement's structure, then generating
2025-10-08T16:01:12.4045534Z          string SQL for the current dialect only if that key is not present
2025-10-08T16:01:12.4045700Z          in the cache.   All statements support caching, however some features
2025-10-08T16:01:12.4045858Z          such as an INSERT with a large set of parameters will intentionally
2025-10-08T16:01:12.4046019Z          bypass the cache.   SQL logging will indicate statistics for each
2025-10-08T16:01:12.4046157Z          statement whether or not it were pull from the cache.
2025-10-08T16:01:12.4046223Z     
2025-10-08T16:01:12.4046399Z          .. note:: some ORM functions related to unit-of-work persistence as well
2025-10-08T16:01:12.4046555Z             as some attribute loading strategies will make use of individual
2025-10-08T16:01:12.4046672Z             per-mapper caches outside of the main cache.
2025-10-08T16:01:12.4046743Z     
2025-10-08T16:01:12.4046808Z     
2025-10-08T16:01:12.4046969Z          .. seealso::
2025-10-08T16:01:12.4047042Z     
2025-10-08T16:01:12.4047125Z             :ref:`sql_caching`
2025-10-08T16:01:12.4047190Z     
2025-10-08T16:01:12.4047280Z          .. versionadded:: 1.4
2025-10-08T16:01:12.4047508Z     
2025-10-08T16:01:12.4047713Z         :param skip_autocommit_rollback: When True, the dialect will
2025-10-08T16:01:12.4047898Z            unconditionally skip all calls to the DBAPI ``connection.rollback()``
2025-10-08T16:01:12.4048199Z            method if the DBAPI connection is confirmed to be in "autocommit" mode.
2025-10-08T16:01:12.4048382Z            The availability of this feature is dialect specific; if not available,
2025-10-08T16:01:12.4048565Z            a ``NotImplementedError`` is raised by the dialect when rollback occurs.
2025-10-08T16:01:12.4048630Z     
2025-10-08T16:01:12.4048713Z            .. seealso::
2025-10-08T16:01:12.4048779Z     
2025-10-08T16:01:12.4048891Z                 :ref:`dbapi_autocommit_skip_rollback`
2025-10-08T16:01:12.4048962Z     
2025-10-08T16:01:12.4049049Z            .. versionadded:: 2.0.43
2025-10-08T16:01:12.4049122Z     
2025-10-08T16:01:12.4049306Z         :param use_insertmanyvalues: True by default, use the "insertmanyvalues"
2025-10-08T16:01:12.4049461Z          execution style for INSERT..RETURNING statements by default.
2025-10-08T16:01:12.4049532Z     
2025-10-08T16:01:12.4049616Z          .. versionadded:: 2.0
2025-10-08T16:01:12.4049688Z     
2025-10-08T16:01:12.4049769Z          .. seealso::
2025-10-08T16:01:12.4049833Z     
2025-10-08T16:01:12.4049934Z             :ref:`engine_insertmanyvalues`
2025-10-08T16:01:12.4049999Z     
2025-10-08T16:01:12.4050068Z         """  # noqa
2025-10-08T16:01:12.4050138Z     
2025-10-08T16:01:12.4050222Z         if "strategy" in kwargs:
2025-10-08T16:01:12.4050314Z             strat = kwargs.pop("strategy")
2025-10-08T16:01:12.4050399Z             if strat == "mock":
2025-10-08T16:01:12.4050487Z                 # this case is deprecated
2025-10-08T16:01:12.4050645Z                 return create_mock_engine(url, **kwargs)  # type: ignore
2025-10-08T16:01:12.4050731Z             else:
2025-10-08T16:01:12.4050875Z                 raise exc.ArgumentError("unknown strategy: %r" % strat)
2025-10-08T16:01:12.4050941Z     
2025-10-08T16:01:12.4051047Z         kwargs.pop("empty_in_strategy", None)
2025-10-08T16:01:12.4051114Z     
2025-10-08T16:01:12.4051205Z         # create url.URL object
2025-10-08T16:01:12.4051288Z         u = _url.make_url(url)
2025-10-08T16:01:12.4051352Z     
2025-10-08T16:01:12.4051483Z         u, plugins, kwargs = u._instantiate_plugins(kwargs)
2025-10-08T16:01:12.4051548Z     
2025-10-08T16:01:12.4051642Z         entrypoint = u._get_entrypoint()
2025-10-08T16:01:12.4051751Z         _is_async = kwargs.pop("_is_async", False)
2025-10-08T16:01:12.4051829Z         if _is_async:
2025-10-08T16:01:12.4051955Z             dialect_cls = entrypoint.get_async_dialect_cls(u)
2025-10-08T16:01:12.4052031Z         else:
2025-10-08T16:01:12.4052144Z             dialect_cls = entrypoint.get_dialect_cls(u)
2025-10-08T16:01:12.4052215Z     
2025-10-08T16:01:12.4052315Z         if kwargs.pop("_coerce_config", False):
2025-10-08T16:01:12.4052383Z     
2025-10-08T16:01:12.4052538Z             def pop_kwarg(key: str, default: Optional[Any] = None) -> Any:
2025-10-08T16:01:12.4052638Z                 value = kwargs.pop(key, default)
2025-10-08T16:01:12.4052752Z                 if key in dialect_cls.engine_config_types:
2025-10-08T16:01:12.4052885Z                     value = dialect_cls.engine_config_types[key](value)
2025-10-08T16:01:12.4052966Z                 return value
2025-10-08T16:01:12.4053032Z     
2025-10-08T16:01:12.4053108Z         else:
2025-10-08T16:01:12.4053209Z             pop_kwarg = kwargs.pop  # type: ignore
2025-10-08T16:01:12.4053279Z     
2025-10-08T16:01:12.4053359Z         dialect_args = {}
2025-10-08T16:01:12.4053458Z         # consume dialect arguments from kwargs
2025-10-08T16:01:12.4053564Z         for k in util.get_cls_kwargs(dialect_cls):
2025-10-08T16:01:12.4053890Z             if k in kwargs:
2025-10-08T16:01:12.4053994Z                 dialect_args[k] = pop_kwarg(k)
2025-10-08T16:01:12.4054064Z     
2025-10-08T16:01:12.4054159Z         dbapi = kwargs.pop("module", None)
2025-10-08T16:01:12.4054239Z         if dbapi is None:
2025-10-08T16:01:12.4054323Z             dbapi_args = {}
2025-10-08T16:01:12.4054389Z     
2025-10-08T16:01:12.4054577Z             if "import_dbapi" in dialect_cls.__dict__:
2025-10-08T16:01:12.4054680Z                 dbapi_meth = dialect_cls.import_dbapi
2025-10-08T16:01:12.4054745Z     
2025-10-08T16:01:12.4054891Z             elif hasattr(dialect_cls, "dbapi") and inspect.ismethod(
2025-10-08T16:01:12.4054977Z                 dialect_cls.dbapi
2025-10-08T16:01:12.4055045Z             ):
2025-10-08T16:01:12.4055138Z                 util.warn_deprecated(
2025-10-08T16:01:12.4055272Z                     "The dbapi() classmethod on dialect classes has been "
2025-10-08T16:01:12.4055424Z                     "renamed to import_dbapi().  Implement an import_dbapi() "
2025-10-08T16:01:12.4055592Z                     f"classmethod directly on class {dialect_cls} to remove this "
2025-10-08T16:01:12.4055739Z                     "warning; the old .dbapi() classmethod may be maintained for "
2025-10-08T16:01:12.4055842Z                     "backwards compatibility.",
2025-10-08T16:01:12.4055918Z                     "2.0",
2025-10-08T16:01:12.4055990Z                 )
2025-10-08T16:01:12.4056090Z                 dbapi_meth = dialect_cls.dbapi
2025-10-08T16:01:12.4056158Z             else:
2025-10-08T16:01:12.4056260Z                 dbapi_meth = dialect_cls.import_dbapi
2025-10-08T16:01:12.4056332Z     
2025-10-08T16:01:12.4056436Z             for k in util.get_func_kwargs(dbapi_meth):
2025-10-08T16:01:12.4056514Z                 if k in kwargs:
2025-10-08T16:01:12.4056613Z                     dbapi_args[k] = pop_kwarg(k)
2025-10-08T16:01:12.4056706Z             dbapi = dbapi_meth(**dbapi_args)
2025-10-08T16:01:12.4056778Z     
2025-10-08T16:01:12.4056874Z         dialect_args["dbapi"] = dbapi
2025-10-08T16:01:12.4056940Z     
2025-10-08T16:01:12.4057111Z         dialect_args.setdefault("compiler_linting", compiler.NO_LINTING)
2025-10-08T16:01:12.4057264Z         enable_from_linting = kwargs.pop("enable_from_linting", True)
2025-10-08T16:01:12.4057512Z         if enable_from_linting:
2025-10-08T16:01:12.4057736Z             dialect_args["compiler_linting"] ^= compiler.COLLECT_CARTESIAN_PRODUCTS
2025-10-08T16:01:12.4057813Z     
2025-10-08T16:01:12.4057904Z         for plugin in plugins:
2025-10-08T16:01:12.4058045Z             plugin.handle_dialect_kwargs(dialect_cls, dialect_args)
2025-10-08T16:01:12.4058110Z     
2025-10-08T16:01:12.4058194Z         # create dialect
2025-10-08T16:01:12.4058289Z         dialect = dialect_cls(**dialect_args)
2025-10-08T16:01:12.4058356Z     
2025-10-08T16:01:12.4058451Z         # assemble connection arguments
2025-10-08T16:01:12.4058578Z         (cargs_tup, cparams) = dialect.create_connect_args(u)
2025-10-08T16:01:12.4058698Z         cparams.update(pop_kwarg("connect_args", {}))
2025-10-08T16:01:12.4058773Z     
2025-10-08T16:01:12.4058950Z         if "async_fallback" in cparams and util.asbool(cparams["async_fallback"]):
2025-10-08T16:01:12.4059039Z             util.warn_deprecated(
2025-10-08T16:01:12.4059198Z                 "The async_fallback dialect argument is deprecated and will be "
2025-10-08T16:01:12.4059293Z                 "removed in SQLAlchemy 2.1.",
2025-10-08T16:01:12.4059369Z                 "2.0",
2025-10-08T16:01:12.4059437Z             )
2025-10-08T16:01:12.4059503Z     
2025-10-08T16:01:12.4059612Z         cargs = list(cargs_tup)  # allow mutability
2025-10-08T16:01:12.4059679Z     
2025-10-08T16:01:12.4059770Z         # look for existing pool or create
2025-10-08T16:01:12.4059868Z         pool = pop_kwarg("pool", None)
2025-10-08T16:01:12.4059946Z         if pool is None:
2025-10-08T16:01:12.4060011Z     
2025-10-08T16:01:12.4060092Z             def connect(
2025-10-08T16:01:12.4060361Z                 connection_record: Optional[ConnectionPoolEntry] = None,
2025-10-08T16:01:12.4060460Z             ) -> DBAPIConnection:
2025-10-08T16:01:12.4060544Z                 if dialect._has_events:
2025-10-08T16:01:12.4060651Z                     for fn in dialect.dispatch.do_connect:
2025-10-08T16:01:12.4060743Z                         connection = cast(
2025-10-08T16:01:12.4060833Z                             DBAPIConnection,
2025-10-08T16:01:12.4061064Z                             fn(dialect, connection_record, cargs, cparams),
2025-10-08T16:01:12.4061144Z                         )
2025-10-08T16:01:12.4061239Z                         if connection is not None:
2025-10-08T16:01:12.4061331Z                             return connection
2025-10-08T16:01:12.4061397Z     
2025-10-08T16:01:12.4061508Z                 return dialect.connect(*cargs, **cparams)
2025-10-08T16:01:12.4061587Z     
2025-10-08T16:01:12.4061694Z             creator = pop_kwarg("creator", connect)
2025-10-08T16:01:12.4061763Z     
2025-10-08T16:01:12.4061876Z             poolclass = pop_kwarg("poolclass", None)
2025-10-08T16:01:12.4061961Z             if poolclass is None:
2025-10-08T16:01:12.4062079Z                 poolclass = dialect.get_dialect_pool_class(u)
2025-10-08T16:01:12.4062177Z             pool_args = {"dialect": dialect}
2025-10-08T16:01:12.4062243Z     
2025-10-08T16:01:12.4062390Z             # consume pool arguments from kwargs, translating a few of
2025-10-08T16:01:12.4062473Z             # the arguments
2025-10-08T16:01:12.4062576Z             for k in util.get_cls_kwargs(poolclass):
2025-10-08T16:01:12.4062677Z                 tk = _pool_translate_kwargs.get(k, k)
2025-10-08T16:01:12.4062757Z                 if tk in kwargs:
2025-10-08T16:01:12.4062850Z                     pool_args[k] = pop_kwarg(tk)
2025-10-08T16:01:12.4062922Z     
2025-10-08T16:01:12.4063009Z             for plugin in plugins:
2025-10-08T16:01:12.4063136Z                 plugin.handle_pool_kwargs(poolclass, pool_args)
2025-10-08T16:01:12.4063212Z     
2025-10-08T16:01:12.4063311Z             pool = poolclass(creator, **pool_args)
2025-10-08T16:01:12.4063385Z         else:
2025-10-08T16:01:12.4063471Z             pool._dialect = dialect
2025-10-08T16:01:12.4063538Z     
2025-10-08T16:01:12.4063612Z         if (
2025-10-08T16:01:12.4063708Z             hasattr(pool, "_is_asyncio")
2025-10-08T16:01:12.4063821Z             and pool._is_asyncio is not dialect.is_async
2025-10-08T16:01:12.4063897Z         ):
2025-10-08T16:01:12.4063985Z             raise exc.ArgumentError(
2025-10-08T16:01:12.4064108Z                 f"Pool class {pool.__class__.__name__} cannot be "
2025-10-08T16:01:12.4064238Z                 f"used with {'non-' if not dialect.is_async else ''}"
2025-10-08T16:01:12.4064318Z                 "asyncio engine",
2025-10-08T16:01:12.4064403Z                 code="pcls",
2025-10-08T16:01:12.4064471Z             )
2025-10-08T16:01:12.4064536Z     
2025-10-08T16:01:12.4064618Z         # create engine.
2025-10-08T16:01:12.4064715Z         if not pop_kwarg("future", True):
2025-10-08T16:01:12.4064802Z             raise exc.ArgumentError(
2025-10-08T16:01:12.4064906Z                 "The 'future' parameter passed to "
2025-10-08T16:01:12.4065010Z                 "create_engine() may only be set to True."
2025-10-08T16:01:12.4065078Z             )
2025-10-08T16:01:12.4065150Z     
2025-10-08T16:01:12.4065235Z         engineclass = base.Engine
2025-10-08T16:01:12.4065305Z     
2025-10-08T16:01:12.4065386Z         engine_args = {}
2025-10-08T16:01:12.4065489Z         for k in util.get_cls_kwargs(engineclass):
2025-10-08T16:01:12.4065571Z             if k in kwargs:
2025-10-08T16:01:12.4065664Z                 engine_args[k] = pop_kwarg(k)
2025-10-08T16:01:12.4065730Z     
2025-10-08T16:01:12.4065903Z         # internal flags used by the test suite for instrumenting / proxying
2025-10-08T16:01:12.4065986Z         # engines with mocks etc.
2025-10-08T16:01:12.4066094Z         _initialize = kwargs.pop("_initialize", True)
2025-10-08T16:01:12.4066165Z     
2025-10-08T16:01:12.4066336Z         # all kwargs should be consumed
2025-10-08T16:01:12.4066410Z         if kwargs:
2025-10-08T16:01:12.4066497Z >           raise TypeError(
2025-10-08T16:01:12.4066623Z                 "Invalid argument(s) %s sent to create_engine(), "
2025-10-08T16:01:12.4066766Z                 "using configuration %s/%s/%s.  Please check that the "
2025-10-08T16:01:12.4066988Z                 "keyword arguments are appropriate for this combination "
2025-10-08T16:01:12.4067071Z                 "of components."
2025-10-08T16:01:12.4067148Z                 % (
2025-10-08T16:01:12.4067244Z                     ",".join("'%s'" % k for k in kwargs),
2025-10-08T16:01:12.4067444Z                     dialect.__class__.__name__,
2025-10-08T16:01:12.4067543Z                     pool.__class__.__name__,
2025-10-08T16:01:12.4067629Z                     engineclass.__name__,
2025-10-08T16:01:12.4067697Z                 )
2025-10-08T16:01:12.4067771Z             )
2025-10-08T16:01:12.4068472Z E           TypeError: Invalid argument(s) 'pool_size','max_overflow' sent to create_engine(), using configuration SQLiteDialect_pysqlite/StaticPool/Engine.  Please check that the keyword arguments are appropriate for this combination of components.
2025-10-08T16:01:12.4068479Z 
2025-10-08T16:01:12.4068815Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/create.py:715: TypeError
2025-10-08T16:01:12.4069027Z __ ERROR at setup of TestBaselineFunctionality.test_user_model_instantiation ___
2025-10-08T16:01:12.4069032Z 
2025-10-08T16:01:12.4069113Z     @pytest.fixture
2025-10-08T16:01:12.4069188Z     def app():
2025-10-08T16:01:12.4069279Z         """Create test app instance"""
2025-10-08T16:01:12.4069374Z >       app = create_app(TestConfig)
2025-10-08T16:01:12.4069448Z               ^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.4069453Z 
2025-10-08T16:01:12.4069544Z tests/test_field_consistency.py:30: 
2025-10-08T16:01:12.4069671Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:12.4069762Z app/__init__.py:141: in create_app
2025-10-08T16:01:12.4069848Z     db.init_app(app)
2025-10-08T16:01:12.4070181Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask_sqlalchemy/extension.py:374: in init_app
2025-10-08T16:01:12.4070306Z     engines[key] = self._make_engine(key, options, app)
2025-10-08T16:01:12.4070399Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.4070741Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask_sqlalchemy/extension.py:665: in _make_engine
2025-10-08T16:01:12.4070865Z     return sa.engine_from_config(options, prefix="")
2025-10-08T16:01:12.4070956Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.4071312Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/create.py:838: in engine_from_config
2025-10-08T16:01:12.4071417Z     return create_engine(url, **options)
2025-10-08T16:01:12.4071498Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.4071584Z <string>:2: in create_engine
2025-10-08T16:01:12.4071657Z     ???
2025-10-08T16:01:12.4071981Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/util/deprecations.py:281: in warned
2025-10-08T16:01:12.4072121Z     return fn(*args, **kwargs)  # type: ignore[no-any-return]
2025-10-08T16:01:12.4072202Z            ^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.4072320Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:12.4072325Z 
2025-10-08T16:01:12.4072499Z url = 'sqlite:///:memory:', kwargs = {'max_overflow': 30, 'pool_size': 10}
2025-10-08T16:01:12.4072591Z u = sqlite:///:memory:, plugins = []
2025-10-08T16:01:12.4072823Z entrypoint = <class 'sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite'>
2025-10-08T16:01:12.4072905Z _is_async = False
2025-10-08T16:01:12.4073083Z pop_kwarg = <function create_engine.<locals>.pop_kwarg at 0x7f308ddc79c0>
2025-10-08T16:01:12.4073614Z dialect_args = {'compiler_linting': 1, 'dbapi': <module 'sqlite3.dbapi2' from '/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/sqlite3/dbapi2.py'>}
2025-10-08T16:01:12.4073631Z 
2025-10-08T16:01:12.4073721Z     @util.deprecated_params(
2025-10-08T16:01:12.4073792Z         strategy=(
2025-10-08T16:01:12.4073867Z             "1.4",
2025-10-08T16:01:12.4074037Z             "The :paramref:`_sa.create_engine.strategy` keyword is deprecated, "
2025-10-08T16:01:12.4074316Z             "and the only argument accepted is 'mock'; please use "
2025-10-08T16:01:12.4074462Z             ":func:`.create_mock_engine` going forward.  For general "
2025-10-08T16:01:12.4074633Z             "customization of create_engine which may have been accomplished "
2025-10-08T16:01:12.4074779Z             "using strategies, see :class:`.CreateEnginePlugin`.",
2025-10-08T16:01:12.4074849Z         ),
2025-10-08T16:01:12.4074930Z         empty_in_strategy=(
2025-10-08T16:01:12.4075007Z             "1.4",
2025-10-08T16:01:12.4075168Z             "The :paramref:`_sa.create_engine.empty_in_strategy` keyword is "
2025-10-08T16:01:12.4075323Z             "deprecated, and no longer has any effect.  All IN expressions "
2025-10-08T16:01:12.4075417Z             "are now rendered using "
2025-10-08T16:01:12.4075581Z             'the "expanding parameter" strategy which renders a set of bound'
2025-10-08T16:01:12.4075740Z             'expressions, or an "empty set" SELECT, at statement execution'
2025-10-08T16:01:12.4075822Z             "time.",
2025-10-08T16:01:12.4075889Z         ),
2025-10-08T16:01:12.4075977Z         implicit_returning=(
2025-10-08T16:01:12.4076046Z             "2.0",
2025-10-08T16:01:12.4076201Z             "The :paramref:`_sa.create_engine.implicit_returning` parameter "
2025-10-08T16:01:12.4076345Z             "is deprecated and will be removed in a future release. ",
2025-10-08T16:01:12.4076415Z         ),
2025-10-08T16:01:12.4076483Z     )
2025-10-08T16:01:12.4076665Z     def create_engine(url: Union[str, _url.URL], **kwargs: Any) -> Engine:
2025-10-08T16:01:12.4076785Z         """Create a new :class:`_engine.Engine` instance.
2025-10-08T16:01:12.4076851Z     
2025-10-08T16:01:12.4077040Z         The standard calling form is to send the :ref:`URL <database_urls>` as the
2025-10-08T16:01:12.4077150Z         first positional argument, usually a string
2025-10-08T16:01:12.4077305Z         that indicates database dialect and connection arguments::
2025-10-08T16:01:12.4077470Z     
2025-10-08T16:01:12.4077980Z             engine = create_engine("***localhost/test")
2025-10-08T16:01:12.4078111Z     
2025-10-08T16:01:12.4078237Z         .. note::
2025-10-08T16:01:12.4078341Z     
2025-10-08T16:01:12.4078608Z             Please review :ref:`database_urls` for general guidelines in composing
2025-10-08T16:01:12.4078877Z             URL strings.  In particular, special characters, such as those often
2025-10-08T16:01:12.4079119Z             part of passwords, must be URL encoded to be properly parsed.
2025-10-08T16:01:12.4079230Z     
2025-10-08T16:01:12.4079482Z         Additional keyword arguments may then follow it which
2025-10-08T16:01:12.4079763Z         establish various options on the resulting :class:`_engine.Engine`
2025-10-08T16:01:12.4080008Z         and its underlying :class:`.Dialect` and :class:`_pool.Pool`
2025-10-08T16:01:12.4080138Z         constructs::
2025-10-08T16:01:12.4080248Z     
2025-10-08T16:01:12.4080397Z             engine = create_engine(
2025-10-08T16:01:12.4080706Z                 "***hostname/dbname",
2025-10-08T16:01:12.4080850Z                 pool_recycle=3600,
2025-10-08T16:01:12.4080980Z                 echo=True,
2025-10-08T16:01:12.4081099Z             )
2025-10-08T16:01:12.4081206Z     
2025-10-08T16:01:12.4081352Z         The string form of the URL is
2025-10-08T16:01:12.4081653Z         ``dialect[+driver]://user:password@host/dbname[?key=value..]``, where
2025-10-08T16:01:12.4081890Z         ``dialect`` is a database name such as ``mysql``, ``oracle``,
2025-10-08T16:01:12.4082377Z         ``postgresql``, etc., and ``driver`` the name of a DBAPI, such as
2025-10-08T16:01:12.4082632Z         ``psycopg2``, ``pyodbc``, ``cx_oracle``, etc.  Alternatively,
2025-10-08T16:01:12.4082909Z         the URL can be an instance of :class:`~sqlalchemy.engine.url.URL`.
2025-10-08T16:01:12.4083029Z     
2025-10-08T16:01:12.4083267Z         ``**kwargs`` takes a wide variety of options which are routed
2025-10-08T16:01:12.4083733Z         towards their appropriate components.  Arguments may be specific to
2025-10-08T16:01:12.4083978Z         the :class:`_engine.Engine`, the underlying :class:`.Dialect`,
2025-10-08T16:01:12.4084104Z         as well as the
2025-10-08T16:01:12.4084413Z         :class:`_pool.Pool`.  Specific dialects also accept keyword arguments that
2025-10-08T16:01:12.4084679Z         are unique to that dialect.   Here, we describe the parameters
2025-10-08T16:01:12.4084827Z         that are common to most :func:`_sa.create_engine()` usage.
2025-10-08T16:01:12.4084903Z     
2025-10-08T16:01:12.4085085Z         Once established, the newly resulting :class:`_engine.Engine` will
2025-10-08T16:01:12.4085256Z         request a connection from the underlying :class:`_pool.Pool` once
2025-10-08T16:01:12.4085448Z         :meth:`_engine.Engine.connect` is called, or a method which depends on it
2025-10-08T16:01:12.4085587Z         such as :meth:`_engine.Engine.execute` is invoked.   The
2025-10-08T16:01:12.4085688Z         :class:`_pool.Pool` in turn
2025-10-08T16:01:12.4085853Z         will establish the first actual DBAPI connection when this request
2025-10-08T16:01:12.4086013Z         is received.   The :func:`_sa.create_engine` call itself does **not**
2025-10-08T16:01:12.4086151Z         establish any actual DBAPI connections directly.
2025-10-08T16:01:12.4086219Z     
2025-10-08T16:01:12.4086301Z         .. seealso::
2025-10-08T16:01:12.4086373Z     
2025-10-08T16:01:12.4086458Z             :doc:`/core/engines`
2025-10-08T16:01:12.4086529Z     
2025-10-08T16:01:12.4086615Z             :doc:`/dialects/index`
2025-10-08T16:01:12.4086687Z     
2025-10-08T16:01:12.4086786Z             :ref:`connections_toplevel`
2025-10-08T16:01:12.4086855Z     
2025-10-08T16:01:12.4087000Z         :param connect_args: a dictionary of options which will be
2025-10-08T16:01:12.4087144Z             passed directly to the DBAPI's ``connect()`` method as
2025-10-08T16:01:12.4087266Z             additional keyword arguments.  See the example
2025-10-08T16:01:12.4087567Z             at :ref:`custom_dbapi_args`.
2025-10-08T16:01:12.4087662Z     
2025-10-08T16:01:12.4087817Z         :param creator: a callable which returns a DBAPI connection.
2025-10-08T16:01:12.4087963Z             This creation function will be passed to the underlying
2025-10-08T16:01:12.4088116Z             connection pool and will be used to create all new database
2025-10-08T16:01:12.4088255Z             connections. Usage of this function causes connection
2025-10-08T16:01:12.4088406Z             parameters specified in the URL argument to be bypassed.
2025-10-08T16:01:12.4088480Z     
2025-10-08T16:01:12.4088587Z             This hook is not as flexible as the newer
2025-10-08T16:01:12.4088770Z             :meth:`_events.DialectEvents.do_connect` hook which allows complete
2025-10-08T16:01:12.4088943Z             control over how a connection is made to the database, given the full
2025-10-08T16:01:12.4089054Z             set of URL arguments and state beforehand.
2025-10-08T16:01:12.4089145Z     
2025-10-08T16:01:12.4089231Z             .. seealso::
2025-10-08T16:01:12.4089306Z     
2025-10-08T16:01:12.4089474Z                 :meth:`_events.DialectEvents.do_connect` - event hook that allows
2025-10-08T16:01:12.4089595Z                 full control over DBAPI connection mechanics.
2025-10-08T16:01:12.4089670Z     
2025-10-08T16:01:12.4089761Z                 :ref:`custom_dbapi_args`
2025-10-08T16:01:12.4089828Z     
2025-10-08T16:01:12.4089985Z         :param echo=False: if True, the Engine will log all statements
2025-10-08T16:01:12.4090283Z             as well as a ``repr()`` of their parameter lists to the default log
2025-10-08T16:01:12.4090473Z             handler, which defaults to ``sys.stdout`` for output.   If set to the
2025-10-08T16:01:12.4090638Z             string ``"debug"``, result rows will be printed to the standard output
2025-10-08T16:01:12.4090793Z             as well. The ``echo`` attribute of ``Engine`` can be modified at any
2025-10-08T16:01:12.4091059Z             time to turn logging on and off; direct control of logging is also
2025-10-08T16:01:12.4091202Z             available using the standard Python ``logging`` module.
2025-10-08T16:01:12.4091271Z     
2025-10-08T16:01:12.4091358Z             .. seealso::
2025-10-08T16:01:12.4091424Z     
2025-10-08T16:01:12.4091571Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.4091653Z                 logging.
2025-10-08T16:01:12.4091720Z     
2025-10-08T16:01:12.4091792Z     
2025-10-08T16:01:12.4091948Z         :param echo_pool=False: if True, the connection pool will log
2025-10-08T16:01:12.4092110Z             informational output such as when connections are invalidated
2025-10-08T16:01:12.4092274Z             as well as when connections are recycled to the default log handler,
2025-10-08T16:01:12.4092441Z             which defaults to ``sys.stdout`` for output.   If set to the string
2025-10-08T16:01:12.4092595Z             ``"debug"``, the logging will include pool checkouts and checkins.
2025-10-08T16:01:12.4092786Z             Direct control of logging is also available using the standard Python
2025-10-08T16:01:12.4092870Z             ``logging`` module.
2025-10-08T16:01:12.4092941Z     
2025-10-08T16:01:12.4093018Z             .. seealso::
2025-10-08T16:01:12.4093085Z     
2025-10-08T16:01:12.4093236Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.4093311Z                 logging.
2025-10-08T16:01:12.4093378Z     
2025-10-08T16:01:12.4093449Z     
2025-10-08T16:01:12.4093609Z         :param empty_in_strategy:   No longer used; SQLAlchemy now uses
2025-10-08T16:01:12.4093714Z             "empty set" behavior for IN in all cases.
2025-10-08T16:01:12.4093787Z     
2025-10-08T16:01:12.4093950Z         :param enable_from_linting: defaults to True.  Will emit a warning
2025-10-08T16:01:12.4094122Z             if a given SELECT statement is found to have un-linked FROM elements
2025-10-08T16:01:12.4094232Z             which would cause a cartesian product.
2025-10-08T16:01:12.4094298Z     
2025-10-08T16:01:12.4094392Z             .. versionadded:: 1.4
2025-10-08T16:01:12.4094458Z     
2025-10-08T16:01:12.4094535Z             .. seealso::
2025-10-08T16:01:12.4094611Z     
2025-10-08T16:01:12.4094695Z                 :ref:`change_4737`
2025-10-08T16:01:12.4094760Z     
2025-10-08T16:01:12.4094932Z         :param execution_options: Dictionary execution options which will
2025-10-08T16:01:12.4095035Z             be applied to all connections.  See
2025-10-08T16:01:12.4095198Z             :meth:`~sqlalchemy.engine.Connection.execution_options`
2025-10-08T16:01:12.4095266Z     
2025-10-08T16:01:12.4095412Z         :param future: Use the 2.0 style :class:`_engine.Engine` and
2025-10-08T16:01:12.4095517Z             :class:`_engine.Connection` API.
2025-10-08T16:01:12.4095585Z     
2025-10-08T16:01:12.4095734Z             As of SQLAlchemy 2.0, this parameter is present for backwards
2025-10-08T16:01:12.4095918Z             compatibility only and must remain at its default value of ``True``.
2025-10-08T16:01:12.4095989Z     
2025-10-08T16:01:12.4096136Z             The :paramref:`_sa.create_engine.future` parameter will be
2025-10-08T16:01:12.4096298Z             deprecated in a subsequent 2.x release and eventually removed.
2025-10-08T16:01:12.4096366Z     
2025-10-08T16:01:12.4096457Z             .. versionadded:: 1.4
2025-10-08T16:01:12.4096530Z     
2025-10-08T16:01:12.4096688Z             .. versionchanged:: 2.0 All :class:`_engine.Engine` objects are
2025-10-08T16:01:12.4096936Z                "future" style engines and there is no longer a ``future=False``
2025-10-08T16:01:12.4097023Z                mode of operation.
2025-10-08T16:01:12.4097088Z     
2025-10-08T16:01:12.4097171Z             .. seealso::
2025-10-08T16:01:12.4097242Z     
2025-10-08T16:01:12.4097527Z                 :ref:`migration_20_toplevel`
2025-10-08T16:01:12.4097638Z     
2025-10-08T16:01:12.4097836Z         :param hide_parameters: Boolean, when set to True, SQL statement parameters
2025-10-08T16:01:12.4098136Z             will not be displayed in INFO logging nor will they be formatted into
2025-10-08T16:01:12.4098294Z             the string representation of :class:`.StatementError` objects.
2025-10-08T16:01:12.4098361Z     
2025-10-08T16:01:12.4098458Z             .. versionadded:: 1.3.8
2025-10-08T16:01:12.4098525Z     
2025-10-08T16:01:12.4098601Z             .. seealso::
2025-10-08T16:01:12.4098675Z     
2025-10-08T16:01:12.4098820Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.4098908Z                 logging.
2025-10-08T16:01:12.4098975Z     
2025-10-08T16:01:12.4099154Z         :param implicit_returning=True:  Legacy parameter that may only be set
2025-10-08T16:01:12.4099319Z             to True. In SQLAlchemy 2.0, this parameter does nothing. In order to
2025-10-08T16:01:12.4099482Z             disable "implicit returning" for statements invoked by the ORM,
2025-10-08T16:01:12.4099607Z             configure this on a per-table basis using the
2025-10-08T16:01:12.4099741Z             :paramref:`.Table.implicit_returning` parameter.
2025-10-08T16:01:12.4099807Z     
2025-10-08T16:01:12.4099873Z     
2025-10-08T16:01:12.4100055Z         :param insertmanyvalues_page_size: number of rows to format into an
2025-10-08T16:01:12.4100248Z          INSERT statement when the statement uses "insertmanyvalues" mode, which is
2025-10-08T16:01:12.4100424Z          a paged form of bulk insert that is used for many backends when using
2025-10-08T16:01:12.4100605Z          :term:`executemany` execution typically in conjunction with RETURNING.
2025-10-08T16:01:12.4100776Z          Defaults to 1000, but may also be subject to dialect-specific limiting
2025-10-08T16:01:12.4100944Z          factors which may override this value on a per-statement basis.
2025-10-08T16:01:12.4101011Z     
2025-10-08T16:01:12.4101098Z          .. versionadded:: 2.0
2025-10-08T16:01:12.4101173Z     
2025-10-08T16:01:12.4101250Z          .. seealso::
2025-10-08T16:01:12.4101328Z     
2025-10-08T16:01:12.4101426Z             :ref:`engine_insertmanyvalues`
2025-10-08T16:01:12.4101493Z     
2025-10-08T16:01:12.4101611Z             :ref:`engine_insertmanyvalues_page_size`
2025-10-08T16:01:12.4101680Z     
2025-10-08T16:01:12.4101891Z             :paramref:`_engine.Connection.execution_options.insertmanyvalues_page_size`
2025-10-08T16:01:12.4101965Z     
2025-10-08T16:01:12.4102128Z         :param isolation_level: optional string name of an isolation level
2025-10-08T16:01:12.4102273Z             which will be set on all new connections unconditionally.
2025-10-08T16:01:12.4102440Z             Isolation levels are typically some subset of the string names
2025-10-08T16:01:12.4102548Z             ``"SERIALIZABLE"``, ``"REPEATABLE READ"``,
2025-10-08T16:01:12.4102705Z             ``"READ COMMITTED"``, ``"READ UNCOMMITTED"`` and ``"AUTOCOMMIT"``
2025-10-08T16:01:12.4102788Z             based on backend.
2025-10-08T16:01:12.4102855Z     
2025-10-08T16:01:12.4103017Z             The :paramref:`_sa.create_engine.isolation_level` parameter is
2025-10-08T16:01:12.4103101Z             in contrast to the
2025-10-08T16:01:12.4103248Z             :paramref:`.Connection.execution_options.isolation_level`
2025-10-08T16:01:12.4103382Z             execution option, which may be set on an individual
2025-10-08T16:01:12.4103530Z             :class:`.Connection`, as well as the same parameter passed to
2025-10-08T16:01:12.4103691Z             :meth:`.Engine.execution_options`, where it may be used to create
2025-10-08T16:01:12.4103994Z             multiple engines with different isolation levels that share a common
2025-10-08T16:01:12.4104094Z             connection pool and dialect.
2025-10-08T16:01:12.4104165Z     
2025-10-08T16:01:12.4104262Z             .. versionchanged:: 2.0 The
2025-10-08T16:01:12.4104383Z                :paramref:`_sa.create_engine.isolation_level`
2025-10-08T16:01:12.4104573Z                parameter has been generalized to work on all dialects which support
2025-10-08T16:01:12.4104817Z                the concept of isolation level, and is provided as a more succinct,
2025-10-08T16:01:12.4104989Z                up front configuration switch in contrast to the execution option
2025-10-08T16:01:12.4105114Z                which is more of an ad-hoc programmatic option.
2025-10-08T16:01:12.4105181Z     
2025-10-08T16:01:12.4105264Z             .. seealso::
2025-10-08T16:01:12.4105330Z     
2025-10-08T16:01:12.4105418Z                 :ref:`dbapi_autocommit`
2025-10-08T16:01:12.4105489Z     
2025-10-08T16:01:12.4105630Z         :param json_deserializer: for dialects that support the
2025-10-08T16:01:12.4105716Z             :class:`_types.JSON`
2025-10-08T16:01:12.4105888Z             datatype, this is a Python callable that will convert a JSON string
2025-10-08T16:01:12.4106056Z             to a Python object.  By default, the Python ``json.loads`` function is
2025-10-08T16:01:12.4106134Z             used.
2025-10-08T16:01:12.4106201Z     
2025-10-08T16:01:12.4106364Z             .. versionchanged:: 1.3.7  The SQLite dialect renamed this from
2025-10-08T16:01:12.4106457Z                ``_json_deserializer``.
2025-10-08T16:01:12.4106524Z     
2025-10-08T16:01:12.4106712Z         :param json_serializer: for dialects that support the :class:`_types.JSON`
2025-10-08T16:01:12.4106881Z             datatype, this is a Python callable that will render a given object
2025-10-08T16:01:12.4107030Z             as JSON.   By default, the Python ``json.dumps`` function is used.
2025-10-08T16:01:12.4107104Z     
2025-10-08T16:01:12.4107262Z             .. versionchanged:: 1.3.7  The SQLite dialect renamed this from
2025-10-08T16:01:12.4107459Z                ``_json_serializer``.
2025-10-08T16:01:12.4107533Z     
2025-10-08T16:01:12.4107600Z     
2025-10-08T16:01:12.4107752Z         :param label_length=None: optional integer value which limits
2025-10-08T16:01:12.4107906Z             the size of dynamically generated column labels to that many
2025-10-08T16:01:12.4108036Z             characters. If less than 6, labels are generated as
2025-10-08T16:01:12.4108142Z             "_(counter)". If ``None``, the value of
2025-10-08T16:01:12.4108297Z             ``dialect.max_identifier_length``, which may be affected via the
2025-10-08T16:01:12.4108452Z             :paramref:`_sa.create_engine.max_identifier_length` parameter,
2025-10-08T16:01:12.4108555Z             is used instead.   The value of
2025-10-08T16:01:12.4108663Z             :paramref:`_sa.create_engine.label_length`
2025-10-08T16:01:12.4108757Z             may not be larger than that of
2025-10-08T16:01:12.4108892Z             :paramref:`_sa.create_engine.max_identfier_length`.
2025-10-08T16:01:12.4108961Z     
2025-10-08T16:01:12.4109046Z             .. seealso::
2025-10-08T16:01:12.4109112Z     
2025-10-08T16:01:12.4109240Z                 :paramref:`_sa.create_engine.max_identifier_length`
2025-10-08T16:01:12.4109312Z     
2025-10-08T16:01:12.4109470Z         :param logging_name:  String identifier which will be used within
2025-10-08T16:01:12.4109608Z             the "name" field of logging records generated within the
2025-10-08T16:01:12.4109762Z             "sqlalchemy.engine" logger. Defaults to a hexstring of the
2025-10-08T16:01:12.4109841Z             object's id.
2025-10-08T16:01:12.4109910Z     
2025-10-08T16:01:12.4109991Z             .. seealso::
2025-10-08T16:01:12.4110058Z     
2025-10-08T16:01:12.4110207Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.4110283Z                 logging.
2025-10-08T16:01:12.4110351Z     
2025-10-08T16:01:12.4110634Z                 :paramref:`_engine.Connection.execution_options.logging_token`
2025-10-08T16:01:12.4110704Z     
2025-10-08T16:01:12.4110886Z         :param max_identifier_length: integer; override the max_identifier_length
2025-10-08T16:01:12.4111059Z             determined by the dialect.  if ``None`` or zero, has no effect.  This
2025-10-08T16:01:12.4111231Z             is the database's configured maximum number of characters that may be
2025-10-08T16:01:12.4111492Z             used in a SQL identifier such as a table name, column name, or label
2025-10-08T16:01:12.4111667Z             name. All dialects determine this value automatically, however in the
2025-10-08T16:01:12.4111823Z             case of a new database version for which this value has changed but
2025-10-08T16:01:12.4111998Z             SQLAlchemy's dialect has not been adjusted, the value may be passed
2025-10-08T16:01:12.4112069Z             here.
2025-10-08T16:01:12.4112138Z     
2025-10-08T16:01:12.4112235Z             .. versionadded:: 1.3.9
2025-10-08T16:01:12.4112309Z     
2025-10-08T16:01:12.4112384Z             .. seealso::
2025-10-08T16:01:12.4112464Z     
2025-10-08T16:01:12.4112576Z                 :paramref:`_sa.create_engine.label_length`
2025-10-08T16:01:12.4112651Z     
2025-10-08T16:01:12.4112797Z         :param max_overflow=10: the number of connections to allow in
2025-10-08T16:01:12.4112948Z             connection pool "overflow", that is connections that can be
2025-10-08T16:01:12.4113113Z             opened above and beyond the pool_size setting, which defaults
2025-10-08T16:01:12.4113280Z             to five. this is only used with :class:`~sqlalchemy.pool.QueuePool`.
2025-10-08T16:01:12.4113347Z     
2025-10-08T16:01:12.4113518Z         :param module=None: reference to a Python module object (the module
2025-10-08T16:01:12.4113683Z             itself, not its string name).  Specifies an alternate DBAPI module to
2025-10-08T16:01:12.4113836Z             be used by the engine's dialect.  Each sub-dialect references a
2025-10-08T16:01:12.4114006Z             specific DBAPI which will be imported before first connect.  This
2025-10-08T16:01:12.4114178Z             parameter causes the import to be bypassed, and the given module to
2025-10-08T16:01:12.4114336Z             be used instead. Can be used for testing of DBAPIs as well as to
2025-10-08T16:01:12.4114511Z             inject "mock" DBAPI implementations into the :class:`_engine.Engine`.
2025-10-08T16:01:12.4114583Z     
2025-10-08T16:01:12.4114881Z         :param paramstyle=None: The `paramstyle <https://legacy.python.org/dev/peps/pep-0249/#paramstyle>`_
2025-10-08T16:01:12.4115043Z             to use when rendering bound parameters.  This style defaults to the
2025-10-08T16:01:12.4115211Z             one recommended by the DBAPI itself, which is retrieved from the
2025-10-08T16:01:12.4115380Z             ``.paramstyle`` attribute of the DBAPI.  However, most DBAPIs accept
2025-10-08T16:01:12.4115534Z             more than one paramstyle, and in particular it may be desirable
2025-10-08T16:01:12.4115737Z             to change a "named" paramstyle into a "positional" one, or vice versa.
2025-10-08T16:01:12.4115885Z             When this attribute is passed, it should be one of the values
2025-10-08T16:01:12.4116003Z             ``"qmark"``, ``"numeric"``, ``"named"``, ``"format"`` or
2025-10-08T16:01:12.4116162Z             ``"pyformat"``, and should correspond to a parameter style known
2025-10-08T16:01:12.4116266Z             to be supported by the DBAPI in use.
2025-10-08T16:01:12.4116337Z     
2025-10-08T16:01:12.4116470Z         :param pool=None: an already-constructed instance of
2025-10-08T16:01:12.4116579Z             :class:`~sqlalchemy.pool.Pool`, such as a
2025-10-08T16:01:12.4116742Z             :class:`~sqlalchemy.pool.QueuePool` instance. If non-None, this
2025-10-08T16:01:12.4116891Z             pool will be used directly as the underlying connection pool
2025-10-08T16:01:12.4117038Z             for the engine, bypassing whatever connection parameters are
2025-10-08T16:01:12.4117272Z             present in the URL argument. For information on constructing
2025-10-08T16:01:12.4117517Z             connection pools manually, see :ref:`pooling_toplevel`.
2025-10-08T16:01:12.4117590Z     
2025-10-08T16:01:12.4117732Z         :param poolclass=None: a :class:`~sqlalchemy.pool.Pool`
2025-10-08T16:01:12.4117874Z             subclass, which will be used to create a connection pool
2025-10-08T16:01:12.4118151Z             instance using the connection parameters given in the URL. Note
2025-10-08T16:01:12.4118289Z             this differs from ``pool`` in that you don't actually
2025-10-08T16:01:12.4118445Z             instantiate the pool in this case, you just indicate what type
2025-10-08T16:01:12.4118537Z             of pool to be used.
2025-10-08T16:01:12.4118603Z     
2025-10-08T16:01:12.4118784Z         :param pool_logging_name:  String identifier which will be used within
2025-10-08T16:01:12.4118918Z            the "name" field of logging records generated within the
2025-10-08T16:01:12.4119086Z            "sqlalchemy.pool" logger. Defaults to a hexstring of the object's
2025-10-08T16:01:12.4119167Z            id.
2025-10-08T16:01:12.4119234Z     
2025-10-08T16:01:12.4119312Z            .. seealso::
2025-10-08T16:01:12.4119387Z     
2025-10-08T16:01:12.4119533Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.4119608Z                 logging.
2025-10-08T16:01:12.4119686Z     
2025-10-08T16:01:12.4119858Z         :param pool_pre_ping: boolean, if True will enable the connection pool
2025-10-08T16:01:12.4120017Z             "pre-ping" feature that tests connections for liveness upon
2025-10-08T16:01:12.4120098Z             each checkout.
2025-10-08T16:01:12.4120164Z     
2025-10-08T16:01:12.4120260Z             .. versionadded:: 1.2
2025-10-08T16:01:12.4120326Z     
2025-10-08T16:01:12.4120402Z             .. seealso::
2025-10-08T16:01:12.4120475Z     
2025-10-08T16:01:12.4120578Z                 :ref:`pool_disconnects_pessimistic`
2025-10-08T16:01:12.4120648Z     
2025-10-08T16:01:12.4120798Z         :param pool_size=5: the number of connections to keep open
2025-10-08T16:01:12.4120906Z             inside the connection pool. This used with
2025-10-08T16:01:12.4121020Z             :class:`~sqlalchemy.pool.QueuePool` as
2025-10-08T16:01:12.4121175Z             well as :class:`~sqlalchemy.pool.SingletonThreadPool`.  With
2025-10-08T16:01:12.4121325Z             :class:`~sqlalchemy.pool.QueuePool`, a ``pool_size`` setting
2025-10-08T16:01:12.4121487Z             of 0 indicates no limit; to disable pooling, set ``poolclass`` to
2025-10-08T16:01:12.4121601Z             :class:`~sqlalchemy.pool.NullPool` instead.
2025-10-08T16:01:12.4121667Z     
2025-10-08T16:01:12.4121826Z         :param pool_recycle=-1: this setting causes the pool to recycle
2025-10-08T16:01:12.4121979Z             connections after the given number of seconds has passed. It
2025-10-08T16:01:12.4122127Z             defaults to -1, or no timeout. For example, setting to 3600
2025-10-08T16:01:12.4122278Z             means connections will be recycled after one hour. Note that
2025-10-08T16:01:12.4122421Z             MySQL in particular will disconnect automatically if no
2025-10-08T16:01:12.4122583Z             activity is detected on a connection for eight hours (although
2025-10-08T16:01:12.4122738Z             this is configurable with the MySQLDB connection itself and the
2025-10-08T16:01:12.4122839Z             server configuration as well).
2025-10-08T16:01:12.4122911Z     
2025-10-08T16:01:12.4122999Z             .. seealso::
2025-10-08T16:01:12.4123092Z     
2025-10-08T16:01:12.4123188Z                 :ref:`pool_setting_recycle`
2025-10-08T16:01:12.4123254Z     
2025-10-08T16:01:12.4123376Z         :param pool_reset_on_return='rollback': set the
2025-10-08T16:01:12.4123544Z             :paramref:`_pool.Pool.reset_on_return` parameter of the underlying
2025-10-08T16:01:12.4123681Z             :class:`_pool.Pool` object, which can be set to the values
2025-10-08T16:01:12.4123903Z             ``"rollback"``, ``"commit"``, or ``None``.
2025-10-08T16:01:12.4123973Z     
2025-10-08T16:01:12.4124050Z             .. seealso::
2025-10-08T16:01:12.4124126Z     
2025-10-08T16:01:12.4124215Z                 :ref:`pool_reset_on_return`
2025-10-08T16:01:12.4124289Z     
2025-10-08T16:01:12.4124451Z                 :ref:`dbapi_autocommit_skip_rollback` - a more modern approach
2025-10-08T16:01:12.4124667Z                 to using connections with no transactional instructions
2025-10-08T16:01:12.4124739Z     
2025-10-08T16:01:12.4124890Z         :param pool_timeout=30: number of seconds to wait before giving
2025-10-08T16:01:12.4125032Z             up on getting a connection from the pool. This is only used
2025-10-08T16:01:12.4125213Z             with :class:`~sqlalchemy.pool.QueuePool`. This can be a float but is
2025-10-08T16:01:12.4125384Z             subject to the limitations of Python time functions which may not be
2025-10-08T16:01:12.4125503Z             reliable in the tens of milliseconds.
2025-10-08T16:01:12.4125573Z     
2025-10-08T16:01:12.4125727Z             .. note: don't use 30.0 above, it seems to break with the :param tag
2025-10-08T16:01:12.4125799Z     
2025-10-08T16:01:12.4125977Z         :param pool_use_lifo=False: use LIFO (last-in-first-out) when retrieving
2025-10-08T16:01:12.4126115Z             connections from :class:`.QueuePool` instead of FIFO
2025-10-08T16:01:12.4126300Z             (first-in-first-out). Using LIFO, a server-side timeout scheme can
2025-10-08T16:01:12.4126472Z             reduce the number of connections used during non- peak   periods of
2025-10-08T16:01:12.4126657Z             use.   When planning for server-side timeouts, ensure that a recycle or
2025-10-08T16:01:12.4126833Z             pre-ping strategy is in use to gracefully   handle stale connections.
2025-10-08T16:01:12.4126902Z     
2025-10-08T16:01:12.4127001Z               .. versionadded:: 1.3
2025-10-08T16:01:12.4127068Z     
2025-10-08T16:01:12.4127150Z               .. seealso::
2025-10-08T16:01:12.4127225Z     
2025-10-08T16:01:12.4127312Z                 :ref:`pool_use_lifo`
2025-10-08T16:01:12.4127567Z     
2025-10-08T16:01:12.4127693Z                 :ref:`pool_disconnects`
2025-10-08T16:01:12.4127761Z     
2025-10-08T16:01:12.4127907Z         :param plugins: string list of plugin names to load.  See
2025-10-08T16:01:12.4128030Z             :class:`.CreateEnginePlugin` for background.
2025-10-08T16:01:12.4128102Z     
2025-10-08T16:01:12.4128195Z             .. versionadded:: 1.2.3
2025-10-08T16:01:12.4128261Z     
2025-10-08T16:01:12.4128437Z         :param query_cache_size: size of the cache used to cache the SQL string
2025-10-08T16:01:12.4128561Z          form of queries.  Set to zero to disable caching.
2025-10-08T16:01:12.4128627Z     
2025-10-08T16:01:12.4128802Z          The cache is pruned of its least recently used items when its size reaches
2025-10-08T16:01:12.4128962Z          N * 1.5.  Defaults to 500, meaning the cache will always store at least
2025-10-08T16:01:12.4129138Z          500 SQL statements when filled, and will grow up to 750 items at which
2025-10-08T16:01:12.4129303Z          point it is pruned back down to 500 by removing the 250 least recently
2025-10-08T16:01:12.4129379Z          used items.
2025-10-08T16:01:12.4129446Z     
2025-10-08T16:01:12.4129615Z          Caching is accomplished on a per-statement basis by generating a
2025-10-08T16:01:12.4129788Z          cache key that represents the statement's structure, then generating
2025-10-08T16:01:12.4129949Z          string SQL for the current dialect only if that key is not present
2025-10-08T16:01:12.4130114Z          in the cache.   All statements support caching, however some features
2025-10-08T16:01:12.4130273Z          such as an INSERT with a large set of parameters will intentionally
2025-10-08T16:01:12.4130435Z          bypass the cache.   SQL logging will indicate statistics for each
2025-10-08T16:01:12.4130569Z          statement whether or not it were pull from the cache.
2025-10-08T16:01:12.4130798Z     
2025-10-08T16:01:12.4130986Z          .. note:: some ORM functions related to unit-of-work persistence as well
2025-10-08T16:01:12.4131143Z             as some attribute loading strategies will make use of individual
2025-10-08T16:01:12.4131259Z             per-mapper caches outside of the main cache.
2025-10-08T16:01:12.4131333Z     
2025-10-08T16:01:12.4131399Z     
2025-10-08T16:01:12.4131588Z          .. seealso::
2025-10-08T16:01:12.4131656Z     
2025-10-08T16:01:12.4131739Z             :ref:`sql_caching`
2025-10-08T16:01:12.4131812Z     
2025-10-08T16:01:12.4131897Z          .. versionadded:: 1.4
2025-10-08T16:01:12.4131963Z     
2025-10-08T16:01:12.4132120Z         :param skip_autocommit_rollback: When True, the dialect will
2025-10-08T16:01:12.4132304Z            unconditionally skip all calls to the DBAPI ``connection.rollback()``
2025-10-08T16:01:12.4132480Z            method if the DBAPI connection is confirmed to be in "autocommit" mode.
2025-10-08T16:01:12.4132667Z            The availability of this feature is dialect specific; if not available,
2025-10-08T16:01:12.4132851Z            a ``NotImplementedError`` is raised by the dialect when rollback occurs.
2025-10-08T16:01:12.4132923Z     
2025-10-08T16:01:12.4133000Z            .. seealso::
2025-10-08T16:01:12.4133067Z     
2025-10-08T16:01:12.4133176Z                 :ref:`dbapi_autocommit_skip_rollback`
2025-10-08T16:01:12.4133248Z     
2025-10-08T16:01:12.4133335Z            .. versionadded:: 2.0.43
2025-10-08T16:01:12.4133410Z     
2025-10-08T16:01:12.4133595Z         :param use_insertmanyvalues: True by default, use the "insertmanyvalues"
2025-10-08T16:01:12.4133752Z          execution style for INSERT..RETURNING statements by default.
2025-10-08T16:01:12.4133826Z     
2025-10-08T16:01:12.4133910Z          .. versionadded:: 2.0
2025-10-08T16:01:12.4133981Z     
2025-10-08T16:01:12.4134058Z          .. seealso::
2025-10-08T16:01:12.4134124Z     
2025-10-08T16:01:12.4134228Z             :ref:`engine_insertmanyvalues`
2025-10-08T16:01:12.4134299Z     
2025-10-08T16:01:12.4134371Z         """  # noqa
2025-10-08T16:01:12.4134443Z     
2025-10-08T16:01:12.4134530Z         if "strategy" in kwargs:
2025-10-08T16:01:12.4134622Z             strat = kwargs.pop("strategy")
2025-10-08T16:01:12.4134708Z             if strat == "mock":
2025-10-08T16:01:12.4134798Z                 # this case is deprecated
2025-10-08T16:01:12.4134946Z                 return create_mock_engine(url, **kwargs)  # type: ignore
2025-10-08T16:01:12.4135023Z             else:
2025-10-08T16:01:12.4135163Z                 raise exc.ArgumentError("unknown strategy: %r" % strat)
2025-10-08T16:01:12.4135236Z     
2025-10-08T16:01:12.4135345Z         kwargs.pop("empty_in_strategy", None)
2025-10-08T16:01:12.4135413Z     
2025-10-08T16:01:12.4135507Z         # create url.URL object
2025-10-08T16:01:12.4135589Z         u = _url.make_url(url)
2025-10-08T16:01:12.4135655Z     
2025-10-08T16:01:12.4135789Z         u, plugins, kwargs = u._instantiate_plugins(kwargs)
2025-10-08T16:01:12.4135860Z     
2025-10-08T16:01:12.4135959Z         entrypoint = u._get_entrypoint()
2025-10-08T16:01:12.4136073Z         _is_async = kwargs.pop("_is_async", False)
2025-10-08T16:01:12.4136149Z         if _is_async:
2025-10-08T16:01:12.4136283Z             dialect_cls = entrypoint.get_async_dialect_cls(u)
2025-10-08T16:01:12.4136355Z         else:
2025-10-08T16:01:12.4136468Z             dialect_cls = entrypoint.get_dialect_cls(u)
2025-10-08T16:01:12.4136547Z     
2025-10-08T16:01:12.4136651Z         if kwargs.pop("_coerce_config", False):
2025-10-08T16:01:12.4136720Z     
2025-10-08T16:01:12.4136877Z             def pop_kwarg(key: str, default: Optional[Any] = None) -> Any:
2025-10-08T16:01:12.4136979Z                 value = kwargs.pop(key, default)
2025-10-08T16:01:12.4137090Z                 if key in dialect_cls.engine_config_types:
2025-10-08T16:01:12.4137223Z                     value = dialect_cls.engine_config_types[key](value)
2025-10-08T16:01:12.4137305Z                 return value
2025-10-08T16:01:12.4137671Z     
2025-10-08T16:01:12.4137753Z         else:
2025-10-08T16:01:12.4137863Z             pop_kwarg = kwargs.pop  # type: ignore
2025-10-08T16:01:12.4137936Z     
2025-10-08T16:01:12.4138018Z         dialect_args = {}
2025-10-08T16:01:12.4138120Z         # consume dialect arguments from kwargs
2025-10-08T16:01:12.4138226Z         for k in util.get_cls_kwargs(dialect_cls):
2025-10-08T16:01:12.4138409Z             if k in kwargs:
2025-10-08T16:01:12.4138506Z                 dialect_args[k] = pop_kwarg(k)
2025-10-08T16:01:12.4138579Z     
2025-10-08T16:01:12.4138673Z         dbapi = kwargs.pop("module", None)
2025-10-08T16:01:12.4138758Z         if dbapi is None:
2025-10-08T16:01:12.4138837Z             dbapi_args = {}
2025-10-08T16:01:12.4138904Z     
2025-10-08T16:01:12.4139016Z             if "import_dbapi" in dialect_cls.__dict__:
2025-10-08T16:01:12.4139120Z                 dbapi_meth = dialect_cls.import_dbapi
2025-10-08T16:01:12.4139186Z     
2025-10-08T16:01:12.4139339Z             elif hasattr(dialect_cls, "dbapi") and inspect.ismethod(
2025-10-08T16:01:12.4139424Z                 dialect_cls.dbapi
2025-10-08T16:01:12.4139494Z             ):
2025-10-08T16:01:12.4139592Z                 util.warn_deprecated(
2025-10-08T16:01:12.4139729Z                     "The dbapi() classmethod on dialect classes has been "
2025-10-08T16:01:12.4139885Z                     "renamed to import_dbapi().  Implement an import_dbapi() "
2025-10-08T16:01:12.4140052Z                     f"classmethod directly on class {dialect_cls} to remove this "
2025-10-08T16:01:12.4140203Z                     "warning; the old .dbapi() classmethod may be maintained for "
2025-10-08T16:01:12.4140308Z                     "backwards compatibility.",
2025-10-08T16:01:12.4140385Z                     "2.0",
2025-10-08T16:01:12.4140454Z                 )
2025-10-08T16:01:12.4140556Z                 dbapi_meth = dialect_cls.dbapi
2025-10-08T16:01:12.4140625Z             else:
2025-10-08T16:01:12.4140741Z                 dbapi_meth = dialect_cls.import_dbapi
2025-10-08T16:01:12.4140810Z     
2025-10-08T16:01:12.4140915Z             for k in util.get_func_kwargs(dbapi_meth):
2025-10-08T16:01:12.4141000Z                 if k in kwargs:
2025-10-08T16:01:12.4141098Z                     dbapi_args[k] = pop_kwarg(k)
2025-10-08T16:01:12.4141194Z             dbapi = dbapi_meth(**dbapi_args)
2025-10-08T16:01:12.4141267Z     
2025-10-08T16:01:12.4141365Z         dialect_args["dbapi"] = dbapi
2025-10-08T16:01:12.4141431Z     
2025-10-08T16:01:12.4141608Z         dialect_args.setdefault("compiler_linting", compiler.NO_LINTING)
2025-10-08T16:01:12.4141762Z         enable_from_linting = kwargs.pop("enable_from_linting", True)
2025-10-08T16:01:12.4141853Z         if enable_from_linting:
2025-10-08T16:01:12.4142037Z             dialect_args["compiler_linting"] ^= compiler.COLLECT_CARTESIAN_PRODUCTS
2025-10-08T16:01:12.4142105Z     
2025-10-08T16:01:12.4142196Z         for plugin in plugins:
2025-10-08T16:01:12.4142342Z             plugin.handle_dialect_kwargs(dialect_cls, dialect_args)
2025-10-08T16:01:12.4142410Z     
2025-10-08T16:01:12.4142502Z         # create dialect
2025-10-08T16:01:12.4142599Z         dialect = dialect_cls(**dialect_args)
2025-10-08T16:01:12.4142667Z     
2025-10-08T16:01:12.4142764Z         # assemble connection arguments
2025-10-08T16:01:12.4142895Z         (cargs_tup, cparams) = dialect.create_connect_args(u)
2025-10-08T16:01:12.4143021Z         cparams.update(pop_kwarg("connect_args", {}))
2025-10-08T16:01:12.4143088Z     
2025-10-08T16:01:12.4143269Z         if "async_fallback" in cparams and util.asbool(cparams["async_fallback"]):
2025-10-08T16:01:12.4143362Z             util.warn_deprecated(
2025-10-08T16:01:12.4143526Z                 "The async_fallback dialect argument is deprecated and will be "
2025-10-08T16:01:12.4143621Z                 "removed in SQLAlchemy 2.1.",
2025-10-08T16:01:12.4143701Z                 "2.0",
2025-10-08T16:01:12.4143771Z             )
2025-10-08T16:01:12.4143838Z     
2025-10-08T16:01:12.4144039Z         cargs = list(cargs_tup)  # allow mutability
2025-10-08T16:01:12.4144109Z     
2025-10-08T16:01:12.4144209Z         # look for existing pool or create
2025-10-08T16:01:12.4144303Z         pool = pop_kwarg("pool", None)
2025-10-08T16:01:12.4144382Z         if pool is None:
2025-10-08T16:01:12.4144454Z     
2025-10-08T16:01:12.4144529Z             def connect(
2025-10-08T16:01:12.4144677Z                 connection_record: Optional[ConnectionPoolEntry] = None,
2025-10-08T16:01:12.4144861Z             ) -> DBAPIConnection:
2025-10-08T16:01:12.4144946Z                 if dialect._has_events:
2025-10-08T16:01:12.4145056Z                     for fn in dialect.dispatch.do_connect:
2025-10-08T16:01:12.4145155Z                         connection = cast(
2025-10-08T16:01:12.4145247Z                             DBAPIConnection,
2025-10-08T16:01:12.4145413Z                             fn(dialect, connection_record, cargs, cparams),
2025-10-08T16:01:12.4145491Z                         )
2025-10-08T16:01:12.4145591Z                         if connection is not None:
2025-10-08T16:01:12.4145683Z                             return connection
2025-10-08T16:01:12.4145751Z     
2025-10-08T16:01:12.4145863Z                 return dialect.connect(*cargs, **cparams)
2025-10-08T16:01:12.4145936Z     
2025-10-08T16:01:12.4146036Z             creator = pop_kwarg("creator", connect)
2025-10-08T16:01:12.4146103Z     
2025-10-08T16:01:12.4146656Z             poolclass = pop_kwarg("poolclass", None)
2025-10-08T16:01:12.4146742Z             if poolclass is None:
2025-10-08T16:01:12.4146867Z                 poolclass = dialect.get_dialect_pool_class(u)
2025-10-08T16:01:12.4146962Z             pool_args = {"dialect": dialect}
2025-10-08T16:01:12.4147030Z     
2025-10-08T16:01:12.4147184Z             # consume pool arguments from kwargs, translating a few of
2025-10-08T16:01:12.4147264Z             # the arguments
2025-10-08T16:01:12.4147475Z             for k in util.get_cls_kwargs(poolclass):
2025-10-08T16:01:12.4147591Z                 tk = _pool_translate_kwargs.get(k, k)
2025-10-08T16:01:12.4147673Z                 if tk in kwargs:
2025-10-08T16:01:12.4147775Z                     pool_args[k] = pop_kwarg(tk)
2025-10-08T16:01:12.4147841Z     
2025-10-08T16:01:12.4147927Z             for plugin in plugins:
2025-10-08T16:01:12.4148063Z                 plugin.handle_pool_kwargs(poolclass, pool_args)
2025-10-08T16:01:12.4148131Z     
2025-10-08T16:01:12.4148236Z             pool = poolclass(creator, **pool_args)
2025-10-08T16:01:12.4148314Z         else:
2025-10-08T16:01:12.4148399Z             pool._dialect = dialect
2025-10-08T16:01:12.4148465Z     
2025-10-08T16:01:12.4148541Z         if (
2025-10-08T16:01:12.4148632Z             hasattr(pool, "_is_asyncio")
2025-10-08T16:01:12.4148745Z             and pool._is_asyncio is not dialect.is_async
2025-10-08T16:01:12.4148819Z         ):
2025-10-08T16:01:12.4148910Z             raise exc.ArgumentError(
2025-10-08T16:01:12.4149039Z                 f"Pool class {pool.__class__.__name__} cannot be "
2025-10-08T16:01:12.4149167Z                 f"used with {'non-' if not dialect.is_async else ''}"
2025-10-08T16:01:12.4149250Z                 "asyncio engine",
2025-10-08T16:01:12.4149339Z                 code="pcls",
2025-10-08T16:01:12.4149408Z             )
2025-10-08T16:01:12.4149475Z     
2025-10-08T16:01:12.4149559Z         # create engine.
2025-10-08T16:01:12.4149652Z         if not pop_kwarg("future", True):
2025-10-08T16:01:12.4149744Z             raise exc.ArgumentError(
2025-10-08T16:01:12.4149849Z                 "The 'future' parameter passed to "
2025-10-08T16:01:12.4149955Z                 "create_engine() may only be set to True."
2025-10-08T16:01:12.4150031Z             )
2025-10-08T16:01:12.4150097Z     
2025-10-08T16:01:12.4150183Z         engineclass = base.Engine
2025-10-08T16:01:12.4150255Z     
2025-10-08T16:01:12.4150336Z         engine_args = {}
2025-10-08T16:01:12.4150441Z         for k in util.get_cls_kwargs(engineclass):
2025-10-08T16:01:12.4150527Z             if k in kwargs:
2025-10-08T16:01:12.4150737Z                 engine_args[k] = pop_kwarg(k)
2025-10-08T16:01:12.4150808Z     
2025-10-08T16:01:12.4150986Z         # internal flags used by the test suite for instrumenting / proxying
2025-10-08T16:01:12.4151073Z         # engines with mocks etc.
2025-10-08T16:01:12.4151198Z         _initialize = kwargs.pop("_initialize", True)
2025-10-08T16:01:12.4151274Z     
2025-10-08T16:01:12.4151467Z         # all kwargs should be consumed
2025-10-08T16:01:12.4151546Z         if kwargs:
2025-10-08T16:01:12.4151630Z >           raise TypeError(
2025-10-08T16:01:12.4151755Z                 "Invalid argument(s) %s sent to create_engine(), "
2025-10-08T16:01:12.4151902Z                 "using configuration %s/%s/%s.  Please check that the "
2025-10-08T16:01:12.4152051Z                 "keyword arguments are appropriate for this combination "
2025-10-08T16:01:12.4152137Z                 "of components."
2025-10-08T16:01:12.4152213Z                 % (
2025-10-08T16:01:12.4152316Z                     ",".join("'%s'" % k for k in kwargs),
2025-10-08T16:01:12.4152415Z                     dialect.__class__.__name__,
2025-10-08T16:01:12.4152504Z                     pool.__class__.__name__,
2025-10-08T16:01:12.4152592Z                     engineclass.__name__,
2025-10-08T16:01:12.4152668Z                 )
2025-10-08T16:01:12.4152736Z             )
2025-10-08T16:01:12.4153437Z E           TypeError: Invalid argument(s) 'pool_size','max_overflow' sent to create_engine(), using configuration SQLiteDialect_pysqlite/StaticPool/Engine.  Please check that the keyword arguments are appropriate for this combination of components.
2025-10-08T16:01:12.4153456Z 
2025-10-08T16:01:12.4153787Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/create.py:715: TypeError
2025-10-08T16:01:12.4154001Z ____ ERROR at setup of TestBaselineFunctionality.test_api_schema_validation ____
2025-10-08T16:01:12.4154007Z 
2025-10-08T16:01:12.4154092Z     @pytest.fixture
2025-10-08T16:01:12.4154171Z     def app():
2025-10-08T16:01:12.4154265Z         """Create test app instance"""
2025-10-08T16:01:12.4154362Z >       app = create_app(TestConfig)
2025-10-08T16:01:12.4154439Z               ^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.4154444Z 
2025-10-08T16:01:12.4154544Z tests/test_field_consistency.py:30: 
2025-10-08T16:01:12.4154660Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:12.4154753Z app/__init__.py:141: in create_app
2025-10-08T16:01:12.4154841Z     db.init_app(app)
2025-10-08T16:01:12.4155186Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask_sqlalchemy/extension.py:374: in init_app
2025-10-08T16:01:12.4155313Z     engines[key] = self._make_engine(key, options, app)
2025-10-08T16:01:12.4155407Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.4155752Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask_sqlalchemy/extension.py:665: in _make_engine
2025-10-08T16:01:12.4155883Z     return sa.engine_from_config(options, prefix="")
2025-10-08T16:01:12.4155968Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.4156327Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/create.py:838: in engine_from_config
2025-10-08T16:01:12.4156431Z     return create_engine(url, **options)
2025-10-08T16:01:12.4156508Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.4156597Z <string>:2: in create_engine
2025-10-08T16:01:12.4156674Z     ???
2025-10-08T16:01:12.4157001Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/util/deprecations.py:281: in warned
2025-10-08T16:01:12.4157146Z     return fn(*args, **kwargs)  # type: ignore[no-any-return]
2025-10-08T16:01:12.4157225Z            ^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.4157438Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:12.4157443Z 
2025-10-08T16:01:12.4157741Z url = 'sqlite:///:memory:', kwargs = {'max_overflow': 30, 'pool_size': 10}
2025-10-08T16:01:12.4157839Z u = sqlite:///:memory:, plugins = []
2025-10-08T16:01:12.4158077Z entrypoint = <class 'sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite'>
2025-10-08T16:01:12.4158163Z _is_async = False
2025-10-08T16:01:12.4158344Z pop_kwarg = <function create_engine.<locals>.pop_kwarg at 0x7f308dd06c00>
2025-10-08T16:01:12.4158768Z dialect_args = {'compiler_linting': 1, 'dbapi': <module 'sqlite3.dbapi2' from '/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/sqlite3/dbapi2.py'>}
2025-10-08T16:01:12.4158875Z 
2025-10-08T16:01:12.4158968Z     @util.deprecated_params(
2025-10-08T16:01:12.4159043Z         strategy=(
2025-10-08T16:01:12.4159121Z             "1.4",
2025-10-08T16:01:12.4159295Z             "The :paramref:`_sa.create_engine.strategy` keyword is deprecated, "
2025-10-08T16:01:12.4159438Z             "and the only argument accepted is 'mock'; please use "
2025-10-08T16:01:12.4159584Z             ":func:`.create_mock_engine` going forward.  For general "
2025-10-08T16:01:12.4159757Z             "customization of create_engine which may have been accomplished "
2025-10-08T16:01:12.4159902Z             "using strategies, see :class:`.CreateEnginePlugin`.",
2025-10-08T16:01:12.4159973Z         ),
2025-10-08T16:01:12.4160057Z         empty_in_strategy=(
2025-10-08T16:01:12.4160134Z             "1.4",
2025-10-08T16:01:12.4160292Z             "The :paramref:`_sa.create_engine.empty_in_strategy` keyword is "
2025-10-08T16:01:12.4160462Z             "deprecated, and no longer has any effect.  All IN expressions "
2025-10-08T16:01:12.4160551Z             "are now rendered using "
2025-10-08T16:01:12.4160711Z             'the "expanding parameter" strategy which renders a set of bound'
2025-10-08T16:01:12.4160874Z             'expressions, or an "empty set" SELECT, at statement execution'
2025-10-08T16:01:12.4160946Z             "time.",
2025-10-08T16:01:12.4161016Z         ),
2025-10-08T16:01:12.4161105Z         implicit_returning=(
2025-10-08T16:01:12.4161181Z             "2.0",
2025-10-08T16:01:12.4161340Z             "The :paramref:`_sa.create_engine.implicit_returning` parameter "
2025-10-08T16:01:12.4161486Z             "is deprecated and will be removed in a future release. ",
2025-10-08T16:01:12.4161557Z         ),
2025-10-08T16:01:12.4161630Z     )
2025-10-08T16:01:12.4161799Z     def create_engine(url: Union[str, _url.URL], **kwargs: Any) -> Engine:
2025-10-08T16:01:12.4161922Z         """Create a new :class:`_engine.Engine` instance.
2025-10-08T16:01:12.4161995Z     
2025-10-08T16:01:12.4162186Z         The standard calling form is to send the :ref:`URL <database_urls>` as the
2025-10-08T16:01:12.4162297Z         first positional argument, usually a string
2025-10-08T16:01:12.4162458Z         that indicates database dialect and connection arguments::
2025-10-08T16:01:12.4162526Z     
2025-10-08T16:01:12.4162874Z             engine = create_engine("***localhost/test")
2025-10-08T16:01:12.4162952Z     
2025-10-08T16:01:12.4163027Z         .. note::
2025-10-08T16:01:12.4163098Z     
2025-10-08T16:01:12.4163283Z             Please review :ref:`database_urls` for general guidelines in composing
2025-10-08T16:01:12.4163453Z             URL strings.  In particular, special characters, such as those often
2025-10-08T16:01:12.4163616Z             part of passwords, must be URL encoded to be properly parsed.
2025-10-08T16:01:12.4163684Z     
2025-10-08T16:01:12.4163827Z         Additional keyword arguments may then follow it which
2025-10-08T16:01:12.4164003Z         establish various options on the resulting :class:`_engine.Engine`
2025-10-08T16:01:12.4164155Z         and its underlying :class:`.Dialect` and :class:`_pool.Pool`
2025-10-08T16:01:12.4164236Z         constructs::
2025-10-08T16:01:12.4164310Z     
2025-10-08T16:01:12.4164397Z             engine = create_engine(
2025-10-08T16:01:12.4164570Z                 "***hostname/dbname",
2025-10-08T16:01:12.4164665Z                 pool_recycle=3600,
2025-10-08T16:01:12.4164743Z                 echo=True,
2025-10-08T16:01:12.4164899Z             )
2025-10-08T16:01:12.4164976Z     
2025-10-08T16:01:12.4165069Z         The string form of the URL is
2025-10-08T16:01:12.4165240Z         ``dialect[+driver]://user:password@host/dbname[?key=value..]``, where
2025-10-08T16:01:12.4165390Z         ``dialect`` is a database name such as ``mysql``, ``oracle``,
2025-10-08T16:01:12.4165541Z         ``postgresql``, etc., and ``driver`` the name of a DBAPI, such as
2025-10-08T16:01:12.4165756Z         ``psycopg2``, ``pyodbc``, ``cx_oracle``, etc.  Alternatively,
2025-10-08T16:01:12.4165925Z         the URL can be an instance of :class:`~sqlalchemy.engine.url.URL`.
2025-10-08T16:01:12.4165993Z     
2025-10-08T16:01:12.4166135Z         ``**kwargs`` takes a wide variety of options which are routed
2025-10-08T16:01:12.4166314Z         towards their appropriate components.  Arguments may be specific to
2025-10-08T16:01:12.4166464Z         the :class:`_engine.Engine`, the underlying :class:`.Dialect`,
2025-10-08T16:01:12.4166555Z         as well as the
2025-10-08T16:01:12.4166732Z         :class:`_pool.Pool`.  Specific dialects also accept keyword arguments that
2025-10-08T16:01:12.4166881Z         are unique to that dialect.   Here, we describe the parameters
2025-10-08T16:01:12.4167026Z         that are common to most :func:`_sa.create_engine()` usage.
2025-10-08T16:01:12.4167093Z     
2025-10-08T16:01:12.4167266Z         Once established, the newly resulting :class:`_engine.Engine` will
2025-10-08T16:01:12.4167655Z         request a connection from the underlying :class:`_pool.Pool` once
2025-10-08T16:01:12.4167845Z         :meth:`_engine.Engine.connect` is called, or a method which depends on it
2025-10-08T16:01:12.4167995Z         such as :meth:`_engine.Engine.execute` is invoked.   The
2025-10-08T16:01:12.4168084Z         :class:`_pool.Pool` in turn
2025-10-08T16:01:12.4168248Z         will establish the first actual DBAPI connection when this request
2025-10-08T16:01:12.4168418Z         is received.   The :func:`_sa.create_engine` call itself does **not**
2025-10-08T16:01:12.4168544Z         establish any actual DBAPI connections directly.
2025-10-08T16:01:12.4168618Z     
2025-10-08T16:01:12.4168697Z         .. seealso::
2025-10-08T16:01:12.4168763Z     
2025-10-08T16:01:12.4168859Z             :doc:`/core/engines`
2025-10-08T16:01:12.4168926Z     
2025-10-08T16:01:12.4169016Z             :doc:`/dialects/index`
2025-10-08T16:01:12.4169093Z     
2025-10-08T16:01:12.4169186Z             :ref:`connections_toplevel`
2025-10-08T16:01:12.4169255Z     
2025-10-08T16:01:12.4169405Z         :param connect_args: a dictionary of options which will be
2025-10-08T16:01:12.4169538Z             passed directly to the DBAPI's ``connect()`` method as
2025-10-08T16:01:12.4169664Z             additional keyword arguments.  See the example
2025-10-08T16:01:12.4169758Z             at :ref:`custom_dbapi_args`.
2025-10-08T16:01:12.4169827Z     
2025-10-08T16:01:12.4169983Z         :param creator: a callable which returns a DBAPI connection.
2025-10-08T16:01:12.4170129Z             This creation function will be passed to the underlying
2025-10-08T16:01:12.4170280Z             connection pool and will be used to create all new database
2025-10-08T16:01:12.4170423Z             connections. Usage of this function causes connection
2025-10-08T16:01:12.4170573Z             parameters specified in the URL argument to be bypassed.
2025-10-08T16:01:12.4170651Z     
2025-10-08T16:01:12.4170758Z             This hook is not as flexible as the newer
2025-10-08T16:01:12.4170932Z             :meth:`_events.DialectEvents.do_connect` hook which allows complete
2025-10-08T16:01:12.4171110Z             control over how a connection is made to the database, given the full
2025-10-08T16:01:12.4171216Z             set of URL arguments and state beforehand.
2025-10-08T16:01:12.4171285Z     
2025-10-08T16:01:12.4171369Z             .. seealso::
2025-10-08T16:01:12.4171435Z     
2025-10-08T16:01:12.4171599Z                 :meth:`_events.DialectEvents.do_connect` - event hook that allows
2025-10-08T16:01:12.4171843Z                 full control over DBAPI connection mechanics.
2025-10-08T16:01:12.4171913Z     
2025-10-08T16:01:12.4172011Z                 :ref:`custom_dbapi_args`
2025-10-08T16:01:12.4172076Z     
2025-10-08T16:01:12.4172224Z         :param echo=False: if True, the Engine will log all statements
2025-10-08T16:01:12.4172386Z             as well as a ``repr()`` of their parameter lists to the default log
2025-10-08T16:01:12.4172660Z             handler, which defaults to ``sys.stdout`` for output.   If set to the
2025-10-08T16:01:12.4172825Z             string ``"debug"``, result rows will be printed to the standard output
2025-10-08T16:01:12.4172984Z             as well. The ``echo`` attribute of ``Engine`` can be modified at any
2025-10-08T16:01:12.4173141Z             time to turn logging on and off; direct control of logging is also
2025-10-08T16:01:12.4173285Z             available using the standard Python ``logging`` module.
2025-10-08T16:01:12.4173353Z     
2025-10-08T16:01:12.4173438Z             .. seealso::
2025-10-08T16:01:12.4173509Z     
2025-10-08T16:01:12.4173658Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.4173733Z                 logging.
2025-10-08T16:01:12.4173804Z     
2025-10-08T16:01:12.4173869Z     
2025-10-08T16:01:12.4174017Z         :param echo_pool=False: if True, the connection pool will log
2025-10-08T16:01:12.4174188Z             informational output such as when connections are invalidated
2025-10-08T16:01:12.4174348Z             as well as when connections are recycled to the default log handler,
2025-10-08T16:01:12.4174513Z             which defaults to ``sys.stdout`` for output.   If set to the string
2025-10-08T16:01:12.4174664Z             ``"debug"``, the logging will include pool checkouts and checkins.
2025-10-08T16:01:12.4174837Z             Direct control of logging is also available using the standard Python
2025-10-08T16:01:12.4174927Z             ``logging`` module.
2025-10-08T16:01:12.4175000Z     
2025-10-08T16:01:12.4175076Z             .. seealso::
2025-10-08T16:01:12.4175148Z     
2025-10-08T16:01:12.4175292Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.4175373Z                 logging.
2025-10-08T16:01:12.4175440Z     
2025-10-08T16:01:12.4175507Z     
2025-10-08T16:01:12.4175668Z         :param empty_in_strategy:   No longer used; SQLAlchemy now uses
2025-10-08T16:01:12.4175776Z             "empty set" behavior for IN in all cases.
2025-10-08T16:01:12.4175842Z     
2025-10-08T16:01:12.4176009Z         :param enable_from_linting: defaults to True.  Will emit a warning
2025-10-08T16:01:12.4176172Z             if a given SELECT statement is found to have un-linked FROM elements
2025-10-08T16:01:12.4176276Z             which would cause a cartesian product.
2025-10-08T16:01:12.4176350Z     
2025-10-08T16:01:12.4176438Z             .. versionadded:: 1.4
2025-10-08T16:01:12.4176511Z     
2025-10-08T16:01:12.4176591Z             .. seealso::
2025-10-08T16:01:12.4176659Z     
2025-10-08T16:01:12.4176750Z                 :ref:`change_4737`
2025-10-08T16:01:12.4176816Z     
2025-10-08T16:01:12.4176983Z         :param execution_options: Dictionary execution options which will
2025-10-08T16:01:12.4177093Z             be applied to all connections.  See
2025-10-08T16:01:12.4177244Z             :meth:`~sqlalchemy.engine.Connection.execution_options`
2025-10-08T16:01:12.4177315Z     
2025-10-08T16:01:12.4177668Z         :param future: Use the 2.0 style :class:`_engine.Engine` and
2025-10-08T16:01:12.4177771Z             :class:`_engine.Connection` API.
2025-10-08T16:01:12.4177843Z     
2025-10-08T16:01:12.4177988Z             As of SQLAlchemy 2.0, this parameter is present for backwards
2025-10-08T16:01:12.4178164Z             compatibility only and must remain at its default value of ``True``.
2025-10-08T16:01:12.4178237Z     
2025-10-08T16:01:12.4178380Z             The :paramref:`_sa.create_engine.future` parameter will be
2025-10-08T16:01:12.4178661Z             deprecated in a subsequent 2.x release and eventually removed.
2025-10-08T16:01:12.4178738Z     
2025-10-08T16:01:12.4178830Z             .. versionadded:: 1.4
2025-10-08T16:01:12.4178897Z     
2025-10-08T16:01:12.4179061Z             .. versionchanged:: 2.0 All :class:`_engine.Engine` objects are
2025-10-08T16:01:12.4179220Z                "future" style engines and there is no longer a ``future=False``
2025-10-08T16:01:12.4179410Z                mode of operation.
2025-10-08T16:01:12.4179477Z     
2025-10-08T16:01:12.4179555Z             .. seealso::
2025-10-08T16:01:12.4179627Z     
2025-10-08T16:01:12.4179727Z                 :ref:`migration_20_toplevel`
2025-10-08T16:01:12.4179796Z     
2025-10-08T16:01:12.4185510Z         :param hide_parameters: Boolean, when set to True, SQL statement parameters
2025-10-08T16:01:12.4185735Z             will not be displayed in INFO logging nor will they be formatted into
2025-10-08T16:01:12.4185924Z             the string representation of :class:`.StatementError` objects.
2025-10-08T16:01:12.4185995Z     
2025-10-08T16:01:12.4186099Z             .. versionadded:: 1.3.8
2025-10-08T16:01:12.4186170Z     
2025-10-08T16:01:12.4186248Z             .. seealso::
2025-10-08T16:01:12.4186320Z     
2025-10-08T16:01:12.4186483Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.4186560Z                 logging.
2025-10-08T16:01:12.4186638Z     
2025-10-08T16:01:12.4186829Z         :param implicit_returning=True:  Legacy parameter that may only be set
2025-10-08T16:01:12.4187001Z             to True. In SQLAlchemy 2.0, this parameter does nothing. In order to
2025-10-08T16:01:12.4187175Z             disable "implicit returning" for statements invoked by the ORM,
2025-10-08T16:01:12.4187298Z             configure this on a per-table basis using the
2025-10-08T16:01:12.4187589Z             :paramref:`.Table.implicit_returning` parameter.
2025-10-08T16:01:12.4187659Z     
2025-10-08T16:01:12.4187727Z     
2025-10-08T16:01:12.4187915Z         :param insertmanyvalues_page_size: number of rows to format into an
2025-10-08T16:01:12.4188113Z          INSERT statement when the statement uses "insertmanyvalues" mode, which is
2025-10-08T16:01:12.4188284Z          a paged form of bulk insert that is used for many backends when using
2025-10-08T16:01:12.4188473Z          :term:`executemany` execution typically in conjunction with RETURNING.
2025-10-08T16:01:12.4188644Z          Defaults to 1000, but may also be subject to dialect-specific limiting
2025-10-08T16:01:12.4188816Z          factors which may override this value on a per-statement basis.
2025-10-08T16:01:12.4188882Z     
2025-10-08T16:01:12.4188974Z          .. versionadded:: 2.0
2025-10-08T16:01:12.4189050Z     
2025-10-08T16:01:12.4189127Z          .. seealso::
2025-10-08T16:01:12.4189192Z     
2025-10-08T16:01:12.4189297Z             :ref:`engine_insertmanyvalues`
2025-10-08T16:01:12.4189363Z     
2025-10-08T16:01:12.4189480Z             :ref:`engine_insertmanyvalues_page_size`
2025-10-08T16:01:12.4189554Z     
2025-10-08T16:01:12.4189771Z             :paramref:`_engine.Connection.execution_options.insertmanyvalues_page_size`
2025-10-08T16:01:12.4189844Z     
2025-10-08T16:01:12.4190010Z         :param isolation_level: optional string name of an isolation level
2025-10-08T16:01:12.4190153Z             which will be set on all new connections unconditionally.
2025-10-08T16:01:12.4190318Z             Isolation levels are typically some subset of the string names
2025-10-08T16:01:12.4190424Z             ``"SERIALIZABLE"``, ``"REPEATABLE READ"``,
2025-10-08T16:01:12.4190575Z             ``"READ COMMITTED"``, ``"READ UNCOMMITTED"`` and ``"AUTOCOMMIT"``
2025-10-08T16:01:12.4190665Z             based on backend.
2025-10-08T16:01:12.4190732Z     
2025-10-08T16:01:12.4190893Z             The :paramref:`_sa.create_engine.isolation_level` parameter is
2025-10-08T16:01:12.4190978Z             in contrast to the
2025-10-08T16:01:12.4191329Z             :paramref:`.Connection.execution_options.isolation_level`
2025-10-08T16:01:12.4191476Z             execution option, which may be set on an individual
2025-10-08T16:01:12.4191636Z             :class:`.Connection`, as well as the same parameter passed to
2025-10-08T16:01:12.4191796Z             :meth:`.Engine.execution_options`, where it may be used to create
2025-10-08T16:01:12.4191981Z             multiple engines with different isolation levels that share a common
2025-10-08T16:01:12.4192178Z             connection pool and dialect.
2025-10-08T16:01:12.4192253Z     
2025-10-08T16:01:12.4192344Z             .. versionchanged:: 2.0 The
2025-10-08T16:01:12.4192465Z                :paramref:`_sa.create_engine.isolation_level`
2025-10-08T16:01:12.4192649Z                parameter has been generalized to work on all dialects which support
2025-10-08T16:01:12.4192819Z                the concept of isolation level, and is provided as a more succinct,
2025-10-08T16:01:12.4192989Z                up front configuration switch in contrast to the execution option
2025-10-08T16:01:12.4193121Z                which is more of an ad-hoc programmatic option.
2025-10-08T16:01:12.4193189Z     
2025-10-08T16:01:12.4193276Z             .. seealso::
2025-10-08T16:01:12.4193343Z     
2025-10-08T16:01:12.4193430Z                 :ref:`dbapi_autocommit`
2025-10-08T16:01:12.4193504Z     
2025-10-08T16:01:12.4193639Z         :param json_deserializer: for dialects that support the
2025-10-08T16:01:12.4193730Z             :class:`_types.JSON`
2025-10-08T16:01:12.4193906Z             datatype, this is a Python callable that will convert a JSON string
2025-10-08T16:01:12.4194076Z             to a Python object.  By default, the Python ``json.loads`` function is
2025-10-08T16:01:12.4194148Z             used.
2025-10-08T16:01:12.4194221Z     
2025-10-08T16:01:12.4194383Z             .. versionchanged:: 1.3.7  The SQLite dialect renamed this from
2025-10-08T16:01:12.4194480Z                ``_json_deserializer``.
2025-10-08T16:01:12.4194547Z     
2025-10-08T16:01:12.4194741Z         :param json_serializer: for dialects that support the :class:`_types.JSON`
2025-10-08T16:01:12.4194912Z             datatype, this is a Python callable that will render a given object
2025-10-08T16:01:12.4195064Z             as JSON.   By default, the Python ``json.dumps`` function is used.
2025-10-08T16:01:12.4195131Z     
2025-10-08T16:01:12.4195293Z             .. versionchanged:: 1.3.7  The SQLite dialect renamed this from
2025-10-08T16:01:12.4195381Z                ``_json_serializer``.
2025-10-08T16:01:12.4195456Z     
2025-10-08T16:01:12.4195523Z     
2025-10-08T16:01:12.4195677Z         :param label_length=None: optional integer value which limits
2025-10-08T16:01:12.4195831Z             the size of dynamically generated column labels to that many
2025-10-08T16:01:12.4195962Z             characters. If less than 6, labels are generated as
2025-10-08T16:01:12.4196061Z             "_(counter)". If ``None``, the value of
2025-10-08T16:01:12.4196233Z             ``dialect.max_identifier_length``, which may be affected via the
2025-10-08T16:01:12.4196391Z             :paramref:`_sa.create_engine.max_identifier_length` parameter,
2025-10-08T16:01:12.4196486Z             is used instead.   The value of
2025-10-08T16:01:12.4196605Z             :paramref:`_sa.create_engine.label_length`
2025-10-08T16:01:12.4196698Z             may not be larger than that of
2025-10-08T16:01:12.4196831Z             :paramref:`_sa.create_engine.max_identfier_length`.
2025-10-08T16:01:12.4196901Z     
2025-10-08T16:01:12.4196980Z             .. seealso::
2025-10-08T16:01:12.4197052Z     
2025-10-08T16:01:12.4197183Z                 :paramref:`_sa.create_engine.max_identifier_length`
2025-10-08T16:01:12.4197250Z     
2025-10-08T16:01:12.4197527Z         :param logging_name:  String identifier which will be used within
2025-10-08T16:01:12.4197664Z             the "name" field of logging records generated within the
2025-10-08T16:01:12.4197822Z             "sqlalchemy.engine" logger. Defaults to a hexstring of the
2025-10-08T16:01:12.4198018Z             object's id.
2025-10-08T16:01:12.4198086Z     
2025-10-08T16:01:12.4198174Z             .. seealso::
2025-10-08T16:01:12.4198241Z     
2025-10-08T16:01:12.4198388Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.4198474Z                 logging.
2025-10-08T16:01:12.4198542Z     
2025-10-08T16:01:12.4198708Z                 :paramref:`_engine.Connection.execution_options.logging_token`
2025-10-08T16:01:12.4198888Z     
2025-10-08T16:01:12.4199070Z         :param max_identifier_length: integer; override the max_identifier_length
2025-10-08T16:01:12.4199246Z             determined by the dialect.  if ``None`` or zero, has no effect.  This
2025-10-08T16:01:12.4199414Z             is the database's configured maximum number of characters that may be
2025-10-08T16:01:12.4199576Z             used in a SQL identifier such as a table name, column name, or label
2025-10-08T16:01:12.4199762Z             name. All dialects determine this value automatically, however in the
2025-10-08T16:01:12.4199918Z             case of a new database version for which this value has changed but
2025-10-08T16:01:12.4200087Z             SQLAlchemy's dialect has not been adjusted, the value may be passed
2025-10-08T16:01:12.4200164Z             here.
2025-10-08T16:01:12.4200232Z     
2025-10-08T16:01:12.4200329Z             .. versionadded:: 1.3.9
2025-10-08T16:01:12.4200398Z     
2025-10-08T16:01:12.4200475Z             .. seealso::
2025-10-08T16:01:12.4200547Z     
2025-10-08T16:01:12.4200658Z                 :paramref:`_sa.create_engine.label_length`
2025-10-08T16:01:12.4200724Z     
2025-10-08T16:01:12.4200875Z         :param max_overflow=10: the number of connections to allow in
2025-10-08T16:01:12.4201030Z             connection pool "overflow", that is connections that can be
2025-10-08T16:01:12.4201183Z             opened above and beyond the pool_size setting, which defaults
2025-10-08T16:01:12.4201364Z             to five. this is only used with :class:`~sqlalchemy.pool.QueuePool`.
2025-10-08T16:01:12.4201430Z     
2025-10-08T16:01:12.4201606Z         :param module=None: reference to a Python module object (the module
2025-10-08T16:01:12.4201779Z             itself, not its string name).  Specifies an alternate DBAPI module to
2025-10-08T16:01:12.4201927Z             be used by the engine's dialect.  Each sub-dialect references a
2025-10-08T16:01:12.4202110Z             specific DBAPI which will be imported before first connect.  This
2025-10-08T16:01:12.4202279Z             parameter causes the import to be bypassed, and the given module to
2025-10-08T16:01:12.4202429Z             be used instead. Can be used for testing of DBAPIs as well as to
2025-10-08T16:01:12.4202608Z             inject "mock" DBAPI implementations into the :class:`_engine.Engine`.
2025-10-08T16:01:12.4202674Z     
2025-10-08T16:01:12.4202967Z         :param paramstyle=None: The `paramstyle <https://legacy.python.org/dev/peps/pep-0249/#paramstyle>`_
2025-10-08T16:01:12.4203132Z             to use when rendering bound parameters.  This style defaults to the
2025-10-08T16:01:12.4203292Z             one recommended by the DBAPI itself, which is retrieved from the
2025-10-08T16:01:12.4203469Z             ``.paramstyle`` attribute of the DBAPI.  However, most DBAPIs accept
2025-10-08T16:01:12.4203621Z             more than one paramstyle, and in particular it may be desirable
2025-10-08T16:01:12.4203801Z             to change a "named" paramstyle into a "positional" one, or vice versa.
2025-10-08T16:01:12.4203949Z             When this attribute is passed, it should be one of the values
2025-10-08T16:01:12.4204070Z             ``"qmark"``, ``"numeric"``, ``"named"``, ``"format"`` or
2025-10-08T16:01:12.4204225Z             ``"pyformat"``, and should correspond to a parameter style known
2025-10-08T16:01:12.4204329Z             to be supported by the DBAPI in use.
2025-10-08T16:01:12.4204396Z     
2025-10-08T16:01:12.4204534Z         :param pool=None: an already-constructed instance of
2025-10-08T16:01:12.4204735Z             :class:`~sqlalchemy.pool.Pool`, such as a
2025-10-08T16:01:12.4204907Z             :class:`~sqlalchemy.pool.QueuePool` instance. If non-None, this
2025-10-08T16:01:12.4205056Z             pool will be used directly as the underlying connection pool
2025-10-08T16:01:12.4205201Z             for the engine, bypassing whatever connection parameters are
2025-10-08T16:01:12.4205427Z             present in the URL argument. For information on constructing
2025-10-08T16:01:12.4205571Z             connection pools manually, see :ref:`pooling_toplevel`.
2025-10-08T16:01:12.4205639Z     
2025-10-08T16:01:12.4205788Z         :param poolclass=None: a :class:`~sqlalchemy.pool.Pool`
2025-10-08T16:01:12.4205927Z             subclass, which will be used to create a connection pool
2025-10-08T16:01:12.4206090Z             instance using the connection parameters given in the URL. Note
2025-10-08T16:01:12.4206221Z             this differs from ``pool`` in that you don't actually
2025-10-08T16:01:12.4206380Z             instantiate the pool in this case, you just indicate what type
2025-10-08T16:01:12.4206487Z             of pool to be used.
2025-10-08T16:01:12.4206566Z     
2025-10-08T16:01:12.4206743Z         :param pool_logging_name:  String identifier which will be used within
2025-10-08T16:01:12.4206890Z            the "name" field of logging records generated within the
2025-10-08T16:01:12.4207058Z            "sqlalchemy.pool" logger. Defaults to a hexstring of the object's
2025-10-08T16:01:12.4207134Z            id.
2025-10-08T16:01:12.4207199Z     
2025-10-08T16:01:12.4207277Z            .. seealso::
2025-10-08T16:01:12.4207528Z     
2025-10-08T16:01:12.4207730Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.4207808Z                 logging.
2025-10-08T16:01:12.4207878Z     
2025-10-08T16:01:12.4208048Z         :param pool_pre_ping: boolean, if True will enable the connection pool
2025-10-08T16:01:12.4208203Z             "pre-ping" feature that tests connections for liveness upon
2025-10-08T16:01:12.4208291Z             each checkout.
2025-10-08T16:01:12.4208357Z     
2025-10-08T16:01:12.4208446Z             .. versionadded:: 1.2
2025-10-08T16:01:12.4208519Z     
2025-10-08T16:01:12.4208594Z             .. seealso::
2025-10-08T16:01:12.4208666Z     
2025-10-08T16:01:12.4208768Z                 :ref:`pool_disconnects_pessimistic`
2025-10-08T16:01:12.4208843Z     
2025-10-08T16:01:12.4208992Z         :param pool_size=5: the number of connections to keep open
2025-10-08T16:01:12.4209100Z             inside the connection pool. This used with
2025-10-08T16:01:12.4209207Z             :class:`~sqlalchemy.pool.QueuePool` as
2025-10-08T16:01:12.4209373Z             well as :class:`~sqlalchemy.pool.SingletonThreadPool`.  With
2025-10-08T16:01:12.4209521Z             :class:`~sqlalchemy.pool.QueuePool`, a ``pool_size`` setting
2025-10-08T16:01:12.4209685Z             of 0 indicates no limit; to disable pooling, set ``poolclass`` to
2025-10-08T16:01:12.4209803Z             :class:`~sqlalchemy.pool.NullPool` instead.
2025-10-08T16:01:12.4209869Z     
2025-10-08T16:01:12.4210027Z         :param pool_recycle=-1: this setting causes the pool to recycle
2025-10-08T16:01:12.4210181Z             connections after the given number of seconds has passed. It
2025-10-08T16:01:12.4210322Z             defaults to -1, or no timeout. For example, setting to 3600
2025-10-08T16:01:12.4210486Z             means connections will be recycled after one hour. Note that
2025-10-08T16:01:12.4210625Z             MySQL in particular will disconnect automatically if no
2025-10-08T16:01:12.4210788Z             activity is detected on a connection for eight hours (although
2025-10-08T16:01:12.4210946Z             this is configurable with the MySQLDB connection itself and the
2025-10-08T16:01:12.4211044Z             server configuration as well).
2025-10-08T16:01:12.4211118Z     
2025-10-08T16:01:12.4211198Z             .. seealso::
2025-10-08T16:01:12.4211268Z     
2025-10-08T16:01:12.4211497Z                 :ref:`pool_setting_recycle`
2025-10-08T16:01:12.4211568Z     
2025-10-08T16:01:12.4211690Z         :param pool_reset_on_return='rollback': set the
2025-10-08T16:01:12.4211867Z             :paramref:`_pool.Pool.reset_on_return` parameter of the underlying
2025-10-08T16:01:12.4212008Z             :class:`_pool.Pool` object, which can be set to the values
2025-10-08T16:01:12.4212115Z             ``"rollback"``, ``"commit"``, or ``None``.
2025-10-08T16:01:12.4212290Z     
2025-10-08T16:01:12.4212373Z             .. seealso::
2025-10-08T16:01:12.4212446Z     
2025-10-08T16:01:12.4212538Z                 :ref:`pool_reset_on_return`
2025-10-08T16:01:12.4212604Z     
2025-10-08T16:01:12.4212767Z                 :ref:`dbapi_autocommit_skip_rollback` - a more modern approach
2025-10-08T16:01:12.4212909Z                 to using connections with no transactional instructions
2025-10-08T16:01:12.4212977Z     
2025-10-08T16:01:12.4213131Z         :param pool_timeout=30: number of seconds to wait before giving
2025-10-08T16:01:12.4213270Z             up on getting a connection from the pool. This is only used
2025-10-08T16:01:12.4213452Z             with :class:`~sqlalchemy.pool.QueuePool`. This can be a float but is
2025-10-08T16:01:12.4213623Z             subject to the limitations of Python time functions which may not be
2025-10-08T16:01:12.4213727Z             reliable in the tens of milliseconds.
2025-10-08T16:01:12.4213808Z     
2025-10-08T16:01:12.4213958Z             .. note: don't use 30.0 above, it seems to break with the :param tag
2025-10-08T16:01:12.4214030Z     
2025-10-08T16:01:12.4214208Z         :param pool_use_lifo=False: use LIFO (last-in-first-out) when retrieving
2025-10-08T16:01:12.4214344Z             connections from :class:`.QueuePool` instead of FIFO
2025-10-08T16:01:12.4214520Z             (first-in-first-out). Using LIFO, a server-side timeout scheme can
2025-10-08T16:01:12.4214688Z             reduce the number of connections used during non- peak   periods of
2025-10-08T16:01:12.4214871Z             use.   When planning for server-side timeouts, ensure that a recycle or
2025-10-08T16:01:12.4215049Z             pre-ping strategy is in use to gracefully   handle stale connections.
2025-10-08T16:01:12.4215115Z     
2025-10-08T16:01:12.4215208Z               .. versionadded:: 1.3
2025-10-08T16:01:12.4215281Z     
2025-10-08T16:01:12.4215361Z               .. seealso::
2025-10-08T16:01:12.4215436Z     
2025-10-08T16:01:12.4215523Z                 :ref:`pool_use_lifo`
2025-10-08T16:01:12.4215589Z     
2025-10-08T16:01:12.4215683Z                 :ref:`pool_disconnects`
2025-10-08T16:01:12.4215750Z     
2025-10-08T16:01:12.4215895Z         :param plugins: string list of plugin names to load.  See
2025-10-08T16:01:12.4216016Z             :class:`.CreateEnginePlugin` for background.
2025-10-08T16:01:12.4216083Z     
2025-10-08T16:01:12.4216170Z             .. versionadded:: 1.2.3
2025-10-08T16:01:12.4216242Z     
2025-10-08T16:01:12.4216418Z         :param query_cache_size: size of the cache used to cache the SQL string
2025-10-08T16:01:12.4216543Z          form of queries.  Set to zero to disable caching.
2025-10-08T16:01:12.4216610Z     
2025-10-08T16:01:12.4216787Z          The cache is pruned of its least recently used items when its size reaches
2025-10-08T16:01:12.4216950Z          N * 1.5.  Defaults to 500, meaning the cache will always store at least
2025-10-08T16:01:12.4217120Z          500 SQL statements when filled, and will grow up to 750 items at which
2025-10-08T16:01:12.4217288Z          point it is pruned back down to 500 by removing the 250 least recently
2025-10-08T16:01:12.4217556Z          used items.
2025-10-08T16:01:12.4217634Z     
2025-10-08T16:01:12.4217806Z          Caching is accomplished on a per-statement basis by generating a
2025-10-08T16:01:12.4217982Z          cache key that represents the statement's structure, then generating
2025-10-08T16:01:12.4218142Z          string SQL for the current dialect only if that key is not present
2025-10-08T16:01:12.4218437Z          in the cache.   All statements support caching, however some features
2025-10-08T16:01:12.4218600Z          such as an INSERT with a large set of parameters will intentionally
2025-10-08T16:01:12.4218755Z          bypass the cache.   SQL logging will indicate statistics for each
2025-10-08T16:01:12.4218895Z          statement whether or not it were pull from the cache.
2025-10-08T16:01:12.4218961Z     
2025-10-08T16:01:12.4219250Z          .. note:: some ORM functions related to unit-of-work persistence as well
2025-10-08T16:01:12.4219409Z             as some attribute loading strategies will make use of individual
2025-10-08T16:01:12.4219526Z             per-mapper caches outside of the main cache.
2025-10-08T16:01:12.4219600Z     
2025-10-08T16:01:12.4219664Z     
2025-10-08T16:01:12.4219741Z          .. seealso::
2025-10-08T16:01:12.4219816Z     
2025-10-08T16:01:12.4219900Z             :ref:`sql_caching`
2025-10-08T16:01:12.4219968Z     
2025-10-08T16:01:12.4220060Z          .. versionadded:: 1.4
2025-10-08T16:01:12.4220131Z     
2025-10-08T16:01:12.4220281Z         :param skip_autocommit_rollback: When True, the dialect will
2025-10-08T16:01:12.4220477Z            unconditionally skip all calls to the DBAPI ``connection.rollback()``
2025-10-08T16:01:12.4220653Z            method if the DBAPI connection is confirmed to be in "autocommit" mode.
2025-10-08T16:01:12.4220839Z            The availability of this feature is dialect specific; if not available,
2025-10-08T16:01:12.4221029Z            a ``NotImplementedError`` is raised by the dialect when rollback occurs.
2025-10-08T16:01:12.4221097Z     
2025-10-08T16:01:12.4221196Z            .. seealso::
2025-10-08T16:01:12.4221275Z     
2025-10-08T16:01:12.4221380Z                 :ref:`dbapi_autocommit_skip_rollback`
2025-10-08T16:01:12.4221456Z     
2025-10-08T16:01:12.4221545Z            .. versionadded:: 2.0.43
2025-10-08T16:01:12.4221623Z     
2025-10-08T16:01:12.4221807Z         :param use_insertmanyvalues: True by default, use the "insertmanyvalues"
2025-10-08T16:01:12.4221968Z          execution style for INSERT..RETURNING statements by default.
2025-10-08T16:01:12.4222051Z     
2025-10-08T16:01:12.4222139Z          .. versionadded:: 2.0
2025-10-08T16:01:12.4222207Z     
2025-10-08T16:01:12.4222290Z          .. seealso::
2025-10-08T16:01:12.4222356Z     
2025-10-08T16:01:12.4222452Z             :ref:`engine_insertmanyvalues`
2025-10-08T16:01:12.4222532Z     
2025-10-08T16:01:12.4222603Z         """  # noqa
2025-10-08T16:01:12.4222671Z     
2025-10-08T16:01:12.4222764Z         if "strategy" in kwargs:
2025-10-08T16:01:12.4222856Z             strat = kwargs.pop("strategy")
2025-10-08T16:01:12.4222946Z             if strat == "mock":
2025-10-08T16:01:12.4223035Z                 # this case is deprecated
2025-10-08T16:01:12.4223178Z                 return create_mock_engine(url, **kwargs)  # type: ignore
2025-10-08T16:01:12.4223256Z             else:
2025-10-08T16:01:12.4223400Z                 raise exc.ArgumentError("unknown strategy: %r" % strat)
2025-10-08T16:01:12.4223472Z     
2025-10-08T16:01:12.4223581Z         kwargs.pop("empty_in_strategy", None)
2025-10-08T16:01:12.4223647Z     
2025-10-08T16:01:12.4223731Z         # create url.URL object
2025-10-08T16:01:12.4223819Z         u = _url.make_url(url)
2025-10-08T16:01:12.4223885Z     
2025-10-08T16:01:12.4224017Z         u, plugins, kwargs = u._instantiate_plugins(kwargs)
2025-10-08T16:01:12.4224083Z     
2025-10-08T16:01:12.4224185Z         entrypoint = u._get_entrypoint()
2025-10-08T16:01:12.4224298Z         _is_async = kwargs.pop("_is_async", False)
2025-10-08T16:01:12.4224375Z         if _is_async:
2025-10-08T16:01:12.4224503Z             dialect_cls = entrypoint.get_async_dialect_cls(u)
2025-10-08T16:01:12.4224578Z         else:
2025-10-08T16:01:12.4224688Z             dialect_cls = entrypoint.get_dialect_cls(u)
2025-10-08T16:01:12.4224759Z     
2025-10-08T16:01:12.4224861Z         if kwargs.pop("_coerce_config", False):
2025-10-08T16:01:12.4224926Z     
2025-10-08T16:01:12.4225167Z             def pop_kwarg(key: str, default: Optional[Any] = None) -> Any:
2025-10-08T16:01:12.4225270Z                 value = kwargs.pop(key, default)
2025-10-08T16:01:12.4225378Z                 if key in dialect_cls.engine_config_types:
2025-10-08T16:01:12.4225510Z                     value = dialect_cls.engine_config_types[key](value)
2025-10-08T16:01:12.4225590Z                 return value
2025-10-08T16:01:12.4225732Z     
2025-10-08T16:01:12.4225806Z         else:
2025-10-08T16:01:12.4225906Z             pop_kwarg = kwargs.pop  # type: ignore
2025-10-08T16:01:12.4225976Z     
2025-10-08T16:01:12.4226055Z         dialect_args = {}
2025-10-08T16:01:12.4226154Z         # consume dialect arguments from kwargs
2025-10-08T16:01:12.4226258Z         for k in util.get_cls_kwargs(dialect_cls):
2025-10-08T16:01:12.4226336Z             if k in kwargs:
2025-10-08T16:01:12.4226432Z                 dialect_args[k] = pop_kwarg(k)
2025-10-08T16:01:12.4226505Z     
2025-10-08T16:01:12.4226600Z         dbapi = kwargs.pop("module", None)
2025-10-08T16:01:12.4226683Z         if dbapi is None:
2025-10-08T16:01:12.4226766Z             dbapi_args = {}
2025-10-08T16:01:12.4226835Z     
2025-10-08T16:01:12.4226945Z             if "import_dbapi" in dialect_cls.__dict__:
2025-10-08T16:01:12.4227045Z                 dbapi_meth = dialect_cls.import_dbapi
2025-10-08T16:01:12.4227111Z     
2025-10-08T16:01:12.4227256Z             elif hasattr(dialect_cls, "dbapi") and inspect.ismethod(
2025-10-08T16:01:12.4227451Z                 dialect_cls.dbapi
2025-10-08T16:01:12.4227522Z             ):
2025-10-08T16:01:12.4227617Z                 util.warn_deprecated(
2025-10-08T16:01:12.4227750Z                     "The dbapi() classmethod on dialect classes has been "
2025-10-08T16:01:12.4227897Z                     "renamed to import_dbapi().  Implement an import_dbapi() "
2025-10-08T16:01:12.4228065Z                     f"classmethod directly on class {dialect_cls} to remove this "
2025-10-08T16:01:12.4228218Z                     "warning; the old .dbapi() classmethod may be maintained for "
2025-10-08T16:01:12.4228320Z                     "backwards compatibility.",
2025-10-08T16:01:12.4228398Z                     "2.0",
2025-10-08T16:01:12.4228468Z                 )
2025-10-08T16:01:12.4228569Z                 dbapi_meth = dialect_cls.dbapi
2025-10-08T16:01:12.4228637Z             else:
2025-10-08T16:01:12.4228738Z                 dbapi_meth = dialect_cls.import_dbapi
2025-10-08T16:01:12.4228814Z     
2025-10-08T16:01:12.4228916Z             for k in util.get_func_kwargs(dbapi_meth):
2025-10-08T16:01:12.4229000Z                 if k in kwargs:
2025-10-08T16:01:12.4229095Z                     dbapi_args[k] = pop_kwarg(k)
2025-10-08T16:01:12.4229189Z             dbapi = dbapi_meth(**dbapi_args)
2025-10-08T16:01:12.4229259Z     
2025-10-08T16:01:12.4229350Z         dialect_args["dbapi"] = dbapi
2025-10-08T16:01:12.4229419Z     
2025-10-08T16:01:12.4229590Z         dialect_args.setdefault("compiler_linting", compiler.NO_LINTING)
2025-10-08T16:01:12.4229747Z         enable_from_linting = kwargs.pop("enable_from_linting", True)
2025-10-08T16:01:12.4229829Z         if enable_from_linting:
2025-10-08T16:01:12.4230017Z             dialect_args["compiler_linting"] ^= compiler.COLLECT_CARTESIAN_PRODUCTS
2025-10-08T16:01:12.4230084Z     
2025-10-08T16:01:12.4230176Z         for plugin in plugins:
2025-10-08T16:01:12.4230317Z             plugin.handle_dialect_kwargs(dialect_cls, dialect_args)
2025-10-08T16:01:12.4230386Z     
2025-10-08T16:01:12.4230469Z         # create dialect
2025-10-08T16:01:12.4230564Z         dialect = dialect_cls(**dialect_args)
2025-10-08T16:01:12.4230630Z     
2025-10-08T16:01:12.4230728Z         # assemble connection arguments
2025-10-08T16:01:12.4230855Z         (cargs_tup, cparams) = dialect.create_connect_args(u)
2025-10-08T16:01:12.4230968Z         cparams.update(pop_kwarg("connect_args", {}))
2025-10-08T16:01:12.4231043Z     
2025-10-08T16:01:12.4231220Z         if "async_fallback" in cparams and util.asbool(cparams["async_fallback"]):
2025-10-08T16:01:12.4231433Z             util.warn_deprecated(
2025-10-08T16:01:12.4231599Z                 "The async_fallback dialect argument is deprecated and will be "
2025-10-08T16:01:12.4231692Z                 "removed in SQLAlchemy 2.1.",
2025-10-08T16:01:12.4231769Z                 "2.0",
2025-10-08T16:01:12.4231838Z             )
2025-10-08T16:01:12.4231904Z     
2025-10-08T16:01:12.4232015Z         cargs = list(cargs_tup)  # allow mutability
2025-10-08T16:01:12.4232181Z     
2025-10-08T16:01:12.4232274Z         # look for existing pool or create
2025-10-08T16:01:12.4232375Z         pool = pop_kwarg("pool", None)
2025-10-08T16:01:12.4232453Z         if pool is None:
2025-10-08T16:01:12.4232518Z     
2025-10-08T16:01:12.4232599Z             def connect(
2025-10-08T16:01:12.4232747Z                 connection_record: Optional[ConnectionPoolEntry] = None,
2025-10-08T16:01:12.4232839Z             ) -> DBAPIConnection:
2025-10-08T16:01:12.4232925Z                 if dialect._has_events:
2025-10-08T16:01:12.4233041Z                     for fn in dialect.dispatch.do_connect:
2025-10-08T16:01:12.4233132Z                         connection = cast(
2025-10-08T16:01:12.4233221Z                             DBAPIConnection,
2025-10-08T16:01:12.4233347Z                             fn(dialect, connection_record, cargs, cparams),
2025-10-08T16:01:12.4233428Z                         )
2025-10-08T16:01:12.4233523Z                         if connection is not None:
2025-10-08T16:01:12.4233618Z                             return connection
2025-10-08T16:01:12.4233683Z     
2025-10-08T16:01:12.4233792Z                 return dialect.connect(*cargs, **cparams)
2025-10-08T16:01:12.4233863Z     
2025-10-08T16:01:12.4233962Z             creator = pop_kwarg("creator", connect)
2025-10-08T16:01:12.4234028Z     
2025-10-08T16:01:12.4234138Z             poolclass = pop_kwarg("poolclass", None)
2025-10-08T16:01:12.4234223Z             if poolclass is None:
2025-10-08T16:01:12.4234338Z                 poolclass = dialect.get_dialect_pool_class(u)
2025-10-08T16:01:12.4234438Z             pool_args = {"dialect": dialect}
2025-10-08T16:01:12.4234504Z     
2025-10-08T16:01:12.4234651Z             # consume pool arguments from kwargs, translating a few of
2025-10-08T16:01:12.4234729Z             # the arguments
2025-10-08T16:01:12.4234832Z             for k in util.get_cls_kwargs(poolclass):
2025-10-08T16:01:12.4234937Z                 tk = _pool_translate_kwargs.get(k, k)
2025-10-08T16:01:12.4235023Z                 if tk in kwargs:
2025-10-08T16:01:12.4235116Z                     pool_args[k] = pop_kwarg(tk)
2025-10-08T16:01:12.4235188Z     
2025-10-08T16:01:12.4235274Z             for plugin in plugins:
2025-10-08T16:01:12.4235400Z                 plugin.handle_pool_kwargs(poolclass, pool_args)
2025-10-08T16:01:12.4235470Z     
2025-10-08T16:01:12.4235572Z             pool = poolclass(creator, **pool_args)
2025-10-08T16:01:12.4235646Z         else:
2025-10-08T16:01:12.4235731Z             pool._dialect = dialect
2025-10-08T16:01:12.4235796Z     
2025-10-08T16:01:12.4235872Z         if (
2025-10-08T16:01:12.4235962Z             hasattr(pool, "_is_asyncio")
2025-10-08T16:01:12.4236073Z             and pool._is_asyncio is not dialect.is_async
2025-10-08T16:01:12.4236147Z         ):
2025-10-08T16:01:12.4236236Z             raise exc.ArgumentError(
2025-10-08T16:01:12.4236359Z                 f"Pool class {pool.__class__.__name__} cannot be "
2025-10-08T16:01:12.4236495Z                 f"used with {'non-' if not dialect.is_async else ''}"
2025-10-08T16:01:12.4236576Z                 "asyncio engine",
2025-10-08T16:01:12.4236660Z                 code="pcls",
2025-10-08T16:01:12.4236730Z             )
2025-10-08T16:01:12.4236795Z     
2025-10-08T16:01:12.4236876Z         # create engine.
2025-10-08T16:01:12.4236969Z         if not pop_kwarg("future", True):
2025-10-08T16:01:12.4237057Z             raise exc.ArgumentError(
2025-10-08T16:01:12.4237164Z                 "The 'future' parameter passed to "
2025-10-08T16:01:12.4237471Z                 "create_engine() may only be set to True."
2025-10-08T16:01:12.4237547Z             )
2025-10-08T16:01:12.4237618Z     
2025-10-08T16:01:12.4237705Z         engineclass = base.Engine
2025-10-08T16:01:12.4237771Z     
2025-10-08T16:01:12.4237852Z         engine_args = {}
2025-10-08T16:01:12.4237958Z         for k in util.get_cls_kwargs(engineclass):
2025-10-08T16:01:12.4238040Z             if k in kwargs:
2025-10-08T16:01:12.4238279Z                 engine_args[k] = pop_kwarg(k)
2025-10-08T16:01:12.4238346Z     
2025-10-08T16:01:12.4238522Z         # internal flags used by the test suite for instrumenting / proxying
2025-10-08T16:01:12.4238605Z         # engines with mocks etc.
2025-10-08T16:01:12.4238715Z         _initialize = kwargs.pop("_initialize", True)
2025-10-08T16:01:12.4238786Z     
2025-10-08T16:01:12.4238874Z         # all kwargs should be consumed
2025-10-08T16:01:12.4238946Z         if kwargs:
2025-10-08T16:01:12.4239034Z >           raise TypeError(
2025-10-08T16:01:12.4239161Z                 "Invalid argument(s) %s sent to create_engine(), "
2025-10-08T16:01:12.4239304Z                 "using configuration %s/%s/%s.  Please check that the "
2025-10-08T16:01:12.4239452Z                 "keyword arguments are appropriate for this combination "
2025-10-08T16:01:12.4239534Z                 "of components."
2025-10-08T16:01:12.4239607Z                 % (
2025-10-08T16:01:12.4239707Z                     ",".join("'%s'" % k for k in kwargs),
2025-10-08T16:01:12.4239807Z                     dialect.__class__.__name__,
2025-10-08T16:01:12.4239898Z                     pool.__class__.__name__,
2025-10-08T16:01:12.4239985Z                     engineclass.__name__,
2025-10-08T16:01:12.4240057Z                 )
2025-10-08T16:01:12.4240124Z             )
2025-10-08T16:01:12.4240826Z E           TypeError: Invalid argument(s) 'pool_size','max_overflow' sent to create_engine(), using configuration SQLiteDialect_pysqlite/StaticPool/Engine.  Please check that the keyword arguments are appropriate for this combination of components.
2025-10-08T16:01:12.4240837Z 
2025-10-08T16:01:12.4241177Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/create.py:715: TypeError
2025-10-08T16:01:12.4241401Z _ ERROR at setup of TestAPIEndpointImmutability.test_critical_api_endpoints_exist _
2025-10-08T16:01:12.4241407Z 
2025-10-08T16:01:12.4241489Z     @pytest.fixture
2025-10-08T16:01:12.4241562Z     def app():
2025-10-08T16:01:12.4241658Z         """Create test app instance"""
2025-10-08T16:01:12.4241751Z >       app = create_app(TestConfig)
2025-10-08T16:01:12.4241829Z               ^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.4241835Z 
2025-10-08T16:01:12.4241927Z tests/test_field_consistency.py:30: 
2025-10-08T16:01:12.4242048Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:12.4242137Z app/__init__.py:141: in create_app
2025-10-08T16:01:12.4242220Z     db.init_app(app)
2025-10-08T16:01:12.4242557Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask_sqlalchemy/extension.py:374: in init_app
2025-10-08T16:01:12.4242689Z     engines[key] = self._make_engine(key, options, app)
2025-10-08T16:01:12.4242779Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.4243115Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask_sqlalchemy/extension.py:665: in _make_engine
2025-10-08T16:01:12.4243235Z     return sa.engine_from_config(options, prefix="")
2025-10-08T16:01:12.4243328Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.4243680Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/create.py:838: in engine_from_config
2025-10-08T16:01:12.4243778Z     return create_engine(url, **options)
2025-10-08T16:01:12.4243854Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.4243940Z <string>:2: in create_engine
2025-10-08T16:01:12.4244014Z     ???
2025-10-08T16:01:12.4244459Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/util/deprecations.py:281: in warned
2025-10-08T16:01:12.4244604Z     return fn(*args, **kwargs)  # type: ignore[no-any-return]
2025-10-08T16:01:12.4244687Z            ^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.4244799Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:12.4244803Z 
2025-10-08T16:01:12.4244976Z url = 'sqlite:///:memory:', kwargs = {'max_overflow': 30, 'pool_size': 10}
2025-10-08T16:01:12.4245142Z u = sqlite:///:memory:, plugins = []
2025-10-08T16:01:12.4245408Z entrypoint = <class 'sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite'>
2025-10-08T16:01:12.4245490Z _is_async = False
2025-10-08T16:01:12.4245670Z pop_kwarg = <function create_engine.<locals>.pop_kwarg at 0x7f308d9d0540>
2025-10-08T16:01:12.4246085Z dialect_args = {'compiler_linting': 1, 'dbapi': <module 'sqlite3.dbapi2' from '/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/sqlite3/dbapi2.py'>}
2025-10-08T16:01:12.4246097Z 
2025-10-08T16:01:12.4246185Z     @util.deprecated_params(
2025-10-08T16:01:12.4246262Z         strategy=(
2025-10-08T16:01:12.4246335Z             "1.4",
2025-10-08T16:01:12.4246511Z             "The :paramref:`_sa.create_engine.strategy` keyword is deprecated, "
2025-10-08T16:01:12.4246646Z             "and the only argument accepted is 'mock'; please use "
2025-10-08T16:01:12.4246793Z             ":func:`.create_mock_engine` going forward.  For general "
2025-10-08T16:01:12.4246971Z             "customization of create_engine which may have been accomplished "
2025-10-08T16:01:12.4247116Z             "using strategies, see :class:`.CreateEnginePlugin`.",
2025-10-08T16:01:12.4247186Z         ),
2025-10-08T16:01:12.4247269Z         empty_in_strategy=(
2025-10-08T16:01:12.4247492Z             "1.4",
2025-10-08T16:01:12.4247695Z             "The :paramref:`_sa.create_engine.empty_in_strategy` keyword is "
2025-10-08T16:01:12.4247855Z             "deprecated, and no longer has any effect.  All IN expressions "
2025-10-08T16:01:12.4247956Z             "are now rendered using "
2025-10-08T16:01:12.4248119Z             'the "expanding parameter" strategy which renders a set of bound'
2025-10-08T16:01:12.4248275Z             'expressions, or an "empty set" SELECT, at statement execution'
2025-10-08T16:01:12.4248353Z             "time.",
2025-10-08T16:01:12.4248420Z         ),
2025-10-08T16:01:12.4248507Z         implicit_returning=(
2025-10-08T16:01:12.4248576Z             "2.0",
2025-10-08T16:01:12.4248739Z             "The :paramref:`_sa.create_engine.implicit_returning` parameter "
2025-10-08T16:01:12.4248883Z             "is deprecated and will be removed in a future release. ",
2025-10-08T16:01:12.4248952Z         ),
2025-10-08T16:01:12.4249019Z     )
2025-10-08T16:01:12.4249196Z     def create_engine(url: Union[str, _url.URL], **kwargs: Any) -> Engine:
2025-10-08T16:01:12.4249315Z         """Create a new :class:`_engine.Engine` instance.
2025-10-08T16:01:12.4249382Z     
2025-10-08T16:01:12.4249577Z         The standard calling form is to send the :ref:`URL <database_urls>` as the
2025-10-08T16:01:12.4249686Z         first positional argument, usually a string
2025-10-08T16:01:12.4249841Z         that indicates database dialect and connection arguments::
2025-10-08T16:01:12.4249906Z     
2025-10-08T16:01:12.4250261Z             engine = create_engine("***localhost/test")
2025-10-08T16:01:12.4250339Z     
2025-10-08T16:01:12.4250415Z         .. note::
2025-10-08T16:01:12.4250487Z     
2025-10-08T16:01:12.4250674Z             Please review :ref:`database_urls` for general guidelines in composing
2025-10-08T16:01:12.4250846Z             URL strings.  In particular, special characters, such as those often
2025-10-08T16:01:12.4251009Z             part of passwords, must be URL encoded to be properly parsed.
2025-10-08T16:01:12.4251082Z     
2025-10-08T16:01:12.4251220Z         Additional keyword arguments may then follow it which
2025-10-08T16:01:12.4251395Z         establish various options on the resulting :class:`_engine.Engine`
2025-10-08T16:01:12.4251671Z         and its underlying :class:`.Dialect` and :class:`_pool.Pool`
2025-10-08T16:01:12.4251755Z         constructs::
2025-10-08T16:01:12.4251828Z     
2025-10-08T16:01:12.4251917Z             engine = create_engine(
2025-10-08T16:01:12.4252094Z                 "***hostname/dbname",
2025-10-08T16:01:12.4252182Z                 pool_recycle=3600,
2025-10-08T16:01:12.4252266Z                 echo=True,
2025-10-08T16:01:12.4252444Z             )
2025-10-08T16:01:12.4252519Z     
2025-10-08T16:01:12.4252615Z         The string form of the URL is
2025-10-08T16:01:12.4252787Z         ``dialect[+driver]://user:password@host/dbname[?key=value..]``, where
2025-10-08T16:01:12.4252930Z         ``dialect`` is a database name such as ``mysql``, ``oracle``,
2025-10-08T16:01:12.4253082Z         ``postgresql``, etc., and ``driver`` the name of a DBAPI, such as
2025-10-08T16:01:12.4253221Z         ``psycopg2``, ``pyodbc``, ``cx_oracle``, etc.  Alternatively,
2025-10-08T16:01:12.4253389Z         the URL can be an instance of :class:`~sqlalchemy.engine.url.URL`.
2025-10-08T16:01:12.4253454Z     
2025-10-08T16:01:12.4253588Z         ``**kwargs`` takes a wide variety of options which are routed
2025-10-08T16:01:12.4253771Z         towards their appropriate components.  Arguments may be specific to
2025-10-08T16:01:12.4253918Z         the :class:`_engine.Engine`, the underlying :class:`.Dialect`,
2025-10-08T16:01:12.4254002Z         as well as the
2025-10-08T16:01:12.4254185Z         :class:`_pool.Pool`.  Specific dialects also accept keyword arguments that
2025-10-08T16:01:12.4254333Z         are unique to that dialect.   Here, we describe the parameters
2025-10-08T16:01:12.4254477Z         that are common to most :func:`_sa.create_engine()` usage.
2025-10-08T16:01:12.4254544Z     
2025-10-08T16:01:12.4254711Z         Once established, the newly resulting :class:`_engine.Engine` will
2025-10-08T16:01:12.4254880Z         request a connection from the underlying :class:`_pool.Pool` once
2025-10-08T16:01:12.4255066Z         :meth:`_engine.Engine.connect` is called, or a method which depends on it
2025-10-08T16:01:12.4255209Z         such as :meth:`_engine.Engine.execute` is invoked.   The
2025-10-08T16:01:12.4255298Z         :class:`_pool.Pool` in turn
2025-10-08T16:01:12.4255460Z         will establish the first actual DBAPI connection when this request
2025-10-08T16:01:12.4255624Z         is received.   The :func:`_sa.create_engine` call itself does **not**
2025-10-08T16:01:12.4255754Z         establish any actual DBAPI connections directly.
2025-10-08T16:01:12.4255823Z     
2025-10-08T16:01:12.4255904Z         .. seealso::
2025-10-08T16:01:12.4255971Z     
2025-10-08T16:01:12.4256060Z             :doc:`/core/engines`
2025-10-08T16:01:12.4256126Z     
2025-10-08T16:01:12.4256212Z             :doc:`/dialects/index`
2025-10-08T16:01:12.4256282Z     
2025-10-08T16:01:12.4256374Z             :ref:`connections_toplevel`
2025-10-08T16:01:12.4256441Z     
2025-10-08T16:01:12.4256589Z         :param connect_args: a dictionary of options which will be
2025-10-08T16:01:12.4256730Z             passed directly to the DBAPI's ``connect()`` method as
2025-10-08T16:01:12.4256851Z             additional keyword arguments.  See the example
2025-10-08T16:01:12.4256949Z             at :ref:`custom_dbapi_args`.
2025-10-08T16:01:12.4257015Z     
2025-10-08T16:01:12.4257160Z         :param creator: a callable which returns a DBAPI connection.
2025-10-08T16:01:12.4257312Z             This creation function will be passed to the underlying
2025-10-08T16:01:12.4257682Z             connection pool and will be used to create all new database
2025-10-08T16:01:12.4257831Z             connections. Usage of this function causes connection
2025-10-08T16:01:12.4257973Z             parameters specified in the URL argument to be bypassed.
2025-10-08T16:01:12.4258041Z     
2025-10-08T16:01:12.4258150Z             This hook is not as flexible as the newer
2025-10-08T16:01:12.4258327Z             :meth:`_events.DialectEvents.do_connect` hook which allows complete
2025-10-08T16:01:12.4258620Z             control over how a connection is made to the database, given the full
2025-10-08T16:01:12.4258736Z             set of URL arguments and state beforehand.
2025-10-08T16:01:12.4258803Z     
2025-10-08T16:01:12.4258887Z             .. seealso::
2025-10-08T16:01:12.4258953Z     
2025-10-08T16:01:12.4259124Z                 :meth:`_events.DialectEvents.do_connect` - event hook that allows
2025-10-08T16:01:12.4259356Z                 full control over DBAPI connection mechanics.
2025-10-08T16:01:12.4259423Z     
2025-10-08T16:01:12.4259514Z                 :ref:`custom_dbapi_args`
2025-10-08T16:01:12.4259584Z     
2025-10-08T16:01:12.4259731Z         :param echo=False: if True, the Engine will log all statements
2025-10-08T16:01:12.4259884Z             as well as a ``repr()`` of their parameter lists to the default log
2025-10-08T16:01:12.4260054Z             handler, which defaults to ``sys.stdout`` for output.   If set to the
2025-10-08T16:01:12.4260224Z             string ``"debug"``, result rows will be printed to the standard output
2025-10-08T16:01:12.4260383Z             as well. The ``echo`` attribute of ``Engine`` can be modified at any
2025-10-08T16:01:12.4260539Z             time to turn logging on and off; direct control of logging is also
2025-10-08T16:01:12.4260679Z             available using the standard Python ``logging`` module.
2025-10-08T16:01:12.4260752Z     
2025-10-08T16:01:12.4260836Z             .. seealso::
2025-10-08T16:01:12.4260907Z     
2025-10-08T16:01:12.4261052Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.4261128Z                 logging.
2025-10-08T16:01:12.4261200Z     
2025-10-08T16:01:12.4261267Z     
2025-10-08T16:01:12.4261416Z         :param echo_pool=False: if True, the connection pool will log
2025-10-08T16:01:12.4261582Z             informational output such as when connections are invalidated
2025-10-08T16:01:12.4261744Z             as well as when connections are recycled to the default log handler,
2025-10-08T16:01:12.4261909Z             which defaults to ``sys.stdout`` for output.   If set to the string
2025-10-08T16:01:12.4262069Z             ``"debug"``, the logging will include pool checkouts and checkins.
2025-10-08T16:01:12.4262241Z             Direct control of logging is also available using the standard Python
2025-10-08T16:01:12.4262329Z             ``logging`` module.
2025-10-08T16:01:12.4262398Z     
2025-10-08T16:01:12.4262478Z             .. seealso::
2025-10-08T16:01:12.4262548Z     
2025-10-08T16:01:12.4262694Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.4262769Z                 logging.
2025-10-08T16:01:12.4262842Z     
2025-10-08T16:01:12.4262908Z     
2025-10-08T16:01:12.4263063Z         :param empty_in_strategy:   No longer used; SQLAlchemy now uses
2025-10-08T16:01:12.4263174Z             "empty set" behavior for IN in all cases.
2025-10-08T16:01:12.4263240Z     
2025-10-08T16:01:12.4263411Z         :param enable_from_linting: defaults to True.  Will emit a warning
2025-10-08T16:01:12.4263576Z             if a given SELECT statement is found to have un-linked FROM elements
2025-10-08T16:01:12.4263679Z             which would cause a cartesian product.
2025-10-08T16:01:12.4263751Z     
2025-10-08T16:01:12.4263839Z             .. versionadded:: 1.4
2025-10-08T16:01:12.4263906Z     
2025-10-08T16:01:12.4263990Z             .. seealso::
2025-10-08T16:01:12.4264061Z     
2025-10-08T16:01:12.4264143Z                 :ref:`change_4737`
2025-10-08T16:01:12.4264214Z     
2025-10-08T16:01:12.4264378Z         :param execution_options: Dictionary execution options which will
2025-10-08T16:01:12.4264487Z             be applied to all connections.  See
2025-10-08T16:01:12.4264639Z             :meth:`~sqlalchemy.engine.Connection.execution_options`
2025-10-08T16:01:12.4264705Z     
2025-10-08T16:01:12.4264854Z         :param future: Use the 2.0 style :class:`_engine.Engine` and
2025-10-08T16:01:12.4264952Z             :class:`_engine.Connection` API.
2025-10-08T16:01:12.4265102Z     
2025-10-08T16:01:12.4265260Z             As of SQLAlchemy 2.0, this parameter is present for backwards
2025-10-08T16:01:12.4265435Z             compatibility only and must remain at its default value of ``True``.
2025-10-08T16:01:12.4265505Z     
2025-10-08T16:01:12.4265648Z             The :paramref:`_sa.create_engine.future` parameter will be
2025-10-08T16:01:12.4265802Z             deprecated in a subsequent 2.x release and eventually removed.
2025-10-08T16:01:12.4265948Z     
2025-10-08T16:01:12.4266036Z             .. versionadded:: 1.4
2025-10-08T16:01:12.4266101Z     
2025-10-08T16:01:12.4266264Z             .. versionchanged:: 2.0 All :class:`_engine.Engine` objects are
2025-10-08T16:01:12.4266421Z                "future" style engines and there is no longer a ``future=False``
2025-10-08T16:01:12.4266502Z                mode of operation.
2025-10-08T16:01:12.4266576Z     
2025-10-08T16:01:12.4266655Z             .. seealso::
2025-10-08T16:01:12.4266726Z     
2025-10-08T16:01:12.4266822Z                 :ref:`migration_20_toplevel`
2025-10-08T16:01:12.4266888Z     
2025-10-08T16:01:12.4267083Z         :param hide_parameters: Boolean, when set to True, SQL statement parameters
2025-10-08T16:01:12.4267250Z             will not be displayed in INFO logging nor will they be formatted into
2025-10-08T16:01:12.4267548Z             the string representation of :class:`.StatementError` objects.
2025-10-08T16:01:12.4267627Z     
2025-10-08T16:01:12.4267714Z             .. versionadded:: 1.3.8
2025-10-08T16:01:12.4267781Z     
2025-10-08T16:01:12.4267862Z             .. seealso::
2025-10-08T16:01:12.4267927Z     
2025-10-08T16:01:12.4268082Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.4268166Z                 logging.
2025-10-08T16:01:12.4268233Z     
2025-10-08T16:01:12.4268412Z         :param implicit_returning=True:  Legacy parameter that may only be set
2025-10-08T16:01:12.4268581Z             to True. In SQLAlchemy 2.0, this parameter does nothing. In order to
2025-10-08T16:01:12.4268741Z             disable "implicit returning" for statements invoked by the ORM,
2025-10-08T16:01:12.4268858Z             configure this on a per-table basis using the
2025-10-08T16:01:12.4268996Z             :paramref:`.Table.implicit_returning` parameter.
2025-10-08T16:01:12.4269064Z     
2025-10-08T16:01:12.4269137Z     
2025-10-08T16:01:12.4269315Z         :param insertmanyvalues_page_size: number of rows to format into an
2025-10-08T16:01:12.4269511Z          INSERT statement when the statement uses "insertmanyvalues" mode, which is
2025-10-08T16:01:12.4269688Z          a paged form of bulk insert that is used for many backends when using
2025-10-08T16:01:12.4269872Z          :term:`executemany` execution typically in conjunction with RETURNING.
2025-10-08T16:01:12.4270039Z          Defaults to 1000, but may also be subject to dialect-specific limiting
2025-10-08T16:01:12.4270208Z          factors which may override this value on a per-statement basis.
2025-10-08T16:01:12.4270277Z     
2025-10-08T16:01:12.4270373Z          .. versionadded:: 2.0
2025-10-08T16:01:12.4270439Z     
2025-10-08T16:01:12.4270515Z          .. seealso::
2025-10-08T16:01:12.4270586Z     
2025-10-08T16:01:12.4270682Z             :ref:`engine_insertmanyvalues`
2025-10-08T16:01:12.4270748Z     
2025-10-08T16:01:12.4270862Z             :ref:`engine_insertmanyvalues_page_size`
2025-10-08T16:01:12.4270930Z     
2025-10-08T16:01:12.4271142Z             :paramref:`_engine.Connection.execution_options.insertmanyvalues_page_size`
2025-10-08T16:01:12.4271215Z     
2025-10-08T16:01:12.4271379Z         :param isolation_level: optional string name of an isolation level
2025-10-08T16:01:12.4271527Z             which will be set on all new connections unconditionally.
2025-10-08T16:01:12.4271682Z             Isolation levels are typically some subset of the string names
2025-10-08T16:01:12.4271787Z             ``"SERIALIZABLE"``, ``"REPEATABLE READ"``,
2025-10-08T16:01:12.4272059Z             ``"READ COMMITTED"``, ``"READ UNCOMMITTED"`` and ``"AUTOCOMMIT"``
2025-10-08T16:01:12.4272148Z             based on backend.
2025-10-08T16:01:12.4272213Z     
2025-10-08T16:01:12.4272374Z             The :paramref:`_sa.create_engine.isolation_level` parameter is
2025-10-08T16:01:12.4272464Z             in contrast to the
2025-10-08T16:01:12.4272614Z             :paramref:`.Connection.execution_options.isolation_level`
2025-10-08T16:01:12.4272846Z             execution option, which may be set on an individual
2025-10-08T16:01:12.4272996Z             :class:`.Connection`, as well as the same parameter passed to
2025-10-08T16:01:12.4273161Z             :meth:`.Engine.execution_options`, where it may be used to create
2025-10-08T16:01:12.4273341Z             multiple engines with different isolation levels that share a common
2025-10-08T16:01:12.4273433Z             connection pool and dialect.
2025-10-08T16:01:12.4273505Z     
2025-10-08T16:01:12.4273597Z             .. versionchanged:: 2.0 The
2025-10-08T16:01:12.4273725Z                :paramref:`_sa.create_engine.isolation_level`
2025-10-08T16:01:12.4273903Z                parameter has been generalized to work on all dialects which support
2025-10-08T16:01:12.4274070Z                the concept of isolation level, and is provided as a more succinct,
2025-10-08T16:01:12.4274242Z                up front configuration switch in contrast to the execution option
2025-10-08T16:01:12.4274370Z                which is more of an ad-hoc programmatic option.
2025-10-08T16:01:12.4274441Z     
2025-10-08T16:01:12.4274525Z             .. seealso::
2025-10-08T16:01:12.4274591Z     
2025-10-08T16:01:12.4274682Z                 :ref:`dbapi_autocommit`
2025-10-08T16:01:12.4274754Z     
2025-10-08T16:01:12.4274890Z         :param json_deserializer: for dialects that support the
2025-10-08T16:01:12.4274984Z             :class:`_types.JSON`
2025-10-08T16:01:12.4275153Z             datatype, this is a Python callable that will convert a JSON string
2025-10-08T16:01:12.4275324Z             to a Python object.  By default, the Python ``json.loads`` function is
2025-10-08T16:01:12.4275401Z             used.
2025-10-08T16:01:12.4275468Z     
2025-10-08T16:01:12.4275625Z             .. versionchanged:: 1.3.7  The SQLite dialect renamed this from
2025-10-08T16:01:12.4275720Z                ``_json_deserializer``.
2025-10-08T16:01:12.4275788Z     
2025-10-08T16:01:12.4275973Z         :param json_serializer: for dialects that support the :class:`_types.JSON`
2025-10-08T16:01:12.4276152Z             datatype, this is a Python callable that will render a given object
2025-10-08T16:01:12.4276305Z             as JSON.   By default, the Python ``json.dumps`` function is used.
2025-10-08T16:01:12.4276379Z     
2025-10-08T16:01:12.4276537Z             .. versionchanged:: 1.3.7  The SQLite dialect renamed this from
2025-10-08T16:01:12.4276628Z                ``_json_serializer``.
2025-10-08T16:01:12.4276703Z     
2025-10-08T16:01:12.4276772Z     
2025-10-08T16:01:12.4276924Z         :param label_length=None: optional integer value which limits
2025-10-08T16:01:12.4277079Z             the size of dynamically generated column labels to that many
2025-10-08T16:01:12.4277207Z             characters. If less than 6, labels are generated as
2025-10-08T16:01:12.4277313Z             "_(counter)". If ``None``, the value of
2025-10-08T16:01:12.4277567Z             ``dialect.max_identifier_length``, which may be affected via the
2025-10-08T16:01:12.4277731Z             :paramref:`_sa.create_engine.max_identifier_length` parameter,
2025-10-08T16:01:12.4277831Z             is used instead.   The value of
2025-10-08T16:01:12.4277939Z             :paramref:`_sa.create_engine.label_length`
2025-10-08T16:01:12.4278031Z             may not be larger than that of
2025-10-08T16:01:12.4278162Z             :paramref:`_sa.create_engine.max_identfier_length`.
2025-10-08T16:01:12.4278228Z     
2025-10-08T16:01:12.4278314Z             .. seealso::
2025-10-08T16:01:12.4278381Z     
2025-10-08T16:01:12.4278627Z                 :paramref:`_sa.create_engine.max_identifier_length`
2025-10-08T16:01:12.4278705Z     
2025-10-08T16:01:12.4278865Z         :param logging_name:  String identifier which will be used within
2025-10-08T16:01:12.4279003Z             the "name" field of logging records generated within the
2025-10-08T16:01:12.4279158Z             "sqlalchemy.engine" logger. Defaults to a hexstring of the
2025-10-08T16:01:12.4279235Z             object's id.
2025-10-08T16:01:12.4279410Z     
2025-10-08T16:01:12.4279497Z             .. seealso::
2025-10-08T16:01:12.4279564Z     
2025-10-08T16:01:12.4279713Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.4279787Z                 logging.
2025-10-08T16:01:12.4279855Z     
2025-10-08T16:01:12.4280023Z                 :paramref:`_engine.Connection.execution_options.logging_token`
2025-10-08T16:01:12.4280089Z     
2025-10-08T16:01:12.4280272Z         :param max_identifier_length: integer; override the max_identifier_length
2025-10-08T16:01:12.4280450Z             determined by the dialect.  if ``None`` or zero, has no effect.  This
2025-10-08T16:01:12.4280620Z             is the database's configured maximum number of characters that may be
2025-10-08T16:01:12.4280781Z             used in a SQL identifier such as a table name, column name, or label
2025-10-08T16:01:12.4280953Z             name. All dialects determine this value automatically, however in the
2025-10-08T16:01:12.4281113Z             case of a new database version for which this value has changed but
2025-10-08T16:01:12.4281285Z             SQLAlchemy's dialect has not been adjusted, the value may be passed
2025-10-08T16:01:12.4281359Z             here.
2025-10-08T16:01:12.4281425Z     
2025-10-08T16:01:12.4281521Z             .. versionadded:: 1.3.9
2025-10-08T16:01:12.4281588Z     
2025-10-08T16:01:12.4281664Z             .. seealso::
2025-10-08T16:01:12.4281737Z     
2025-10-08T16:01:12.4281849Z                 :paramref:`_sa.create_engine.label_length`
2025-10-08T16:01:12.4281921Z     
2025-10-08T16:01:12.4282070Z         :param max_overflow=10: the number of connections to allow in
2025-10-08T16:01:12.4282222Z             connection pool "overflow", that is connections that can be
2025-10-08T16:01:12.4282382Z             opened above and beyond the pool_size setting, which defaults
2025-10-08T16:01:12.4282552Z             to five. this is only used with :class:`~sqlalchemy.pool.QueuePool`.
2025-10-08T16:01:12.4282623Z     
2025-10-08T16:01:12.4282800Z         :param module=None: reference to a Python module object (the module
2025-10-08T16:01:12.4282965Z             itself, not its string name).  Specifies an alternate DBAPI module to
2025-10-08T16:01:12.4283119Z             be used by the engine's dialect.  Each sub-dialect references a
2025-10-08T16:01:12.4283288Z             specific DBAPI which will be imported before first connect.  This
2025-10-08T16:01:12.4283458Z             parameter causes the import to be bypassed, and the given module to
2025-10-08T16:01:12.4283620Z             be used instead. Can be used for testing of DBAPIs as well as to
2025-10-08T16:01:12.4283796Z             inject "mock" DBAPI implementations into the :class:`_engine.Engine`.
2025-10-08T16:01:12.4283863Z     
2025-10-08T16:01:12.4284151Z         :param paramstyle=None: The `paramstyle <https://legacy.python.org/dev/peps/pep-0249/#paramstyle>`_
2025-10-08T16:01:12.4284317Z             to use when rendering bound parameters.  This style defaults to the
2025-10-08T16:01:12.4284492Z             one recommended by the DBAPI itself, which is retrieved from the
2025-10-08T16:01:12.4284657Z             ``.paramstyle`` attribute of the DBAPI.  However, most DBAPIs accept
2025-10-08T16:01:12.4284812Z             more than one paramstyle, and in particular it may be desirable
2025-10-08T16:01:12.4284990Z             to change a "named" paramstyle into a "positional" one, or vice versa.
2025-10-08T16:01:12.4285142Z             When this attribute is passed, it should be one of the values
2025-10-08T16:01:12.4285356Z             ``"qmark"``, ``"numeric"``, ``"named"``, ``"format"`` or
2025-10-08T16:01:12.4285511Z             ``"pyformat"``, and should correspond to a parameter style known
2025-10-08T16:01:12.4285616Z             to be supported by the DBAPI in use.
2025-10-08T16:01:12.4285689Z     
2025-10-08T16:01:12.4285822Z         :param pool=None: an already-constructed instance of
2025-10-08T16:01:12.4286008Z             :class:`~sqlalchemy.pool.Pool`, such as a
2025-10-08T16:01:12.4286177Z             :class:`~sqlalchemy.pool.QueuePool` instance. If non-None, this
2025-10-08T16:01:12.4286326Z             pool will be used directly as the underlying connection pool
2025-10-08T16:01:12.4286479Z             for the engine, bypassing whatever connection parameters are
2025-10-08T16:01:12.4286626Z             present in the URL argument. For information on constructing
2025-10-08T16:01:12.4286771Z             connection pools manually, see :ref:`pooling_toplevel`.
2025-10-08T16:01:12.4286844Z     
2025-10-08T16:01:12.4286993Z         :param poolclass=None: a :class:`~sqlalchemy.pool.Pool`
2025-10-08T16:01:12.4287135Z             subclass, which will be used to create a connection pool
2025-10-08T16:01:12.4287299Z             instance using the connection parameters given in the URL. Note
2025-10-08T16:01:12.4287632Z             this differs from ``pool`` in that you don't actually
2025-10-08T16:01:12.4287803Z             instantiate the pool in this case, you just indicate what type
2025-10-08T16:01:12.4287895Z             of pool to be used.
2025-10-08T16:01:12.4287961Z     
2025-10-08T16:01:12.4288137Z         :param pool_logging_name:  String identifier which will be used within
2025-10-08T16:01:12.4288273Z            the "name" field of logging records generated within the
2025-10-08T16:01:12.4288438Z            "sqlalchemy.pool" logger. Defaults to a hexstring of the object's
2025-10-08T16:01:12.4288515Z            id.
2025-10-08T16:01:12.4288582Z     
2025-10-08T16:01:12.4288661Z            .. seealso::
2025-10-08T16:01:12.4288740Z     
2025-10-08T16:01:12.4288888Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.4288973Z                 logging.
2025-10-08T16:01:12.4289041Z     
2025-10-08T16:01:12.4289212Z         :param pool_pre_ping: boolean, if True will enable the connection pool
2025-10-08T16:01:12.4289368Z             "pre-ping" feature that tests connections for liveness upon
2025-10-08T16:01:12.4289453Z             each checkout.
2025-10-08T16:01:12.4289519Z     
2025-10-08T16:01:12.4289613Z             .. versionadded:: 1.2
2025-10-08T16:01:12.4289681Z     
2025-10-08T16:01:12.4289760Z             .. seealso::
2025-10-08T16:01:12.4289832Z     
2025-10-08T16:01:12.4289935Z                 :ref:`pool_disconnects_pessimistic`
2025-10-08T16:01:12.4290008Z     
2025-10-08T16:01:12.4290149Z         :param pool_size=5: the number of connections to keep open
2025-10-08T16:01:12.4290258Z             inside the connection pool. This used with
2025-10-08T16:01:12.4290373Z             :class:`~sqlalchemy.pool.QueuePool` as
2025-10-08T16:01:12.4290530Z             well as :class:`~sqlalchemy.pool.SingletonThreadPool`.  With
2025-10-08T16:01:12.4290681Z             :class:`~sqlalchemy.pool.QueuePool`, a ``pool_size`` setting
2025-10-08T16:01:12.4290844Z             of 0 indicates no limit; to disable pooling, set ``poolclass`` to
2025-10-08T16:01:12.4290959Z             :class:`~sqlalchemy.pool.NullPool` instead.
2025-10-08T16:01:12.4291031Z     
2025-10-08T16:01:12.4291190Z         :param pool_recycle=-1: this setting causes the pool to recycle
2025-10-08T16:01:12.4291341Z             connections after the given number of seconds has passed. It
2025-10-08T16:01:12.4291488Z             defaults to -1, or no timeout. For example, setting to 3600
2025-10-08T16:01:12.4291635Z             means connections will be recycled after one hour. Note that
2025-10-08T16:01:12.4291772Z             MySQL in particular will disconnect automatically if no
2025-10-08T16:01:12.4292056Z             activity is detected on a connection for eight hours (although
2025-10-08T16:01:12.4292214Z             this is configurable with the MySQLDB connection itself and the
2025-10-08T16:01:12.4292315Z             server configuration as well).
2025-10-08T16:01:12.4292381Z     
2025-10-08T16:01:12.4292458Z             .. seealso::
2025-10-08T16:01:12.4292528Z     
2025-10-08T16:01:12.4292630Z                 :ref:`pool_setting_recycle`
2025-10-08T16:01:12.4292841Z     
2025-10-08T16:01:12.4292961Z         :param pool_reset_on_return='rollback': set the
2025-10-08T16:01:12.4293128Z             :paramref:`_pool.Pool.reset_on_return` parameter of the underlying
2025-10-08T16:01:12.4293268Z             :class:`_pool.Pool` object, which can be set to the values
2025-10-08T16:01:12.4293371Z             ``"rollback"``, ``"commit"``, or ``None``.
2025-10-08T16:01:12.4293437Z     
2025-10-08T16:01:12.4293520Z             .. seealso::
2025-10-08T16:01:12.4293586Z     
2025-10-08T16:01:12.4293680Z                 :ref:`pool_reset_on_return`
2025-10-08T16:01:12.4293754Z     
2025-10-08T16:01:12.4293908Z                 :ref:`dbapi_autocommit_skip_rollback` - a more modern approach
2025-10-08T16:01:12.4294046Z                 to using connections with no transactional instructions
2025-10-08T16:01:12.4294117Z     
2025-10-08T16:01:12.4294264Z         :param pool_timeout=30: number of seconds to wait before giving
2025-10-08T16:01:12.4294404Z             up on getting a connection from the pool. This is only used
2025-10-08T16:01:12.4294586Z             with :class:`~sqlalchemy.pool.QueuePool`. This can be a float but is
2025-10-08T16:01:12.4294757Z             subject to the limitations of Python time functions which may not be
2025-10-08T16:01:12.4294865Z             reliable in the tens of milliseconds.
2025-10-08T16:01:12.4294931Z     
2025-10-08T16:01:12.4295081Z             .. note: don't use 30.0 above, it seems to break with the :param tag
2025-10-08T16:01:12.4295153Z     
2025-10-08T16:01:12.4295354Z         :param pool_use_lifo=False: use LIFO (last-in-first-out) when retrieving
2025-10-08T16:01:12.4295493Z             connections from :class:`.QueuePool` instead of FIFO
2025-10-08T16:01:12.4295665Z             (first-in-first-out). Using LIFO, a server-side timeout scheme can
2025-10-08T16:01:12.4295833Z             reduce the number of connections used during non- peak   periods of
2025-10-08T16:01:12.4296015Z             use.   When planning for server-side timeouts, ensure that a recycle or
2025-10-08T16:01:12.4296191Z             pre-ping strategy is in use to gracefully   handle stale connections.
2025-10-08T16:01:12.4296260Z     
2025-10-08T16:01:12.4296355Z               .. versionadded:: 1.3
2025-10-08T16:01:12.4296422Z     
2025-10-08T16:01:12.4296501Z               .. seealso::
2025-10-08T16:01:12.4296573Z     
2025-10-08T16:01:12.4296657Z                 :ref:`pool_use_lifo`
2025-10-08T16:01:12.4296724Z     
2025-10-08T16:01:12.4296822Z                 :ref:`pool_disconnects`
2025-10-08T16:01:12.4296888Z     
2025-10-08T16:01:12.4297038Z         :param plugins: string list of plugin names to load.  See
2025-10-08T16:01:12.4297153Z             :class:`.CreateEnginePlugin` for background.
2025-10-08T16:01:12.4297221Z     
2025-10-08T16:01:12.4297312Z             .. versionadded:: 1.2.3
2025-10-08T16:01:12.4297578Z     
2025-10-08T16:01:12.4297756Z         :param query_cache_size: size of the cache used to cache the SQL string
2025-10-08T16:01:12.4297887Z          form of queries.  Set to zero to disable caching.
2025-10-08T16:01:12.4297955Z     
2025-10-08T16:01:12.4298129Z          The cache is pruned of its least recently used items when its size reaches
2025-10-08T16:01:12.4298293Z          N * 1.5.  Defaults to 500, meaning the cache will always store at least
2025-10-08T16:01:12.4298463Z          500 SQL statements when filled, and will grow up to 750 items at which
2025-10-08T16:01:12.4298628Z          point it is pruned back down to 500 by removing the 250 least recently
2025-10-08T16:01:12.4298702Z          used items.
2025-10-08T16:01:12.4298893Z     
2025-10-08T16:01:12.4299076Z          Caching is accomplished on a per-statement basis by generating a
2025-10-08T16:01:12.4299249Z          cache key that represents the statement's structure, then generating
2025-10-08T16:01:12.4299409Z          string SQL for the current dialect only if that key is not present
2025-10-08T16:01:12.4299577Z          in the cache.   All statements support caching, however some features
2025-10-08T16:01:12.4299843Z          such as an INSERT with a large set of parameters will intentionally
2025-10-08T16:01:12.4300004Z          bypass the cache.   SQL logging will indicate statistics for each
2025-10-08T16:01:12.4300142Z          statement whether or not it were pull from the cache.
2025-10-08T16:01:12.4300210Z     
2025-10-08T16:01:12.4300392Z          .. note:: some ORM functions related to unit-of-work persistence as well
2025-10-08T16:01:12.4300551Z             as some attribute loading strategies will make use of individual
2025-10-08T16:01:12.4300678Z             per-mapper caches outside of the main cache.
2025-10-08T16:01:12.4300745Z     
2025-10-08T16:01:12.4300813Z     
2025-10-08T16:01:12.4300903Z          .. seealso::
2025-10-08T16:01:12.4300971Z     
2025-10-08T16:01:12.4301055Z             :ref:`sql_caching`
2025-10-08T16:01:12.4301128Z     
2025-10-08T16:01:12.4301213Z          .. versionadded:: 1.4
2025-10-08T16:01:12.4301285Z     
2025-10-08T16:01:12.4301446Z         :param skip_autocommit_rollback: When True, the dialect will
2025-10-08T16:01:12.4301632Z            unconditionally skip all calls to the DBAPI ``connection.rollback()``
2025-10-08T16:01:12.4301810Z            method if the DBAPI connection is confirmed to be in "autocommit" mode.
2025-10-08T16:01:12.4301998Z            The availability of this feature is dialect specific; if not available,
2025-10-08T16:01:12.4302182Z            a ``NotImplementedError`` is raised by the dialect when rollback occurs.
2025-10-08T16:01:12.4302254Z     
2025-10-08T16:01:12.4302337Z            .. seealso::
2025-10-08T16:01:12.4302404Z     
2025-10-08T16:01:12.4302517Z                 :ref:`dbapi_autocommit_skip_rollback`
2025-10-08T16:01:12.4302585Z     
2025-10-08T16:01:12.4302673Z            .. versionadded:: 2.0.43
2025-10-08T16:01:12.4302747Z     
2025-10-08T16:01:12.4302933Z         :param use_insertmanyvalues: True by default, use the "insertmanyvalues"
2025-10-08T16:01:12.4303098Z          execution style for INSERT..RETURNING statements by default.
2025-10-08T16:01:12.4303164Z     
2025-10-08T16:01:12.4303251Z          .. versionadded:: 2.0
2025-10-08T16:01:12.4303321Z     
2025-10-08T16:01:12.4303399Z          .. seealso::
2025-10-08T16:01:12.4303466Z     
2025-10-08T16:01:12.4303585Z             :ref:`engine_insertmanyvalues`
2025-10-08T16:01:12.4303651Z     
2025-10-08T16:01:12.4303724Z         """  # noqa
2025-10-08T16:01:12.4303794Z     
2025-10-08T16:01:12.4303880Z         if "strategy" in kwargs:
2025-10-08T16:01:12.4303974Z             strat = kwargs.pop("strategy")
2025-10-08T16:01:12.4304065Z             if strat == "mock":
2025-10-08T16:01:12.4304155Z                 # this case is deprecated
2025-10-08T16:01:12.4304305Z                 return create_mock_engine(url, **kwargs)  # type: ignore
2025-10-08T16:01:12.4304377Z             else:
2025-10-08T16:01:12.4304520Z                 raise exc.ArgumentError("unknown strategy: %r" % strat)
2025-10-08T16:01:12.4304597Z     
2025-10-08T16:01:12.4304697Z         kwargs.pop("empty_in_strategy", None)
2025-10-08T16:01:12.4304765Z     
2025-10-08T16:01:12.4304853Z         # create url.URL object
2025-10-08T16:01:12.4304934Z         u = _url.make_url(url)
2025-10-08T16:01:12.4305000Z     
2025-10-08T16:01:12.4305131Z         u, plugins, kwargs = u._instantiate_plugins(kwargs)
2025-10-08T16:01:12.4305200Z     
2025-10-08T16:01:12.4305300Z         entrypoint = u._get_entrypoint()
2025-10-08T16:01:12.4305405Z         _is_async = kwargs.pop("_is_async", False)
2025-10-08T16:01:12.4305480Z         if _is_async:
2025-10-08T16:01:12.4305698Z             dialect_cls = entrypoint.get_async_dialect_cls(u)
2025-10-08T16:01:12.4305772Z         else:
2025-10-08T16:01:12.4305882Z             dialect_cls = entrypoint.get_dialect_cls(u)
2025-10-08T16:01:12.4305954Z     
2025-10-08T16:01:12.4306055Z         if kwargs.pop("_coerce_config", False):
2025-10-08T16:01:12.4306122Z     
2025-10-08T16:01:12.4306283Z             def pop_kwarg(key: str, default: Optional[Any] = None) -> Any:
2025-10-08T16:01:12.4306455Z                 value = kwargs.pop(key, default)
2025-10-08T16:01:12.4306571Z                 if key in dialect_cls.engine_config_types:
2025-10-08T16:01:12.4306698Z                     value = dialect_cls.engine_config_types[key](value)
2025-10-08T16:01:12.4306780Z                 return value
2025-10-08T16:01:12.4306852Z     
2025-10-08T16:01:12.4306922Z         else:
2025-10-08T16:01:12.4307023Z             pop_kwarg = kwargs.pop  # type: ignore
2025-10-08T16:01:12.4307096Z     
2025-10-08T16:01:12.4307177Z         dialect_args = {}
2025-10-08T16:01:12.4307280Z         # consume dialect arguments from kwargs
2025-10-08T16:01:12.4307491Z         for k in util.get_cls_kwargs(dialect_cls):
2025-10-08T16:01:12.4307571Z             if k in kwargs:
2025-10-08T16:01:12.4307671Z                 dialect_args[k] = pop_kwarg(k)
2025-10-08T16:01:12.4307738Z     
2025-10-08T16:01:12.4307833Z         dbapi = kwargs.pop("module", None)
2025-10-08T16:01:12.4307923Z         if dbapi is None:
2025-10-08T16:01:12.4308002Z             dbapi_args = {}
2025-10-08T16:01:12.4308068Z     
2025-10-08T16:01:12.4308177Z             if "import_dbapi" in dialect_cls.__dict__:
2025-10-08T16:01:12.4308280Z                 dbapi_meth = dialect_cls.import_dbapi
2025-10-08T16:01:12.4308348Z     
2025-10-08T16:01:12.4308495Z             elif hasattr(dialect_cls, "dbapi") and inspect.ismethod(
2025-10-08T16:01:12.4308583Z                 dialect_cls.dbapi
2025-10-08T16:01:12.4308654Z             ):
2025-10-08T16:01:12.4308749Z                 util.warn_deprecated(
2025-10-08T16:01:12.4308891Z                     "The dbapi() classmethod on dialect classes has been "
2025-10-08T16:01:12.4309043Z                     "renamed to import_dbapi().  Implement an import_dbapi() "
2025-10-08T16:01:12.4309207Z                     f"classmethod directly on class {dialect_cls} to remove this "
2025-10-08T16:01:12.4309363Z                     "warning; the old .dbapi() classmethod may be maintained for "
2025-10-08T16:01:12.4309473Z                     "backwards compatibility.",
2025-10-08T16:01:12.4309550Z                     "2.0",
2025-10-08T16:01:12.4309620Z                 )
2025-10-08T16:01:12.4309723Z                 dbapi_meth = dialect_cls.dbapi
2025-10-08T16:01:12.4309794Z             else:
2025-10-08T16:01:12.4309903Z                 dbapi_meth = dialect_cls.import_dbapi
2025-10-08T16:01:12.4309971Z     
2025-10-08T16:01:12.4310079Z             for k in util.get_func_kwargs(dbapi_meth):
2025-10-08T16:01:12.4310162Z                 if k in kwargs:
2025-10-08T16:01:12.4310262Z                     dbapi_args[k] = pop_kwarg(k)
2025-10-08T16:01:12.4310356Z             dbapi = dbapi_meth(**dbapi_args)
2025-10-08T16:01:12.4310429Z     
2025-10-08T16:01:12.4310519Z         dialect_args["dbapi"] = dbapi
2025-10-08T16:01:12.4310587Z     
2025-10-08T16:01:12.4310761Z         dialect_args.setdefault("compiler_linting", compiler.NO_LINTING)
2025-10-08T16:01:12.4310913Z         enable_from_linting = kwargs.pop("enable_from_linting", True)
2025-10-08T16:01:12.4311007Z         if enable_from_linting:
2025-10-08T16:01:12.4311192Z             dialect_args["compiler_linting"] ^= compiler.COLLECT_CARTESIAN_PRODUCTS
2025-10-08T16:01:12.4311260Z     
2025-10-08T16:01:12.4311353Z         for plugin in plugins:
2025-10-08T16:01:12.4311495Z             plugin.handle_dialect_kwargs(dialect_cls, dialect_args)
2025-10-08T16:01:12.4311563Z     
2025-10-08T16:01:12.4311651Z         # create dialect
2025-10-08T16:01:12.4311748Z         dialect = dialect_cls(**dialect_args)
2025-10-08T16:01:12.4311814Z     
2025-10-08T16:01:12.4312030Z         # assemble connection arguments
2025-10-08T16:01:12.4312166Z         (cargs_tup, cparams) = dialect.create_connect_args(u)
2025-10-08T16:01:12.4312288Z         cparams.update(pop_kwarg("connect_args", {}))
2025-10-08T16:01:12.4312354Z     
2025-10-08T16:01:12.4312529Z         if "async_fallback" in cparams and util.asbool(cparams["async_fallback"]):
2025-10-08T16:01:12.4312722Z             util.warn_deprecated(
2025-10-08T16:01:12.4312885Z                 "The async_fallback dialect argument is deprecated and will be "
2025-10-08T16:01:12.4312978Z                 "removed in SQLAlchemy 2.1.",
2025-10-08T16:01:12.4313059Z                 "2.0",
2025-10-08T16:01:12.4313127Z             )
2025-10-08T16:01:12.4313192Z     
2025-10-08T16:01:12.4313302Z         cargs = list(cargs_tup)  # allow mutability
2025-10-08T16:01:12.4313368Z     
2025-10-08T16:01:12.4313466Z         # look for existing pool or create
2025-10-08T16:01:12.4313560Z         pool = pop_kwarg("pool", None)
2025-10-08T16:01:12.4313645Z         if pool is None:
2025-10-08T16:01:12.4313715Z     
2025-10-08T16:01:12.4313792Z             def connect(
2025-10-08T16:01:12.4313938Z                 connection_record: Optional[ConnectionPoolEntry] = None,
2025-10-08T16:01:12.4314031Z             ) -> DBAPIConnection:
2025-10-08T16:01:12.4314117Z                 if dialect._has_events:
2025-10-08T16:01:12.4314226Z                     for fn in dialect.dispatch.do_connect:
2025-10-08T16:01:12.4314327Z                         connection = cast(
2025-10-08T16:01:12.4314417Z                             DBAPIConnection,
2025-10-08T16:01:12.4314549Z                             fn(dialect, connection_record, cargs, cparams),
2025-10-08T16:01:12.4314625Z                         )
2025-10-08T16:01:12.4314720Z                         if connection is not None:
2025-10-08T16:01:12.4314814Z                             return connection
2025-10-08T16:01:12.4314880Z     
2025-10-08T16:01:12.4314990Z                 return dialect.connect(*cargs, **cparams)
2025-10-08T16:01:12.4315065Z     
2025-10-08T16:01:12.4315167Z             creator = pop_kwarg("creator", connect)
2025-10-08T16:01:12.4315235Z     
2025-10-08T16:01:12.4315348Z             poolclass = pop_kwarg("poolclass", None)
2025-10-08T16:01:12.4315433Z             if poolclass is None:
2025-10-08T16:01:12.4315556Z                 poolclass = dialect.get_dialect_pool_class(u)
2025-10-08T16:01:12.4315654Z             pool_args = {"dialect": dialect}
2025-10-08T16:01:12.4315721Z     
2025-10-08T16:01:12.4315872Z             # consume pool arguments from kwargs, translating a few of
2025-10-08T16:01:12.4315951Z             # the arguments
2025-10-08T16:01:12.4316057Z             for k in util.get_cls_kwargs(poolclass):
2025-10-08T16:01:12.4316163Z                 tk = _pool_translate_kwargs.get(k, k)
2025-10-08T16:01:12.4316245Z                 if tk in kwargs:
2025-10-08T16:01:12.4316344Z                     pool_args[k] = pop_kwarg(tk)
2025-10-08T16:01:12.4316411Z     
2025-10-08T16:01:12.4316501Z             for plugin in plugins:
2025-10-08T16:01:12.4316633Z                 plugin.handle_pool_kwargs(poolclass, pool_args)
2025-10-08T16:01:12.4316701Z     
2025-10-08T16:01:12.4316800Z             pool = poolclass(creator, **pool_args)
2025-10-08T16:01:12.4316876Z         else:
2025-10-08T16:01:12.4316963Z             pool._dialect = dialect
2025-10-08T16:01:12.4317030Z     
2025-10-08T16:01:12.4317111Z         if (
2025-10-08T16:01:12.4317201Z             hasattr(pool, "_is_asyncio")
2025-10-08T16:01:12.4317315Z             and pool._is_asyncio is not dialect.is_async
2025-10-08T16:01:12.4317489Z         ):
2025-10-08T16:01:12.4317580Z             raise exc.ArgumentError(
2025-10-08T16:01:12.4317710Z                 f"Pool class {pool.__class__.__name__} cannot be "
2025-10-08T16:01:12.4317836Z                 f"used with {'non-' if not dialect.is_async else ''}"
2025-10-08T16:01:12.4317919Z                 "asyncio engine",
2025-10-08T16:01:12.4318005Z                 code="pcls",
2025-10-08T16:01:12.4318196Z             )
2025-10-08T16:01:12.4318266Z     
2025-10-08T16:01:12.4318350Z         # create engine.
2025-10-08T16:01:12.4318441Z         if not pop_kwarg("future", True):
2025-10-08T16:01:12.4318529Z             raise exc.ArgumentError(
2025-10-08T16:01:12.4318635Z                 "The 'future' parameter passed to "
2025-10-08T16:01:12.4318742Z                 "create_engine() may only be set to True."
2025-10-08T16:01:12.4318919Z             )
2025-10-08T16:01:12.4318985Z     
2025-10-08T16:01:12.4319072Z         engineclass = base.Engine
2025-10-08T16:01:12.4319146Z     
2025-10-08T16:01:12.4319225Z         engine_args = {}
2025-10-08T16:01:12.4319329Z         for k in util.get_cls_kwargs(engineclass):
2025-10-08T16:01:12.4319421Z             if k in kwargs:
2025-10-08T16:01:12.4319515Z                 engine_args[k] = pop_kwarg(k)
2025-10-08T16:01:12.4319583Z     
2025-10-08T16:01:12.4319757Z         # internal flags used by the test suite for instrumenting / proxying
2025-10-08T16:01:12.4319847Z         # engines with mocks etc.
2025-10-08T16:01:12.4319966Z         _initialize = kwargs.pop("_initialize", True)
2025-10-08T16:01:12.4320033Z     
2025-10-08T16:01:12.4320122Z         # all kwargs should be consumed
2025-10-08T16:01:12.4320202Z         if kwargs:
2025-10-08T16:01:12.4320284Z >           raise TypeError(
2025-10-08T16:01:12.4320412Z                 "Invalid argument(s) %s sent to create_engine(), "
2025-10-08T16:01:12.4320566Z                 "using configuration %s/%s/%s.  Please check that the "
2025-10-08T16:01:12.4320716Z                 "keyword arguments are appropriate for this combination "
2025-10-08T16:01:12.4320799Z                 "of components."
2025-10-08T16:01:12.4320877Z                 % (
2025-10-08T16:01:12.4320974Z                     ",".join("'%s'" % k for k in kwargs),
2025-10-08T16:01:12.4321074Z                     dialect.__class__.__name__,
2025-10-08T16:01:12.4321164Z                     pool.__class__.__name__,
2025-10-08T16:01:12.4321256Z                     engineclass.__name__,
2025-10-08T16:01:12.4321331Z                 )
2025-10-08T16:01:12.4321399Z             )
2025-10-08T16:01:12.4322098Z E           TypeError: Invalid argument(s) 'pool_size','max_overflow' sent to create_engine(), using configuration SQLiteDialect_pysqlite/StaticPool/Engine.  Please check that the keyword arguments are appropriate for this combination of components.
2025-10-08T16:01:12.4322113Z 
2025-10-08T16:01:12.4322440Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/create.py:715: TypeError
2025-10-08T16:01:12.4322687Z _ ERROR at setup of TestAPIEndpointImmutability.test_api_response_field_names_unchanged _
2025-10-08T16:01:12.4322693Z 
2025-10-08T16:01:12.4322774Z     @pytest.fixture
2025-10-08T16:01:12.4322846Z     def app():
2025-10-08T16:01:12.4322936Z         """Create test app instance"""
2025-10-08T16:01:12.4323032Z >       app = create_app(TestConfig)
2025-10-08T16:01:12.4323107Z               ^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.4323116Z 
2025-10-08T16:01:12.4323213Z tests/test_field_consistency.py:30: 
2025-10-08T16:01:12.4323330Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:12.4323420Z app/__init__.py:141: in create_app
2025-10-08T16:01:12.4323505Z     db.init_app(app)
2025-10-08T16:01:12.4323836Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask_sqlalchemy/extension.py:374: in init_app
2025-10-08T16:01:12.4323966Z     engines[key] = self._make_engine(key, options, app)
2025-10-08T16:01:12.4324060Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.4324397Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask_sqlalchemy/extension.py:665: in _make_engine
2025-10-08T16:01:12.4324526Z     return sa.engine_from_config(options, prefix="")
2025-10-08T16:01:12.4324613Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.4325072Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/create.py:838: in engine_from_config
2025-10-08T16:01:12.4325177Z     return create_engine(url, **options)
2025-10-08T16:01:12.4325256Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.4325338Z <string>:2: in create_engine
2025-10-08T16:01:12.4325413Z     ???
2025-10-08T16:01:12.4325745Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/util/deprecations.py:281: in warned
2025-10-08T16:01:12.4325968Z     return fn(*args, **kwargs)  # type: ignore[no-any-return]
2025-10-08T16:01:12.4326045Z            ^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.4326162Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:12.4326168Z 
2025-10-08T16:01:12.4326341Z url = 'sqlite:///:memory:', kwargs = {'max_overflow': 30, 'pool_size': 10}
2025-10-08T16:01:12.4326434Z u = sqlite:///:memory:, plugins = []
2025-10-08T16:01:12.4326670Z entrypoint = <class 'sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite'>
2025-10-08T16:01:12.4326755Z _is_async = False
2025-10-08T16:01:12.4326937Z pop_kwarg = <function create_engine.<locals>.pop_kwarg at 0x7f308d9d0ea0>
2025-10-08T16:01:12.4327533Z dialect_args = {'compiler_linting': 1, 'dbapi': <module 'sqlite3.dbapi2' from '/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/sqlite3/dbapi2.py'>}
2025-10-08T16:01:12.4327545Z 
2025-10-08T16:01:12.4327651Z     @util.deprecated_params(
2025-10-08T16:01:12.4327731Z         strategy=(
2025-10-08T16:01:12.4327807Z             "1.4",
2025-10-08T16:01:12.4327982Z             "The :paramref:`_sa.create_engine.strategy` keyword is deprecated, "
2025-10-08T16:01:12.4328120Z             "and the only argument accepted is 'mock'; please use "
2025-10-08T16:01:12.4328260Z             ":func:`.create_mock_engine` going forward.  For general "
2025-10-08T16:01:12.4328433Z             "customization of create_engine which may have been accomplished "
2025-10-08T16:01:12.4328578Z             "using strategies, see :class:`.CreateEnginePlugin`.",
2025-10-08T16:01:12.4328653Z         ),
2025-10-08T16:01:12.4328738Z         empty_in_strategy=(
2025-10-08T16:01:12.4328813Z             "1.4",
2025-10-08T16:01:12.4328974Z             "The :paramref:`_sa.create_engine.empty_in_strategy` keyword is "
2025-10-08T16:01:12.4329132Z             "deprecated, and no longer has any effect.  All IN expressions "
2025-10-08T16:01:12.4329227Z             "are now rendered using "
2025-10-08T16:01:12.4329393Z             'the "expanding parameter" strategy which renders a set of bound'
2025-10-08T16:01:12.4329559Z             'expressions, or an "empty set" SELECT, at statement execution'
2025-10-08T16:01:12.4329632Z             "time.",
2025-10-08T16:01:12.4329700Z         ),
2025-10-08T16:01:12.4329790Z         implicit_returning=(
2025-10-08T16:01:12.4329860Z             "2.0",
2025-10-08T16:01:12.4330018Z             "The :paramref:`_sa.create_engine.implicit_returning` parameter "
2025-10-08T16:01:12.4330165Z             "is deprecated and will be removed in a future release. ",
2025-10-08T16:01:12.4330237Z         ),
2025-10-08T16:01:12.4330313Z     )
2025-10-08T16:01:12.4330486Z     def create_engine(url: Union[str, _url.URL], **kwargs: Any) -> Engine:
2025-10-08T16:01:12.4330604Z         """Create a new :class:`_engine.Engine` instance.
2025-10-08T16:01:12.4330679Z     
2025-10-08T16:01:12.4330864Z         The standard calling form is to send the :ref:`URL <database_urls>` as the
2025-10-08T16:01:12.4330978Z         first positional argument, usually a string
2025-10-08T16:01:12.4331136Z         that indicates database dialect and connection arguments::
2025-10-08T16:01:12.4331203Z     
2025-10-08T16:01:12.4331701Z             engine = create_engine("***localhost/test")
2025-10-08T16:01:12.4331832Z     
2025-10-08T16:01:12.4331943Z         .. note::
2025-10-08T16:01:12.4332048Z     
2025-10-08T16:01:12.4332323Z             Please review :ref:`database_urls` for general guidelines in composing
2025-10-08T16:01:12.4332774Z             URL strings.  In particular, special characters, such as those often
2025-10-08T16:01:12.4333068Z             part of passwords, must be URL encoded to be properly parsed.
2025-10-08T16:01:12.4333182Z     
2025-10-08T16:01:12.4333396Z         Additional keyword arguments may then follow it which
2025-10-08T16:01:12.4333682Z         establish various options on the resulting :class:`_engine.Engine`
2025-10-08T16:01:12.4333920Z         and its underlying :class:`.Dialect` and :class:`_pool.Pool`
2025-10-08T16:01:12.4334244Z         constructs::
2025-10-08T16:01:12.4334366Z     
2025-10-08T16:01:12.4334515Z             engine = create_engine(
2025-10-08T16:01:12.4334838Z                 "***hostname/dbname",
2025-10-08T16:01:12.4334985Z                 pool_recycle=3600,
2025-10-08T16:01:12.4335118Z                 echo=True,
2025-10-08T16:01:12.4335240Z             )
2025-10-08T16:01:12.4335365Z     
2025-10-08T16:01:12.4335511Z         The string form of the URL is
2025-10-08T16:01:12.4335811Z         ``dialect[+driver]://user:password@host/dbname[?key=value..]``, where
2025-10-08T16:01:12.4336051Z         ``dialect`` is a database name such as ``mysql``, ``oracle``,
2025-10-08T16:01:12.4336296Z         ``postgresql``, etc., and ``driver`` the name of a DBAPI, such as
2025-10-08T16:01:12.4336563Z         ``psycopg2``, ``pyodbc``, ``cx_oracle``, etc.  Alternatively,
2025-10-08T16:01:12.4336901Z         the URL can be an instance of :class:`~sqlalchemy.engine.url.URL`.
2025-10-08T16:01:12.4337016Z     
2025-10-08T16:01:12.4337241Z         ``**kwargs`` takes a wide variety of options which are routed
2025-10-08T16:01:12.4337751Z         towards their appropriate components.  Arguments may be specific to
2025-10-08T16:01:12.4338022Z         the :class:`_engine.Engine`, the underlying :class:`.Dialect`,
2025-10-08T16:01:12.4338174Z         as well as the
2025-10-08T16:01:12.4338476Z         :class:`_pool.Pool`.  Specific dialects also accept keyword arguments that
2025-10-08T16:01:12.4338731Z         are unique to that dialect.   Here, we describe the parameters
2025-10-08T16:01:12.4339000Z         that are common to most :func:`_sa.create_engine()` usage.
2025-10-08T16:01:12.4339120Z     
2025-10-08T16:01:12.4339431Z         Once established, the newly resulting :class:`_engine.Engine` will
2025-10-08T16:01:12.4339726Z         request a connection from the underlying :class:`_pool.Pool` once
2025-10-08T16:01:12.4340053Z         :meth:`_engine.Engine.connect` is called, or a method which depends on it
2025-10-08T16:01:12.4340320Z         such as :meth:`_engine.Engine.execute` is invoked.   The
2025-10-08T16:01:12.4340472Z         :class:`_pool.Pool` in turn
2025-10-08T16:01:12.4340763Z         will establish the first actual DBAPI connection when this request
2025-10-08T16:01:12.4341061Z         is received.   The :func:`_sa.create_engine` call itself does **not**
2025-10-08T16:01:12.4341279Z         establish any actual DBAPI connections directly.
2025-10-08T16:01:12.4341402Z     
2025-10-08T16:01:12.4341540Z         .. seealso::
2025-10-08T16:01:12.4341655Z     
2025-10-08T16:01:12.4341814Z             :doc:`/core/engines`
2025-10-08T16:01:12.4341927Z     
2025-10-08T16:01:12.4342074Z             :doc:`/dialects/index`
2025-10-08T16:01:12.4342192Z     
2025-10-08T16:01:12.4342356Z             :ref:`connections_toplevel`
2025-10-08T16:01:12.4342472Z     
2025-10-08T16:01:12.4342753Z         :param connect_args: a dictionary of options which will be
2025-10-08T16:01:12.4343009Z             passed directly to the DBAPI's ``connect()`` method as
2025-10-08T16:01:12.4343227Z             additional keyword arguments.  See the example
2025-10-08T16:01:12.4343386Z             at :ref:`custom_dbapi_args`.
2025-10-08T16:01:12.4343498Z     
2025-10-08T16:01:12.4343774Z         :param creator: a callable which returns a DBAPI connection.
2025-10-08T16:01:12.4344027Z             This creation function will be passed to the underlying
2025-10-08T16:01:12.4344300Z             connection pool and will be used to create all new database
2025-10-08T16:01:12.4344769Z             connections. Usage of this function causes connection
2025-10-08T16:01:12.4345047Z             parameters specified in the URL argument to be bypassed.
2025-10-08T16:01:12.4345172Z     
2025-10-08T16:01:12.4345354Z             This hook is not as flexible as the newer
2025-10-08T16:01:12.4345609Z             :meth:`_events.DialectEvents.do_connect` hook which allows complete
2025-10-08T16:01:12.4345792Z             control over how a connection is made to the database, given the full
2025-10-08T16:01:12.4346041Z             set of URL arguments and state beforehand.
2025-10-08T16:01:12.4346108Z     
2025-10-08T16:01:12.4346200Z             .. seealso::
2025-10-08T16:01:12.4346267Z     
2025-10-08T16:01:12.4346437Z                 :meth:`_events.DialectEvents.do_connect` - event hook that allows
2025-10-08T16:01:12.4346564Z                 full control over DBAPI connection mechanics.
2025-10-08T16:01:12.4346632Z     
2025-10-08T16:01:12.4346729Z                 :ref:`custom_dbapi_args`
2025-10-08T16:01:12.4346796Z     
2025-10-08T16:01:12.4346955Z         :param echo=False: if True, the Engine will log all statements
2025-10-08T16:01:12.4347112Z             as well as a ``repr()`` of their parameter lists to the default log
2025-10-08T16:01:12.4347286Z             handler, which defaults to ``sys.stdout`` for output.   If set to the
2025-10-08T16:01:12.4347671Z             string ``"debug"``, result rows will be printed to the standard output
2025-10-08T16:01:12.4347845Z             as well. The ``echo`` attribute of ``Engine`` can be modified at any
2025-10-08T16:01:12.4348006Z             time to turn logging on and off; direct control of logging is also
2025-10-08T16:01:12.4348156Z             available using the standard Python ``logging`` module.
2025-10-08T16:01:12.4348225Z     
2025-10-08T16:01:12.4348306Z             .. seealso::
2025-10-08T16:01:12.4348380Z     
2025-10-08T16:01:12.4348531Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.4348608Z                 logging.
2025-10-08T16:01:12.4348686Z     
2025-10-08T16:01:12.4348753Z     
2025-10-08T16:01:12.4348904Z         :param echo_pool=False: if True, the connection pool will log
2025-10-08T16:01:12.4349075Z             informational output such as when connections are invalidated
2025-10-08T16:01:12.4349238Z             as well as when connections are recycled to the default log handler,
2025-10-08T16:01:12.4349410Z             which defaults to ``sys.stdout`` for output.   If set to the string
2025-10-08T16:01:12.4349563Z             ``"debug"``, the logging will include pool checkouts and checkins.
2025-10-08T16:01:12.4349737Z             Direct control of logging is also available using the standard Python
2025-10-08T16:01:12.4349825Z             ``logging`` module.
2025-10-08T16:01:12.4349892Z     
2025-10-08T16:01:12.4349969Z             .. seealso::
2025-10-08T16:01:12.4350042Z     
2025-10-08T16:01:12.4350186Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.4350275Z                 logging.
2025-10-08T16:01:12.4350342Z     
2025-10-08T16:01:12.4350409Z     
2025-10-08T16:01:12.4350574Z         :param empty_in_strategy:   No longer used; SQLAlchemy now uses
2025-10-08T16:01:12.4350683Z             "empty set" behavior for IN in all cases.
2025-10-08T16:01:12.4350752Z     
2025-10-08T16:01:12.4350922Z         :param enable_from_linting: defaults to True.  Will emit a warning
2025-10-08T16:01:12.4351091Z             if a given SELECT statement is found to have un-linked FROM elements
2025-10-08T16:01:12.4351195Z             which would cause a cartesian product.
2025-10-08T16:01:12.4351273Z     
2025-10-08T16:01:12.4351364Z             .. versionadded:: 1.4
2025-10-08T16:01:12.4351437Z     
2025-10-08T16:01:12.4351514Z             .. seealso::
2025-10-08T16:01:12.4351581Z     
2025-10-08T16:01:12.4351671Z                 :ref:`change_4737`
2025-10-08T16:01:12.4351738Z     
2025-10-08T16:01:12.4352074Z         :param execution_options: Dictionary execution options which will
2025-10-08T16:01:12.4352190Z             be applied to all connections.  See
2025-10-08T16:01:12.4352350Z             :meth:`~sqlalchemy.engine.Connection.execution_options`
2025-10-08T16:01:12.4352419Z     
2025-10-08T16:01:12.4352573Z         :param future: Use the 2.0 style :class:`_engine.Engine` and
2025-10-08T16:01:12.4352675Z             :class:`_engine.Connection` API.
2025-10-08T16:01:12.4353165Z     
2025-10-08T16:01:12.4353345Z             As of SQLAlchemy 2.0, this parameter is present for backwards
2025-10-08T16:01:12.4353520Z             compatibility only and must remain at its default value of ``True``.
2025-10-08T16:01:12.4353593Z     
2025-10-08T16:01:12.4353739Z             The :paramref:`_sa.create_engine.future` parameter will be
2025-10-08T16:01:12.4353895Z             deprecated in a subsequent 2.x release and eventually removed.
2025-10-08T16:01:12.4353966Z     
2025-10-08T16:01:12.4354054Z             .. versionadded:: 1.4
2025-10-08T16:01:12.4354121Z     
2025-10-08T16:01:12.4354291Z             .. versionchanged:: 2.0 All :class:`_engine.Engine` objects are
2025-10-08T16:01:12.4354448Z                "future" style engines and there is no longer a ``future=False``
2025-10-08T16:01:12.4354536Z                mode of operation.
2025-10-08T16:01:12.4354605Z     
2025-10-08T16:01:12.4354684Z             .. seealso::
2025-10-08T16:01:12.4354755Z     
2025-10-08T16:01:12.4354854Z                 :ref:`migration_20_toplevel`
2025-10-08T16:01:12.4354921Z     
2025-10-08T16:01:12.4355118Z         :param hide_parameters: Boolean, when set to True, SQL statement parameters
2025-10-08T16:01:12.4355285Z             will not be displayed in INFO logging nor will they be formatted into
2025-10-08T16:01:12.4355450Z             the string representation of :class:`.StatementError` objects.
2025-10-08T16:01:12.4355516Z     
2025-10-08T16:01:12.4355604Z             .. versionadded:: 1.3.8
2025-10-08T16:01:12.4355676Z     
2025-10-08T16:01:12.4355754Z             .. seealso::
2025-10-08T16:01:12.4355822Z     
2025-10-08T16:01:12.4355978Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.4356053Z                 logging.
2025-10-08T16:01:12.4356120Z     
2025-10-08T16:01:12.4356304Z         :param implicit_returning=True:  Legacy parameter that may only be set
2025-10-08T16:01:12.4356463Z             to True. In SQLAlchemy 2.0, this parameter does nothing. In order to
2025-10-08T16:01:12.4356633Z             disable "implicit returning" for statements invoked by the ORM,
2025-10-08T16:01:12.4356750Z             configure this on a per-table basis using the
2025-10-08T16:01:12.4356879Z             :paramref:`.Table.implicit_returning` parameter.
2025-10-08T16:01:12.4356953Z     
2025-10-08T16:01:12.4357021Z     
2025-10-08T16:01:12.4357194Z         :param insertmanyvalues_page_size: number of rows to format into an
2025-10-08T16:01:12.4357627Z          INSERT statement when the statement uses "insertmanyvalues" mode, which is
2025-10-08T16:01:12.4357810Z          a paged form of bulk insert that is used for many backends when using
2025-10-08T16:01:12.4357996Z          :term:`executemany` execution typically in conjunction with RETURNING.
2025-10-08T16:01:12.4358166Z          Defaults to 1000, but may also be subject to dialect-specific limiting
2025-10-08T16:01:12.4358327Z          factors which may override this value on a per-statement basis.
2025-10-08T16:01:12.4358405Z     
2025-10-08T16:01:12.4358499Z          .. versionadded:: 2.0
2025-10-08T16:01:12.4358566Z     
2025-10-08T16:01:12.4358649Z          .. seealso::
2025-10-08T16:01:12.4358715Z     
2025-10-08T16:01:12.4358812Z             :ref:`engine_insertmanyvalues`
2025-10-08T16:01:12.4358886Z     
2025-10-08T16:01:12.4358997Z             :ref:`engine_insertmanyvalues_page_size`
2025-10-08T16:01:12.4359069Z     
2025-10-08T16:01:12.4359283Z             :paramref:`_engine.Connection.execution_options.insertmanyvalues_page_size`
2025-10-08T16:01:12.4359351Z     
2025-10-08T16:01:12.4359644Z         :param isolation_level: optional string name of an isolation level
2025-10-08T16:01:12.4359793Z             which will be set on all new connections unconditionally.
2025-10-08T16:01:12.4359949Z             Isolation levels are typically some subset of the string names
2025-10-08T16:01:12.4360060Z             ``"SERIALIZABLE"``, ``"REPEATABLE READ"``,
2025-10-08T16:01:12.4360210Z             ``"READ COMMITTED"``, ``"READ UNCOMMITTED"`` and ``"AUTOCOMMIT"``
2025-10-08T16:01:12.4360406Z             based on backend.
2025-10-08T16:01:12.4360474Z     
2025-10-08T16:01:12.4360629Z             The :paramref:`_sa.create_engine.isolation_level` parameter is
2025-10-08T16:01:12.4360719Z             in contrast to the
2025-10-08T16:01:12.4360871Z             :paramref:`.Connection.execution_options.isolation_level`
2025-10-08T16:01:12.4361000Z             execution option, which may be set on an individual
2025-10-08T16:01:12.4361166Z             :class:`.Connection`, as well as the same parameter passed to
2025-10-08T16:01:12.4361329Z             :meth:`.Engine.execution_options`, where it may be used to create
2025-10-08T16:01:12.4361510Z             multiple engines with different isolation levels that share a common
2025-10-08T16:01:12.4361604Z             connection pool and dialect.
2025-10-08T16:01:12.4361670Z     
2025-10-08T16:01:12.4361774Z             .. versionchanged:: 2.0 The
2025-10-08T16:01:12.4361900Z                :paramref:`_sa.create_engine.isolation_level`
2025-10-08T16:01:12.4362077Z                parameter has been generalized to work on all dialects which support
2025-10-08T16:01:12.4362253Z                the concept of isolation level, and is provided as a more succinct,
2025-10-08T16:01:12.4362418Z                up front configuration switch in contrast to the execution option
2025-10-08T16:01:12.4362548Z                which is more of an ad-hoc programmatic option.
2025-10-08T16:01:12.4362616Z     
2025-10-08T16:01:12.4362697Z             .. seealso::
2025-10-08T16:01:12.4362770Z     
2025-10-08T16:01:12.4362863Z                 :ref:`dbapi_autocommit`
2025-10-08T16:01:12.4362929Z     
2025-10-08T16:01:12.4363071Z         :param json_deserializer: for dialects that support the
2025-10-08T16:01:12.4363159Z             :class:`_types.JSON`
2025-10-08T16:01:12.4363326Z             datatype, this is a Python callable that will convert a JSON string
2025-10-08T16:01:12.4363502Z             to a Python object.  By default, the Python ``json.loads`` function is
2025-10-08T16:01:12.4363584Z             used.
2025-10-08T16:01:12.4363659Z     
2025-10-08T16:01:12.4363816Z             .. versionchanged:: 1.3.7  The SQLite dialect renamed this from
2025-10-08T16:01:12.4363908Z                ``_json_deserializer``.
2025-10-08T16:01:12.4363982Z     
2025-10-08T16:01:12.4364167Z         :param json_serializer: for dialects that support the :class:`_types.JSON`
2025-10-08T16:01:12.4364340Z             datatype, this is a Python callable that will render a given object
2025-10-08T16:01:12.4364536Z             as JSON.   By default, the Python ``json.dumps`` function is used.
2025-10-08T16:01:12.4364619Z     
2025-10-08T16:01:12.4364785Z             .. versionchanged:: 1.3.7  The SQLite dialect renamed this from
2025-10-08T16:01:12.4364871Z                ``_json_serializer``.
2025-10-08T16:01:12.4364939Z     
2025-10-08T16:01:12.4365011Z     
2025-10-08T16:01:12.4365163Z         :param label_length=None: optional integer value which limits
2025-10-08T16:01:12.4365317Z             the size of dynamically generated column labels to that many
2025-10-08T16:01:12.4365449Z             characters. If less than 6, labels are generated as
2025-10-08T16:01:12.4365547Z             "_(counter)". If ``None``, the value of
2025-10-08T16:01:12.4365705Z             ``dialect.max_identifier_length``, which may be affected via the
2025-10-08T16:01:12.4365872Z             :paramref:`_sa.create_engine.max_identifier_length` parameter,
2025-10-08T16:01:12.4365964Z             is used instead.   The value of
2025-10-08T16:01:12.4366162Z             :paramref:`_sa.create_engine.label_length`
2025-10-08T16:01:12.4366258Z             may not be larger than that of
2025-10-08T16:01:12.4366381Z             :paramref:`_sa.create_engine.max_identfier_length`.
2025-10-08T16:01:12.4366452Z     
2025-10-08T16:01:12.4366531Z             .. seealso::
2025-10-08T16:01:12.4366599Z     
2025-10-08T16:01:12.4366733Z                 :paramref:`_sa.create_engine.max_identifier_length`
2025-10-08T16:01:12.4366894Z     
2025-10-08T16:01:12.4367053Z         :param logging_name:  String identifier which will be used within
2025-10-08T16:01:12.4367196Z             the "name" field of logging records generated within the
2025-10-08T16:01:12.4367515Z             "sqlalchemy.engine" logger. Defaults to a hexstring of the
2025-10-08T16:01:12.4367631Z             object's id.
2025-10-08T16:01:12.4367699Z     
2025-10-08T16:01:12.4367777Z             .. seealso::
2025-10-08T16:01:12.4367850Z     
2025-10-08T16:01:12.4368007Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.4368084Z                 logging.
2025-10-08T16:01:12.4368156Z     
2025-10-08T16:01:12.4368319Z                 :paramref:`_engine.Connection.execution_options.logging_token`
2025-10-08T16:01:12.4368386Z     
2025-10-08T16:01:12.4368572Z         :param max_identifier_length: integer; override the max_identifier_length
2025-10-08T16:01:12.4368740Z             determined by the dialect.  if ``None`` or zero, has no effect.  This
2025-10-08T16:01:12.4368918Z             is the database's configured maximum number of characters that may be
2025-10-08T16:01:12.4369078Z             used in a SQL identifier such as a table name, column name, or label
2025-10-08T16:01:12.4369249Z             name. All dialects determine this value automatically, however in the
2025-10-08T16:01:12.4369411Z             case of a new database version for which this value has changed but
2025-10-08T16:01:12.4369585Z             SQLAlchemy's dialect has not been adjusted, the value may be passed
2025-10-08T16:01:12.4369664Z             here.
2025-10-08T16:01:12.4369732Z     
2025-10-08T16:01:12.4369822Z             .. versionadded:: 1.3.9
2025-10-08T16:01:12.4369895Z     
2025-10-08T16:01:12.4369971Z             .. seealso::
2025-10-08T16:01:12.4370037Z     
2025-10-08T16:01:12.4370155Z                 :paramref:`_sa.create_engine.label_length`
2025-10-08T16:01:12.4370223Z     
2025-10-08T16:01:12.4370374Z         :param max_overflow=10: the number of connections to allow in
2025-10-08T16:01:12.4370531Z             connection pool "overflow", that is connections that can be
2025-10-08T16:01:12.4370686Z             opened above and beyond the pool_size setting, which defaults
2025-10-08T16:01:12.4370862Z             to five. this is only used with :class:`~sqlalchemy.pool.QueuePool`.
2025-10-08T16:01:12.4370930Z     
2025-10-08T16:01:12.4371101Z         :param module=None: reference to a Python module object (the module
2025-10-08T16:01:12.4371279Z             itself, not its string name).  Specifies an alternate DBAPI module to
2025-10-08T16:01:12.4371427Z             be used by the engine's dialect.  Each sub-dialect references a
2025-10-08T16:01:12.4371595Z             specific DBAPI which will be imported before first connect.  This
2025-10-08T16:01:12.4371772Z             parameter causes the import to be bypassed, and the given module to
2025-10-08T16:01:12.4371924Z             be used instead. Can be used for testing of DBAPIs as well as to
2025-10-08T16:01:12.4372106Z             inject "mock" DBAPI implementations into the :class:`_engine.Engine`.
2025-10-08T16:01:12.4372174Z     
2025-10-08T16:01:12.4372463Z         :param paramstyle=None: The `paramstyle <https://legacy.python.org/dev/peps/pep-0249/#paramstyle>`_
2025-10-08T16:01:12.4372636Z             to use when rendering bound parameters.  This style defaults to the
2025-10-08T16:01:12.4372798Z             one recommended by the DBAPI itself, which is retrieved from the
2025-10-08T16:01:12.4373097Z             ``.paramstyle`` attribute of the DBAPI.  However, most DBAPIs accept
2025-10-08T16:01:12.4373267Z             more than one paramstyle, and in particular it may be desirable
2025-10-08T16:01:12.4373440Z             to change a "named" paramstyle into a "positional" one, or vice versa.
2025-10-08T16:01:12.4373592Z             When this attribute is passed, it should be one of the values
2025-10-08T16:01:12.4373709Z             ``"qmark"``, ``"numeric"``, ``"named"``, ``"format"`` or
2025-10-08T16:01:12.4373967Z             ``"pyformat"``, and should correspond to a parameter style known
2025-10-08T16:01:12.4374076Z             to be supported by the DBAPI in use.
2025-10-08T16:01:12.4374145Z     
2025-10-08T16:01:12.4374279Z         :param pool=None: an already-constructed instance of
2025-10-08T16:01:12.4374398Z             :class:`~sqlalchemy.pool.Pool`, such as a
2025-10-08T16:01:12.4374560Z             :class:`~sqlalchemy.pool.QueuePool` instance. If non-None, this
2025-10-08T16:01:12.4374731Z             pool will be used directly as the underlying connection pool
2025-10-08T16:01:12.4374884Z             for the engine, bypassing whatever connection parameters are
2025-10-08T16:01:12.4375034Z             present in the URL argument. For information on constructing
2025-10-08T16:01:12.4375183Z             connection pools manually, see :ref:`pooling_toplevel`.
2025-10-08T16:01:12.4375252Z     
2025-10-08T16:01:12.4381033Z         :param poolclass=None: a :class:`~sqlalchemy.pool.Pool`
2025-10-08T16:01:12.4381228Z             subclass, which will be used to create a connection pool
2025-10-08T16:01:12.4381415Z             instance using the connection parameters given in the URL. Note
2025-10-08T16:01:12.4381557Z             this differs from ``pool`` in that you don't actually
2025-10-08T16:01:12.4381725Z             instantiate the pool in this case, you just indicate what type
2025-10-08T16:01:12.4381822Z             of pool to be used.
2025-10-08T16:01:12.4381889Z     
2025-10-08T16:01:12.4382080Z         :param pool_logging_name:  String identifier which will be used within
2025-10-08T16:01:12.4382231Z            the "name" field of logging records generated within the
2025-10-08T16:01:12.4382406Z            "sqlalchemy.pool" logger. Defaults to a hexstring of the object's
2025-10-08T16:01:12.4382484Z            id.
2025-10-08T16:01:12.4382551Z     
2025-10-08T16:01:12.4382644Z            .. seealso::
2025-10-08T16:01:12.4382721Z     
2025-10-08T16:01:12.4382872Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.4382949Z                 logging.
2025-10-08T16:01:12.4383023Z     
2025-10-08T16:01:12.4383205Z         :param pool_pre_ping: boolean, if True will enable the connection pool
2025-10-08T16:01:12.4383358Z             "pre-ping" feature that tests connections for liveness upon
2025-10-08T16:01:12.4383447Z             each checkout.
2025-10-08T16:01:12.4383515Z     
2025-10-08T16:01:12.4383606Z             .. versionadded:: 1.2
2025-10-08T16:01:12.4383679Z     
2025-10-08T16:01:12.4383761Z             .. seealso::
2025-10-08T16:01:12.4383834Z     
2025-10-08T16:01:12.4383939Z                 :ref:`pool_disconnects_pessimistic`
2025-10-08T16:01:12.4384005Z     
2025-10-08T16:01:12.4384159Z         :param pool_size=5: the number of connections to keep open
2025-10-08T16:01:12.4384269Z             inside the connection pool. This used with
2025-10-08T16:01:12.4384380Z             :class:`~sqlalchemy.pool.QueuePool` as
2025-10-08T16:01:12.4384552Z             well as :class:`~sqlalchemy.pool.SingletonThreadPool`.  With
2025-10-08T16:01:12.4384702Z             :class:`~sqlalchemy.pool.QueuePool`, a ``pool_size`` setting
2025-10-08T16:01:12.4384872Z             of 0 indicates no limit; to disable pooling, set ``poolclass`` to
2025-10-08T16:01:12.4384990Z             :class:`~sqlalchemy.pool.NullPool` instead.
2025-10-08T16:01:12.4385058Z     
2025-10-08T16:01:12.4385219Z         :param pool_recycle=-1: this setting causes the pool to recycle
2025-10-08T16:01:12.4385539Z             connections after the given number of seconds has passed. It
2025-10-08T16:01:12.4385693Z             defaults to -1, or no timeout. For example, setting to 3600
2025-10-08T16:01:12.4385851Z             means connections will be recycled after one hour. Note that
2025-10-08T16:01:12.4385994Z             MySQL in particular will disconnect automatically if no
2025-10-08T16:01:12.4386159Z             activity is detected on a connection for eight hours (although
2025-10-08T16:01:12.4386423Z             this is configurable with the MySQLDB connection itself and the
2025-10-08T16:01:12.4386521Z             server configuration as well).
2025-10-08T16:01:12.4386593Z     
2025-10-08T16:01:12.4386671Z             .. seealso::
2025-10-08T16:01:12.4386736Z     
2025-10-08T16:01:12.4386835Z                 :ref:`pool_setting_recycle`
2025-10-08T16:01:12.4386899Z     
2025-10-08T16:01:12.4387017Z         :param pool_reset_on_return='rollback': set the
2025-10-08T16:01:12.4387197Z             :paramref:`_pool.Pool.reset_on_return` parameter of the underlying
2025-10-08T16:01:12.4387554Z             :class:`_pool.Pool` object, which can be set to the values
2025-10-08T16:01:12.4387665Z             ``"rollback"``, ``"commit"``, or ``None``.
2025-10-08T16:01:12.4387730Z     
2025-10-08T16:01:12.4387807Z             .. seealso::
2025-10-08T16:01:12.4387878Z     
2025-10-08T16:01:12.4387968Z                 :ref:`pool_reset_on_return`
2025-10-08T16:01:12.4388040Z     
2025-10-08T16:01:12.4388206Z                 :ref:`dbapi_autocommit_skip_rollback` - a more modern approach
2025-10-08T16:01:12.4388342Z                 to using connections with no transactional instructions
2025-10-08T16:01:12.4388407Z     
2025-10-08T16:01:12.4388560Z         :param pool_timeout=30: number of seconds to wait before giving
2025-10-08T16:01:12.4388693Z             up on getting a connection from the pool. This is only used
2025-10-08T16:01:12.4388874Z             with :class:`~sqlalchemy.pool.QueuePool`. This can be a float but is
2025-10-08T16:01:12.4389049Z             subject to the limitations of Python time functions which may not be
2025-10-08T16:01:12.4389152Z             reliable in the tens of milliseconds.
2025-10-08T16:01:12.4389225Z     
2025-10-08T16:01:12.4389375Z             .. note: don't use 30.0 above, it seems to break with the :param tag
2025-10-08T16:01:12.4389442Z     
2025-10-08T16:01:12.4389621Z         :param pool_use_lifo=False: use LIFO (last-in-first-out) when retrieving
2025-10-08T16:01:12.4389760Z             connections from :class:`.QueuePool` instead of FIFO
2025-10-08T16:01:12.4389932Z             (first-in-first-out). Using LIFO, a server-side timeout scheme can
2025-10-08T16:01:12.4390100Z             reduce the number of connections used during non- peak   periods of
2025-10-08T16:01:12.4390279Z             use.   When planning for server-side timeouts, ensure that a recycle or
2025-10-08T16:01:12.4390456Z             pre-ping strategy is in use to gracefully   handle stale connections.
2025-10-08T16:01:12.4390520Z     
2025-10-08T16:01:12.4390616Z               .. versionadded:: 1.3
2025-10-08T16:01:12.4390688Z     
2025-10-08T16:01:12.4390767Z               .. seealso::
2025-10-08T16:01:12.4390839Z     
2025-10-08T16:01:12.4390923Z                 :ref:`pool_use_lifo`
2025-10-08T16:01:12.4390988Z     
2025-10-08T16:01:12.4391087Z                 :ref:`pool_disconnects`
2025-10-08T16:01:12.4391151Z     
2025-10-08T16:01:12.4391299Z         :param plugins: string list of plugin names to load.  See
2025-10-08T16:01:12.4391420Z             :class:`.CreateEnginePlugin` for background.
2025-10-08T16:01:12.4391485Z     
2025-10-08T16:01:12.4391573Z             .. versionadded:: 1.2.3
2025-10-08T16:01:12.4391646Z     
2025-10-08T16:01:12.4391819Z         :param query_cache_size: size of the cache used to cache the SQL string
2025-10-08T16:01:12.4391937Z          form of queries.  Set to zero to disable caching.
2025-10-08T16:01:12.4392012Z     
2025-10-08T16:01:12.4392305Z          The cache is pruned of its least recently used items when its size reaches
2025-10-08T16:01:12.4392481Z          N * 1.5.  Defaults to 500, meaning the cache will always store at least
2025-10-08T16:01:12.4392656Z          500 SQL statements when filled, and will grow up to 750 items at which
2025-10-08T16:01:12.4392813Z          point it is pruned back down to 500 by removing the 250 least recently
2025-10-08T16:01:12.4392896Z          used items.
2025-10-08T16:01:12.4393071Z     
2025-10-08T16:01:12.4393240Z          Caching is accomplished on a per-statement basis by generating a
2025-10-08T16:01:12.4393416Z          cache key that represents the statement's structure, then generating
2025-10-08T16:01:12.4393579Z          string SQL for the current dialect only if that key is not present
2025-10-08T16:01:12.4393745Z          in the cache.   All statements support caching, however some features
2025-10-08T16:01:12.4393904Z          such as an INSERT with a large set of parameters will intentionally
2025-10-08T16:01:12.4394064Z          bypass the cache.   SQL logging will indicate statistics for each
2025-10-08T16:01:12.4394209Z          statement whether or not it were pull from the cache.
2025-10-08T16:01:12.4394278Z     
2025-10-08T16:01:12.4394460Z          .. note:: some ORM functions related to unit-of-work persistence as well
2025-10-08T16:01:12.4394619Z             as some attribute loading strategies will make use of individual
2025-10-08T16:01:12.4394740Z             per-mapper caches outside of the main cache.
2025-10-08T16:01:12.4394815Z     
2025-10-08T16:01:12.4394881Z     
2025-10-08T16:01:12.4394956Z          .. seealso::
2025-10-08T16:01:12.4395027Z     
2025-10-08T16:01:12.4395109Z             :ref:`sql_caching`
2025-10-08T16:01:12.4395175Z     
2025-10-08T16:01:12.4395267Z          .. versionadded:: 1.4
2025-10-08T16:01:12.4395333Z     
2025-10-08T16:01:12.4395484Z         :param skip_autocommit_rollback: When True, the dialect will
2025-10-08T16:01:12.4395671Z            unconditionally skip all calls to the DBAPI ``connection.rollback()``
2025-10-08T16:01:12.4395851Z            method if the DBAPI connection is confirmed to be in "autocommit" mode.
2025-10-08T16:01:12.4396033Z            The availability of this feature is dialect specific; if not available,
2025-10-08T16:01:12.4396213Z            a ``NotImplementedError`` is raised by the dialect when rollback occurs.
2025-10-08T16:01:12.4396280Z     
2025-10-08T16:01:12.4396364Z            .. seealso::
2025-10-08T16:01:12.4396435Z     
2025-10-08T16:01:12.4396543Z                 :ref:`dbapi_autocommit_skip_rollback`
2025-10-08T16:01:12.4396619Z     
2025-10-08T16:01:12.4396709Z            .. versionadded:: 2.0.43
2025-10-08T16:01:12.4396780Z     
2025-10-08T16:01:12.4396972Z         :param use_insertmanyvalues: True by default, use the "insertmanyvalues"
2025-10-08T16:01:12.4397130Z          execution style for INSERT..RETURNING statements by default.
2025-10-08T16:01:12.4397201Z     
2025-10-08T16:01:12.4397285Z          .. versionadded:: 2.0
2025-10-08T16:01:12.4397522Z     
2025-10-08T16:01:12.4397664Z          .. seealso::
2025-10-08T16:01:12.4397732Z     
2025-10-08T16:01:12.4397829Z             :ref:`engine_insertmanyvalues`
2025-10-08T16:01:12.4397900Z     
2025-10-08T16:01:12.4397972Z         """  # noqa
2025-10-08T16:01:12.4398036Z     
2025-10-08T16:01:12.4398128Z         if "strategy" in kwargs:
2025-10-08T16:01:12.4398227Z             strat = kwargs.pop("strategy")
2025-10-08T16:01:12.4398318Z             if strat == "mock":
2025-10-08T16:01:12.4398408Z                 # this case is deprecated
2025-10-08T16:01:12.4398555Z                 return create_mock_engine(url, **kwargs)  # type: ignore
2025-10-08T16:01:12.4398632Z             else:
2025-10-08T16:01:12.4398776Z                 raise exc.ArgumentError("unknown strategy: %r" % strat)
2025-10-08T16:01:12.4398842Z     
2025-10-08T16:01:12.4398949Z         kwargs.pop("empty_in_strategy", None)
2025-10-08T16:01:12.4399014Z     
2025-10-08T16:01:12.4399097Z         # create url.URL object
2025-10-08T16:01:12.4399312Z         u = _url.make_url(url)
2025-10-08T16:01:12.4399383Z     
2025-10-08T16:01:12.4399522Z         u, plugins, kwargs = u._instantiate_plugins(kwargs)
2025-10-08T16:01:12.4399588Z     
2025-10-08T16:01:12.4399682Z         entrypoint = u._get_entrypoint()
2025-10-08T16:01:12.4399796Z         _is_async = kwargs.pop("_is_async", False)
2025-10-08T16:01:12.4399871Z         if _is_async:
2025-10-08T16:01:12.4400105Z             dialect_cls = entrypoint.get_async_dialect_cls(u)
2025-10-08T16:01:12.4400183Z         else:
2025-10-08T16:01:12.4400292Z             dialect_cls = entrypoint.get_dialect_cls(u)
2025-10-08T16:01:12.4400359Z     
2025-10-08T16:01:12.4400470Z         if kwargs.pop("_coerce_config", False):
2025-10-08T16:01:12.4400536Z     
2025-10-08T16:01:12.4400698Z             def pop_kwarg(key: str, default: Optional[Any] = None) -> Any:
2025-10-08T16:01:12.4400797Z                 value = kwargs.pop(key, default)
2025-10-08T16:01:12.4400910Z                 if key in dialect_cls.engine_config_types:
2025-10-08T16:01:12.4401054Z                     value = dialect_cls.engine_config_types[key](value)
2025-10-08T16:01:12.4401135Z                 return value
2025-10-08T16:01:12.4401206Z     
2025-10-08T16:01:12.4401302Z         else:
2025-10-08T16:01:12.4401414Z             pop_kwarg = kwargs.pop  # type: ignore
2025-10-08T16:01:12.4401479Z     
2025-10-08T16:01:12.4401569Z         dialect_args = {}
2025-10-08T16:01:12.4401672Z         # consume dialect arguments from kwargs
2025-10-08T16:01:12.4401780Z         for k in util.get_cls_kwargs(dialect_cls):
2025-10-08T16:01:12.4401860Z             if k in kwargs:
2025-10-08T16:01:12.4401956Z                 dialect_args[k] = pop_kwarg(k)
2025-10-08T16:01:12.4402027Z     
2025-10-08T16:01:12.4402122Z         dbapi = kwargs.pop("module", None)
2025-10-08T16:01:12.4402201Z         if dbapi is None:
2025-10-08T16:01:12.4402286Z             dbapi_args = {}
2025-10-08T16:01:12.4402352Z     
2025-10-08T16:01:12.4402459Z             if "import_dbapi" in dialect_cls.__dict__:
2025-10-08T16:01:12.4402574Z                 dbapi_meth = dialect_cls.import_dbapi
2025-10-08T16:01:12.4402641Z     
2025-10-08T16:01:12.4402790Z             elif hasattr(dialect_cls, "dbapi") and inspect.ismethod(
2025-10-08T16:01:12.4402877Z                 dialect_cls.dbapi
2025-10-08T16:01:12.4402946Z             ):
2025-10-08T16:01:12.4403044Z                 util.warn_deprecated(
2025-10-08T16:01:12.4403184Z                     "The dbapi() classmethod on dialect classes has been "
2025-10-08T16:01:12.4403334Z                     "renamed to import_dbapi().  Implement an import_dbapi() "
2025-10-08T16:01:12.4403512Z                     f"classmethod directly on class {dialect_cls} to remove this "
2025-10-08T16:01:12.4403666Z                     "warning; the old .dbapi() classmethod may be maintained for "
2025-10-08T16:01:12.4403769Z                     "backwards compatibility.",
2025-10-08T16:01:12.4403847Z                     "2.0",
2025-10-08T16:01:12.4403917Z                 )
2025-10-08T16:01:12.4404022Z                 dbapi_meth = dialect_cls.dbapi
2025-10-08T16:01:12.4404093Z             else:
2025-10-08T16:01:12.4404195Z                 dbapi_meth = dialect_cls.import_dbapi
2025-10-08T16:01:12.4404269Z     
2025-10-08T16:01:12.4404376Z             for k in util.get_func_kwargs(dbapi_meth):
2025-10-08T16:01:12.4404457Z                 if k in kwargs:
2025-10-08T16:01:12.4404558Z                     dbapi_args[k] = pop_kwarg(k)
2025-10-08T16:01:12.4404656Z             dbapi = dbapi_meth(**dbapi_args)
2025-10-08T16:01:12.4404722Z     
2025-10-08T16:01:12.4404818Z         dialect_args["dbapi"] = dbapi
2025-10-08T16:01:12.4404883Z     
2025-10-08T16:01:12.4405062Z         dialect_args.setdefault("compiler_linting", compiler.NO_LINTING)
2025-10-08T16:01:12.4405213Z         enable_from_linting = kwargs.pop("enable_from_linting", True)
2025-10-08T16:01:12.4405298Z         if enable_from_linting:
2025-10-08T16:01:12.4405494Z             dialect_args["compiler_linting"] ^= compiler.COLLECT_CARTESIAN_PRODUCTS
2025-10-08T16:01:12.4405642Z     
2025-10-08T16:01:12.4405733Z         for plugin in plugins:
2025-10-08T16:01:12.4405888Z             plugin.handle_dialect_kwargs(dialect_cls, dialect_args)
2025-10-08T16:01:12.4405954Z     
2025-10-08T16:01:12.4406040Z         # create dialect
2025-10-08T16:01:12.4406140Z         dialect = dialect_cls(**dialect_args)
2025-10-08T16:01:12.4406207Z     
2025-10-08T16:01:12.4406383Z         # assemble connection arguments
2025-10-08T16:01:12.4406516Z         (cargs_tup, cparams) = dialect.create_connect_args(u)
2025-10-08T16:01:12.4406634Z         cparams.update(pop_kwarg("connect_args", {}))
2025-10-08T16:01:12.4406706Z     
2025-10-08T16:01:12.4406888Z         if "async_fallback" in cparams and util.asbool(cparams["async_fallback"]):
2025-10-08T16:01:12.4406975Z             util.warn_deprecated(
2025-10-08T16:01:12.4407144Z                 "The async_fallback dialect argument is deprecated and will be "
2025-10-08T16:01:12.4407238Z                 "removed in SQLAlchemy 2.1.",
2025-10-08T16:01:12.4407320Z                 "2.0",
2025-10-08T16:01:12.4407590Z             )
2025-10-08T16:01:12.4407665Z     
2025-10-08T16:01:12.4407782Z         cargs = list(cargs_tup)  # allow mutability
2025-10-08T16:01:12.4407849Z     
2025-10-08T16:01:12.4407941Z         # look for existing pool or create
2025-10-08T16:01:12.4408038Z         pool = pop_kwarg("pool", None)
2025-10-08T16:01:12.4408124Z         if pool is None:
2025-10-08T16:01:12.4408190Z     
2025-10-08T16:01:12.4408271Z             def connect(
2025-10-08T16:01:12.4408421Z                 connection_record: Optional[ConnectionPoolEntry] = None,
2025-10-08T16:01:12.4408508Z             ) -> DBAPIConnection:
2025-10-08T16:01:12.4408605Z                 if dialect._has_events:
2025-10-08T16:01:12.4408713Z                     for fn in dialect.dispatch.do_connect:
2025-10-08T16:01:12.4408805Z                         connection = cast(
2025-10-08T16:01:12.4408894Z                             DBAPIConnection,
2025-10-08T16:01:12.4409029Z                             fn(dialect, connection_record, cargs, cparams),
2025-10-08T16:01:12.4409111Z                         )
2025-10-08T16:01:12.4409207Z                         if connection is not None:
2025-10-08T16:01:12.4409294Z                             return connection
2025-10-08T16:01:12.4409366Z     
2025-10-08T16:01:12.4409477Z                 return dialect.connect(*cargs, **cparams)
2025-10-08T16:01:12.4409552Z     
2025-10-08T16:01:12.4409652Z             creator = pop_kwarg("creator", connect)
2025-10-08T16:01:12.4409719Z     
2025-10-08T16:01:12.4409832Z             poolclass = pop_kwarg("poolclass", None)
2025-10-08T16:01:12.4409918Z             if poolclass is None:
2025-10-08T16:01:12.4410038Z                 poolclass = dialect.get_dialect_pool_class(u)
2025-10-08T16:01:12.4410138Z             pool_args = {"dialect": dialect}
2025-10-08T16:01:12.4410204Z     
2025-10-08T16:01:12.4410354Z             # consume pool arguments from kwargs, translating a few of
2025-10-08T16:01:12.4410445Z             # the arguments
2025-10-08T16:01:12.4410548Z             for k in util.get_cls_kwargs(poolclass):
2025-10-08T16:01:12.4410660Z                 tk = _pool_translate_kwargs.get(k, k)
2025-10-08T16:01:12.4410743Z                 if tk in kwargs:
2025-10-08T16:01:12.4410836Z                     pool_args[k] = pop_kwarg(tk)
2025-10-08T16:01:12.4410907Z     
2025-10-08T16:01:12.4410993Z             for plugin in plugins:
2025-10-08T16:01:12.4411125Z                 plugin.handle_pool_kwargs(poolclass, pool_args)
2025-10-08T16:01:12.4411198Z     
2025-10-08T16:01:12.4411300Z             pool = poolclass(creator, **pool_args)
2025-10-08T16:01:12.4411368Z         else:
2025-10-08T16:01:12.4411464Z             pool._dialect = dialect
2025-10-08T16:01:12.4411531Z     
2025-10-08T16:01:12.4411598Z         if (
2025-10-08T16:01:12.4411695Z             hasattr(pool, "_is_asyncio")
2025-10-08T16:01:12.4411811Z             and pool._is_asyncio is not dialect.is_async
2025-10-08T16:01:12.4411886Z         ):
2025-10-08T16:01:12.4412142Z             raise exc.ArgumentError(
2025-10-08T16:01:12.4412273Z                 f"Pool class {pool.__class__.__name__} cannot be "
2025-10-08T16:01:12.4412410Z                 f"used with {'non-' if not dialect.is_async else ''}"
2025-10-08T16:01:12.4412492Z                 "asyncio engine",
2025-10-08T16:01:12.4412572Z                 code="pcls",
2025-10-08T16:01:12.4412748Z             )
2025-10-08T16:01:12.4412815Z     
2025-10-08T16:01:12.4412894Z         # create engine.
2025-10-08T16:01:12.4412996Z         if not pop_kwarg("future", True):
2025-10-08T16:01:12.4413084Z             raise exc.ArgumentError(
2025-10-08T16:01:12.4413192Z                 "The 'future' parameter passed to "
2025-10-08T16:01:12.4413301Z                 "create_engine() may only be set to True."
2025-10-08T16:01:12.4413370Z             )
2025-10-08T16:01:12.4413446Z     
2025-10-08T16:01:12.4413538Z         engineclass = base.Engine
2025-10-08T16:01:12.4413605Z     
2025-10-08T16:01:12.4413697Z         engine_args = {}
2025-10-08T16:01:12.4413802Z         for k in util.get_cls_kwargs(engineclass):
2025-10-08T16:01:12.4413881Z             if k in kwargs:
2025-10-08T16:01:12.4413982Z                 engine_args[k] = pop_kwarg(k)
2025-10-08T16:01:12.4414049Z     
2025-10-08T16:01:12.4414238Z         # internal flags used by the test suite for instrumenting / proxying
2025-10-08T16:01:12.4414327Z         # engines with mocks etc.
2025-10-08T16:01:12.4414444Z         _initialize = kwargs.pop("_initialize", True)
2025-10-08T16:01:12.4414516Z     
2025-10-08T16:01:12.4414604Z         # all kwargs should be consumed
2025-10-08T16:01:12.4414677Z         if kwargs:
2025-10-08T16:01:12.4414764Z >           raise TypeError(
2025-10-08T16:01:12.4414888Z                 "Invalid argument(s) %s sent to create_engine(), "
2025-10-08T16:01:12.4415030Z                 "using configuration %s/%s/%s.  Please check that the "
2025-10-08T16:01:12.4415184Z                 "keyword arguments are appropriate for this combination "
2025-10-08T16:01:12.4415269Z                 "of components."
2025-10-08T16:01:12.4415344Z                 % (
2025-10-08T16:01:12.4415437Z                     ",".join("'%s'" % k for k in kwargs),
2025-10-08T16:01:12.4415530Z                     dialect.__class__.__name__,
2025-10-08T16:01:12.4415627Z                     pool.__class__.__name__,
2025-10-08T16:01:12.4415714Z                     engineclass.__name__,
2025-10-08T16:01:12.4415786Z                 )
2025-10-08T16:01:12.4415857Z             )
2025-10-08T16:01:12.4416567Z E           TypeError: Invalid argument(s) 'pool_size','max_overflow' sent to create_engine(), using configuration SQLiteDialect_pysqlite/StaticPool/Engine.  Please check that the keyword arguments are appropriate for this combination of components.
2025-10-08T16:01:12.4416574Z 
2025-10-08T16:01:12.4416913Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/create.py:715: TypeError
2025-10-08T16:01:12.4417155Z _ ERROR at setup of TestDatabaseSchemaImmutability.test_user_table_columns_unchanged _
2025-10-08T16:01:12.4417161Z 
2025-10-08T16:01:12.4417243Z     @pytest.fixture
2025-10-08T16:01:12.4417314Z     def app():
2025-10-08T16:01:12.4417516Z         """Create test app instance"""
2025-10-08T16:01:12.4417611Z >       app = create_app(TestConfig)
2025-10-08T16:01:12.4417686Z               ^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.4417696Z 
2025-10-08T16:01:12.4417787Z tests/test_field_consistency.py:30: 
2025-10-08T16:01:12.4417906Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:12.4417997Z app/__init__.py:141: in create_app
2025-10-08T16:01:12.4418080Z     db.init_app(app)
2025-10-08T16:01:12.4418410Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask_sqlalchemy/extension.py:374: in init_app
2025-10-08T16:01:12.4418535Z     engines[key] = self._make_engine(key, options, app)
2025-10-08T16:01:12.4418624Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.4419084Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask_sqlalchemy/extension.py:665: in _make_engine
2025-10-08T16:01:12.4419213Z     return sa.engine_from_config(options, prefix="")
2025-10-08T16:01:12.4419301Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.4419658Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/create.py:838: in engine_from_config
2025-10-08T16:01:12.4419862Z     return create_engine(url, **options)
2025-10-08T16:01:12.4419940Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.4420024Z <string>:2: in create_engine
2025-10-08T16:01:12.4420096Z     ???
2025-10-08T16:01:12.4420422Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/util/deprecations.py:281: in warned
2025-10-08T16:01:12.4420561Z     return fn(*args, **kwargs)  # type: ignore[no-any-return]
2025-10-08T16:01:12.4420643Z            ^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.4420763Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:12.4420768Z 
2025-10-08T16:01:12.4420943Z url = 'sqlite:///:memory:', kwargs = {'max_overflow': 30, 'pool_size': 10}
2025-10-08T16:01:12.4421037Z u = sqlite:///:memory:, plugins = []
2025-10-08T16:01:12.4421272Z entrypoint = <class 'sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite'>
2025-10-08T16:01:12.4421358Z _is_async = False
2025-10-08T16:01:12.4421537Z pop_kwarg = <function create_engine.<locals>.pop_kwarg at 0x7f308ddc5e40>
2025-10-08T16:01:12.4421950Z dialect_args = {'compiler_linting': 1, 'dbapi': <module 'sqlite3.dbapi2' from '/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/sqlite3/dbapi2.py'>}
2025-10-08T16:01:12.4421961Z 
2025-10-08T16:01:12.4422053Z     @util.deprecated_params(
2025-10-08T16:01:12.4422124Z         strategy=(
2025-10-08T16:01:12.4422197Z             "1.4",
2025-10-08T16:01:12.4422370Z             "The :paramref:`_sa.create_engine.strategy` keyword is deprecated, "
2025-10-08T16:01:12.4422508Z             "and the only argument accepted is 'mock'; please use "
2025-10-08T16:01:12.4422653Z             ":func:`.create_mock_engine` going forward.  For general "
2025-10-08T16:01:12.4422823Z             "customization of create_engine which may have been accomplished "
2025-10-08T16:01:12.4422971Z             "using strategies, see :class:`.CreateEnginePlugin`.",
2025-10-08T16:01:12.4423042Z         ),
2025-10-08T16:01:12.4423125Z         empty_in_strategy=(
2025-10-08T16:01:12.4423199Z             "1.4",
2025-10-08T16:01:12.4423356Z             "The :paramref:`_sa.create_engine.empty_in_strategy` keyword is "
2025-10-08T16:01:12.4423512Z             "deprecated, and no longer has any effect.  All IN expressions "
2025-10-08T16:01:12.4423608Z             "are now rendered using "
2025-10-08T16:01:12.4423767Z             'the "expanding parameter" strategy which renders a set of bound'
2025-10-08T16:01:12.4423922Z             'expressions, or an "empty set" SELECT, at statement execution'
2025-10-08T16:01:12.4424005Z             "time.",
2025-10-08T16:01:12.4424072Z         ),
2025-10-08T16:01:12.4424160Z         implicit_returning=(
2025-10-08T16:01:12.4424227Z             "2.0",
2025-10-08T16:01:12.4424382Z             "The :paramref:`_sa.create_engine.implicit_returning` parameter "
2025-10-08T16:01:12.4424526Z             "is deprecated and will be removed in a future release. ",
2025-10-08T16:01:12.4424596Z         ),
2025-10-08T16:01:12.4424662Z     )
2025-10-08T16:01:12.4424839Z     def create_engine(url: Union[str, _url.URL], **kwargs: Any) -> Engine:
2025-10-08T16:01:12.4424959Z         """Create a new :class:`_engine.Engine` instance.
2025-10-08T16:01:12.4425026Z     
2025-10-08T16:01:12.4425214Z         The standard calling form is to send the :ref:`URL <database_urls>` as the
2025-10-08T16:01:12.4425321Z         first positional argument, usually a string
2025-10-08T16:01:12.4425476Z         that indicates database dialect and connection arguments::
2025-10-08T16:01:12.4425542Z     
2025-10-08T16:01:12.4425978Z             engine = create_engine("***localhost/test")
2025-10-08T16:01:12.4426058Z     
2025-10-08T16:01:12.4426134Z         .. note::
2025-10-08T16:01:12.4426198Z     
2025-10-08T16:01:12.4426389Z             Please review :ref:`database_urls` for general guidelines in composing
2025-10-08T16:01:12.4426559Z             URL strings.  In particular, special characters, such as those often
2025-10-08T16:01:12.4426825Z             part of passwords, must be URL encoded to be properly parsed.
2025-10-08T16:01:12.4426897Z     
2025-10-08T16:01:12.4427032Z         Additional keyword arguments may then follow it which
2025-10-08T16:01:12.4427212Z         establish various options on the resulting :class:`_engine.Engine`
2025-10-08T16:01:12.4427469Z         and its underlying :class:`.Dialect` and :class:`_pool.Pool`
2025-10-08T16:01:12.4427551Z         constructs::
2025-10-08T16:01:12.4427621Z     
2025-10-08T16:01:12.4427709Z             engine = create_engine(
2025-10-08T16:01:12.4427893Z                 "***hostname/dbname",
2025-10-08T16:01:12.4427980Z                 pool_recycle=3600,
2025-10-08T16:01:12.4428063Z                 echo=True,
2025-10-08T16:01:12.4428132Z             )
2025-10-08T16:01:12.4428196Z     
2025-10-08T16:01:12.4428291Z         The string form of the URL is
2025-10-08T16:01:12.4428678Z         ``dialect[+driver]://user:password@host/dbname[?key=value..]``, where
2025-10-08T16:01:12.4428920Z         ``dialect`` is a database name such as ``mysql``, ``oracle``,
2025-10-08T16:01:12.4429170Z         ``postgresql``, etc., and ``driver`` the name of a DBAPI, such as
2025-10-08T16:01:12.4429406Z         ``psycopg2``, ``pyodbc``, ``cx_oracle``, etc.  Alternatively,
2025-10-08T16:01:12.4429685Z         the URL can be an instance of :class:`~sqlalchemy.engine.url.URL`.
2025-10-08T16:01:12.4429799Z     
2025-10-08T16:01:12.4430027Z         ``**kwargs`` takes a wide variety of options which are routed
2025-10-08T16:01:12.4430357Z         towards their appropriate components.  Arguments may be specific to
2025-10-08T16:01:12.4430612Z         the :class:`_engine.Engine`, the underlying :class:`.Dialect`,
2025-10-08T16:01:12.4430752Z         as well as the
2025-10-08T16:01:12.4431040Z         :class:`_pool.Pool`.  Specific dialects also accept keyword arguments that
2025-10-08T16:01:12.4431298Z         are unique to that dialect.   Here, we describe the parameters
2025-10-08T16:01:12.4431538Z         that are common to most :func:`_sa.create_engine()` usage.
2025-10-08T16:01:12.4431607Z     
2025-10-08T16:01:12.4431775Z         Once established, the newly resulting :class:`_engine.Engine` will
2025-10-08T16:01:12.4431947Z         request a connection from the underlying :class:`_pool.Pool` once
2025-10-08T16:01:12.4432133Z         :meth:`_engine.Engine.connect` is called, or a method which depends on it
2025-10-08T16:01:12.4432277Z         such as :meth:`_engine.Engine.execute` is invoked.   The
2025-10-08T16:01:12.4432367Z         :class:`_pool.Pool` in turn
2025-10-08T16:01:12.4432536Z         will establish the first actual DBAPI connection when this request
2025-10-08T16:01:12.4432707Z         is received.   The :func:`_sa.create_engine` call itself does **not**
2025-10-08T16:01:12.4432831Z         establish any actual DBAPI connections directly.
2025-10-08T16:01:12.4432897Z     
2025-10-08T16:01:12.4432982Z         .. seealso::
2025-10-08T16:01:12.4433048Z     
2025-10-08T16:01:12.4433142Z             :doc:`/core/engines`
2025-10-08T16:01:12.4433209Z     
2025-10-08T16:01:12.4433296Z             :doc:`/dialects/index`
2025-10-08T16:01:12.4433367Z     
2025-10-08T16:01:12.4433460Z             :ref:`connections_toplevel`
2025-10-08T16:01:12.4433525Z     
2025-10-08T16:01:12.4433672Z         :param connect_args: a dictionary of options which will be
2025-10-08T16:01:12.4433808Z             passed directly to the DBAPI's ``connect()`` method as
2025-10-08T16:01:12.4433925Z             additional keyword arguments.  See the example
2025-10-08T16:01:12.4434189Z             at :ref:`custom_dbapi_args`.
2025-10-08T16:01:12.4434261Z     
2025-10-08T16:01:12.4434410Z         :param creator: a callable which returns a DBAPI connection.
2025-10-08T16:01:12.4434554Z             This creation function will be passed to the underlying
2025-10-08T16:01:12.4434704Z             connection pool and will be used to create all new database
2025-10-08T16:01:12.4434845Z             connections. Usage of this function causes connection
2025-10-08T16:01:12.4435102Z             parameters specified in the URL argument to be bypassed.
2025-10-08T16:01:12.4435170Z     
2025-10-08T16:01:12.4435281Z             This hook is not as flexible as the newer
2025-10-08T16:01:12.4435455Z             :meth:`_events.DialectEvents.do_connect` hook which allows complete
2025-10-08T16:01:12.4435622Z             control over how a connection is made to the database, given the full
2025-10-08T16:01:12.4435734Z             set of URL arguments and state beforehand.
2025-10-08T16:01:12.4435802Z     
2025-10-08T16:01:12.4435891Z             .. seealso::
2025-10-08T16:01:12.4435956Z     
2025-10-08T16:01:12.4436122Z                 :meth:`_events.DialectEvents.do_connect` - event hook that allows
2025-10-08T16:01:12.4436246Z                 full control over DBAPI connection mechanics.
2025-10-08T16:01:12.4436313Z     
2025-10-08T16:01:12.4436401Z                 :ref:`custom_dbapi_args`
2025-10-08T16:01:12.4436474Z     
2025-10-08T16:01:12.4436626Z         :param echo=False: if True, the Engine will log all statements
2025-10-08T16:01:12.4436778Z             as well as a ``repr()`` of their parameter lists to the default log
2025-10-08T16:01:12.4436947Z             handler, which defaults to ``sys.stdout`` for output.   If set to the
2025-10-08T16:01:12.4437110Z             string ``"debug"``, result rows will be printed to the standard output
2025-10-08T16:01:12.4437267Z             as well. The ``echo`` attribute of ``Engine`` can be modified at any
2025-10-08T16:01:12.4437658Z             time to turn logging on and off; direct control of logging is also
2025-10-08T16:01:12.4437803Z             available using the standard Python ``logging`` module.
2025-10-08T16:01:12.4437875Z     
2025-10-08T16:01:12.4437955Z             .. seealso::
2025-10-08T16:01:12.4438025Z     
2025-10-08T16:01:12.4438174Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.4438249Z                 logging.
2025-10-08T16:01:12.4438325Z     
2025-10-08T16:01:12.4438390Z     
2025-10-08T16:01:12.4438538Z         :param echo_pool=False: if True, the connection pool will log
2025-10-08T16:01:12.4438704Z             informational output such as when connections are invalidated
2025-10-08T16:01:12.4438865Z             as well as when connections are recycled to the default log handler,
2025-10-08T16:01:12.4439025Z             which defaults to ``sys.stdout`` for output.   If set to the string
2025-10-08T16:01:12.4439190Z             ``"debug"``, the logging will include pool checkouts and checkins.
2025-10-08T16:01:12.4439366Z             Direct control of logging is also available using the standard Python
2025-10-08T16:01:12.4439459Z             ``logging`` module.
2025-10-08T16:01:12.4439546Z     
2025-10-08T16:01:12.4439634Z             .. seealso::
2025-10-08T16:01:12.4439704Z     
2025-10-08T16:01:12.4439846Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.4439921Z                 logging.
2025-10-08T16:01:12.4439997Z     
2025-10-08T16:01:12.4440063Z     
2025-10-08T16:01:12.4440217Z         :param empty_in_strategy:   No longer used; SQLAlchemy now uses
2025-10-08T16:01:12.4440327Z             "empty set" behavior for IN in all cases.
2025-10-08T16:01:12.4440392Z     
2025-10-08T16:01:12.4440560Z         :param enable_from_linting: defaults to True.  Will emit a warning
2025-10-08T16:01:12.4440725Z             if a given SELECT statement is found to have un-linked FROM elements
2025-10-08T16:01:12.4440827Z             which would cause a cartesian product.
2025-10-08T16:01:12.4441025Z     
2025-10-08T16:01:12.4441118Z             .. versionadded:: 1.4
2025-10-08T16:01:12.4441185Z     
2025-10-08T16:01:12.4441265Z             .. seealso::
2025-10-08T16:01:12.4441330Z     
2025-10-08T16:01:12.4441412Z                 :ref:`change_4737`
2025-10-08T16:01:12.4441486Z     
2025-10-08T16:01:12.4441654Z         :param execution_options: Dictionary execution options which will
2025-10-08T16:01:12.4441945Z             be applied to all connections.  See
2025-10-08T16:01:12.4442094Z             :meth:`~sqlalchemy.engine.Connection.execution_options`
2025-10-08T16:01:12.4442162Z     
2025-10-08T16:01:12.4442311Z         :param future: Use the 2.0 style :class:`_engine.Engine` and
2025-10-08T16:01:12.4442409Z             :class:`_engine.Connection` API.
2025-10-08T16:01:12.4442475Z     
2025-10-08T16:01:12.4442626Z             As of SQLAlchemy 2.0, this parameter is present for backwards
2025-10-08T16:01:12.4442800Z             compatibility only and must remain at its default value of ``True``.
2025-10-08T16:01:12.4442880Z     
2025-10-08T16:01:12.4443022Z             The :paramref:`_sa.create_engine.future` parameter will be
2025-10-08T16:01:12.4443175Z             deprecated in a subsequent 2.x release and eventually removed.
2025-10-08T16:01:12.4443245Z     
2025-10-08T16:01:12.4443332Z             .. versionadded:: 1.4
2025-10-08T16:01:12.4443397Z     
2025-10-08T16:01:12.4443567Z             .. versionchanged:: 2.0 All :class:`_engine.Engine` objects are
2025-10-08T16:01:12.4443724Z                "future" style engines and there is no longer a ``future=False``
2025-10-08T16:01:12.4443805Z                mode of operation.
2025-10-08T16:01:12.4443875Z     
2025-10-08T16:01:12.4443951Z             .. seealso::
2025-10-08T16:01:12.4444024Z     
2025-10-08T16:01:12.4444116Z                 :ref:`migration_20_toplevel`
2025-10-08T16:01:12.4444182Z     
2025-10-08T16:01:12.4444389Z         :param hide_parameters: Boolean, when set to True, SQL statement parameters
2025-10-08T16:01:12.4444559Z             will not be displayed in INFO logging nor will they be formatted into
2025-10-08T16:01:12.4444716Z             the string representation of :class:`.StatementError` objects.
2025-10-08T16:01:12.4444788Z     
2025-10-08T16:01:12.4444876Z             .. versionadded:: 1.3.8
2025-10-08T16:01:12.4444942Z     
2025-10-08T16:01:12.4445024Z             .. seealso::
2025-10-08T16:01:12.4445089Z     
2025-10-08T16:01:12.4445244Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.4445320Z                 logging.
2025-10-08T16:01:12.4445385Z     
2025-10-08T16:01:12.4445602Z         :param implicit_returning=True:  Legacy parameter that may only be set
2025-10-08T16:01:12.4445762Z             to True. In SQLAlchemy 2.0, this parameter does nothing. In order to
2025-10-08T16:01:12.4445921Z             disable "implicit returning" for statements invoked by the ORM,
2025-10-08T16:01:12.4446042Z             configure this on a per-table basis using the
2025-10-08T16:01:12.4446171Z             :paramref:`.Table.implicit_returning` parameter.
2025-10-08T16:01:12.4446243Z     
2025-10-08T16:01:12.4446308Z     
2025-10-08T16:01:12.4446477Z         :param insertmanyvalues_page_size: number of rows to format into an
2025-10-08T16:01:12.4446674Z          INSERT statement when the statement uses "insertmanyvalues" mode, which is
2025-10-08T16:01:12.4446836Z          a paged form of bulk insert that is used for many backends when using
2025-10-08T16:01:12.4447018Z          :term:`executemany` execution typically in conjunction with RETURNING.
2025-10-08T16:01:12.4447195Z          Defaults to 1000, but may also be subject to dialect-specific limiting
2025-10-08T16:01:12.4447539Z          factors which may override this value on a per-statement basis.
2025-10-08T16:01:12.4447641Z     
2025-10-08T16:01:12.4447735Z          .. versionadded:: 2.0
2025-10-08T16:01:12.4447802Z     
2025-10-08T16:01:12.4447886Z          .. seealso::
2025-10-08T16:01:12.4447952Z     
2025-10-08T16:01:12.4448175Z             :ref:`engine_insertmanyvalues`
2025-10-08T16:01:12.4448250Z     
2025-10-08T16:01:12.4448361Z             :ref:`engine_insertmanyvalues_page_size`
2025-10-08T16:01:12.4448427Z     
2025-10-08T16:01:12.4448652Z             :paramref:`_engine.Connection.execution_options.insertmanyvalues_page_size`
2025-10-08T16:01:12.4448718Z     
2025-10-08T16:01:12.4448885Z         :param isolation_level: optional string name of an isolation level
2025-10-08T16:01:12.4449140Z             which will be set on all new connections unconditionally.
2025-10-08T16:01:12.4449296Z             Isolation levels are typically some subset of the string names
2025-10-08T16:01:12.4449405Z             ``"SERIALIZABLE"``, ``"REPEATABLE READ"``,
2025-10-08T16:01:12.4449552Z             ``"READ COMMITTED"``, ``"READ UNCOMMITTED"`` and ``"AUTOCOMMIT"``
2025-10-08T16:01:12.4449637Z             based on backend.
2025-10-08T16:01:12.4449708Z     
2025-10-08T16:01:12.4449869Z             The :paramref:`_sa.create_engine.isolation_level` parameter is
2025-10-08T16:01:12.4449953Z             in contrast to the
2025-10-08T16:01:12.4450106Z             :paramref:`.Connection.execution_options.isolation_level`
2025-10-08T16:01:12.4450236Z             execution option, which may be set on an individual
2025-10-08T16:01:12.4450390Z             :class:`.Connection`, as well as the same parameter passed to
2025-10-08T16:01:12.4450550Z             :meth:`.Engine.execution_options`, where it may be used to create
2025-10-08T16:01:12.4450725Z             multiple engines with different isolation levels that share a common
2025-10-08T16:01:12.4450824Z             connection pool and dialect.
2025-10-08T16:01:12.4450891Z     
2025-10-08T16:01:12.4450983Z             .. versionchanged:: 2.0 The
2025-10-08T16:01:12.4451106Z                :paramref:`_sa.create_engine.isolation_level`
2025-10-08T16:01:12.4451281Z                parameter has been generalized to work on all dialects which support
2025-10-08T16:01:12.4451464Z                the concept of isolation level, and is provided as a more succinct,
2025-10-08T16:01:12.4451630Z                up front configuration switch in contrast to the execution option
2025-10-08T16:01:12.4451754Z                which is more of an ad-hoc programmatic option.
2025-10-08T16:01:12.4451825Z     
2025-10-08T16:01:12.4451903Z             .. seealso::
2025-10-08T16:01:12.4451969Z     
2025-10-08T16:01:12.4452065Z                 :ref:`dbapi_autocommit`
2025-10-08T16:01:12.4452135Z     
2025-10-08T16:01:12.4452274Z         :param json_deserializer: for dialects that support the
2025-10-08T16:01:12.4452360Z             :class:`_types.JSON`
2025-10-08T16:01:12.4452526Z             datatype, this is a Python callable that will convert a JSON string
2025-10-08T16:01:12.4452701Z             to a Python object.  By default, the Python ``json.loads`` function is
2025-10-08T16:01:12.4452773Z             used.
2025-10-08T16:01:12.4452841Z     
2025-10-08T16:01:12.4453008Z             .. versionchanged:: 1.3.7  The SQLite dialect renamed this from
2025-10-08T16:01:12.4453097Z                ``_json_deserializer``.
2025-10-08T16:01:12.4453163Z     
2025-10-08T16:01:12.4453361Z         :param json_serializer: for dialects that support the :class:`_types.JSON`
2025-10-08T16:01:12.4453525Z             datatype, this is a Python callable that will render a given object
2025-10-08T16:01:12.4453681Z             as JSON.   By default, the Python ``json.dumps`` function is used.
2025-10-08T16:01:12.4453751Z     
2025-10-08T16:01:12.4453905Z             .. versionchanged:: 1.3.7  The SQLite dialect renamed this from
2025-10-08T16:01:12.4453996Z                ``_json_serializer``.
2025-10-08T16:01:12.4454062Z     
2025-10-08T16:01:12.4454126Z     
2025-10-08T16:01:12.4454282Z         :param label_length=None: optional integer value which limits
2025-10-08T16:01:12.4454428Z             the size of dynamically generated column labels to that many
2025-10-08T16:01:12.4454558Z             characters. If less than 6, labels are generated as
2025-10-08T16:01:12.4454738Z             "_(counter)". If ``None``, the value of
2025-10-08T16:01:12.4454898Z             ``dialect.max_identifier_length``, which may be affected via the
2025-10-08T16:01:12.4455058Z             :paramref:`_sa.create_engine.max_identifier_length` parameter,
2025-10-08T16:01:12.4455150Z             is used instead.   The value of
2025-10-08T16:01:12.4455257Z             :paramref:`_sa.create_engine.label_length`
2025-10-08T16:01:12.4455427Z             may not be larger than that of
2025-10-08T16:01:12.4455550Z             :paramref:`_sa.create_engine.max_identfier_length`.
2025-10-08T16:01:12.4455621Z     
2025-10-08T16:01:12.4455698Z             .. seealso::
2025-10-08T16:01:12.4455763Z     
2025-10-08T16:01:12.4455899Z                 :paramref:`_sa.create_engine.max_identifier_length`
2025-10-08T16:01:12.4455967Z     
2025-10-08T16:01:12.4456123Z         :param logging_name:  String identifier which will be used within
2025-10-08T16:01:12.4456267Z             the "name" field of logging records generated within the
2025-10-08T16:01:12.4456417Z             "sqlalchemy.engine" logger. Defaults to a hexstring of the
2025-10-08T16:01:12.4456494Z             object's id.
2025-10-08T16:01:12.4456565Z     
2025-10-08T16:01:12.4456640Z             .. seealso::
2025-10-08T16:01:12.4456710Z     
2025-10-08T16:01:12.4456856Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.4456935Z                 logging.
2025-10-08T16:01:12.4457005Z     
2025-10-08T16:01:12.4457169Z                 :paramref:`_engine.Connection.execution_options.logging_token`
2025-10-08T16:01:12.4457237Z     
2025-10-08T16:01:12.4457529Z         :param max_identifier_length: integer; override the max_identifier_length
2025-10-08T16:01:12.4457701Z             determined by the dialect.  if ``None`` or zero, has no effect.  This
2025-10-08T16:01:12.4457868Z             is the database's configured maximum number of characters that may be
2025-10-08T16:01:12.4458039Z             used in a SQL identifier such as a table name, column name, or label
2025-10-08T16:01:12.4458207Z             name. All dialects determine this value automatically, however in the
2025-10-08T16:01:12.4458366Z             case of a new database version for which this value has changed but
2025-10-08T16:01:12.4458543Z             SQLAlchemy's dialect has not been adjusted, the value may be passed
2025-10-08T16:01:12.4458618Z             here.
2025-10-08T16:01:12.4458690Z     
2025-10-08T16:01:12.4458780Z             .. versionadded:: 1.3.9
2025-10-08T16:01:12.4458845Z     
2025-10-08T16:01:12.4458927Z             .. seealso::
2025-10-08T16:01:12.4458991Z     
2025-10-08T16:01:12.4459106Z                 :paramref:`_sa.create_engine.label_length`
2025-10-08T16:01:12.4459174Z     
2025-10-08T16:01:12.4459320Z         :param max_overflow=10: the number of connections to allow in
2025-10-08T16:01:12.4459478Z             connection pool "overflow", that is connections that can be
2025-10-08T16:01:12.4459635Z             opened above and beyond the pool_size setting, which defaults
2025-10-08T16:01:12.4459804Z             to five. this is only used with :class:`~sqlalchemy.pool.QueuePool`.
2025-10-08T16:01:12.4459876Z     
2025-10-08T16:01:12.4460047Z         :param module=None: reference to a Python module object (the module
2025-10-08T16:01:12.4460227Z             itself, not its string name).  Specifies an alternate DBAPI module to
2025-10-08T16:01:12.4460377Z             be used by the engine's dialect.  Each sub-dialect references a
2025-10-08T16:01:12.4460542Z             specific DBAPI which will be imported before first connect.  This
2025-10-08T16:01:12.4460716Z             parameter causes the import to be bypassed, and the given module to
2025-10-08T16:01:12.4460868Z             be used instead. Can be used for testing of DBAPIs as well as to
2025-10-08T16:01:12.4461040Z             inject "mock" DBAPI implementations into the :class:`_engine.Engine`.
2025-10-08T16:01:12.4461112Z     
2025-10-08T16:01:12.4461515Z         :param paramstyle=None: The `paramstyle <https://legacy.python.org/dev/peps/pep-0249/#paramstyle>`_
2025-10-08T16:01:12.4461688Z             to use when rendering bound parameters.  This style defaults to the
2025-10-08T16:01:12.4461846Z             one recommended by the DBAPI itself, which is retrieved from the
2025-10-08T16:01:12.4462014Z             ``.paramstyle`` attribute of the DBAPI.  However, most DBAPIs accept
2025-10-08T16:01:12.4462314Z             more than one paramstyle, and in particular it may be desirable
2025-10-08T16:01:12.4462484Z             to change a "named" paramstyle into a "positional" one, or vice versa.
2025-10-08T16:01:12.4462630Z             When this attribute is passed, it should be one of the values
2025-10-08T16:01:12.4462754Z             ``"qmark"``, ``"numeric"``, ``"named"``, ``"format"`` or
2025-10-08T16:01:12.4462912Z             ``"pyformat"``, and should correspond to a parameter style known
2025-10-08T16:01:12.4463022Z             to be supported by the DBAPI in use.
2025-10-08T16:01:12.4463090Z     
2025-10-08T16:01:12.4463220Z         :param pool=None: an already-constructed instance of
2025-10-08T16:01:12.4463336Z             :class:`~sqlalchemy.pool.Pool`, such as a
2025-10-08T16:01:12.4463497Z             :class:`~sqlalchemy.pool.QueuePool` instance. If non-None, this
2025-10-08T16:01:12.4463646Z             pool will be used directly as the underlying connection pool
2025-10-08T16:01:12.4463800Z             for the engine, bypassing whatever connection parameters are
2025-10-08T16:01:12.4463947Z             present in the URL argument. For information on constructing
2025-10-08T16:01:12.4464093Z             connection pools manually, see :ref:`pooling_toplevel`.
2025-10-08T16:01:12.4464158Z     
2025-10-08T16:01:12.4464298Z         :param poolclass=None: a :class:`~sqlalchemy.pool.Pool`
2025-10-08T16:01:12.4464444Z             subclass, which will be used to create a connection pool
2025-10-08T16:01:12.4464605Z             instance using the connection parameters given in the URL. Note
2025-10-08T16:01:12.4464734Z             this differs from ``pool`` in that you don't actually
2025-10-08T16:01:12.4464898Z             instantiate the pool in this case, you just indicate what type
2025-10-08T16:01:12.4464981Z             of pool to be used.
2025-10-08T16:01:12.4465051Z     
2025-10-08T16:01:12.4465233Z         :param pool_logging_name:  String identifier which will be used within
2025-10-08T16:01:12.4465370Z            the "name" field of logging records generated within the
2025-10-08T16:01:12.4465534Z            "sqlalchemy.pool" logger. Defaults to a hexstring of the object's
2025-10-08T16:01:12.4465611Z            id.
2025-10-08T16:01:12.4465676Z     
2025-10-08T16:01:12.4465763Z            .. seealso::
2025-10-08T16:01:12.4465830Z     
2025-10-08T16:01:12.4465976Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.4466057Z                 logging.
2025-10-08T16:01:12.4466123Z     
2025-10-08T16:01:12.4466295Z         :param pool_pre_ping: boolean, if True will enable the connection pool
2025-10-08T16:01:12.4466450Z             "pre-ping" feature that tests connections for liveness upon
2025-10-08T16:01:12.4466529Z             each checkout.
2025-10-08T16:01:12.4466599Z     
2025-10-08T16:01:12.4466694Z             .. versionadded:: 1.2
2025-10-08T16:01:12.4466760Z     
2025-10-08T16:01:12.4466841Z             .. seealso::
2025-10-08T16:01:12.4466912Z     
2025-10-08T16:01:12.4467015Z                 :ref:`pool_disconnects_pessimistic`
2025-10-08T16:01:12.4467084Z     
2025-10-08T16:01:12.4467226Z         :param pool_size=5: the number of connections to keep open
2025-10-08T16:01:12.4467428Z             inside the connection pool. This used with
2025-10-08T16:01:12.4467544Z             :class:`~sqlalchemy.pool.QueuePool` as
2025-10-08T16:01:12.4467699Z             well as :class:`~sqlalchemy.pool.SingletonThreadPool`.  With
2025-10-08T16:01:12.4467961Z             :class:`~sqlalchemy.pool.QueuePool`, a ``pool_size`` setting
2025-10-08T16:01:12.4468132Z             of 0 indicates no limit; to disable pooling, set ``poolclass`` to
2025-10-08T16:01:12.4468245Z             :class:`~sqlalchemy.pool.NullPool` instead.
2025-10-08T16:01:12.4468315Z     
2025-10-08T16:01:12.4468466Z         :param pool_recycle=-1: this setting causes the pool to recycle
2025-10-08T16:01:12.4468617Z             connections after the given number of seconds has passed. It
2025-10-08T16:01:12.4468868Z             defaults to -1, or no timeout. For example, setting to 3600
2025-10-08T16:01:12.4469016Z             means connections will be recycled after one hour. Note that
2025-10-08T16:01:12.4469153Z             MySQL in particular will disconnect automatically if no
2025-10-08T16:01:12.4469317Z             activity is detected on a connection for eight hours (although
2025-10-08T16:01:12.4469469Z             this is configurable with the MySQLDB connection itself and the
2025-10-08T16:01:12.4469569Z             server configuration as well).
2025-10-08T16:01:12.4469640Z     
2025-10-08T16:01:12.4469718Z             .. seealso::
2025-10-08T16:01:12.4469791Z     
2025-10-08T16:01:12.4469885Z                 :ref:`pool_setting_recycle`
2025-10-08T16:01:12.4469951Z     
2025-10-08T16:01:12.4470072Z         :param pool_reset_on_return='rollback': set the
2025-10-08T16:01:12.4470242Z             :paramref:`_pool.Pool.reset_on_return` parameter of the underlying
2025-10-08T16:01:12.4470386Z             :class:`_pool.Pool` object, which can be set to the values
2025-10-08T16:01:12.4470490Z             ``"rollback"``, ``"commit"``, or ``None``.
2025-10-08T16:01:12.4470556Z     
2025-10-08T16:01:12.4470639Z             .. seealso::
2025-10-08T16:01:12.4470705Z     
2025-10-08T16:01:12.4470796Z                 :ref:`pool_reset_on_return`
2025-10-08T16:01:12.4470868Z     
2025-10-08T16:01:12.4471020Z                 :ref:`dbapi_autocommit_skip_rollback` - a more modern approach
2025-10-08T16:01:12.4471162Z                 to using connections with no transactional instructions
2025-10-08T16:01:12.4471236Z     
2025-10-08T16:01:12.4471383Z         :param pool_timeout=30: number of seconds to wait before giving
2025-10-08T16:01:12.4471517Z             up on getting a connection from the pool. This is only used
2025-10-08T16:01:12.4471696Z             with :class:`~sqlalchemy.pool.QueuePool`. This can be a float but is
2025-10-08T16:01:12.4471866Z             subject to the limitations of Python time functions which may not be
2025-10-08T16:01:12.4471981Z             reliable in the tens of milliseconds.
2025-10-08T16:01:12.4472048Z     
2025-10-08T16:01:12.4472197Z             .. note: don't use 30.0 above, it seems to break with the :param tag
2025-10-08T16:01:12.4472269Z     
2025-10-08T16:01:12.4472441Z         :param pool_use_lifo=False: use LIFO (last-in-first-out) when retrieving
2025-10-08T16:01:12.4472574Z             connections from :class:`.QueuePool` instead of FIFO
2025-10-08T16:01:12.4472751Z             (first-in-first-out). Using LIFO, a server-side timeout scheme can
2025-10-08T16:01:12.4472932Z             reduce the number of connections used during non- peak   periods of
2025-10-08T16:01:12.4473116Z             use.   When planning for server-side timeouts, ensure that a recycle or
2025-10-08T16:01:12.4473291Z             pre-ping strategy is in use to gracefully   handle stale connections.
2025-10-08T16:01:12.4473358Z     
2025-10-08T16:01:12.4473459Z               .. versionadded:: 1.3
2025-10-08T16:01:12.4473529Z     
2025-10-08T16:01:12.4473609Z               .. seealso::
2025-10-08T16:01:12.4473685Z     
2025-10-08T16:01:12.4473771Z                 :ref:`pool_use_lifo`
2025-10-08T16:01:12.4473837Z     
2025-10-08T16:01:12.4473934Z                 :ref:`pool_disconnects`
2025-10-08T16:01:12.4474001Z     
2025-10-08T16:01:12.4474151Z         :param plugins: string list of plugin names to load.  See
2025-10-08T16:01:12.4474263Z             :class:`.CreateEnginePlugin` for background.
2025-10-08T16:01:12.4474330Z     
2025-10-08T16:01:12.4474510Z             .. versionadded:: 1.2.3
2025-10-08T16:01:12.4474579Z     
2025-10-08T16:01:12.4474753Z         :param query_cache_size: size of the cache used to cache the SQL string
2025-10-08T16:01:12.4474875Z          form of queries.  Set to zero to disable caching.
2025-10-08T16:01:12.4474947Z     
2025-10-08T16:01:12.4475125Z          The cache is pruned of its least recently used items when its size reaches
2025-10-08T16:01:12.4475369Z          N * 1.5.  Defaults to 500, meaning the cache will always store at least
2025-10-08T16:01:12.4475537Z          500 SQL statements when filled, and will grow up to 750 items at which
2025-10-08T16:01:12.4475702Z          point it is pruned back down to 500 by removing the 250 least recently
2025-10-08T16:01:12.4475776Z          used items.
2025-10-08T16:01:12.4475842Z     
2025-10-08T16:01:12.4476012Z          Caching is accomplished on a per-statement basis by generating a
2025-10-08T16:01:12.4476186Z          cache key that represents the statement's structure, then generating
2025-10-08T16:01:12.4476346Z          string SQL for the current dialect only if that key is not present
2025-10-08T16:01:12.4476511Z          in the cache.   All statements support caching, however some features
2025-10-08T16:01:12.4476669Z          such as an INSERT with a large set of parameters will intentionally
2025-10-08T16:01:12.4476828Z          bypass the cache.   SQL logging will indicate statistics for each
2025-10-08T16:01:12.4476964Z          statement whether or not it were pull from the cache.
2025-10-08T16:01:12.4477030Z     
2025-10-08T16:01:12.4477208Z          .. note:: some ORM functions related to unit-of-work persistence as well
2025-10-08T16:01:12.4477536Z             as some attribute loading strategies will make use of individual
2025-10-08T16:01:12.4477673Z             per-mapper caches outside of the main cache.
2025-10-08T16:01:12.4477749Z     
2025-10-08T16:01:12.4477815Z     
2025-10-08T16:01:12.4477898Z          .. seealso::
2025-10-08T16:01:12.4477964Z     
2025-10-08T16:01:12.4478052Z             :ref:`sql_caching`
2025-10-08T16:01:12.4478125Z     
2025-10-08T16:01:12.4478210Z          .. versionadded:: 1.4
2025-10-08T16:01:12.4478275Z     
2025-10-08T16:01:12.4478429Z         :param skip_autocommit_rollback: When True, the dialect will
2025-10-08T16:01:12.4478611Z            unconditionally skip all calls to the DBAPI ``connection.rollback()``
2025-10-08T16:01:12.4478789Z            method if the DBAPI connection is confirmed to be in "autocommit" mode.
2025-10-08T16:01:12.4478972Z            The availability of this feature is dialect specific; if not available,
2025-10-08T16:01:12.4479155Z            a ``NotImplementedError`` is raised by the dialect when rollback occurs.
2025-10-08T16:01:12.4479228Z     
2025-10-08T16:01:12.4479307Z            .. seealso::
2025-10-08T16:01:12.4479376Z     
2025-10-08T16:01:12.4479486Z                 :ref:`dbapi_autocommit_skip_rollback`
2025-10-08T16:01:12.4479554Z     
2025-10-08T16:01:12.4479644Z            .. versionadded:: 2.0.43
2025-10-08T16:01:12.4479716Z     
2025-10-08T16:01:12.4479900Z         :param use_insertmanyvalues: True by default, use the "insertmanyvalues"
2025-10-08T16:01:12.4480064Z          execution style for INSERT..RETURNING statements by default.
2025-10-08T16:01:12.4480131Z     
2025-10-08T16:01:12.4480215Z          .. versionadded:: 2.0
2025-10-08T16:01:12.4480288Z     
2025-10-08T16:01:12.4480367Z          .. seealso::
2025-10-08T16:01:12.4480433Z     
2025-10-08T16:01:12.4480534Z             :ref:`engine_insertmanyvalues`
2025-10-08T16:01:12.4480602Z     
2025-10-08T16:01:12.4480674Z         """  # noqa
2025-10-08T16:01:12.4480747Z     
2025-10-08T16:01:12.4480834Z         if "strategy" in kwargs:
2025-10-08T16:01:12.4480927Z             strat = kwargs.pop("strategy")
2025-10-08T16:01:12.4481016Z             if strat == "mock":
2025-10-08T16:01:12.4481105Z                 # this case is deprecated
2025-10-08T16:01:12.4481252Z                 return create_mock_engine(url, **kwargs)  # type: ignore
2025-10-08T16:01:12.4481444Z             else:
2025-10-08T16:01:12.4481591Z                 raise exc.ArgumentError("unknown strategy: %r" % strat)
2025-10-08T16:01:12.4481663Z     
2025-10-08T16:01:12.4481765Z         kwargs.pop("empty_in_strategy", None)
2025-10-08T16:01:12.4481831Z     
2025-10-08T16:01:12.4481923Z         # create url.URL object
2025-10-08T16:01:12.4482004Z         u = _url.make_url(url)
2025-10-08T16:01:12.4482172Z     
2025-10-08T16:01:12.4482307Z         u, plugins, kwargs = u._instantiate_plugins(kwargs)
2025-10-08T16:01:12.4482374Z     
2025-10-08T16:01:12.4482471Z         entrypoint = u._get_entrypoint()
2025-10-08T16:01:12.4482583Z         _is_async = kwargs.pop("_is_async", False)
2025-10-08T16:01:12.4482658Z         if _is_async:
2025-10-08T16:01:12.4482792Z             dialect_cls = entrypoint.get_async_dialect_cls(u)
2025-10-08T16:01:12.4482863Z         else:
2025-10-08T16:01:12.4482970Z             dialect_cls = entrypoint.get_dialect_cls(u)
2025-10-08T16:01:12.4483043Z     
2025-10-08T16:01:12.4483150Z         if kwargs.pop("_coerce_config", False):
2025-10-08T16:01:12.4483216Z     
2025-10-08T16:01:12.4483377Z             def pop_kwarg(key: str, default: Optional[Any] = None) -> Any:
2025-10-08T16:01:12.4483478Z                 value = kwargs.pop(key, default)
2025-10-08T16:01:12.4483596Z                 if key in dialect_cls.engine_config_types:
2025-10-08T16:01:12.4483727Z                     value = dialect_cls.engine_config_types[key](value)
2025-10-08T16:01:12.4483808Z                 return value
2025-10-08T16:01:12.4483882Z     
2025-10-08T16:01:12.4483951Z         else:
2025-10-08T16:01:12.4484053Z             pop_kwarg = kwargs.pop  # type: ignore
2025-10-08T16:01:12.4484127Z     
2025-10-08T16:01:12.4484208Z         dialect_args = {}
2025-10-08T16:01:12.4484308Z         # consume dialect arguments from kwargs
2025-10-08T16:01:12.4484418Z         for k in util.get_cls_kwargs(dialect_cls):
2025-10-08T16:01:12.4484497Z             if k in kwargs:
2025-10-08T16:01:12.4484597Z                 dialect_args[k] = pop_kwarg(k)
2025-10-08T16:01:12.4484671Z     
2025-10-08T16:01:12.4484767Z         dbapi = kwargs.pop("module", None)
2025-10-08T16:01:12.4484855Z         if dbapi is None:
2025-10-08T16:01:12.4484935Z             dbapi_args = {}
2025-10-08T16:01:12.4485002Z     
2025-10-08T16:01:12.4485116Z             if "import_dbapi" in dialect_cls.__dict__:
2025-10-08T16:01:12.4485222Z                 dbapi_meth = dialect_cls.import_dbapi
2025-10-08T16:01:12.4485289Z     
2025-10-08T16:01:12.4485439Z             elif hasattr(dialect_cls, "dbapi") and inspect.ismethod(
2025-10-08T16:01:12.4485526Z                 dialect_cls.dbapi
2025-10-08T16:01:12.4485597Z             ):
2025-10-08T16:01:12.4485689Z                 util.warn_deprecated(
2025-10-08T16:01:12.4485822Z                     "The dbapi() classmethod on dialect classes has been "
2025-10-08T16:01:12.4485974Z                     "renamed to import_dbapi().  Implement an import_dbapi() "
2025-10-08T16:01:12.4486138Z                     f"classmethod directly on class {dialect_cls} to remove this "
2025-10-08T16:01:12.4486288Z                     "warning; the old .dbapi() classmethod may be maintained for "
2025-10-08T16:01:12.4486393Z                     "backwards compatibility.",
2025-10-08T16:01:12.4486468Z                     "2.0",
2025-10-08T16:01:12.4486535Z                 )
2025-10-08T16:01:12.4486638Z                 dbapi_meth = dialect_cls.dbapi
2025-10-08T16:01:12.4486712Z             else:
2025-10-08T16:01:12.4486819Z                 dbapi_meth = dialect_cls.import_dbapi
2025-10-08T16:01:12.4486885Z     
2025-10-08T16:01:12.4486993Z             for k in util.get_func_kwargs(dbapi_meth):
2025-10-08T16:01:12.4487078Z                 if k in kwargs:
2025-10-08T16:01:12.4487172Z                     dbapi_args[k] = pop_kwarg(k)
2025-10-08T16:01:12.4487267Z             dbapi = dbapi_meth(**dbapi_args)
2025-10-08T16:01:12.4487490Z     
2025-10-08T16:01:12.4487617Z         dialect_args["dbapi"] = dbapi
2025-10-08T16:01:12.4487806Z     
2025-10-08T16:01:12.4487987Z         dialect_args.setdefault("compiler_linting", compiler.NO_LINTING)
2025-10-08T16:01:12.4488138Z         enable_from_linting = kwargs.pop("enable_from_linting", True)
2025-10-08T16:01:12.4488227Z         if enable_from_linting:
2025-10-08T16:01:12.4488413Z             dialect_args["compiler_linting"] ^= compiler.COLLECT_CARTESIAN_PRODUCTS
2025-10-08T16:01:12.4488581Z     
2025-10-08T16:01:12.4488671Z         for plugin in plugins:
2025-10-08T16:01:12.4488813Z             plugin.handle_dialect_kwargs(dialect_cls, dialect_args)
2025-10-08T16:01:12.4488880Z     
2025-10-08T16:01:12.4488962Z         # create dialect
2025-10-08T16:01:12.4489059Z         dialect = dialect_cls(**dialect_args)
2025-10-08T16:01:12.4489126Z     
2025-10-08T16:01:12.4489226Z         # assemble connection arguments
2025-10-08T16:01:12.4489354Z         (cargs_tup, cparams) = dialect.create_connect_args(u)
2025-10-08T16:01:12.4489473Z         cparams.update(pop_kwarg("connect_args", {}))
2025-10-08T16:01:12.4489545Z     
2025-10-08T16:01:12.4489720Z         if "async_fallback" in cparams and util.asbool(cparams["async_fallback"]):
2025-10-08T16:01:12.4489814Z             util.warn_deprecated(
2025-10-08T16:01:12.4489974Z                 "The async_fallback dialect argument is deprecated and will be "
2025-10-08T16:01:12.4490068Z                 "removed in SQLAlchemy 2.1.",
2025-10-08T16:01:12.4490152Z                 "2.0",
2025-10-08T16:01:12.4490221Z             )
2025-10-08T16:01:12.4490286Z     
2025-10-08T16:01:12.4490397Z         cargs = list(cargs_tup)  # allow mutability
2025-10-08T16:01:12.4490464Z     
2025-10-08T16:01:12.4490561Z         # look for existing pool or create
2025-10-08T16:01:12.4490654Z         pool = pop_kwarg("pool", None)
2025-10-08T16:01:12.4490733Z         if pool is None:
2025-10-08T16:01:12.4490806Z     
2025-10-08T16:01:12.4490885Z             def connect(
2025-10-08T16:01:12.4491032Z                 connection_record: Optional[ConnectionPoolEntry] = None,
2025-10-08T16:01:12.4491129Z             ) -> DBAPIConnection:
2025-10-08T16:01:12.4491215Z                 if dialect._has_events:
2025-10-08T16:01:12.4491322Z                     for fn in dialect.dispatch.do_connect:
2025-10-08T16:01:12.4491417Z                         connection = cast(
2025-10-08T16:01:12.4491511Z                             DBAPIConnection,
2025-10-08T16:01:12.4491643Z                             fn(dialect, connection_record, cargs, cparams),
2025-10-08T16:01:12.4491722Z                         )
2025-10-08T16:01:12.4491816Z                         if connection is not None:
2025-10-08T16:01:12.4491909Z                             return connection
2025-10-08T16:01:12.4491976Z     
2025-10-08T16:01:12.4492087Z                 return dialect.connect(*cargs, **cparams)
2025-10-08T16:01:12.4492160Z     
2025-10-08T16:01:12.4492259Z             creator = pop_kwarg("creator", connect)
2025-10-08T16:01:12.4492325Z     
2025-10-08T16:01:12.4492437Z             poolclass = pop_kwarg("poolclass", None)
2025-10-08T16:01:12.4492526Z             if poolclass is None:
2025-10-08T16:01:12.4492651Z                 poolclass = dialect.get_dialect_pool_class(u)
2025-10-08T16:01:12.4492744Z             pool_args = {"dialect": dialect}
2025-10-08T16:01:12.4492812Z     
2025-10-08T16:01:12.4492963Z             # consume pool arguments from kwargs, translating a few of
2025-10-08T16:01:12.4493043Z             # the arguments
2025-10-08T16:01:12.4493151Z             for k in util.get_cls_kwargs(poolclass):
2025-10-08T16:01:12.4493259Z                 tk = _pool_translate_kwargs.get(k, k)
2025-10-08T16:01:12.4493341Z                 if tk in kwargs:
2025-10-08T16:01:12.4493436Z                     pool_args[k] = pop_kwarg(tk)
2025-10-08T16:01:12.4493511Z     
2025-10-08T16:01:12.4493600Z             for plugin in plugins:
2025-10-08T16:01:12.4493734Z                 plugin.handle_pool_kwargs(poolclass, pool_args)
2025-10-08T16:01:12.4493801Z     
2025-10-08T16:01:12.4494028Z             pool = poolclass(creator, **pool_args)
2025-10-08T16:01:12.4494110Z         else:
2025-10-08T16:01:12.4494196Z             pool._dialect = dialect
2025-10-08T16:01:12.4494264Z     
2025-10-08T16:01:12.4494337Z         if (
2025-10-08T16:01:12.4494427Z             hasattr(pool, "_is_asyncio")
2025-10-08T16:01:12.4494542Z             and pool._is_asyncio is not dialect.is_async
2025-10-08T16:01:12.4494618Z         ):
2025-10-08T16:01:12.4494788Z             raise exc.ArgumentError(
2025-10-08T16:01:12.4494919Z                 f"Pool class {pool.__class__.__name__} cannot be "
2025-10-08T16:01:12.4495050Z                 f"used with {'non-' if not dialect.is_async else ''}"
2025-10-08T16:01:12.4495136Z                 "asyncio engine",
2025-10-08T16:01:12.4495224Z                 code="pcls",
2025-10-08T16:01:12.4495294Z             )
2025-10-08T16:01:12.4495360Z     
2025-10-08T16:01:12.4495443Z         # create engine.
2025-10-08T16:01:12.4495534Z         if not pop_kwarg("future", True):
2025-10-08T16:01:12.4495625Z             raise exc.ArgumentError(
2025-10-08T16:01:12.4495733Z                 "The 'future' parameter passed to "
2025-10-08T16:01:12.4495840Z                 "create_engine() may only be set to True."
2025-10-08T16:01:12.4495912Z             )
2025-10-08T16:01:12.4495982Z     
2025-10-08T16:01:12.4496072Z         engineclass = base.Engine
2025-10-08T16:01:12.4496145Z     
2025-10-08T16:01:12.4496223Z         engine_args = {}
2025-10-08T16:01:12.4496332Z         for k in util.get_cls_kwargs(engineclass):
2025-10-08T16:01:12.4496416Z             if k in kwargs:
2025-10-08T16:01:12.4496511Z                 engine_args[k] = pop_kwarg(k)
2025-10-08T16:01:12.4496578Z     
2025-10-08T16:01:12.4496759Z         # internal flags used by the test suite for instrumenting / proxying
2025-10-08T16:01:12.4496844Z         # engines with mocks etc.
2025-10-08T16:01:12.4496961Z         _initialize = kwargs.pop("_initialize", True)
2025-10-08T16:01:12.4497029Z     
2025-10-08T16:01:12.4497118Z         # all kwargs should be consumed
2025-10-08T16:01:12.4497199Z         if kwargs:
2025-10-08T16:01:12.4497284Z >           raise TypeError(
2025-10-08T16:01:12.4497521Z                 "Invalid argument(s) %s sent to create_engine(), "
2025-10-08T16:01:12.4497668Z                 "using configuration %s/%s/%s.  Please check that the "
2025-10-08T16:01:12.4497819Z                 "keyword arguments are appropriate for this combination "
2025-10-08T16:01:12.4497909Z                 "of components."
2025-10-08T16:01:12.4497988Z                 % (
2025-10-08T16:01:12.4498089Z                     ",".join("'%s'" % k for k in kwargs),
2025-10-08T16:01:12.4498192Z                     dialect.__class__.__name__,
2025-10-08T16:01:12.4498284Z                     pool.__class__.__name__,
2025-10-08T16:01:12.4498372Z                     engineclass.__name__,
2025-10-08T16:01:12.4498446Z                 )
2025-10-08T16:01:12.4498515Z             )
2025-10-08T16:01:12.4499228Z E           TypeError: Invalid argument(s) 'pool_size','max_overflow' sent to create_engine(), using configuration SQLiteDialect_pysqlite/StaticPool/Engine.  Please check that the keyword arguments are appropriate for this combination of components.
2025-10-08T16:01:12.4499241Z 
2025-10-08T16:01:12.4499571Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/create.py:715: TypeError
2025-10-08T16:01:12.4499812Z _ ERROR at setup of TestDatabaseSchemaImmutability.test_post_table_columns_unchanged _
2025-10-08T16:01:12.4499821Z 
2025-10-08T16:01:12.4499908Z     @pytest.fixture
2025-10-08T16:01:12.4499980Z     def app():
2025-10-08T16:01:12.4500075Z         """Create test app instance"""
2025-10-08T16:01:12.4500171Z >       app = create_app(TestConfig)
2025-10-08T16:01:12.4500247Z               ^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.4500252Z 
2025-10-08T16:01:12.4500350Z tests/test_field_consistency.py:30: 
2025-10-08T16:01:12.4500469Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:12.4501167Z app/__init__.py:141: in create_app
2025-10-08T16:01:12.4501258Z     db.init_app(app)
2025-10-08T16:01:12.4501591Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask_sqlalchemy/extension.py:374: in init_app
2025-10-08T16:01:12.4501716Z     engines[key] = self._make_engine(key, options, app)
2025-10-08T16:01:12.4501810Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.4502257Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask_sqlalchemy/extension.py:665: in _make_engine
2025-10-08T16:01:12.4502385Z     return sa.engine_from_config(options, prefix="")
2025-10-08T16:01:12.4502471Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.4502826Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/create.py:838: in engine_from_config
2025-10-08T16:01:12.4502931Z     return create_engine(url, **options)
2025-10-08T16:01:12.4503011Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.4503101Z <string>:2: in create_engine
2025-10-08T16:01:12.4503177Z     ???
2025-10-08T16:01:12.4503508Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/util/deprecations.py:281: in warned
2025-10-08T16:01:12.4503654Z     return fn(*args, **kwargs)  # type: ignore[no-any-return]
2025-10-08T16:01:12.4503732Z            ^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.4503848Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:12.4503857Z 
2025-10-08T16:01:12.4504031Z url = 'sqlite:///:memory:', kwargs = {'max_overflow': 30, 'pool_size': 10}
2025-10-08T16:01:12.4504124Z u = sqlite:///:memory:, plugins = []
2025-10-08T16:01:12.4504360Z entrypoint = <class 'sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite'>
2025-10-08T16:01:12.4504442Z _is_async = False
2025-10-08T16:01:12.4504623Z pop_kwarg = <function create_engine.<locals>.pop_kwarg at 0x7f308d9d0220>
2025-10-08T16:01:12.4505047Z dialect_args = {'compiler_linting': 1, 'dbapi': <module 'sqlite3.dbapi2' from '/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/sqlite3/dbapi2.py'>}
2025-10-08T16:01:12.4505053Z 
2025-10-08T16:01:12.4505141Z     @util.deprecated_params(
2025-10-08T16:01:12.4505216Z         strategy=(
2025-10-08T16:01:12.4505293Z             "1.4",
2025-10-08T16:01:12.4505464Z             "The :paramref:`_sa.create_engine.strategy` keyword is deprecated, "
2025-10-08T16:01:12.4505606Z             "and the only argument accepted is 'mock'; please use "
2025-10-08T16:01:12.4505750Z             ":func:`.create_mock_engine` going forward.  For general "
2025-10-08T16:01:12.4505921Z             "customization of create_engine which may have been accomplished "
2025-10-08T16:01:12.4506072Z             "using strategies, see :class:`.CreateEnginePlugin`.",
2025-10-08T16:01:12.4506146Z         ),
2025-10-08T16:01:12.4506231Z         empty_in_strategy=(
2025-10-08T16:01:12.4506305Z             "1.4",
2025-10-08T16:01:12.4506465Z             "The :paramref:`_sa.create_engine.empty_in_strategy` keyword is "
2025-10-08T16:01:12.4506628Z             "deprecated, and no longer has any effect.  All IN expressions "
2025-10-08T16:01:12.4506723Z             "are now rendered using "
2025-10-08T16:01:12.4506884Z             'the "expanding parameter" strategy which renders a set of bound'
2025-10-08T16:01:12.4507049Z             'expressions, or an "empty set" SELECT, at statement execution'
2025-10-08T16:01:12.4507127Z             "time.",
2025-10-08T16:01:12.4507198Z         ),
2025-10-08T16:01:12.4507287Z         implicit_returning=(
2025-10-08T16:01:12.4507471Z             "2.0",
2025-10-08T16:01:12.4507632Z             "The :paramref:`_sa.create_engine.implicit_returning` parameter "
2025-10-08T16:01:12.4507781Z             "is deprecated and will be removed in a future release. ",
2025-10-08T16:01:12.4507853Z         ),
2025-10-08T16:01:12.4507928Z     )
2025-10-08T16:01:12.4508100Z     def create_engine(url: Union[str, _url.URL], **kwargs: Any) -> Engine:
2025-10-08T16:01:12.4508356Z         """Create a new :class:`_engine.Engine` instance.
2025-10-08T16:01:12.4508436Z     
2025-10-08T16:01:12.4508622Z         The standard calling form is to send the :ref:`URL <database_urls>` as the
2025-10-08T16:01:12.4508735Z         first positional argument, usually a string
2025-10-08T16:01:12.4508894Z         that indicates database dialect and connection arguments::
2025-10-08T16:01:12.4508960Z     
2025-10-08T16:01:12.4509429Z             engine = create_engine("***localhost/test")
2025-10-08T16:01:12.4509504Z     
2025-10-08T16:01:12.4509577Z         .. note::
2025-10-08T16:01:12.4509645Z     
2025-10-08T16:01:12.4509827Z             Please review :ref:`database_urls` for general guidelines in composing
2025-10-08T16:01:12.4509994Z             URL strings.  In particular, special characters, such as those often
2025-10-08T16:01:12.4510156Z             part of passwords, must be URL encoded to be properly parsed.
2025-10-08T16:01:12.4510222Z     
2025-10-08T16:01:12.4510363Z         Additional keyword arguments may then follow it which
2025-10-08T16:01:12.4510544Z         establish various options on the resulting :class:`_engine.Engine`
2025-10-08T16:01:12.4510697Z         and its underlying :class:`.Dialect` and :class:`_pool.Pool`
2025-10-08T16:01:12.4510776Z         constructs::
2025-10-08T16:01:12.4510849Z     
2025-10-08T16:01:12.4510936Z             engine = create_engine(
2025-10-08T16:01:12.4511109Z                 "***hostname/dbname",
2025-10-08T16:01:12.4511218Z                 pool_recycle=3600,
2025-10-08T16:01:12.4511307Z                 echo=True,
2025-10-08T16:01:12.4511378Z             )
2025-10-08T16:01:12.4511449Z     
2025-10-08T16:01:12.4511538Z         The string form of the URL is
2025-10-08T16:01:12.4511704Z         ``dialect[+driver]://user:password@host/dbname[?key=value..]``, where
2025-10-08T16:01:12.4511851Z         ``dialect`` is a database name such as ``mysql``, ``oracle``,
2025-10-08T16:01:12.4511998Z         ``postgresql``, etc., and ``driver`` the name of a DBAPI, such as
2025-10-08T16:01:12.4512141Z         ``psycopg2``, ``pyodbc``, ``cx_oracle``, etc.  Alternatively,
2025-10-08T16:01:12.4512305Z         the URL can be an instance of :class:`~sqlalchemy.engine.url.URL`.
2025-10-08T16:01:12.4512371Z     
2025-10-08T16:01:12.4512514Z         ``**kwargs`` takes a wide variety of options which are routed
2025-10-08T16:01:12.4512693Z         towards their appropriate components.  Arguments may be specific to
2025-10-08T16:01:12.4512843Z         the :class:`_engine.Engine`, the underlying :class:`.Dialect`,
2025-10-08T16:01:12.4512927Z         as well as the
2025-10-08T16:01:12.4513113Z         :class:`_pool.Pool`.  Specific dialects also accept keyword arguments that
2025-10-08T16:01:12.4513266Z         are unique to that dialect.   Here, we describe the parameters
2025-10-08T16:01:12.4513415Z         that are common to most :func:`_sa.create_engine()` usage.
2025-10-08T16:01:12.4513483Z     
2025-10-08T16:01:12.4513657Z         Once established, the newly resulting :class:`_engine.Engine` will
2025-10-08T16:01:12.4513828Z         request a connection from the underlying :class:`_pool.Pool` once
2025-10-08T16:01:12.4514012Z         :meth:`_engine.Engine.connect` is called, or a method which depends on it
2025-10-08T16:01:12.4514157Z         such as :meth:`_engine.Engine.execute` is invoked.   The
2025-10-08T16:01:12.4514247Z         :class:`_pool.Pool` in turn
2025-10-08T16:01:12.4514412Z         will establish the first actual DBAPI connection when this request
2025-10-08T16:01:12.4514583Z         is received.   The :func:`_sa.create_engine` call itself does **not**
2025-10-08T16:01:12.4514707Z         establish any actual DBAPI connections directly.
2025-10-08T16:01:12.4514784Z     
2025-10-08T16:01:12.4514862Z         .. seealso::
2025-10-08T16:01:12.4514929Z     
2025-10-08T16:01:12.4515023Z             :doc:`/core/engines`
2025-10-08T16:01:12.4515090Z     
2025-10-08T16:01:12.4515176Z             :doc:`/dialects/index`
2025-10-08T16:01:12.4515249Z     
2025-10-08T16:01:12.4515425Z             :ref:`connections_toplevel`
2025-10-08T16:01:12.4515495Z     
2025-10-08T16:01:12.4515645Z         :param connect_args: a dictionary of options which will be
2025-10-08T16:01:12.4515781Z             passed directly to the DBAPI's ``connect()`` method as
2025-10-08T16:01:12.4515906Z             additional keyword arguments.  See the example
2025-10-08T16:01:12.4516001Z             at :ref:`custom_dbapi_args`.
2025-10-08T16:01:12.4516191Z     
2025-10-08T16:01:12.4516347Z         :param creator: a callable which returns a DBAPI connection.
2025-10-08T16:01:12.4516487Z             This creation function will be passed to the underlying
2025-10-08T16:01:12.4516641Z             connection pool and will be used to create all new database
2025-10-08T16:01:12.4516782Z             connections. Usage of this function causes connection
2025-10-08T16:01:12.4516924Z             parameters specified in the URL argument to be bypassed.
2025-10-08T16:01:12.4516997Z     
2025-10-08T16:01:12.4517109Z             This hook is not as flexible as the newer
2025-10-08T16:01:12.4517282Z             :meth:`_events.DialectEvents.do_connect` hook which allows complete
2025-10-08T16:01:12.4517653Z             control over how a connection is made to the database, given the full
2025-10-08T16:01:12.4517767Z             set of URL arguments and state beforehand.
2025-10-08T16:01:12.4517843Z     
2025-10-08T16:01:12.4517931Z             .. seealso::
2025-10-08T16:01:12.4518005Z     
2025-10-08T16:01:12.4518183Z                 :meth:`_events.DialectEvents.do_connect` - event hook that allows
2025-10-08T16:01:12.4518313Z                 full control over DBAPI connection mechanics.
2025-10-08T16:01:12.4518381Z     
2025-10-08T16:01:12.4518477Z                 :ref:`custom_dbapi_args`
2025-10-08T16:01:12.4518545Z     
2025-10-08T16:01:12.4518694Z         :param echo=False: if True, the Engine will log all statements
2025-10-08T16:01:12.4518851Z             as well as a ``repr()`` of their parameter lists to the default log
2025-10-08T16:01:12.4519027Z             handler, which defaults to ``sys.stdout`` for output.   If set to the
2025-10-08T16:01:12.4519194Z             string ``"debug"``, result rows will be printed to the standard output
2025-10-08T16:01:12.4519358Z             as well. The ``echo`` attribute of ``Engine`` can be modified at any
2025-10-08T16:01:12.4519516Z             time to turn logging on and off; direct control of logging is also
2025-10-08T16:01:12.4519666Z             available using the standard Python ``logging`` module.
2025-10-08T16:01:12.4519733Z     
2025-10-08T16:01:12.4519814Z             .. seealso::
2025-10-08T16:01:12.4519894Z     
2025-10-08T16:01:12.4520051Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.4520126Z                 logging.
2025-10-08T16:01:12.4520202Z     
2025-10-08T16:01:12.4520268Z     
2025-10-08T16:01:12.4520416Z         :param echo_pool=False: if True, the connection pool will log
2025-10-08T16:01:12.4520588Z             informational output such as when connections are invalidated
2025-10-08T16:01:12.4520751Z             as well as when connections are recycled to the default log handler,
2025-10-08T16:01:12.4520919Z             which defaults to ``sys.stdout`` for output.   If set to the string
2025-10-08T16:01:12.4521071Z             ``"debug"``, the logging will include pool checkouts and checkins.
2025-10-08T16:01:12.4521244Z             Direct control of logging is also available using the standard Python
2025-10-08T16:01:12.4521338Z             ``logging`` module.
2025-10-08T16:01:12.4521403Z     
2025-10-08T16:01:12.4521481Z             .. seealso::
2025-10-08T16:01:12.4521552Z     
2025-10-08T16:01:12.4521697Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.4521778Z                 logging.
2025-10-08T16:01:12.4521844Z     
2025-10-08T16:01:12.4521910Z     
2025-10-08T16:01:12.4522074Z         :param empty_in_strategy:   No longer used; SQLAlchemy now uses
2025-10-08T16:01:12.4522316Z             "empty set" behavior for IN in all cases.
2025-10-08T16:01:12.4522390Z     
2025-10-08T16:01:12.4522563Z         :param enable_from_linting: defaults to True.  Will emit a warning
2025-10-08T16:01:12.4522730Z             if a given SELECT statement is found to have un-linked FROM elements
2025-10-08T16:01:12.4522835Z             which would cause a cartesian product.
2025-10-08T16:01:12.4523065Z     
2025-10-08T16:01:12.4523176Z             .. versionadded:: 1.4
2025-10-08T16:01:12.4523246Z     
2025-10-08T16:01:12.4523322Z             .. seealso::
2025-10-08T16:01:12.4523390Z     
2025-10-08T16:01:12.4523478Z                 :ref:`change_4737`
2025-10-08T16:01:12.4523544Z     
2025-10-08T16:01:12.4523712Z         :param execution_options: Dictionary execution options which will
2025-10-08T16:01:12.4523823Z             be applied to all connections.  See
2025-10-08T16:01:12.4523992Z             :meth:`~sqlalchemy.engine.Connection.execution_options`
2025-10-08T16:01:12.4524077Z     
2025-10-08T16:01:12.4524238Z         :param future: Use the 2.0 style :class:`_engine.Engine` and
2025-10-08T16:01:12.4524338Z             :class:`_engine.Connection` API.
2025-10-08T16:01:12.4524414Z     
2025-10-08T16:01:12.4524561Z             As of SQLAlchemy 2.0, this parameter is present for backwards
2025-10-08T16:01:12.4524735Z             compatibility only and must remain at its default value of ``True``.
2025-10-08T16:01:12.4524812Z     
2025-10-08T16:01:12.4524955Z             The :paramref:`_sa.create_engine.future` parameter will be
2025-10-08T16:01:12.4525111Z             deprecated in a subsequent 2.x release and eventually removed.
2025-10-08T16:01:12.4525189Z     
2025-10-08T16:01:12.4525277Z             .. versionadded:: 1.4
2025-10-08T16:01:12.4525344Z     
2025-10-08T16:01:12.4525516Z             .. versionchanged:: 2.0 All :class:`_engine.Engine` objects are
2025-10-08T16:01:12.4525678Z                "future" style engines and there is no longer a ``future=False``
2025-10-08T16:01:12.4525772Z                mode of operation.
2025-10-08T16:01:12.4525839Z     
2025-10-08T16:01:12.4525918Z             .. seealso::
2025-10-08T16:01:12.4525994Z     
2025-10-08T16:01:12.4526087Z                 :ref:`migration_20_toplevel`
2025-10-08T16:01:12.4526154Z     
2025-10-08T16:01:12.4526352Z         :param hide_parameters: Boolean, when set to True, SQL statement parameters
2025-10-08T16:01:12.4526522Z             will not be displayed in INFO logging nor will they be formatted into
2025-10-08T16:01:12.4526689Z             the string representation of :class:`.StatementError` objects.
2025-10-08T16:01:12.4526757Z     
2025-10-08T16:01:12.4526846Z             .. versionadded:: 1.3.8
2025-10-08T16:01:12.4526920Z     
2025-10-08T16:01:12.4526998Z             .. seealso::
2025-10-08T16:01:12.4527065Z     
2025-10-08T16:01:12.4527217Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.4527293Z                 logging.
2025-10-08T16:01:12.4527516Z     
2025-10-08T16:01:12.4527740Z         :param implicit_returning=True:  Legacy parameter that may only be set
2025-10-08T16:01:12.4527907Z             to True. In SQLAlchemy 2.0, this parameter does nothing. In order to
2025-10-08T16:01:12.4528078Z             disable "implicit returning" for statements invoked by the ORM,
2025-10-08T16:01:12.4528196Z             configure this on a per-table basis using the
2025-10-08T16:01:12.4528331Z             :paramref:`.Table.implicit_returning` parameter.
2025-10-08T16:01:12.4528402Z     
2025-10-08T16:01:12.4528468Z     
2025-10-08T16:01:12.4528638Z         :param insertmanyvalues_page_size: number of rows to format into an
2025-10-08T16:01:12.4528837Z          INSERT statement when the statement uses "insertmanyvalues" mode, which is
2025-10-08T16:01:12.4529004Z          a paged form of bulk insert that is used for many backends when using
2025-10-08T16:01:12.4529189Z          :term:`executemany` execution typically in conjunction with RETURNING.
2025-10-08T16:01:12.4529480Z          Defaults to 1000, but may also be subject to dialect-specific limiting
2025-10-08T16:01:12.4529647Z          factors which may override this value on a per-statement basis.
2025-10-08T16:01:12.4529720Z     
2025-10-08T16:01:12.4529811Z          .. versionadded:: 2.0
2025-10-08T16:01:12.4529878Z     
2025-10-08T16:01:12.4529961Z          .. seealso::
2025-10-08T16:01:12.4530029Z     
2025-10-08T16:01:12.4530231Z             :ref:`engine_insertmanyvalues`
2025-10-08T16:01:12.4530305Z     
2025-10-08T16:01:12.4530415Z             :ref:`engine_insertmanyvalues_page_size`
2025-10-08T16:01:12.4530493Z     
2025-10-08T16:01:12.4530708Z             :paramref:`_engine.Connection.execution_options.insertmanyvalues_page_size`
2025-10-08T16:01:12.4530776Z     
2025-10-08T16:01:12.4530946Z         :param isolation_level: optional string name of an isolation level
2025-10-08T16:01:12.4531089Z             which will be set on all new connections unconditionally.
2025-10-08T16:01:12.4531250Z             Isolation levels are typically some subset of the string names
2025-10-08T16:01:12.4531364Z             ``"SERIALIZABLE"``, ``"REPEATABLE READ"``,
2025-10-08T16:01:12.4531511Z             ``"READ COMMITTED"``, ``"READ UNCOMMITTED"`` and ``"AUTOCOMMIT"``
2025-10-08T16:01:12.4531604Z             based on backend.
2025-10-08T16:01:12.4531673Z     
2025-10-08T16:01:12.4531827Z             The :paramref:`_sa.create_engine.isolation_level` parameter is
2025-10-08T16:01:12.4531922Z             in contrast to the
2025-10-08T16:01:12.4532070Z             :paramref:`.Connection.execution_options.isolation_level`
2025-10-08T16:01:12.4532198Z             execution option, which may be set on an individual
2025-10-08T16:01:12.4532352Z             :class:`.Connection`, as well as the same parameter passed to
2025-10-08T16:01:12.4532510Z             :meth:`.Engine.execution_options`, where it may be used to create
2025-10-08T16:01:12.4532686Z             multiple engines with different isolation levels that share a common
2025-10-08T16:01:12.4532790Z             connection pool and dialect.
2025-10-08T16:01:12.4532856Z     
2025-10-08T16:01:12.4532954Z             .. versionchanged:: 2.0 The
2025-10-08T16:01:12.4533076Z                :paramref:`_sa.create_engine.isolation_level`
2025-10-08T16:01:12.4533252Z                parameter has been generalized to work on all dialects which support
2025-10-08T16:01:12.4533423Z                the concept of isolation level, and is provided as a more succinct,
2025-10-08T16:01:12.4533593Z                up front configuration switch in contrast to the execution option
2025-10-08T16:01:12.4533717Z                which is more of an ad-hoc programmatic option.
2025-10-08T16:01:12.4533791Z     
2025-10-08T16:01:12.4533869Z             .. seealso::
2025-10-08T16:01:12.4533941Z     
2025-10-08T16:01:12.4534030Z                 :ref:`dbapi_autocommit`
2025-10-08T16:01:12.4534095Z     
2025-10-08T16:01:12.4534234Z         :param json_deserializer: for dialects that support the
2025-10-08T16:01:12.4534322Z             :class:`_types.JSON`
2025-10-08T16:01:12.4534487Z             datatype, this is a Python callable that will convert a JSON string
2025-10-08T16:01:12.4534662Z             to a Python object.  By default, the Python ``json.loads`` function is
2025-10-08T16:01:12.4534733Z             used.
2025-10-08T16:01:12.4534800Z     
2025-10-08T16:01:12.4534969Z             .. versionchanged:: 1.3.7  The SQLite dialect renamed this from
2025-10-08T16:01:12.4535062Z                ``_json_deserializer``.
2025-10-08T16:01:12.4535134Z     
2025-10-08T16:01:12.4535319Z         :param json_serializer: for dialects that support the :class:`_types.JSON`
2025-10-08T16:01:12.4535482Z             datatype, this is a Python callable that will render a given object
2025-10-08T16:01:12.4535637Z             as JSON.   By default, the Python ``json.dumps`` function is used.
2025-10-08T16:01:12.4535704Z     
2025-10-08T16:01:12.4535856Z             .. versionchanged:: 1.3.7  The SQLite dialect renamed this from
2025-10-08T16:01:12.4536032Z                ``_json_serializer``.
2025-10-08T16:01:12.4536102Z     
2025-10-08T16:01:12.4536174Z     
2025-10-08T16:01:12.4536328Z         :param label_length=None: optional integer value which limits
2025-10-08T16:01:12.4536477Z             the size of dynamically generated column labels to that many
2025-10-08T16:01:12.4536611Z             characters. If less than 6, labels are generated as
2025-10-08T16:01:12.4536788Z             "_(counter)". If ``None``, the value of
2025-10-08T16:01:12.4536945Z             ``dialect.max_identifier_length``, which may be affected via the
2025-10-08T16:01:12.4537107Z             :paramref:`_sa.create_engine.max_identifier_length` parameter,
2025-10-08T16:01:12.4537199Z             is used instead.   The value of
2025-10-08T16:01:12.4537312Z             :paramref:`_sa.create_engine.label_length`
2025-10-08T16:01:12.4537513Z             may not be larger than that of
2025-10-08T16:01:12.4537638Z             :paramref:`_sa.create_engine.max_identfier_length`.
2025-10-08T16:01:12.4537716Z     
2025-10-08T16:01:12.4537796Z             .. seealso::
2025-10-08T16:01:12.4537864Z     
2025-10-08T16:01:12.4538003Z                 :paramref:`_sa.create_engine.max_identifier_length`
2025-10-08T16:01:12.4538071Z     
2025-10-08T16:01:12.4538229Z         :param logging_name:  String identifier which will be used within
2025-10-08T16:01:12.4538371Z             the "name" field of logging records generated within the
2025-10-08T16:01:12.4538527Z             "sqlalchemy.engine" logger. Defaults to a hexstring of the
2025-10-08T16:01:12.4538610Z             object's id.
2025-10-08T16:01:12.4538677Z     
2025-10-08T16:01:12.4538754Z             .. seealso::
2025-10-08T16:01:12.4538828Z     
2025-10-08T16:01:12.4538975Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.4539052Z                 logging.
2025-10-08T16:01:12.4539126Z     
2025-10-08T16:01:12.4539288Z                 :paramref:`_engine.Connection.execution_options.logging_token`
2025-10-08T16:01:12.4539358Z     
2025-10-08T16:01:12.4539552Z         :param max_identifier_length: integer; override the max_identifier_length
2025-10-08T16:01:12.4539720Z             determined by the dialect.  if ``None`` or zero, has no effect.  This
2025-10-08T16:01:12.4539895Z             is the database's configured maximum number of characters that may be
2025-10-08T16:01:12.4540052Z             used in a SQL identifier such as a table name, column name, or label
2025-10-08T16:01:12.4540224Z             name. All dialects determine this value automatically, however in the
2025-10-08T16:01:12.4540388Z             case of a new database version for which this value has changed but
2025-10-08T16:01:12.4540557Z             SQLAlchemy's dialect has not been adjusted, the value may be passed
2025-10-08T16:01:12.4540637Z             here.
2025-10-08T16:01:12.4540705Z     
2025-10-08T16:01:12.4540795Z             .. versionadded:: 1.3.9
2025-10-08T16:01:12.4540874Z     
2025-10-08T16:01:12.4540953Z             .. seealso::
2025-10-08T16:01:12.4541021Z     
2025-10-08T16:01:12.4541137Z                 :paramref:`_sa.create_engine.label_length`
2025-10-08T16:01:12.4541205Z     
2025-10-08T16:01:12.4541352Z         :param max_overflow=10: the number of connections to allow in
2025-10-08T16:01:12.4541516Z             connection pool "overflow", that is connections that can be
2025-10-08T16:01:12.4541671Z             opened above and beyond the pool_size setting, which defaults
2025-10-08T16:01:12.4541852Z             to five. this is only used with :class:`~sqlalchemy.pool.QueuePool`.
2025-10-08T16:01:12.4541920Z     
2025-10-08T16:01:12.4542086Z         :param module=None: reference to a Python module object (the module
2025-10-08T16:01:12.4542258Z             itself, not its string name).  Specifies an alternate DBAPI module to
2025-10-08T16:01:12.4542407Z             be used by the engine's dialect.  Each sub-dialect references a
2025-10-08T16:01:12.4542706Z             specific DBAPI which will be imported before first connect.  This
2025-10-08T16:01:12.4542889Z             parameter causes the import to be bypassed, and the given module to
2025-10-08T16:01:12.4543042Z             be used instead. Can be used for testing of DBAPIs as well as to
2025-10-08T16:01:12.4543221Z             inject "mock" DBAPI implementations into the :class:`_engine.Engine`.
2025-10-08T16:01:12.4543290Z     
2025-10-08T16:01:12.4543680Z         :param paramstyle=None: The `paramstyle <https://legacy.python.org/dev/peps/pep-0249/#paramstyle>`_
2025-10-08T16:01:12.4543921Z             to use when rendering bound parameters.  This style defaults to the
2025-10-08T16:01:12.4544176Z             one recommended by the DBAPI itself, which is retrieved from the
2025-10-08T16:01:12.4544427Z             ``.paramstyle`` attribute of the DBAPI.  However, most DBAPIs accept
2025-10-08T16:01:12.4544589Z             more than one paramstyle, and in particular it may be desirable
2025-10-08T16:01:12.4544765Z             to change a "named" paramstyle into a "positional" one, or vice versa.
2025-10-08T16:01:12.4544918Z             When this attribute is passed, it should be one of the values
2025-10-08T16:01:12.4545037Z             ``"qmark"``, ``"numeric"``, ``"named"``, ``"format"`` or
2025-10-08T16:01:12.4545187Z             ``"pyformat"``, and should correspond to a parameter style known
2025-10-08T16:01:12.4545294Z             to be supported by the DBAPI in use.
2025-10-08T16:01:12.4545367Z     
2025-10-08T16:01:12.4545531Z         :param pool=None: an already-constructed instance of
2025-10-08T16:01:12.4545648Z             :class:`~sqlalchemy.pool.Pool`, such as a
2025-10-08T16:01:12.4545810Z             :class:`~sqlalchemy.pool.QueuePool` instance. If non-None, this
2025-10-08T16:01:12.4545964Z             pool will be used directly as the underlying connection pool
2025-10-08T16:01:12.4546111Z             for the engine, bypassing whatever connection parameters are
2025-10-08T16:01:12.4546261Z             present in the URL argument. For information on constructing
2025-10-08T16:01:12.4546408Z             connection pools manually, see :ref:`pooling_toplevel`.
2025-10-08T16:01:12.4546476Z     
2025-10-08T16:01:12.4546616Z         :param poolclass=None: a :class:`~sqlalchemy.pool.Pool`
2025-10-08T16:01:12.4546766Z             subclass, which will be used to create a connection pool
2025-10-08T16:01:12.4546922Z             instance using the connection parameters given in the URL. Note
2025-10-08T16:01:12.4547062Z             this differs from ``pool`` in that you don't actually
2025-10-08T16:01:12.4547219Z             instantiate the pool in this case, you just indicate what type
2025-10-08T16:01:12.4547303Z             of pool to be used.
2025-10-08T16:01:12.4547475Z     
2025-10-08T16:01:12.4547651Z         :param pool_logging_name:  String identifier which will be used within
2025-10-08T16:01:12.4547783Z            the "name" field of logging records generated within the
2025-10-08T16:01:12.4547959Z            "sqlalchemy.pool" logger. Defaults to a hexstring of the object's
2025-10-08T16:01:12.4548029Z            id.
2025-10-08T16:01:12.4548101Z     
2025-10-08T16:01:12.4548180Z            .. seealso::
2025-10-08T16:01:12.4548246Z     
2025-10-08T16:01:12.4548395Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.4548472Z                 logging.
2025-10-08T16:01:12.4548539Z     
2025-10-08T16:01:12.4548719Z         :param pool_pre_ping: boolean, if True will enable the connection pool
2025-10-08T16:01:12.4548865Z             "pre-ping" feature that tests connections for liveness upon
2025-10-08T16:01:12.4548945Z             each checkout.
2025-10-08T16:01:12.4549017Z     
2025-10-08T16:01:12.4549104Z             .. versionadded:: 1.2
2025-10-08T16:01:12.4549176Z     
2025-10-08T16:01:12.4549254Z             .. seealso::
2025-10-08T16:01:12.4549320Z     
2025-10-08T16:01:12.4549428Z                 :ref:`pool_disconnects_pessimistic`
2025-10-08T16:01:12.4549494Z     
2025-10-08T16:01:12.4549767Z         :param pool_size=5: the number of connections to keep open
2025-10-08T16:01:12.4549894Z             inside the connection pool. This used with
2025-10-08T16:01:12.4550004Z             :class:`~sqlalchemy.pool.QueuePool` as
2025-10-08T16:01:12.4550160Z             well as :class:`~sqlalchemy.pool.SingletonThreadPool`.  With
2025-10-08T16:01:12.4550324Z             :class:`~sqlalchemy.pool.QueuePool`, a ``pool_size`` setting
2025-10-08T16:01:12.4550589Z             of 0 indicates no limit; to disable pooling, set ``poolclass`` to
2025-10-08T16:01:12.4550711Z             :class:`~sqlalchemy.pool.NullPool` instead.
2025-10-08T16:01:12.4550777Z     
2025-10-08T16:01:12.4550933Z         :param pool_recycle=-1: this setting causes the pool to recycle
2025-10-08T16:01:12.4551091Z             connections after the given number of seconds has passed. It
2025-10-08T16:01:12.4551233Z             defaults to -1, or no timeout. For example, setting to 3600
2025-10-08T16:01:12.4551386Z             means connections will be recycled after one hour. Note that
2025-10-08T16:01:12.4551532Z             MySQL in particular will disconnect automatically if no
2025-10-08T16:01:12.4551688Z             activity is detected on a connection for eight hours (although
2025-10-08T16:01:12.4551850Z             this is configurable with the MySQLDB connection itself and the
2025-10-08T16:01:12.4551944Z             server configuration as well).
2025-10-08T16:01:12.4552015Z     
2025-10-08T16:01:12.4552099Z             .. seealso::
2025-10-08T16:01:12.4552165Z     
2025-10-08T16:01:12.4552258Z                 :ref:`pool_setting_recycle`
2025-10-08T16:01:12.4552332Z     
2025-10-08T16:01:12.4552446Z         :param pool_reset_on_return='rollback': set the
2025-10-08T16:01:12.4552622Z             :paramref:`_pool.Pool.reset_on_return` parameter of the underlying
2025-10-08T16:01:12.4552761Z             :class:`_pool.Pool` object, which can be set to the values
2025-10-08T16:01:12.4552860Z             ``"rollback"``, ``"commit"``, or ``None``.
2025-10-08T16:01:12.4552935Z     
2025-10-08T16:01:12.4553012Z             .. seealso::
2025-10-08T16:01:12.4553079Z     
2025-10-08T16:01:12.4553179Z                 :ref:`pool_reset_on_return`
2025-10-08T16:01:12.4553244Z     
2025-10-08T16:01:12.4553399Z                 :ref:`dbapi_autocommit_skip_rollback` - a more modern approach
2025-10-08T16:01:12.4553541Z                 to using connections with no transactional instructions
2025-10-08T16:01:12.4553611Z     
2025-10-08T16:01:12.4553767Z         :param pool_timeout=30: number of seconds to wait before giving
2025-10-08T16:01:12.4553906Z             up on getting a connection from the pool. This is only used
2025-10-08T16:01:12.4554082Z             with :class:`~sqlalchemy.pool.QueuePool`. This can be a float but is
2025-10-08T16:01:12.4554260Z             subject to the limitations of Python time functions which may not be
2025-10-08T16:01:12.4554364Z             reliable in the tens of milliseconds.
2025-10-08T16:01:12.4554431Z     
2025-10-08T16:01:12.4554593Z             .. note: don't use 30.0 above, it seems to break with the :param tag
2025-10-08T16:01:12.4554660Z     
2025-10-08T16:01:12.4554840Z         :param pool_use_lifo=False: use LIFO (last-in-first-out) when retrieving
2025-10-08T16:01:12.4554974Z             connections from :class:`.QueuePool` instead of FIFO
2025-10-08T16:01:12.4555140Z             (first-in-first-out). Using LIFO, a server-side timeout scheme can
2025-10-08T16:01:12.4555317Z             reduce the number of connections used during non- peak   periods of
2025-10-08T16:01:12.4555493Z             use.   When planning for server-side timeouts, ensure that a recycle or
2025-10-08T16:01:12.4555663Z             pre-ping strategy is in use to gracefully   handle stale connections.
2025-10-08T16:01:12.4555739Z     
2025-10-08T16:01:12.4555829Z               .. versionadded:: 1.3
2025-10-08T16:01:12.4555902Z     
2025-10-08T16:01:12.4555984Z               .. seealso::
2025-10-08T16:01:12.4556049Z     
2025-10-08T16:01:12.4556223Z                 :ref:`pool_use_lifo`
2025-10-08T16:01:12.4556292Z     
2025-10-08T16:01:12.4556379Z                 :ref:`pool_disconnects`
2025-10-08T16:01:12.4556449Z     
2025-10-08T16:01:12.4556590Z         :param plugins: string list of plugin names to load.  See
2025-10-08T16:01:12.4556704Z             :class:`.CreateEnginePlugin` for background.
2025-10-08T16:01:12.4556776Z     
2025-10-08T16:01:12.4556863Z             .. versionadded:: 1.2.3
2025-10-08T16:01:12.4557006Z     
2025-10-08T16:01:12.4557184Z         :param query_cache_size: size of the cache used to cache the SQL string
2025-10-08T16:01:12.4557301Z          form of queries.  Set to zero to disable caching.
2025-10-08T16:01:12.4557558Z     
2025-10-08T16:01:12.4557809Z          The cache is pruned of its least recently used items when its size reaches
2025-10-08T16:01:12.4557972Z          N * 1.5.  Defaults to 500, meaning the cache will always store at least
2025-10-08T16:01:12.4558154Z          500 SQL statements when filled, and will grow up to 750 items at which
2025-10-08T16:01:12.4558318Z          point it is pruned back down to 500 by removing the 250 least recently
2025-10-08T16:01:12.4558392Z          used items.
2025-10-08T16:01:12.4558464Z     
2025-10-08T16:01:12.4558629Z          Caching is accomplished on a per-statement basis by generating a
2025-10-08T16:01:12.4558806Z          cache key that represents the statement's structure, then generating
2025-10-08T16:01:12.4558969Z          string SQL for the current dialect only if that key is not present
2025-10-08T16:01:12.4559128Z          in the cache.   All statements support caching, however some features
2025-10-08T16:01:12.4559291Z          such as an INSERT with a large set of parameters will intentionally
2025-10-08T16:01:12.4559446Z          bypass the cache.   SQL logging will indicate statistics for each
2025-10-08T16:01:12.4559581Z          statement whether or not it were pull from the cache.
2025-10-08T16:01:12.4559653Z     
2025-10-08T16:01:12.4559828Z          .. note:: some ORM functions related to unit-of-work persistence as well
2025-10-08T16:01:12.4559992Z             as some attribute loading strategies will make use of individual
2025-10-08T16:01:12.4560109Z             per-mapper caches outside of the main cache.
2025-10-08T16:01:12.4560176Z     
2025-10-08T16:01:12.4560248Z     
2025-10-08T16:01:12.4560324Z          .. seealso::
2025-10-08T16:01:12.4560391Z     
2025-10-08T16:01:12.4560485Z             :ref:`sql_caching`
2025-10-08T16:01:12.4560552Z     
2025-10-08T16:01:12.4560637Z          .. versionadded:: 1.4
2025-10-08T16:01:12.4560709Z     
2025-10-08T16:01:12.4560860Z         :param skip_autocommit_rollback: When True, the dialect will
2025-10-08T16:01:12.4561051Z            unconditionally skip all calls to the DBAPI ``connection.rollback()``
2025-10-08T16:01:12.4561229Z            method if the DBAPI connection is confirmed to be in "autocommit" mode.
2025-10-08T16:01:12.4561408Z            The availability of this feature is dialect specific; if not available,
2025-10-08T16:01:12.4561600Z            a ``NotImplementedError`` is raised by the dialect when rollback occurs.
2025-10-08T16:01:12.4561668Z     
2025-10-08T16:01:12.4561746Z            .. seealso::
2025-10-08T16:01:12.4561819Z     
2025-10-08T16:01:12.4561924Z                 :ref:`dbapi_autocommit_skip_rollback`
2025-10-08T16:01:12.4561996Z     
2025-10-08T16:01:12.4562086Z            .. versionadded:: 2.0.43
2025-10-08T16:01:12.4562156Z     
2025-10-08T16:01:12.4562347Z         :param use_insertmanyvalues: True by default, use the "insertmanyvalues"
2025-10-08T16:01:12.4562505Z          execution style for INSERT..RETURNING statements by default.
2025-10-08T16:01:12.4562571Z     
2025-10-08T16:01:12.4562662Z          .. versionadded:: 2.0
2025-10-08T16:01:12.4562728Z     
2025-10-08T16:01:12.4562803Z          .. seealso::
2025-10-08T16:01:12.4562874Z     
2025-10-08T16:01:12.4562971Z             :ref:`engine_insertmanyvalues`
2025-10-08T16:01:12.4563047Z     
2025-10-08T16:01:12.4563119Z         """  # noqa
2025-10-08T16:01:12.4563344Z     
2025-10-08T16:01:12.4563445Z         if "strategy" in kwargs:
2025-10-08T16:01:12.4563540Z             strat = kwargs.pop("strategy")
2025-10-08T16:01:12.4563621Z             if strat == "mock":
2025-10-08T16:01:12.4563716Z                 # this case is deprecated
2025-10-08T16:01:12.4563861Z                 return create_mock_engine(url, **kwargs)  # type: ignore
2025-10-08T16:01:12.4564034Z             else:
2025-10-08T16:01:12.4564186Z                 raise exc.ArgumentError("unknown strategy: %r" % strat)
2025-10-08T16:01:12.4564254Z     
2025-10-08T16:01:12.4564356Z         kwargs.pop("empty_in_strategy", None)
2025-10-08T16:01:12.4564439Z     
2025-10-08T16:01:12.4564523Z         # create url.URL object
2025-10-08T16:01:12.4564614Z         u = _url.make_url(url)
2025-10-08T16:01:12.4564681Z     
2025-10-08T16:01:12.4570620Z         u, plugins, kwargs = u._instantiate_plugins(kwargs)
2025-10-08T16:01:12.4570725Z     
2025-10-08T16:01:12.4570855Z         entrypoint = u._get_entrypoint()
2025-10-08T16:01:12.4570982Z         _is_async = kwargs.pop("_is_async", False)
2025-10-08T16:01:12.4571062Z         if _is_async:
2025-10-08T16:01:12.4571201Z             dialect_cls = entrypoint.get_async_dialect_cls(u)
2025-10-08T16:01:12.4571279Z         else:
2025-10-08T16:01:12.4571394Z             dialect_cls = entrypoint.get_dialect_cls(u)
2025-10-08T16:01:12.4571462Z     
2025-10-08T16:01:12.4571580Z         if kwargs.pop("_coerce_config", False):
2025-10-08T16:01:12.4571647Z     
2025-10-08T16:01:12.4571815Z             def pop_kwarg(key: str, default: Optional[Any] = None) -> Any:
2025-10-08T16:01:12.4571918Z                 value = kwargs.pop(key, default)
2025-10-08T16:01:12.4572032Z                 if key in dialect_cls.engine_config_types:
2025-10-08T16:01:12.4572174Z                     value = dialect_cls.engine_config_types[key](value)
2025-10-08T16:01:12.4572258Z                 return value
2025-10-08T16:01:12.4572325Z     
2025-10-08T16:01:12.4572400Z         else:
2025-10-08T16:01:12.4572509Z             pop_kwarg = kwargs.pop  # type: ignore
2025-10-08T16:01:12.4572574Z     
2025-10-08T16:01:12.4572664Z         dialect_args = {}
2025-10-08T16:01:12.4572763Z         # consume dialect arguments from kwargs
2025-10-08T16:01:12.4572872Z         for k in util.get_cls_kwargs(dialect_cls):
2025-10-08T16:01:12.4572952Z             if k in kwargs:
2025-10-08T16:01:12.4573047Z                 dialect_args[k] = pop_kwarg(k)
2025-10-08T16:01:12.4573121Z     
2025-10-08T16:01:12.4573220Z         dbapi = kwargs.pop("module", None)
2025-10-08T16:01:12.4573301Z         if dbapi is None:
2025-10-08T16:01:12.4573393Z             dbapi_args = {}
2025-10-08T16:01:12.4573461Z     
2025-10-08T16:01:12.4573569Z             if "import_dbapi" in dialect_cls.__dict__:
2025-10-08T16:01:12.4573682Z                 dbapi_meth = dialect_cls.import_dbapi
2025-10-08T16:01:12.4573750Z     
2025-10-08T16:01:12.4573902Z             elif hasattr(dialect_cls, "dbapi") and inspect.ismethod(
2025-10-08T16:01:12.4573993Z                 dialect_cls.dbapi
2025-10-08T16:01:12.4574063Z             ):
2025-10-08T16:01:12.4574160Z                 util.warn_deprecated(
2025-10-08T16:01:12.4574296Z                     "The dbapi() classmethod on dialect classes has been "
2025-10-08T16:01:12.4574444Z                     "renamed to import_dbapi().  Implement an import_dbapi() "
2025-10-08T16:01:12.4574617Z                     f"classmethod directly on class {dialect_cls} to remove this "
2025-10-08T16:01:12.4574774Z                     "warning; the old .dbapi() classmethod may be maintained for "
2025-10-08T16:01:12.4574881Z                     "backwards compatibility.",
2025-10-08T16:01:12.4574957Z                     "2.0",
2025-10-08T16:01:12.4575025Z                 )
2025-10-08T16:01:12.4575125Z                 dbapi_meth = dialect_cls.dbapi
2025-10-08T16:01:12.4575195Z             else:
2025-10-08T16:01:12.4575295Z                 dbapi_meth = dialect_cls.import_dbapi
2025-10-08T16:01:12.4575368Z     
2025-10-08T16:01:12.4575681Z             for k in util.get_func_kwargs(dbapi_meth):
2025-10-08T16:01:12.4575775Z                 if k in kwargs:
2025-10-08T16:01:12.4575878Z                     dbapi_args[k] = pop_kwarg(k)
2025-10-08T16:01:12.4575972Z             dbapi = dbapi_meth(**dbapi_args)
2025-10-08T16:01:12.4576038Z     
2025-10-08T16:01:12.4576136Z         dialect_args["dbapi"] = dbapi
2025-10-08T16:01:12.4576304Z     
2025-10-08T16:01:12.4576487Z         dialect_args.setdefault("compiler_linting", compiler.NO_LINTING)
2025-10-08T16:01:12.4576647Z         enable_from_linting = kwargs.pop("enable_from_linting", True)
2025-10-08T16:01:12.4576732Z         if enable_from_linting:
2025-10-08T16:01:12.4576931Z             dialect_args["compiler_linting"] ^= compiler.COLLECT_CARTESIAN_PRODUCTS
2025-10-08T16:01:12.4576998Z     
2025-10-08T16:01:12.4577086Z         for plugin in plugins:
2025-10-08T16:01:12.4577241Z             plugin.handle_dialect_kwargs(dialect_cls, dialect_args)
2025-10-08T16:01:12.4577307Z     
2025-10-08T16:01:12.4577526Z         # create dialect
2025-10-08T16:01:12.4577639Z         dialect = dialect_cls(**dialect_args)
2025-10-08T16:01:12.4577705Z     
2025-10-08T16:01:12.4577803Z         # assemble connection arguments
2025-10-08T16:01:12.4577935Z         (cargs_tup, cparams) = dialect.create_connect_args(u)
2025-10-08T16:01:12.4578058Z         cparams.update(pop_kwarg("connect_args", {}))
2025-10-08T16:01:12.4578137Z     
2025-10-08T16:01:12.4578326Z         if "async_fallback" in cparams and util.asbool(cparams["async_fallback"]):
2025-10-08T16:01:12.4578416Z             util.warn_deprecated(
2025-10-08T16:01:12.4578588Z                 "The async_fallback dialect argument is deprecated and will be "
2025-10-08T16:01:12.4578685Z                 "removed in SQLAlchemy 2.1.",
2025-10-08T16:01:12.4578765Z                 "2.0",
2025-10-08T16:01:12.4578835Z             )
2025-10-08T16:01:12.4578902Z     
2025-10-08T16:01:12.4579014Z         cargs = list(cargs_tup)  # allow mutability
2025-10-08T16:01:12.4579081Z     
2025-10-08T16:01:12.4579179Z         # look for existing pool or create
2025-10-08T16:01:12.4579280Z         pool = pop_kwarg("pool", None)
2025-10-08T16:01:12.4579360Z         if pool is None:
2025-10-08T16:01:12.4579427Z     
2025-10-08T16:01:12.4579508Z             def connect(
2025-10-08T16:01:12.4579661Z                 connection_record: Optional[ConnectionPoolEntry] = None,
2025-10-08T16:01:12.4579755Z             ) -> DBAPIConnection:
2025-10-08T16:01:12.4579850Z                 if dialect._has_events:
2025-10-08T16:01:12.4579962Z                     for fn in dialect.dispatch.do_connect:
2025-10-08T16:01:12.4580064Z                         connection = cast(
2025-10-08T16:01:12.4580159Z                             DBAPIConnection,
2025-10-08T16:01:12.4580289Z                             fn(dialect, connection_record, cargs, cparams),
2025-10-08T16:01:12.4580372Z                         )
2025-10-08T16:01:12.4580475Z                         if connection is not None:
2025-10-08T16:01:12.4580567Z                             return connection
2025-10-08T16:01:12.4580644Z     
2025-10-08T16:01:12.4580755Z                 return dialect.connect(*cargs, **cparams)
2025-10-08T16:01:12.4580830Z     
2025-10-08T16:01:12.4580934Z             creator = pop_kwarg("creator", connect)
2025-10-08T16:01:12.4581002Z     
2025-10-08T16:01:12.4581116Z             poolclass = pop_kwarg("poolclass", None)
2025-10-08T16:01:12.4581208Z             if poolclass is None:
2025-10-08T16:01:12.4581332Z                 poolclass = dialect.get_dialect_pool_class(u)
2025-10-08T16:01:12.4581434Z             pool_args = {"dialect": dialect}
2025-10-08T16:01:12.4581502Z     
2025-10-08T16:01:12.4581652Z             # consume pool arguments from kwargs, translating a few of
2025-10-08T16:01:12.4581739Z             # the arguments
2025-10-08T16:01:12.4581845Z             for k in util.get_cls_kwargs(poolclass):
2025-10-08T16:01:12.4581955Z                 tk = _pool_translate_kwargs.get(k, k)
2025-10-08T16:01:12.4582153Z                 if tk in kwargs:
2025-10-08T16:01:12.4582256Z                     pool_args[k] = pop_kwarg(tk)
2025-10-08T16:01:12.4582329Z     
2025-10-08T16:01:12.4582415Z             for plugin in plugins:
2025-10-08T16:01:12.4582543Z                 plugin.handle_pool_kwargs(poolclass, pool_args)
2025-10-08T16:01:12.4582618Z     
2025-10-08T16:01:12.4582722Z             pool = poolclass(creator, **pool_args)
2025-10-08T16:01:12.4582894Z         else:
2025-10-08T16:01:12.4582988Z             pool._dialect = dialect
2025-10-08T16:01:12.4583054Z     
2025-10-08T16:01:12.4583127Z         if (
2025-10-08T16:01:12.4583224Z             hasattr(pool, "_is_asyncio")
2025-10-08T16:01:12.4583335Z             and pool._is_asyncio is not dialect.is_async
2025-10-08T16:01:12.4583411Z         ):
2025-10-08T16:01:12.4583501Z             raise exc.ArgumentError(
2025-10-08T16:01:12.4583626Z                 f"Pool class {pool.__class__.__name__} cannot be "
2025-10-08T16:01:12.4583766Z                 f"used with {'non-' if not dialect.is_async else ''}"
2025-10-08T16:01:12.4583848Z                 "asyncio engine",
2025-10-08T16:01:12.4583930Z                 code="pcls",
2025-10-08T16:01:12.4584003Z             )
2025-10-08T16:01:12.4584068Z     
2025-10-08T16:01:12.4584144Z         # create engine.
2025-10-08T16:01:12.4584242Z         if not pop_kwarg("future", True):
2025-10-08T16:01:12.4584329Z             raise exc.ArgumentError(
2025-10-08T16:01:12.4584446Z                 "The 'future' parameter passed to "
2025-10-08T16:01:12.4584552Z                 "create_engine() may only be set to True."
2025-10-08T16:01:12.4584624Z             )
2025-10-08T16:01:12.4584696Z     
2025-10-08T16:01:12.4584781Z         engineclass = base.Engine
2025-10-08T16:01:12.4584846Z     
2025-10-08T16:01:12.4584930Z         engine_args = {}
2025-10-08T16:01:12.4585038Z         for k in util.get_cls_kwargs(engineclass):
2025-10-08T16:01:12.4585116Z             if k in kwargs:
2025-10-08T16:01:12.4585219Z                 engine_args[k] = pop_kwarg(k)
2025-10-08T16:01:12.4585293Z     
2025-10-08T16:01:12.4585472Z         # internal flags used by the test suite for instrumenting / proxying
2025-10-08T16:01:12.4585559Z         # engines with mocks etc.
2025-10-08T16:01:12.4585671Z         _initialize = kwargs.pop("_initialize", True)
2025-10-08T16:01:12.4585744Z     
2025-10-08T16:01:12.4585833Z         # all kwargs should be consumed
2025-10-08T16:01:12.4585908Z         if kwargs:
2025-10-08T16:01:12.4585997Z >           raise TypeError(
2025-10-08T16:01:12.4586124Z                 "Invalid argument(s) %s sent to create_engine(), "
2025-10-08T16:01:12.4586265Z                 "using configuration %s/%s/%s.  Please check that the "
2025-10-08T16:01:12.4586421Z                 "keyword arguments are appropriate for this combination "
2025-10-08T16:01:12.4586504Z                 "of components."
2025-10-08T16:01:12.4586579Z                 % (
2025-10-08T16:01:12.4586681Z                     ",".join("'%s'" % k for k in kwargs),
2025-10-08T16:01:12.4586777Z                     dialect.__class__.__name__,
2025-10-08T16:01:12.4586872Z                     pool.__class__.__name__,
2025-10-08T16:01:12.4586958Z                     engineclass.__name__,
2025-10-08T16:01:12.4587028Z                 )
2025-10-08T16:01:12.4587104Z             )
2025-10-08T16:01:12.4587914Z E           TypeError: Invalid argument(s) 'pool_size','max_overflow' sent to create_engine(), using configuration SQLiteDialect_pysqlite/StaticPool/Engine.  Please check that the keyword arguments are appropriate for this combination of components.
2025-10-08T16:01:12.4587927Z 
2025-10-08T16:01:12.4588263Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/create.py:715: TypeError
2025-10-08T16:01:12.4588526Z _ ERROR at setup of TestDatabaseSchemaImmutability.test_community_table_columns_unchanged _
2025-10-08T16:01:12.4588531Z 
2025-10-08T16:01:12.4588613Z     @pytest.fixture
2025-10-08T16:01:12.4588692Z     def app():
2025-10-08T16:01:12.4588899Z         """Create test app instance"""
2025-10-08T16:01:12.4588999Z >       app = create_app(TestConfig)
2025-10-08T16:01:12.4589076Z               ^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.4589081Z 
2025-10-08T16:01:12.4589174Z tests/test_field_consistency.py:30: 
2025-10-08T16:01:12.4589296Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:12.4589386Z app/__init__.py:141: in create_app
2025-10-08T16:01:12.4589569Z     db.init_app(app)
2025-10-08T16:01:12.4589909Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask_sqlalchemy/extension.py:374: in init_app
2025-10-08T16:01:12.4590035Z     engines[key] = self._make_engine(key, options, app)
2025-10-08T16:01:12.4590128Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.4590470Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask_sqlalchemy/extension.py:665: in _make_engine
2025-10-08T16:01:12.4590593Z     return sa.engine_from_config(options, prefix="")
2025-10-08T16:01:12.4590689Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.4591046Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/create.py:838: in engine_from_config
2025-10-08T16:01:12.4591142Z     return create_engine(url, **options)
2025-10-08T16:01:12.4591227Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.4591313Z <string>:2: in create_engine
2025-10-08T16:01:12.4591392Z     ???
2025-10-08T16:01:12.4591718Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/util/deprecations.py:281: in warned
2025-10-08T16:01:12.4591859Z     return fn(*args, **kwargs)  # type: ignore[no-any-return]
2025-10-08T16:01:12.4591942Z            ^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:12.4592055Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:12.4592060Z 
2025-10-08T16:01:12.4592231Z url = 'sqlite:///:memory:', kwargs = {'max_overflow': 30, 'pool_size': 10}
2025-10-08T16:01:12.4592336Z u = sqlite:///:memory:, plugins = []
2025-10-08T16:01:12.4592571Z entrypoint = <class 'sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite'>
2025-10-08T16:01:12.4592653Z _is_async = False
2025-10-08T16:01:12.4592834Z pop_kwarg = <function create_engine.<locals>.pop_kwarg at 0x7f30913dfa60>
2025-10-08T16:01:12.4593251Z dialect_args = {'compiler_linting': 1, 'dbapi': <module 'sqlite3.dbapi2' from '/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/sqlite3/dbapi2.py'>}
2025-10-08T16:01:12.4593260Z 
2025-10-08T16:01:12.4593357Z     @util.deprecated_params(
2025-10-08T16:01:12.4593432Z         strategy=(
2025-10-08T16:01:12.4593508Z             "1.4",
2025-10-08T16:01:12.4593682Z             "The :paramref:`_sa.create_engine.strategy` keyword is deprecated, "
2025-10-08T16:01:12.4593820Z             "and the only argument accepted is 'mock'; please use "
2025-10-08T16:01:12.4593968Z             ":func:`.create_mock_engine` going forward.  For general "
2025-10-08T16:01:12.4594144Z             "customization of create_engine which may have been accomplished "
2025-10-08T16:01:12.4594287Z             "using strategies, see :class:`.CreateEnginePlugin`.",
2025-10-08T16:01:12.4594364Z         ),
2025-10-08T16:01:12.4594448Z         empty_in_strategy=(
2025-10-08T16:01:12.4594517Z             "1.4",
2025-10-08T16:01:12.4594684Z             "The :paramref:`_sa.create_engine.empty_in_strategy` keyword is "
2025-10-08T16:01:12.4594849Z             "deprecated, and no longer has any effect.  All IN expressions "
2025-10-08T16:01:12.4594947Z             "are now rendered using "
2025-10-08T16:01:12.4595107Z             'the "expanding parameter" strategy which renders a set of bound'
2025-10-08T16:01:12.4595264Z             'expressions, or an "empty set" SELECT, at statement execution'
2025-10-08T16:01:12.4595344Z             "time.",
2025-10-08T16:01:12.4595413Z         ),
2025-10-08T16:01:12.4595496Z         implicit_returning=(
2025-10-08T16:01:12.4595578Z             "2.0",
2025-10-08T16:01:12.4595884Z             "The :paramref:`_sa.create_engine.implicit_returning` parameter "
2025-10-08T16:01:12.4596039Z             "is deprecated and will be removed in a future release. ",
2025-10-08T16:01:12.4596107Z         ),
2025-10-08T16:01:12.4596175Z     )
2025-10-08T16:01:12.4596359Z     def create_engine(url: Union[str, _url.URL], **kwargs: Any) -> Engine:
2025-10-08T16:01:12.4596478Z         """Create a new :class:`_engine.Engine` instance.
2025-10-08T16:01:12.4596620Z     
2025-10-08T16:01:12.4596815Z         The standard calling form is to send the :ref:`URL <database_urls>` as the
2025-10-08T16:01:12.4596924Z         first positional argument, usually a string
2025-10-08T16:01:12.4597090Z         that indicates database dialect and connection arguments::
2025-10-08T16:01:12.4597157Z     
2025-10-08T16:01:12.4597840Z             engine = create_engine("***localhost/test")
2025-10-08T16:01:12.4597985Z     
2025-10-08T16:01:12.4598105Z         .. note::
2025-10-08T16:01:12.4598210Z     
2025-10-08T16:01:12.4598510Z             Please review :ref:`database_urls` for general guidelines in composing
2025-10-08T16:01:12.4598777Z             URL strings.  In particular, special characters, such as those often
2025-10-08T16:01:12.4599037Z             part of passwords, must be URL encoded to be properly parsed.
2025-10-08T16:01:12.4599161Z     
2025-10-08T16:01:12.4599390Z         Additional keyword arguments may then follow it which
2025-10-08T16:01:12.4599693Z         establish various options on the resulting :class:`_engine.Engine`
2025-10-08T16:01:12.4599960Z         and its underlying :class:`.Dialect` and :class:`_pool.Pool`
2025-10-08T16:01:12.4600102Z         constructs::
2025-10-08T16:01:12.4600221Z     
2025-10-08T16:01:12.4600369Z             engine = create_engine(
2025-10-08T16:01:12.4600700Z                 "***hostname/dbname",
2025-10-08T16:01:12.4600846Z                 pool_recycle=3600,
2025-10-08T16:01:12.4600991Z                 echo=True,
2025-10-08T16:01:12.4601109Z             )
2025-10-08T16:01:12.4601223Z     
2025-10-08T16:01:12.4601391Z         The string form of the URL is
2025-10-08T16:01:12.4601677Z         ``dialect[+driver]://user:password@host/dbname[?key=value..]``, where
2025-10-08T16:01:12.4601918Z         ``dialect`` is a database name such as ``mysql``, ``oracle``,
2025-10-08T16:01:12.4602196Z         ``postgresql``, etc., and ``driver`` the name of a DBAPI, such as
2025-10-08T16:01:12.4602444Z         ``psycopg2``, ``pyodbc``, ``cx_oracle``, etc.  Alternatively,
2025-10-08T16:01:12.4602741Z         the URL can be an instance of :class:`~sqlalchemy.engine.url.URL`.
2025-10-08T16:01:12.4602857Z     
2025-10-08T16:01:12.4603093Z         ``**kwargs`` takes a wide variety of options which are routed
2025-10-08T16:01:12.4603407Z         towards their appropriate components.  Arguments may be specific to
2025-10-08T16:01:12.4603663Z         the :class:`_engine.Engine`, the underlying :class:`.Dialect`,
2025-10-08T16:01:12.4603798Z         as well as the
2025-10-08T16:01:12.4604104Z         :class:`_pool.Pool`.  Specific dialects also accept keyword arguments that
2025-10-08T16:01:12.4604353Z         are unique to that dialect.   Here, we describe the parameters
2025-10-08T16:01:12.4604590Z         that are common to most :func:`_sa.create_engine()` usage.
2025-10-08T16:01:12.4604711Z     
2025-10-08T16:01:12.4605029Z         Once established, the newly resulting :class:`_engine.Engine` will
2025-10-08T16:01:12.4605356Z         request a connection from the underlying :class:`_pool.Pool` once
2025-10-08T16:01:12.4605692Z         :meth:`_engine.Engine.connect` is called, or a method which depends on it
2025-10-08T16:01:12.4605941Z         such as :meth:`_engine.Engine.execute` is invoked.   The
2025-10-08T16:01:12.4606108Z         :class:`_pool.Pool` in turn
2025-10-08T16:01:12.4606397Z         will establish the first actual DBAPI connection when this request
2025-10-08T16:01:12.4606697Z         is received.   The :func:`_sa.create_engine` call itself does **not**
2025-10-08T16:01:12.4607162Z         establish any actual DBAPI connections directly.
2025-10-08T16:01:12.4607307Z     
2025-10-08T16:01:12.4607674Z         .. seealso::
2025-10-08T16:01:12.4607802Z     
2025-10-08T16:01:12.4607962Z             :doc:`/core/engines`
2025-10-08T16:01:12.4608097Z     
2025-10-08T16:01:12.4608260Z             :doc:`/dialects/index`
2025-10-08T16:01:12.4608386Z     
2025-10-08T16:01:12.4608570Z             :ref:`connections_toplevel`
2025-10-08T16:01:12.4608929Z     
2025-10-08T16:01:12.4609220Z         :param connect_args: a dictionary of options which will be
2025-10-08T16:01:12.4609465Z             passed directly to the DBAPI's ``connect()`` method as
2025-10-08T16:01:12.4609677Z             additional keyword arguments.  See the example
2025-10-08T16:01:12.4609853Z             at :ref:`custom_dbapi_args`.
2025-10-08T16:01:12.4609973Z     
2025-10-08T16:01:12.4610244Z         :param creator: a callable which returns a DBAPI connection.
2025-10-08T16:01:12.4610507Z             This creation function will be passed to the underlying
2025-10-08T16:01:12.4610779Z             connection pool and will be used to create all new database
2025-10-08T16:01:12.4611035Z             connections. Usage of this function causes connection
2025-10-08T16:01:12.4611304Z             parameters specified in the URL argument to be bypassed.
2025-10-08T16:01:12.4611425Z     
2025-10-08T16:01:12.4611618Z             This hook is not as flexible as the newer
2025-10-08T16:01:12.4611944Z             :meth:`_events.DialectEvents.do_connect` hook which allows complete
2025-10-08T16:01:12.4612253Z             control over how a connection is made to the database, given the full
2025-10-08T16:01:12.4612457Z             set of URL arguments and state beforehand.
2025-10-08T16:01:12.4612575Z     
2025-10-08T16:01:12.4612723Z             .. seealso::
2025-10-08T16:01:12.4612849Z     
2025-10-08T16:01:12.4613159Z                 :meth:`_events.DialectEvents.do_connect` - event hook that allows
2025-10-08T16:01:12.4613387Z                 full control over DBAPI connection mechanics.
2025-10-08T16:01:12.4613507Z     
2025-10-08T16:01:12.4613664Z                 :ref:`custom_dbapi_args`
2025-10-08T16:01:12.4613786Z     
2025-10-08T16:01:12.4614056Z         :param echo=False: if True, the Engine will log all statements
2025-10-08T16:01:12.4614332Z             as well as a ``repr()`` of their parameter lists to the default log
2025-10-08T16:01:12.4614659Z             handler, which defaults to ``sys.stdout`` for output.   If set to the
2025-10-08T16:01:12.4614950Z             string ``"debug"``, result rows will be printed to the standard output
2025-10-08T16:01:12.4615238Z             as well. The ``echo`` attribute of ``Engine`` can be modified at any
2025-10-08T16:01:12.4615509Z             time to turn logging on and off; direct control of logging is also
2025-10-08T16:01:12.4615763Z             available using the standard Python ``logging`` module.
2025-10-08T16:01:12.4615889Z     
2025-10-08T16:01:12.4616021Z             .. seealso::
2025-10-08T16:01:12.4616155Z     
2025-10-08T16:01:12.4616452Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.4616583Z                 logging.
2025-10-08T16:01:12.4616710Z     
2025-10-08T16:01:12.4616778Z     
2025-10-08T16:01:12.4616938Z         :param echo_pool=False: if True, the connection pool will log
2025-10-08T16:01:12.4617111Z             informational output such as when connections are invalidated
2025-10-08T16:01:12.4617285Z             as well as when connections are recycled to the default log handler,
2025-10-08T16:01:12.4617686Z             which defaults to ``sys.stdout`` for output.   If set to the string
2025-10-08T16:01:12.4617853Z             ``"debug"``, the logging will include pool checkouts and checkins.
2025-10-08T16:01:12.4618028Z             Direct control of logging is also available using the standard Python
2025-10-08T16:01:12.4618120Z             ``logging`` module.
2025-10-08T16:01:12.4618189Z     
2025-10-08T16:01:12.4618271Z             .. seealso::
2025-10-08T16:01:12.4618510Z     
2025-10-08T16:01:12.4618676Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.4618752Z                 logging.
2025-10-08T16:01:12.4618825Z     
2025-10-08T16:01:12.4618891Z     
2025-10-08T16:01:12.4619049Z         :param empty_in_strategy:   No longer used; SQLAlchemy now uses
2025-10-08T16:01:12.4619162Z             "empty set" behavior for IN in all cases.
2025-10-08T16:01:12.4619334Z     
2025-10-08T16:01:12.4619503Z         :param enable_from_linting: defaults to True.  Will emit a warning
2025-10-08T16:01:12.4619672Z             if a given SELECT statement is found to have un-linked FROM elements
2025-10-08T16:01:12.4619778Z             which would cause a cartesian product.
2025-10-08T16:01:12.4619849Z     
2025-10-08T16:01:12.4619941Z             .. versionadded:: 1.4
2025-10-08T16:01:12.4620007Z     
2025-10-08T16:01:12.4620089Z             .. seealso::
2025-10-08T16:01:12.4620155Z     
2025-10-08T16:01:12.4620243Z                 :ref:`change_4737`
2025-10-08T16:01:12.4620318Z     
2025-10-08T16:01:12.4620486Z         :param execution_options: Dictionary execution options which will
2025-10-08T16:01:12.4620598Z             be applied to all connections.  See
2025-10-08T16:01:12.4620754Z             :meth:`~sqlalchemy.engine.Connection.execution_options`
2025-10-08T16:01:12.4620821Z     
2025-10-08T16:01:12.4620981Z         :param future: Use the 2.0 style :class:`_engine.Engine` and
2025-10-08T16:01:12.4621081Z             :class:`_engine.Connection` API.
2025-10-08T16:01:12.4621148Z     
2025-10-08T16:01:12.4621305Z             As of SQLAlchemy 2.0, this parameter is present for backwards
2025-10-08T16:01:12.4621481Z             compatibility only and must remain at its default value of ``True``.
2025-10-08T16:01:12.4621559Z     
2025-10-08T16:01:12.4621704Z             The :paramref:`_sa.create_engine.future` parameter will be
2025-10-08T16:01:12.4621863Z             deprecated in a subsequent 2.x release and eventually removed.
2025-10-08T16:01:12.4621937Z     
2025-10-08T16:01:12.4622024Z             .. versionadded:: 1.4
2025-10-08T16:01:12.4622090Z     
2025-10-08T16:01:12.4622254Z             .. versionchanged:: 2.0 All :class:`_engine.Engine` objects are
2025-10-08T16:01:12.4622414Z                "future" style engines and there is no longer a ``future=False``
2025-10-08T16:01:12.4622496Z                mode of operation.
2025-10-08T16:01:12.4622572Z     
2025-10-08T16:01:12.4622651Z             .. seealso::
2025-10-08T16:01:12.4622722Z     
2025-10-08T16:01:12.4622815Z                 :ref:`migration_20_toplevel`
2025-10-08T16:01:12.4622883Z     
2025-10-08T16:01:12.4623080Z         :param hide_parameters: Boolean, when set to True, SQL statement parameters
2025-10-08T16:01:12.4623250Z             will not be displayed in INFO logging nor will they be formatted into
2025-10-08T16:01:12.4623408Z             the string representation of :class:`.StatementError` objects.
2025-10-08T16:01:12.4623480Z     
2025-10-08T16:01:12.4623574Z             .. versionadded:: 1.3.8
2025-10-08T16:01:12.4623640Z     
2025-10-08T16:01:12.4623721Z             .. seealso::
2025-10-08T16:01:12.4623786Z     
2025-10-08T16:01:12.4623936Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.4624012Z                 logging.
2025-10-08T16:01:12.4624078Z     
2025-10-08T16:01:12.4624260Z         :param implicit_returning=True:  Legacy parameter that may only be set
2025-10-08T16:01:12.4624427Z             to True. In SQLAlchemy 2.0, this parameter does nothing. In order to
2025-10-08T16:01:12.4624592Z             disable "implicit returning" for statements invoked by the ORM,
2025-10-08T16:01:12.4624716Z             configure this on a per-table basis using the
2025-10-08T16:01:12.4624846Z             :paramref:`.Table.implicit_returning` parameter.
2025-10-08T16:01:12.4624920Z     
2025-10-08T16:01:12.4624986Z     
2025-10-08T16:01:12.4625238Z         :param insertmanyvalues_page_size: number of rows to format into an
2025-10-08T16:01:12.4625439Z          INSERT statement when the statement uses "insertmanyvalues" mode, which is
2025-10-08T16:01:12.4625604Z          a paged form of bulk insert that is used for many backends when using
2025-10-08T16:01:12.4625782Z          :term:`executemany` execution typically in conjunction with RETURNING.
2025-10-08T16:01:12.4625956Z          Defaults to 1000, but may also be subject to dialect-specific limiting
2025-10-08T16:01:12.4626201Z          factors which may override this value on a per-statement basis.
2025-10-08T16:01:12.4626273Z     
2025-10-08T16:01:12.4626362Z          .. versionadded:: 2.0
2025-10-08T16:01:12.4626430Z     
2025-10-08T16:01:12.4626512Z          .. seealso::
2025-10-08T16:01:12.4626579Z     
2025-10-08T16:01:12.4626677Z             :ref:`engine_insertmanyvalues`
2025-10-08T16:01:12.4626749Z     
2025-10-08T16:01:12.4626857Z             :ref:`engine_insertmanyvalues_page_size`
2025-10-08T16:01:12.4626923Z     
2025-10-08T16:01:12.4627151Z             :paramref:`_engine.Connection.execution_options.insertmanyvalues_page_size`
2025-10-08T16:01:12.4627218Z     
2025-10-08T16:01:12.4627556Z         :param isolation_level: optional string name of an isolation level
2025-10-08T16:01:12.4627714Z             which will be set on all new connections unconditionally.
2025-10-08T16:01:12.4627874Z             Isolation levels are typically some subset of the string names
2025-10-08T16:01:12.4627990Z             ``"SERIALIZABLE"``, ``"REPEATABLE READ"``,
2025-10-08T16:01:12.4628141Z             ``"READ COMMITTED"``, ``"READ UNCOMMITTED"`` and ``"AUTOCOMMIT"``
2025-10-08T16:01:12.4628225Z             based on backend.
2025-10-08T16:01:12.4628298Z     
2025-10-08T16:01:12.4628449Z             The :paramref:`_sa.create_engine.isolation_level` parameter is
2025-10-08T16:01:12.4628533Z             in contrast to the
2025-10-08T16:01:12.4628686Z             :paramref:`.Connection.execution_options.isolation_level`
2025-10-08T16:01:12.4628842Z             execution option, which may be set on an individual
2025-10-08T16:01:12.4628995Z             :class:`.Connection`, as well as the same parameter passed to
2025-10-08T16:01:12.4629155Z             :meth:`.Engine.execution_options`, where it may be used to create
2025-10-08T16:01:12.4629332Z             multiple engines with different isolation levels that share a common
2025-10-08T16:01:12.4629429Z             connection pool and dialect.
2025-10-08T16:01:12.4629502Z     
2025-10-08T16:01:12.4629595Z             .. versionchanged:: 2.0 The
2025-10-08T16:01:12.4629722Z                :paramref:`_sa.create_engine.isolation_level`
2025-10-08T16:01:12.4629899Z                parameter has been generalized to work on all dialects which support
2025-10-08T16:01:12.4630076Z                the concept of isolation level, and is provided as a more succinct,
2025-10-08T16:01:12.4630242Z                up front configuration switch in contrast to the execution option
2025-10-08T16:01:12.4630369Z                which is more of an ad-hoc programmatic option.
2025-10-08T16:01:12.4630441Z     
2025-10-08T16:01:12.4630520Z             .. seealso::
2025-10-08T16:01:12.4630587Z     
2025-10-08T16:01:12.4630680Z                 :ref:`dbapi_autocommit`
2025-10-08T16:01:12.4630746Z     
2025-10-08T16:01:12.4630884Z         :param json_deserializer: for dialects that support the
2025-10-08T16:01:12.4630977Z             :class:`_types.JSON`
2025-10-08T16:01:12.4631149Z             datatype, this is a Python callable that will convert a JSON string
2025-10-08T16:01:12.4631321Z             to a Python object.  By default, the Python ``json.loads`` function is
2025-10-08T16:01:12.4631394Z             used.
2025-10-08T16:01:12.4631462Z     
2025-10-08T16:01:12.4631629Z             .. versionchanged:: 1.3.7  The SQLite dialect renamed this from
2025-10-08T16:01:12.4631720Z                ``_json_deserializer``.
2025-10-08T16:01:12.4631789Z     
2025-10-08T16:01:12.4632098Z         :param json_serializer: for dialects that support the :class:`_types.JSON`
2025-10-08T16:01:12.4632265Z             datatype, this is a Python callable that will render a given object
2025-10-08T16:01:12.4632420Z             as JSON.   By default, the Python ``json.dumps`` function is used.
2025-10-08T16:01:12.4632488Z     
2025-10-08T16:01:12.4632644Z             .. versionchanged:: 1.3.7  The SQLite dialect renamed this from
2025-10-08T16:01:12.4632735Z                ``_json_serializer``.
2025-10-08T16:01:12.4632905Z     
2025-10-08T16:01:12.4632972Z     
2025-10-08T16:01:12.4633126Z         :param label_length=None: optional integer value which limits
2025-10-08T16:01:12.4633274Z             the size of dynamically generated column labels to that many
2025-10-08T16:01:12.4633407Z             characters. If less than 6, labels are generated as
2025-10-08T16:01:12.4633507Z             "_(counter)". If ``None``, the value of
2025-10-08T16:01:12.4633666Z             ``dialect.max_identifier_length``, which may be affected via the
2025-10-08T16:01:12.4633832Z             :paramref:`_sa.create_engine.max_identifier_length` parameter,
2025-10-08T16:01:12.4633924Z             is used instead.   The value of
2025-10-08T16:01:12.4634033Z             :paramref:`_sa.create_engine.label_length`
2025-10-08T16:01:12.4634128Z             may not be larger than that of
2025-10-08T16:01:12.4634251Z             :paramref:`_sa.create_engine.max_identfier_length`.
2025-10-08T16:01:12.4634327Z     
2025-10-08T16:01:12.4634406Z             .. seealso::
2025-10-08T16:01:12.4634472Z     
2025-10-08T16:01:12.4634607Z                 :paramref:`_sa.create_engine.max_identifier_length`
2025-10-08T16:01:12.4634675Z     
2025-10-08T16:01:12.4634831Z         :param logging_name:  String identifier which will be used within
2025-10-08T16:01:12.4634972Z             the "name" field of logging records generated within the
2025-10-08T16:01:12.4635123Z             "sqlalchemy.engine" logger. Defaults to a hexstring of the
2025-10-08T16:01:12.4635200Z             object's id.
2025-10-08T16:01:12.4635274Z     
2025-10-08T16:01:12.4635355Z             .. seealso::
2025-10-08T16:01:12.4635426Z     
2025-10-08T16:01:12.4635573Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.4635647Z                 logging.
2025-10-08T16:01:12.4635719Z     
2025-10-08T16:01:12.4635882Z                 :paramref:`_engine.Connection.execution_options.logging_token`
2025-10-08T16:01:12.4635953Z     
2025-10-08T16:01:12.4636139Z         :param max_identifier_length: integer; override the max_identifier_length
2025-10-08T16:01:12.4636306Z             determined by the dialect.  if ``None`` or zero, has no effect.  This
2025-10-08T16:01:12.4636471Z             is the database's configured maximum number of characters that may be
2025-10-08T16:01:12.4636639Z             used in a SQL identifier such as a table name, column name, or label
2025-10-08T16:01:12.4636811Z             name. All dialects determine this value automatically, however in the
2025-10-08T16:01:12.4636976Z             case of a new database version for which this value has changed but
2025-10-08T16:01:12.4637147Z             SQLAlchemy's dialect has not been adjusted, the value may be passed
2025-10-08T16:01:12.4637218Z             here.
2025-10-08T16:01:12.4637290Z     
2025-10-08T16:01:12.4637538Z             .. versionadded:: 1.3.9
2025-10-08T16:01:12.4637609Z     
2025-10-08T16:01:12.4637696Z             .. seealso::
2025-10-08T16:01:12.4637767Z     
2025-10-08T16:01:12.4637885Z                 :paramref:`_sa.create_engine.label_length`
2025-10-08T16:01:12.4637952Z     
2025-10-08T16:01:12.4638098Z         :param max_overflow=10: the number of connections to allow in
2025-10-08T16:01:12.4638255Z             connection pool "overflow", that is connections that can be
2025-10-08T16:01:12.4638409Z             opened above and beyond the pool_size setting, which defaults
2025-10-08T16:01:12.4638576Z             to five. this is only used with :class:`~sqlalchemy.pool.QueuePool`.
2025-10-08T16:01:12.4638648Z     
2025-10-08T16:01:12.4638971Z         :param module=None: reference to a Python module object (the module
2025-10-08T16:01:12.4639147Z             itself, not its string name).  Specifies an alternate DBAPI module to
2025-10-08T16:01:12.4639296Z             be used by the engine's dialect.  Each sub-dialect references a
2025-10-08T16:01:12.4639463Z             specific DBAPI which will be imported before first connect.  This
2025-10-08T16:01:12.4639765Z             parameter causes the import to be bypassed, and the given module to
2025-10-08T16:01:12.4639917Z             be used instead. Can be used for testing of DBAPIs as well as to
2025-10-08T16:01:12.4640091Z             inject "mock" DBAPI implementations into the :class:`_engine.Engine`.
2025-10-08T16:01:12.4640163Z     
2025-10-08T16:01:12.4640452Z         :param paramstyle=None: The `paramstyle <https://legacy.python.org/dev/peps/pep-0249/#paramstyle>`_
2025-10-08T16:01:12.4640621Z             to use when rendering bound parameters.  This style defaults to the
2025-10-08T16:01:12.4640789Z             one recommended by the DBAPI itself, which is retrieved from the
2025-10-08T16:01:12.4640958Z             ``.paramstyle`` attribute of the DBAPI.  However, most DBAPIs accept
2025-10-08T16:01:12.4641118Z             more than one paramstyle, and in particular it may be desirable
2025-10-08T16:01:12.4641288Z             to change a "named" paramstyle into a "positional" one, or vice versa.
2025-10-08T16:01:12.4641442Z             When this attribute is passed, it should be one of the values
2025-10-08T16:01:12.4641568Z             ``"qmark"``, ``"numeric"``, ``"named"``, ``"format"`` or
2025-10-08T16:01:12.4641719Z             ``"pyformat"``, and should correspond to a parameter style known
2025-10-08T16:01:12.4641825Z             to be supported by the DBAPI in use.
2025-10-08T16:01:12.4641893Z     
2025-10-08T16:01:12.4642026Z         :param pool=None: an already-constructed instance of
2025-10-08T16:01:12.4642145Z             :class:`~sqlalchemy.pool.Pool`, such as a
2025-10-08T16:01:12.4642310Z             :class:`~sqlalchemy.pool.QueuePool` instance. If non-None, this
2025-10-08T16:01:12.4642457Z             pool will be used directly as the underlying connection pool
2025-10-08T16:01:12.4642609Z             for the engine, bypassing whatever connection parameters are
2025-10-08T16:01:12.4642756Z             present in the URL argument. For information on constructing
2025-10-08T16:01:12.4642910Z             connection pools manually, see :ref:`pooling_toplevel`.
2025-10-08T16:01:12.4642977Z     
2025-10-08T16:01:12.4643119Z         :param poolclass=None: a :class:`~sqlalchemy.pool.Pool`
2025-10-08T16:01:12.4643267Z             subclass, which will be used to create a connection pool
2025-10-08T16:01:12.4643424Z             instance using the connection parameters given in the URL. Note
2025-10-08T16:01:12.4643555Z             this differs from ``pool`` in that you don't actually
2025-10-08T16:01:12.4643721Z             instantiate the pool in this case, you just indicate what type
2025-10-08T16:01:12.4643806Z             of pool to be used.
2025-10-08T16:01:12.4643877Z     
2025-10-08T16:01:12.4644049Z         :param pool_logging_name:  String identifier which will be used within
2025-10-08T16:01:12.4644182Z            the "name" field of logging records generated within the
2025-10-08T16:01:12.4644355Z            "sqlalchemy.pool" logger. Defaults to a hexstring of the object's
2025-10-08T16:01:12.4644430Z            id.
2025-10-08T16:01:12.4644497Z     
2025-10-08T16:01:12.4644582Z            .. seealso::
2025-10-08T16:01:12.4644649Z     
2025-10-08T16:01:12.4644801Z                 :ref:`dbengine_logging` - further detail on how to configure
2025-10-08T16:01:12.4644878Z                 logging.
2025-10-08T16:01:12.4644944Z     
2025-10-08T16:01:12.4645121Z         :param pool_pre_ping: boolean, if True will enable the connection pool
2025-10-08T16:01:12.4645271Z             "pre-ping" feature that tests connections for liveness upon
2025-10-08T16:01:12.4645469Z             each checkout.
2025-10-08T16:01:12.4645547Z     
2025-10-08T16:01:12.4645637Z             .. versionadded:: 1.2
2025-10-08T16:01:12.4645704Z     
2025-10-08T16:01:12.4645786Z             .. seealso::
2025-10-08T16:01:12.4645852Z     
2025-10-08T16:01:12.4645956Z                 :ref:`pool_disconnects_pessimistic`
2025-10-08T16:01:12.4646029Z     
2025-10-08T16:01:12.4646174Z         :param pool_size=5: the number of connections to keep open
2025-10-08T16:01:12.4646369Z             inside the connection pool. This used with
2025-10-08T16:01:12.4646480Z             :class:`~sqlalchemy.pool.QueuePool` as
2025-10-08T16:01:12.4646632Z             well as :class:`~sqlalchemy.pool.SingletonThreadPool`.  With
2025-10-08T16:01:12.4646784Z             :class:`~sqlalchemy.pool.QueuePool`, a ``pool_size`` setting
2025-10-08T16:01:12.4646944Z             of 0 indicates no limit; to disable pooling, set ``poolclass`` to
2025-10-08T16:01:12.4647060Z             :class:`~sqlalchemy.pool.NullPool` instead.
2025-10-08T16:01:12.4647137Z     
2025-10-08T16:01:12.4647289Z         :param pool_recycle=-1: this setting causes the pool to recycle
2025-10-08T16:01:12.4647621Z             connections after the given number of seconds has passed. It
2025-10-08T16:01:12.4647777Z             defaults to -1, or no timeout. For example, setting to 3600
2025-10-08T16:01:12.4647929Z             means connections will be recycled after one hour. Note that
2025-10-08T16:01:12.4648079Z             MySQL in particular will disconnect automatically if no
2025-10-08T16:01:12.4648239Z             activity is detected on a connection for eight hours (although
2025-10-08T16:01:12.4648398Z             this is configurable with the MySQLDB connection itself and the
2025-10-08T16:01:12.4648501Z             server configuration as well).
2025-10-08T16:01:12.4648568Z     
2025-10-08T16:01:12.4648656Z             .. seealso::
2025-10-08T16:01:12.4648722Z     
2025-10-08T16:01:12.4648814Z                 :ref:`pool_setting_recycle`
2025-10-08T16:01:12.4648886Z     
2025-10-08T16:01:12.4649010Z         :param pool_reset_on_return='rollback': set the
2025-10-08T16:01:12.4649179Z             :paramref:`_pool.Pool.reset_on_return` parameter of the underlying
2025-10-08T16:01:12.4649325Z             :class:`_pool.Pool` object, which can be set to the values
2025-10-08T16:01:12.4649424Z             ``"rollback"``, ``"commit"``, or ``None``.
2025-10-08T16:01:12.4649496Z     
2025-10-08T16:01:12.4649579Z             .. seealso::
2025-10-08T16:01:12.4649646Z     
2025-10-08T16:01:12.4649741Z                 :ref:`pool_reset_on_return`
2025-10-08T16:01:12.4649808Z     
2025-10-08T16:01:12.4649960Z                 :ref:`dbapi_autocommit_skip_rollback` - a more modern approach
2025-10-08T16:01:12.4650100Z                 to using connections with no transactional instructions
2025-10-08T16:01:12.4650167Z     
2025-10-08T16:01:12.4650315Z         :param pool_timeout=30: number of seconds to wait before giving
2025-10-08T16:01:12.4650460Z             up on getting a connection from the pool. This is only used
2025-10-08T16:01:12.4650635Z             with :class:`~sqlalchemy.pool.QueuePool`. This can be a float but is
2025-10-08T16:01:12.4650812Z             subject to the limitations of Python time functions which may not be
2025-10-08T16:01:12.4650914Z             reliable in the tens of milliseconds.
2025-10-08T16:01:12.4650980Z     
2025-10-08T16:01:12.4651141Z             .. note: don't use 30.0 above, it seems to break with the :param tag
2025-10-08T16:01:12.4651212Z     
2025-10-08T16:01:12.4651385Z         :param pool_use_lifo=False: use LIFO (last-in-first-out) when retrieving
2025-10-08T16:01:12.4651526Z             connections from :class:`.QueuePool` instead of FIFO
2025-10-08T16:01:12.4651694Z             (first-in-first-out). Using LIFO, a server-side timeout scheme can
2025-10-08T16:01:12.4651870Z             reduce the number of connections used during non- peak   periods of
2025-10-08T16:01:12.4652173Z             use.   When planning for server-side timeouts, ensure that a recycle or
2025-10-08T16:01:12.4652353Z             pre-ping strategy is in use to gracefully   handle stale connections.
2025-10-08T16:01:12.4652426Z     
2025-10-08T16:01:12.4652517Z               .. versionadded:: 1.3
2025-10-08T16:01:12.4652583Z     
2025-10-08T16:01:12.4652673Z               .. seealso::
2025-10-08T16:01:12.4652739Z     
2025-10-08T16:01:12.4652825Z                 :ref:`pool_use_lifo`
2025-10-08T16:01:12.4652999Z     
2025-10-08T16:01:12.4653090Z                 :ref:`pool_disconnects`
2025-10-08T16:01:12.4653161Z     
2025-10-08T16:01:12.4653306Z         :param plugins: string list of plugin names to load.  See
2025-10-08T16:01:12.4653422Z             :class:`.CreateEnginePlugin` for background.
2025-10-08T16:01:12.4653493Z     
2025-10-08T16:01:12.4653581Z             .. versionadded:: 1.2.3
2025-10-08T16:01:12.4653646Z     
2025-10-08T16:01:12.4653821Z         :param query_cache_size: size of the cache used to cache the SQL string
2025-10-08T16:01:12.4653946Z          form of queries.  Set to zero to disable caching.
2025-10-08T16:01:12.4654013Z     
2025-10-08T16:01:12.4654195Z          The cache is pruned of its least recently used items when its size reaches
2025-10-08T16:01:12.4654356Z          N * 1.5.  Defaults to 500, meaning the cache will always store at least
2025-10-08T16:01:12.4654530Z          500 SQL statements when filled, and will grow up to 750 items at which
2025-10-08T16:01:12.4654700Z          point it is pruned back down to 500 by removing the 250 least recently
2025-10-08T16:01:12.4654777Z          used items.
2025-10-08T16:01:12.4654848Z     
2025-10-08T16:01:12.4655016Z          Caching is accomplished on a per-statement basis by generating a
2025-10-08T16:01:12.4655182Z          cache key that represents the statement's structure, then generating
2025-10-08T16:01:12.4655348Z          string SQL for the current dialect only if that key is not present
2025-10-08T16:01:12.4655510Z          in the cache.   All statements support caching, however some features
2025-10-08T16:01:12.4655678Z          such as an INSERT with a large set of parameters will intentionally
2025-10-08T16:01:12.4655835Z          bypass the cache.   SQL logging will indicate statistics for each
2025-10-08T16:01:12.4655970Z          statement whether or not it were pull from the cache.
2025-10-08T16:01:12.4656044Z     
2025-10-08T16:01:12.4656217Z          .. note:: some ORM functions related to unit-of-work persistence as well
2025-10-08T16:01:12.4656383Z             as some attribute loading strategies will make use of individual
2025-10-08T16:01:12.4656509Z             per-mapper caches outside of the main cache.
2025-10-08T16:01:12.4656577Z     
2025-10-08T16:01:12.4656649Z     
2025-10-08T16:01:12.4656725Z          .. seealso::
2025-10-08T16:01:12.4656791Z     
2025-10-08T16:01:12.4656877Z             :ref:`sql_caching`
2025-10-08T16:01:12.4656944Z     
2025-10-08T16:01:12.4657028Z          .. versionadded:: 1.4
2025-10-08T16:01:12.4657100Z     
2025-10-08T16:01:12.4657253Z         :param skip_autocommit_rollback: When True, the dialect will
2025-10-08T16:01:12.4657620Z            unconditionally skip all calls to the DBAPI ``connection.rollback()``
2025-10-08T16:01:12.4657807Z            method if the DBAPI connection is confirmed to be in "autocommit" mode.
2025-10-08T16:01:12.4657985Z            The availability of this feature is dialect specific; if not available,
2025-10-08T16:01:12.4658181Z            a ``NotImplementedError`` is raised by the dialect when rollback occurs.
2025-10-08T16:01:12.4658249Z     
2025-10-08T16:01:12.4658327Z            .. seealso::
2025-10-08T16:01:12.4658399Z     
2025-10-08T16:01:12.4658505Z                 :ref:`dbapi_autocommit_skip_rollback`
2025-10-08T16:01:12.4658572Z     
2025-10-08T16:01:12.4658664Z            .. versionadded:: 2.0.43
2025-10-08T16:01:12.4658730Z     
2025-10-08T16:01:12.4658913Z         :param use_insertmanyvalues: True by default, use the "insertmanyvalues"
2025-10-08T16:01:12.4659196Z          execution style for INSERT..RETURNING statements by default.
2025-10-08T16:01:12.4659265Z     
2025-10-08T16:01:12.4659355Z          .. versionadded:: 2.0
2025-10-08T16:01:12.4659422Z     
2025-10-08T16:01:12.4659499Z          .. seealso::
2025-10-08T16:01:12.4659569Z     
2025-10-08T16:01:12.4659664Z             :ref:`engine_insertmanyvalues`
2025-10-08T16:01:12.4659731Z     
2025-10-08T16:01:12.4659809Z         """  # noqa
2025-10-08T16:01:12.4659988Z     
2025-10-08T16:01:12.4660075Z         if "strategy" in kwargs:
2025-10-08T16:01:12.4660178Z             strat = kwargs.pop("strategy")
2025-10-08T16:01:12.4660260Z             if strat == "mock":
2025-10-08T16:01:12.4660355Z                 # this case is deprecated
2025-10-08T16:01:12.4660498Z                 return create_mock_engine(url, **kwargs)  # type: ignore
2025-10-08T16:01:12.4660569Z             else:
2025-10-08T16:01:12.4660719Z                 raise exc.ArgumentError("unknown strategy: %r" % strat)
2025-10-08T16:01:12.4660786Z     
2025-10-08T16:01:12.4660890Z         kwargs.pop("empty_in_strategy", None)
2025-10-08T16:01:12.4660967Z     
2025-10-08T16:01:12.4661050Z         # create url.URL object
2025-10-08T16:01:12.4661132Z         u = _url.make_url(url)
2025-10-08T16:01:12.4661202Z     
2025-10-08T16:01:12.4661329Z         u, plugins, kwargs = u._instantiate_plugins(kwargs)
2025-10-08T16:01:12.4661396Z     
2025-10-08T16:01:12.4661495Z         entrypoint = u._get_entrypoint()
2025-10-08T16:01:12.4661603Z         _is_async = kwargs.pop("_is_async", False)
2025-10-08T16:01:12.4661683Z         if _is_async:
2025-10-08T16:01:12.4661809Z             dialect_cls = entrypoint.get_async_dialect_cls(u)
2025-10-08T16:01:12.4661881Z         else:
2025-10-08T16:01:12.4661996Z             dialect_cls = entrypoint.get_dialect_cls(u)
2025-10-08T16:01:12.4662070Z     
2025-10-08T16:01:12.4662175Z         if kwargs.pop("_coerce_config", False):
2025-10-08T16:01:12.4662243Z     
2025-10-08T16:01:12.4662405Z             def pop_kwarg(key: str, default: Optional[Any] = None) -> Any:
2025-10-08T16:01:12.4662510Z                 value = kwargs.pop(key, default)
2025-10-08T16:01:12.4662631Z                 if key in dialect_cls.engine_config_types:
2025-10-08T16:01:12.4662759Z                     value = dialect_cls.engine_config_types[key](value)
2025-10-08T16:01:12.4662839Z                 return value
2025-10-08T16:01:12.4662914Z     
2025-10-08T16:01:12.4662986Z         else:
2025-10-08T16:01:12.4663093Z             pop_kwarg = kwargs.pop  # type: ignore
2025-10-08T16:01:12.4663165Z     
2025-10-08T16:01:12.4663245Z         dialect_args = {}
2025-10-08T16:01:12.4663346Z         # consume dialect arguments from kwargs
2025-10-08T16:01:12.4663454Z         for k in util.get_cls_kwargs(dialect_cls):
2025-10-08T16:01:12.4663535Z             if k in kwargs:
2025-10-08T16:01:12.4663636Z                 dialect_args[k] = pop_kwarg(k)
2025-10-08T16:01:12.4663702Z     
2025-10-08T16:01:12.4663796Z         dbapi = kwargs.pop("module", None)
2025-10-08T16:01:12.4663881Z         if dbapi is None:
2025-10-08T16:01:12.4663964Z             dbapi_args = {}
2025-10-08T16:01:12.4664031Z     
2025-10-08T16:01:12.4664141Z             if "import_dbapi" in dialect_cls.__dict__:
2025-10-08T16:01:12.4664244Z                 dbapi_meth = dialect_cls.import_dbapi
2025-10-08T16:01:12.4664311Z     
2025-10-08T16:01:12.4664456Z             elif hasattr(dialect_cls, "dbapi") and inspect.ismethod(
2025-10-08T16:01:12.4664542Z                 dialect_cls.dbapi
2025-10-08T16:01:12.4664622Z             ):
2025-10-08T16:01:12.4664716Z                 util.warn_deprecated(
2025-10-08T16:01:12.4664849Z                     "The dbapi() classmethod on dialect classes has been "
2025-10-08T16:01:12.4665003Z                     "renamed to import_dbapi().  Implement an import_dbapi() "
2025-10-08T16:01:12.4665168Z                     f"classmethod directly on class {dialect_cls} to remove this "
2025-10-08T16:01:12.4665320Z                     "warning; the old .dbapi() classmethod may be maintained for "
2025-10-08T16:01:12.4665506Z                     "backwards compatibility.",
2025-10-08T16:01:12.4665586Z                     "2.0",
2025-10-08T16:01:12.4665661Z                 )
2025-10-08T16:01:12.4665757Z                 dbapi_meth = dialect_cls.dbapi
2025-10-08T16:01:12.4665826Z             else:
2025-10-08T16:01:12.4665932Z                 dbapi_meth = dialect_cls.import_dbapi
2025-10-08T16:01:12.4666004Z     
2025-10-08T16:01:12.4666260Z             for k in util.get_func_kwargs(dbapi_meth):
2025-10-08T16:01:12.4666347Z                 if k in kwargs:
2025-10-08T16:01:12.4666444Z                     dbapi_args[k] = pop_kwarg(k)
2025-10-08T16:01:12.4666540Z             dbapi = dbapi_meth(**dbapi_args)
2025-10-08T16:01:12.4666613Z     
2025-10-08T16:01:12.4666704Z         dialect_args["dbapi"] = dbapi
2025-10-08T16:01:12.4666772Z     
2025-10-08T16:01:12.4666943Z         dialect_args.setdefault("compiler_linting", compiler.NO_LINTING)
2025-10-08T16:01:12.4667096Z         enable_from_linting = kwargs.pop("enable_from_linting", True)
2025-10-08T16:01:12.4667190Z         if enable_from_linting:
2025-10-08T16:01:12.4667564Z             dialect_args["compiler_linting"] ^= compiler.COLLECT_CARTESIAN_PRODUCTS
2025-10-08T16:01:12.4667648Z     
2025-10-08T16:01:12.4667744Z         for plugin in plugins:
2025-10-08T16:01:12.4667891Z             plugin.handle_dialect_kwargs(dialect_cls, dialect_args)
2025-10-08T16:01:12.4667959Z     
2025-10-08T16:01:12.4668050Z         # create dialect
2025-10-08T16:01:12.4668147Z         dialect = dialect_cls(**dialect_args)
2025-10-08T16:01:12.4668221Z     
2025-10-08T16:01:12.4668313Z         # assemble connection arguments
2025-10-08T16:01:12.4668442Z         (cargs_tup, cparams) = dialect.create_connect_args(u)
2025-10-08T16:01:12.4668561Z         cparams.update(pop_kwarg("connect_args", {}))
2025-10-08T16:01:12.4668628Z     
2025-10-08T16:01:12.4668805Z         if "async_fallback" in cparams and util.asbool(cparams["async_fallback"]):
2025-10-08T16:01:12.4668900Z             util.warn_deprecated(
2025-10-08T16:01:12.4669077Z                 "The async_fallback dialect argument is deprecated and will be "
2025-10-08T16:01:12.4669174Z                 "removed in SQLAlchemy 2.1.",
2025-10-08T16:01:12.4669254Z                 "2.0",
2025-10-08T16:01:12.4669325Z             )
2025-10-08T16:01:12.4669392Z     
2025-10-08T16:01:12.4669506Z         cargs = list(cargs_tup)  # allow mutability
2025-10-08T16:01:12.4669574Z     
2025-10-08T16:01:12.4669683Z         # look for existing pool or create
2025-10-08T16:01:12.4669779Z         pool = pop_kwarg("pool", None)
2025-10-08T16:01:12.4669860Z         if pool is None:
2025-10-08T16:01:12.4669937Z     
2025-10-08T16:01:12.4670014Z             def connect(
2025-10-08T16:01:12.4670166Z                 connection_record: Optional[ConnectionPoolEntry] = None,
2025-10-08T16:01:12.4670261Z             ) -> DBAPIConnection:
2025-10-08T16:01:12.4670349Z                 if dialect._has_events:
2025-10-08T16:01:12.4670457Z                     for fn in dialect.dispatch.do_connect:
2025-10-08T16:01:12.4670581Z                         connection = cast(
2025-10-08T16:01:12.4670683Z                             DBAPIConnection,
2025-10-08T16:01:12.4670825Z                             fn(dialect, connection_record, cargs, cparams),
2025-10-08T16:01:12.4670902Z                         )
2025-10-08T16:01:12.4671002Z                         if connection is not None:
2025-10-08T16:01:12.4671098Z                             return connection
2025-10-08T16:01:12.4671170Z     
2025-10-08T16:01:12.4671283Z                 return dialect.connect(*cargs, **cparams)
2025-10-08T16:01:12.4671355Z     
2025-10-08T16:01:12.4671457Z             creator = pop_kwarg("creator", connect)
2025-10-08T16:01:12.4671524Z     
2025-10-08T16:01:12.4671637Z             poolclass = pop_kwarg("poolclass", None)
2025-10-08T16:01:12.4671724Z             if poolclass is None:
2025-10-08T16:01:12.4671849Z                 poolclass = dialect.get_dialect_pool_class(u)
2025-10-08T16:01:12.4671943Z             pool_args = {"dialect": dialect}
2025-10-08T16:01:12.4672133Z     
2025-10-08T16:01:12.4672293Z             # consume pool arguments from kwargs, translating a few of
2025-10-08T16:01:12.4672377Z             # the arguments
2025-10-08T16:01:12.8136706Z             for k in util.get_cls_kwargs(poolclass):
2025-10-08T16:01:12.8137226Z                 tk = _pool_translate_kwargs.get(k, k)
2025-10-08T16:01:12.8138009Z                 if tk in kwargs:
2025-10-08T16:01:12.8138714Z                     pool_args[k] = pop_kwarg(tk)
2025-10-08T16:01:12.8139057Z     
2025-10-08T16:01:12.8139304Z             for plugin in plugins:
2025-10-08T16:01:12.8139707Z                 plugin.handle_pool_kwargs(poolclass, pool_args)
2025-10-08T16:01:12.8140024Z     
2025-10-08T16:01:12.8140239Z             pool = poolclass(creator, **pool_args)
2025-10-08T16:01:12.8140522Z         else:
2025-10-08T16:01:12.8140730Z             pool._dialect = dialect
2025-10-08T16:01:12.8140977Z     
2025-10-08T16:01:12.8141153Z         if (
2025-10-08T16:01:12.8141382Z             hasattr(pool, "_is_asyncio")
2025-10-08T16:01:12.8141691Z             and pool._is_asyncio is not dialect.is_async
2025-10-08T16:01:12.8141986Z         ):
2025-10-08T16:01:12.8142198Z             raise exc.ArgumentError(
2025-10-08T16:01:12.8142507Z                 f"Pool class {pool.__class__.__name__} cannot be "
2025-10-08T16:01:12.8142877Z                 f"used with {'non-' if not dialect.is_async else ''}"
2025-10-08T16:01:12.8143205Z                 "asyncio engine",
2025-10-08T16:01:12.8143454Z                 code="pcls",
2025-10-08T16:01:12.8143691Z             )
2025-10-08T16:01:12.8143881Z     
2025-10-08T16:01:12.8144061Z         # create engine.
2025-10-08T16:01:12.8144313Z         if not pop_kwarg("future", True):
2025-10-08T16:01:12.8144606Z             raise exc.ArgumentError(
2025-10-08T16:01:12.8144901Z                 "The 'future' parameter passed to "
2025-10-08T16:01:12.8145221Z                 "create_engine() may only be set to True."
2025-10-08T16:01:12.8145510Z             )
2025-10-08T16:01:12.8145702Z     
2025-10-08T16:01:12.8145894Z         engineclass = base.Engine
2025-10-08T16:01:12.8146144Z     
2025-10-08T16:01:12.8146329Z         engine_args = {}
2025-10-08T16:01:12.8146582Z         for k in util.get_cls_kwargs(engineclass):
2025-10-08T16:01:12.8146873Z             if k in kwargs:
2025-10-08T16:01:12.8147124Z                 engine_args[k] = pop_kwarg(k)
2025-10-08T16:01:12.8147626Z     
2025-10-08T16:01:12.8147930Z         # internal flags used by the test suite for instrumenting / proxying
2025-10-08T16:01:12.8148307Z         # engines with mocks etc.
2025-10-08T16:01:12.8148599Z         _initialize = kwargs.pop("_initialize", True)
2025-10-08T16:01:12.8148880Z     
2025-10-08T16:01:12.8149074Z         # all kwargs should be consumed
2025-10-08T16:01:12.8149337Z         if kwargs:
2025-10-08T16:01:12.8149542Z >           raise TypeError(
2025-10-08T16:01:12.8149834Z                 "Invalid argument(s) %s sent to create_engine(), "
2025-10-08T16:01:12.8150230Z                 "using configuration %s/%s/%s.  Please check that the "
2025-10-08T16:01:12.8150624Z                 "keyword arguments are appropriate for this combination "
2025-10-08T16:01:12.8150951Z                 "of components."
2025-10-08T16:01:12.8151169Z                 % (
2025-10-08T16:01:12.8151379Z                     ",".join("'%s'" % k for k in kwargs),
2025-10-08T16:01:12.8151648Z                     dialect.__class__.__name__,
2025-10-08T16:01:12.8151920Z                     pool.__class__.__name__,
2025-10-08T16:01:12.8152174Z                     engineclass.__name__,
2025-10-08T16:01:12.8152401Z                 )
2025-10-08T16:01:12.8152578Z             )
2025-10-08T16:01:12.8153378Z E           TypeError: Invalid argument(s) 'pool_size','max_overflow' sent to create_engine(), using configuration SQLiteDialect_pysqlite/StaticPool/Engine.  Please check that the keyword arguments are appropriate for this combination of components.
2025-10-08T16:01:12.8154155Z 
2025-10-08T16:01:12.8154643Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/create.py:715: TypeError
2025-10-08T16:01:12.8155183Z =============================== warnings summary ===============================
2025-10-08T16:01:12.8155688Z ../../../../../opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pytesseract/pytesseract.py:32
2025-10-08T16:01:12.8156761Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pytesseract/pytesseract.py:32: DeprecationWarning: 'pkgutil.find_loader' is deprecated and slated for removal in Python 3.14; use importlib.util.find_spec() instead
2025-10-08T16:01:12.8157896Z     numpy_installed = find_loader('numpy') is not None
2025-10-08T16:01:12.8158102Z 
2025-10-08T16:01:12.8158386Z ../../../../../opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pytesseract/pytesseract.py:36
2025-10-08T16:01:12.8159467Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pytesseract/pytesseract.py:36: DeprecationWarning: 'pkgutil.find_loader' is deprecated and slated for removal in Python 3.14; use importlib.util.find_spec() instead
2025-10-08T16:01:12.8160380Z     pandas_installed = find_loader('pandas') is not None
2025-10-08T16:01:12.8160593Z 
2025-10-08T16:01:12.8160893Z ../../../../../opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pyasn1/codec/ber/encoder.py:952
2025-10-08T16:01:12.8161785Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pyasn1/codec/ber/encoder.py:952: DeprecationWarning: tagMap is deprecated. Please use TAG_MAP instead.
2025-10-08T16:01:12.8162827Z     warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)
2025-10-08T16:01:12.8163149Z 
2025-10-08T16:01:12.8163584Z ../../../../../opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pyasn1/codec/ber/encoder.py:952
2025-10-08T16:01:12.8164646Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pyasn1/codec/ber/encoder.py:952: DeprecationWarning: typeMap is deprecated. Please use TYPE_MAP instead.
2025-10-08T16:01:12.8165737Z     warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)
2025-10-08T16:01:12.8166047Z 
2025-10-08T16:01:12.8166370Z -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
2025-10-08T16:01:12.8166851Z =========================== short test summary info ============================
2025-10-08T16:01:12.8168625Z ERROR tests/test_field_consistency.py::TestFieldConsistency::test_user_model_has_required_fields - TypeError: Invalid argument(s) 'pool_size','max_overflow' sent to create_engine(), using configuration SQLiteDialect_pysqlite/StaticPool/Engine.  Please check that the keyword arguments are appropriate for this combination of components.
2025-10-08T16:01:12.8171339Z ERROR tests/test_field_consistency.py::TestFieldConsistency::test_api_schema_matches_model_fields - TypeError: Invalid argument(s) 'pool_size','max_overflow' sent to create_engine(), using configuration SQLiteDialect_pysqlite/StaticPool/Engine.  Please check that the keyword arguments are appropriate for this combination of components.
2025-10-08T16:01:12.8173707Z ERROR tests/test_field_consistency.py::TestFieldConsistency::test_user_view_field_mapping - TypeError: Invalid argument(s) 'pool_size','max_overflow' sent to create_engine(), using configuration SQLiteDialect_pysqlite/StaticPool/Engine.  Please check that the keyword arguments are appropriate for this combination of components.
2025-10-08T16:01:12.8175728Z ERROR tests/test_field_consistency.py::TestFieldConsistency::test_no_username_vs_user_name_confusion - TypeError: Invalid argument(s) 'pool_size','max_overflow' sent to create_engine(), using configuration SQLiteDialect_pysqlite/StaticPool/Engine.  Please check that the keyword arguments are appropriate for this combination of components.
2025-10-08T16:01:12.8178640Z ERROR tests/test_field_consistency.py::TestBaselineFunctionality::test_user_model_instantiation - TypeError: Invalid argument(s) 'pool_size','max_overflow' sent to create_engine(), using configuration SQLiteDialect_pysqlite/StaticPool/Engine.  Please check that the keyword arguments are appropriate for this combination of components.
2025-10-08T16:01:12.8181388Z ERROR tests/test_field_consistency.py::TestBaselineFunctionality::test_api_schema_validation - TypeError: Invalid argument(s) 'pool_size','max_overflow' sent to create_engine(), using configuration SQLiteDialect_pysqlite/StaticPool/Engine.  Please check that the keyword arguments are appropriate for this combination of components.
2025-10-08T16:01:12.8183942Z ERROR tests/test_field_consistency.py::TestAPIEndpointImmutability::test_critical_api_endpoints_exist - TypeError: Invalid argument(s) 'pool_size','max_overflow' sent to create_engine(), using configuration SQLiteDialect_pysqlite/StaticPool/Engine.  Please check that the keyword arguments are appropriate for this combination of components.
2025-10-08T16:01:12.8186547Z ERROR tests/test_field_consistency.py::TestAPIEndpointImmutability::test_api_response_field_names_unchanged - TypeError: Invalid argument(s) 'pool_size','max_overflow' sent to create_engine(), using configuration SQLiteDialect_pysqlite/StaticPool/Engine.  Please check that the keyword arguments are appropriate for this combination of components.
2025-10-08T16:01:12.8188997Z ERROR tests/test_field_consistency.py::TestDatabaseSchemaImmutability::test_user_table_columns_unchanged - TypeError: Invalid argument(s) 'pool_size','max_overflow' sent to create_engine(), using configuration SQLiteDialect_pysqlite/StaticPool/Engine.  Please check that the keyword arguments are appropriate for this combination of components.
2025-10-08T16:01:12.8191117Z ERROR tests/test_field_consistency.py::TestDatabaseSchemaImmutability::test_post_table_columns_unchanged - TypeError: Invalid argument(s) 'pool_size','max_overflow' sent to create_engine(), using configuration SQLiteDialect_pysqlite/StaticPool/Engine.  Please check that the keyword arguments are appropriate for this combination of components.
2025-10-08T16:01:12.8193549Z ERROR tests/test_field_consistency.py::TestDatabaseSchemaImmutability::test_community_table_columns_unchanged - TypeError: Invalid argument(s) 'pool_size','max_overflow' sent to create_engine(), using configuration SQLiteDialect_pysqlite/StaticPool/Engine.  Please check that the keyword arguments are appropriate for this combination of components.
2025-10-08T16:01:12.8194814Z ======================== 4 warnings, 11 errors in 2.24s ========================
2025-10-08T16:01:13.4420547Z ============================= test session starts ==============================
2025-10-08T16:01:13.4421370Z platform linux -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
2025-10-08T16:01:13.4421986Z cachedir: .pytest_cache
2025-10-08T16:01:13.4422245Z rootdir: /home/runner/work/pyfedi/pyfedi
2025-10-08T16:01:13.4422540Z plugins: anyio-4.11.0
2025-10-08T16:01:13.4801282Z collecting ... collected 16 items
2025-10-08T16:01:13.4801664Z 
2025-10-08T16:01:14.5300269Z tests/test_monitoring_simple.py::TestAdvancedRateLimiter::test_client_identifier_fallback_to_ip PASSED [  6%]
2025-10-08T16:01:14.5310042Z tests/test_monitoring_simple.py::TestAdvancedRateLimiter::test_client_identifier_generation PASSED [ 12%]
2025-10-08T16:01:14.6630774Z tests/test_monitoring_simple.py::TestAdvancedRateLimiter::test_fallback_rate_limiting FAILED [ 18%]
2025-10-08T16:01:14.6638024Z tests/test_monitoring_simple.py::TestAdvancedRateLimiter::test_get_rate_limit_key_generation PASSED [ 25%]
2025-10-08T16:01:14.6645129Z tests/test_monitoring_simple.py::TestAdvancedRateLimiter::test_parse_rate_limit_formats PASSED [ 31%]
2025-10-08T16:01:14.6659736Z tests/test_monitoring_simple.py::TestAdvancedRateLimiter::test_redis_rate_limiting_allowed PASSED [ 37%]
2025-10-08T16:01:14.6673068Z tests/test_monitoring_simple.py::TestAdvancedRateLimiter::test_redis_rate_limiting_exceeded PASSED [ 43%]
2025-10-08T16:01:14.6683461Z tests/test_monitoring_simple.py::TestAdminAPIMonitor::test_fallback_without_redis PASSED [ 50%]
2025-10-08T16:01:14.6691082Z tests/test_monitoring_simple.py::TestAdminAPIMonitor::test_get_performance_stats PASSED [ 56%]
2025-10-08T16:01:14.6987649Z tests/test_monitoring_simple.py::TestAdminAPIMonitor::test_get_redis_key_caching FAILED [ 62%]
2025-10-08T16:01:14.6995136Z tests/test_monitoring_simple.py::TestAdminAPIMonitor::test_record_request_basic PASSED [ 68%]
2025-10-08T16:01:14.8016224Z tests/test_monitoring_simple.py::TestAdminAPIMonitor::test_redis_metrics_storage FAILED [ 75%]
2025-10-08T16:01:14.8988357Z tests/test_monitoring_simple.py::TestMonitoringDecorators::test_check_advanced_rate_limit_allowed FAILED [ 81%]
2025-10-08T16:01:14.9935718Z tests/test_monitoring_simple.py::TestMonitoringDecorators::test_check_advanced_rate_limit_exceeded FAILED [ 87%]
2025-10-08T16:01:15.0551289Z tests/test_monitoring_simple.py::TestMonitoringDecorators::test_track_admin_request_decorator FAILED [ 93%]
2025-10-08T16:01:15.0572564Z tests/test_monitoring_simple.py::TestIntegration::test_monitoring_system_initialization PASSED [100%]
2025-10-08T16:01:15.0573220Z 
2025-10-08T16:01:15.0573367Z =================================== FAILURES ===================================
2025-10-08T16:01:15.0573850Z _____________ TestAdvancedRateLimiter.test_fallback_rate_limiting ______________
2025-10-08T16:01:15.0574207Z 
2025-10-08T16:01:15.0574546Z self = <tests.test_monitoring_simple.TestAdvancedRateLimiter testMethod=test_fallback_rate_limiting>
2025-10-08T16:01:15.0575013Z 
2025-10-08T16:01:15.0575133Z     def test_fallback_rate_limiting(self):
2025-10-08T16:01:15.0575481Z         """Test fallback rate limiting without Redis"""
2025-10-08T16:01:15.0575884Z         from app.api.admin.monitoring import AdvancedRateLimiter
2025-10-08T16:01:15.0576242Z     
2025-10-08T16:01:15.0576464Z         limiter = AdvancedRateLimiter()
2025-10-08T16:01:15.0576743Z     
2025-10-08T16:01:15.0576963Z         # Mock g object for in-memory cache
2025-10-08T16:01:15.0577653Z >       with patch('app.api.admin.monitoring.g') as mock_g:
2025-10-08T16:01:15.0578203Z              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:15.0578473Z 
2025-10-08T16:01:15.0578596Z tests/test_monitoring_simple.py:55: 
2025-10-08T16:01:15.0578934Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:15.0579470Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:1524: in __enter__
2025-10-08T16:01:15.0579998Z     elif spec is None and _is_async_obj(original):
2025-10-08T16:01:15.0580327Z                           ^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:15.0580821Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:58: in _is_async_obj
2025-10-08T16:01:15.0581316Z     if hasattr(obj, '__func__'):
2025-10-08T16:01:15.0581591Z        ^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:15.0582107Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/werkzeug/local.py:318: in __get__
2025-10-08T16:01:15.0582668Z     obj = instance._get_current_object()
2025-10-08T16:01:15.0582961Z           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:15.0583277Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:15.0583515Z 
2025-10-08T16:01:15.0583636Z     def _get_current_object() -> T:
2025-10-08T16:01:15.0583906Z         try:
2025-10-08T16:01:15.0584123Z             obj = local.get()
2025-10-08T16:01:15.0584388Z         except LookupError:
2025-10-08T16:01:15.0584693Z >           raise RuntimeError(unbound_message) from None
2025-10-08T16:01:15.0585092Z E           RuntimeError: Working outside of application context.
2025-10-08T16:01:15.0585444Z E           
2025-10-08T16:01:15.0585784Z E           This typically means that you attempted to use functionality that needed
2025-10-08T16:01:15.0586326Z E           the current application. To solve this, set up an application context
2025-10-08T16:01:15.0586856Z E           with app.app_context(). See the documentation for more information.
2025-10-08T16:01:15.0587162Z 
2025-10-08T16:01:15.0587956Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/werkzeug/local.py:519: RuntimeError
2025-10-08T16:01:15.0588652Z ________________ TestAdminAPIMonitor.test_get_redis_key_caching ________________
2025-10-08T16:01:15.0588985Z 
2025-10-08T16:01:15.0589314Z args = (<app.api.admin.monitoring.AdminAPIMonitor object at 0x7fcabb87b5c0>, 'request', 'test_id')
2025-10-08T16:01:15.0589966Z kwargs = {}
2025-10-08T16:01:15.0590091Z 
2025-10-08T16:01:15.0590189Z     @functools.wraps(f)
2025-10-08T16:01:15.0590463Z     def decorated_function(*args, **kwargs):
2025-10-08T16:01:15.0590760Z         #: bypass cache
2025-10-08T16:01:15.0591047Z         if self._bypass_cache(unless, f, *args, **kwargs):
2025-10-08T16:01:15.0591406Z             return self._call_fn(f, *args, **kwargs)
2025-10-08T16:01:15.0591700Z     
2025-10-08T16:01:15.0591902Z         nonlocal source_check
2025-10-08T16:01:15.0592169Z         if source_check is None:
2025-10-08T16:01:15.0592467Z             source_check = self.source_check
2025-10-08T16:01:15.0592744Z     
2025-10-08T16:01:15.0592930Z         try:
2025-10-08T16:01:15.0593234Z >           cache_key = decorated_function.make_cache_key(f, *args, **kwargs)
2025-10-08T16:01:15.0593597Z                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:15.0593793Z 
2025-10-08T16:01:15.0594087Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask_caching/__init__.py:861: 
2025-10-08T16:01:15.0594576Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:15.0595103Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask_caching/__init__.py:618: in make_cache_key
2025-10-08T16:01:15.0595623Z     fname, version_data = self._memoize_version(
2025-10-08T16:01:15.0596137Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask_caching/__init__.py:568: in _memoize_version
2025-10-08T16:01:15.0596726Z     version_data_list = list(self.cache.get_many(*fetch_keys))
2025-10-08T16:01:15.0597035Z                              ^^^^^^^^^^
2025-10-08T16:01:15.0597300Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:15.0597625Z 
2025-10-08T16:01:15.0597756Z self = <flask_caching.Cache object at 0x7fcab693a270>
2025-10-08T16:01:15.0597962Z 
2025-10-08T16:01:15.0598069Z     @property
2025-10-08T16:01:15.0598296Z     def cache(self) -> SimpleCache:
2025-10-08T16:01:15.0598558Z >       app = current_app or self.app
2025-10-08T16:01:15.0598801Z                              ^^^^^^^^
2025-10-08T16:01:15.0599086Z E       AttributeError: 'Cache' object has no attribute 'app'
2025-10-08T16:01:15.0599319Z 
2025-10-08T16:01:15.0599652Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask_caching/__init__.py:190: AttributeError
2025-10-08T16:01:15.0600067Z 
2025-10-08T16:01:15.0600233Z During handling of the above exception, another exception occurred:
2025-10-08T16:01:15.0600486Z 
2025-10-08T16:01:15.0600754Z self = <tests.test_monitoring_simple.TestAdminAPIMonitor testMethod=test_get_redis_key_caching>
2025-10-08T16:01:15.0601097Z 
2025-10-08T16:01:15.0601200Z     def test_get_redis_key_caching(self):
2025-10-08T16:01:15.0601475Z         """Test Redis key generation and caching"""
2025-10-08T16:01:15.0601805Z         from app.api.admin.monitoring import AdminAPIMonitor
2025-10-08T16:01:15.0602097Z     
2025-10-08T16:01:15.0602277Z         monitor = AdminAPIMonitor()
2025-10-08T16:01:15.0602511Z     
2025-10-08T16:01:15.0602702Z         # Should generate consistent keys
2025-10-08T16:01:15.0602995Z >       key1 = monitor.get_redis_key('request', 'test_id')
2025-10-08T16:01:15.0603286Z                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:15.0603462Z 
2025-10-08T16:01:15.0603561Z tests/test_monitoring_simple.py:223: 
2025-10-08T16:01:15.0603848Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:15.0604050Z 
2025-10-08T16:01:15.0604451Z args = (<app.api.admin.monitoring.AdminAPIMonitor object at 0x7fcabb87b5c0>, 'request', 'test_id')
2025-10-08T16:01:15.0604891Z kwargs = {}
2025-10-08T16:01:15.0604992Z 
2025-10-08T16:01:15.0605081Z     @functools.wraps(f)
2025-10-08T16:01:15.0605317Z     def decorated_function(*args, **kwargs):
2025-10-08T16:01:15.0605573Z         #: bypass cache
2025-10-08T16:01:15.0605812Z         if self._bypass_cache(unless, f, *args, **kwargs):
2025-10-08T16:01:15.0606229Z             return self._call_fn(f, *args, **kwargs)
2025-10-08T16:01:15.0606479Z     
2025-10-08T16:01:15.0606657Z         nonlocal source_check
2025-10-08T16:01:15.0606892Z         if source_check is None:
2025-10-08T16:01:15.0607130Z             source_check = self.source_check
2025-10-08T16:01:15.0607475Z     
2025-10-08T16:01:15.0607636Z         try:
2025-10-08T16:01:15.0607890Z             cache_key = decorated_function.make_cache_key(f, *args, **kwargs)
2025-10-08T16:01:15.0608200Z     
2025-10-08T16:01:15.0608356Z             if (
2025-10-08T16:01:15.0608553Z                 callable(forced_update)
2025-10-08T16:01:15.0608792Z                 and (
2025-10-08T16:01:15.0609008Z                     forced_update(*args, **kwargs)
2025-10-08T16:01:15.0609280Z                     if wants_args(forced_update)
2025-10-08T16:01:15.0609536Z                     else forced_update()
2025-10-08T16:01:15.0609771Z                 )
2025-10-08T16:01:15.0609961Z                 is True
2025-10-08T16:01:15.0610143Z             ):
2025-10-08T16:01:15.0610322Z                 rv = None
2025-10-08T16:01:15.0610526Z                 found = False
2025-10-08T16:01:15.0610727Z             else:
2025-10-08T16:01:15.0610928Z                 rv = self.cache.get(cache_key)
2025-10-08T16:01:15.0611183Z                 found = True
2025-10-08T16:01:15.0611381Z     
2025-10-08T16:01:15.0611595Z                 # If the value returned by cache.get() is None, it
2025-10-08T16:01:15.0611931Z                 # might be because the key is not found in the cache
2025-10-08T16:01:15.0612261Z                 # or because the cached value is actually None
2025-10-08T16:01:15.0612533Z                 if rv is None:
2025-10-08T16:01:15.0612793Z                     # If we're sure we don't need to cache None values
2025-10-08T16:01:15.0613113Z                     # (cache_none=False), don't bother checking for
2025-10-08T16:01:15.0613429Z                     # key existence, as it can lead to false positives
2025-10-08T16:01:15.0613751Z                     # if a concurrent call already cached the
2025-10-08T16:01:15.0614054Z                     # key between steps. This would cause us to
2025-10-08T16:01:15.0614345Z                     # return None when we shouldn't
2025-10-08T16:01:15.0614608Z                     if not cache_none:
2025-10-08T16:01:15.0614848Z                         found = False
2025-10-08T16:01:15.0615082Z                     else:
2025-10-08T16:01:15.0615307Z                         found = self.cache.has(cache_key)
2025-10-08T16:01:15.0615576Z         except Exception:
2025-10-08T16:01:15.0615801Z >           if self.app.debug:
2025-10-08T16:01:15.0616014Z                ^^^^^^^^
2025-10-08T16:01:15.0616276Z E           AttributeError: 'Cache' object has no attribute 'app'
2025-10-08T16:01:15.0616499Z 
2025-10-08T16:01:15.0616837Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask_caching/__init__.py:893: AttributeError
2025-10-08T16:01:15.0617656Z ________________ TestAdminAPIMonitor.test_redis_metrics_storage ________________
2025-10-08T16:01:15.0618193Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:1423: in patched
2025-10-08T16:01:15.0618612Z     with self.decoration_helper(patched,
2025-10-08T16:01:15.0619012Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/contextlib.py:141: in __enter__
2025-10-08T16:01:15.0619395Z     return next(self.gen)
2025-10-08T16:01:15.0619601Z            ^^^^^^^^^^^^^^
2025-10-08T16:01:15.0619985Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:1405: in decoration_helper
2025-10-08T16:01:15.0620583Z     arg = exit_stack.enter_context(patching)
2025-10-08T16:01:15.0620852Z           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:15.0621253Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/contextlib.py:530: in enter_context
2025-10-08T16:01:15.0621654Z     result = _enter(cm)
2025-10-08T16:01:15.0621845Z              ^^^^^^^^^^
2025-10-08T16:01:15.0622303Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:1524: in __enter__
2025-10-08T16:01:15.0622731Z     elif spec is None and _is_async_obj(original):
2025-10-08T16:01:15.0623009Z                           ^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:15.0623409Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:58: in _is_async_obj
2025-10-08T16:01:15.0623820Z     if hasattr(obj, '__func__'):
2025-10-08T16:01:15.0624049Z        ^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:15.0624467Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/werkzeug/local.py:318: in __get__
2025-10-08T16:01:15.0624927Z     obj = instance._get_current_object()
2025-10-08T16:01:15.0625176Z           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:15.0625437Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:15.0625646Z 
2025-10-08T16:01:15.0625745Z     def _get_current_object() -> T:
2025-10-08T16:01:15.0625978Z         try:
2025-10-08T16:01:15.0626172Z             obj = local.get()
2025-10-08T16:01:15.0626390Z         except LookupError:
2025-10-08T16:01:15.0626644Z >           raise RuntimeError(unbound_message) from None
2025-10-08T16:01:15.0626983Z E           RuntimeError: Working outside of application context.
2025-10-08T16:01:15.0627269Z E           
2025-10-08T16:01:15.0627681Z E           This typically means that you attempted to use functionality that needed
2025-10-08T16:01:15.0628151Z E           the current application. To solve this, set up an application context
2025-10-08T16:01:15.0628588Z E           with app.app_context(). See the documentation for more information.
2025-10-08T16:01:15.0628844Z 
2025-10-08T16:01:15.3048883Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/werkzeug/local.py:519: RuntimeError
2025-10-08T16:01:15.3049943Z _______ TestMonitoringDecorators.test_check_advanced_rate_limit_allowed ________
2025-10-08T16:01:15.3050766Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:1423: in patched
2025-10-08T16:01:15.3051425Z     with self.decoration_helper(patched,
2025-10-08T16:01:15.3052032Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/contextlib.py:141: in __enter__
2025-10-08T16:01:15.3052623Z     return next(self.gen)
2025-10-08T16:01:15.3052929Z            ^^^^^^^^^^^^^^
2025-10-08T16:01:15.3053503Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:1405: in decoration_helper
2025-10-08T16:01:15.3054186Z     arg = exit_stack.enter_context(patching)
2025-10-08T16:01:15.3054569Z           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:15.3055167Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/contextlib.py:530: in enter_context
2025-10-08T16:01:15.3055770Z     result = _enter(cm)
2025-10-08T16:01:15.3056063Z              ^^^^^^^^^^
2025-10-08T16:01:15.3056590Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:1524: in __enter__
2025-10-08T16:01:15.3057164Z     elif spec is None and _is_async_obj(original):
2025-10-08T16:01:15.3057746Z                           ^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:15.3058243Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:58: in _is_async_obj
2025-10-08T16:01:15.3058743Z     if hasattr(obj, '__func__'):
2025-10-08T16:01:15.3059014Z        ^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:15.3059519Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/werkzeug/local.py:318: in __get__
2025-10-08T16:01:15.3060066Z     obj = instance._get_current_object()
2025-10-08T16:01:15.3060363Z           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:15.3060967Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:15.3061218Z 
2025-10-08T16:01:15.3061333Z     def _get_current_object() -> T:
2025-10-08T16:01:15.3061609Z         try:
2025-10-08T16:01:15.3061829Z             obj = local.get()
2025-10-08T16:01:15.3062098Z         except LookupError:
2025-10-08T16:01:15.3062394Z >           raise RuntimeError(unbound_message) from None
2025-10-08T16:01:15.3063011Z E           RuntimeError: Working outside of application context.
2025-10-08T16:01:15.3063369Z E           
2025-10-08T16:01:15.3063706Z E           This typically means that you attempted to use functionality that needed
2025-10-08T16:01:15.3064252Z E           the current application. To solve this, set up an application context
2025-10-08T16:01:15.3064774Z E           with app.app_context(). See the documentation for more information.
2025-10-08T16:01:15.3065076Z 
2025-10-08T16:01:15.3065444Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/werkzeug/local.py:519: RuntimeError
2025-10-08T16:01:15.3066151Z _______ TestMonitoringDecorators.test_check_advanced_rate_limit_exceeded _______
2025-10-08T16:01:15.3066784Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:1423: in patched
2025-10-08T16:01:15.3067292Z     with self.decoration_helper(patched,
2025-10-08T16:01:15.3067859Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/contextlib.py:141: in __enter__
2025-10-08T16:01:15.3068252Z     return next(self.gen)
2025-10-08T16:01:15.3068459Z            ^^^^^^^^^^^^^^
2025-10-08T16:01:15.3068877Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:1405: in decoration_helper
2025-10-08T16:01:15.3069337Z     arg = exit_stack.enter_context(patching)
2025-10-08T16:01:15.3069605Z           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:15.3070002Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/contextlib.py:530: in enter_context
2025-10-08T16:01:15.3070407Z     result = _enter(cm)
2025-10-08T16:01:15.3070611Z              ^^^^^^^^^^
2025-10-08T16:01:15.3070960Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:1524: in __enter__
2025-10-08T16:01:15.3071394Z     elif spec is None and _is_async_obj(original):
2025-10-08T16:01:15.3071671Z                           ^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:15.3072081Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:58: in _is_async_obj
2025-10-08T16:01:15.3072499Z     if hasattr(obj, '__func__'):
2025-10-08T16:01:15.3072722Z        ^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:15.3073138Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/werkzeug/local.py:318: in __get__
2025-10-08T16:01:15.3073601Z     obj = instance._get_current_object()
2025-10-08T16:01:15.3073854Z           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:15.3074117Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:15.3074340Z 
2025-10-08T16:01:15.3074446Z     def _get_current_object() -> T:
2025-10-08T16:01:15.3074680Z         try:
2025-10-08T16:01:15.3081361Z             obj = local.get()
2025-10-08T16:01:15.3081761Z         except LookupError:
2025-10-08T16:01:15.3082051Z >           raise RuntimeError(unbound_message) from None
2025-10-08T16:01:15.3082397Z E           RuntimeError: Working outside of application context.
2025-10-08T16:01:15.3082699Z E           
2025-10-08T16:01:15.3083046Z E           This typically means that you attempted to use functionality that needed
2025-10-08T16:01:15.3083498Z E           the current application. To solve this, set up an application context
2025-10-08T16:01:15.3083933Z E           with app.app_context(). See the documentation for more information.
2025-10-08T16:01:15.3084193Z 
2025-10-08T16:01:15.3084497Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/werkzeug/local.py:519: RuntimeError
2025-10-08T16:01:15.3085086Z _________ TestMonitoringDecorators.test_track_admin_request_decorator __________
2025-10-08T16:01:15.3085378Z 
2025-10-08T16:01:15.3085865Z self = <tests.test_monitoring_simple.TestMonitoringDecorators testMethod=test_track_admin_request_decorator>
2025-10-08T16:01:15.3086274Z 
2025-10-08T16:01:15.3086394Z     def test_track_admin_request_decorator(self):
2025-10-08T16:01:15.3086688Z         """Test request tracking decorator"""
2025-10-08T16:01:15.3087051Z         from app.api.admin.monitoring import track_admin_request, admin_monitor
2025-10-08T16:01:15.3087688Z     
2025-10-08T16:01:15.3087873Z         # Create a mock function
2025-10-08T16:01:15.3088149Z         @track_admin_request('test_endpoint', 'POST')
2025-10-08T16:01:15.3088432Z         def mock_endpoint():
2025-10-08T16:01:15.3088681Z             time.sleep(0.01)  # Small delay for timing
2025-10-08T16:01:15.3088960Z             return {'success': True}, 201
2025-10-08T16:01:15.3089195Z     
2025-10-08T16:01:15.3089370Z         # Mock request context
2025-10-08T16:01:15.3089681Z >       with patch('app.api.admin.monitoring.request') as mock_request:
2025-10-08T16:01:15.3090025Z              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:15.3090192Z 
2025-10-08T16:01:15.3090289Z tests/test_monitoring_simple.py:245: 
2025-10-08T16:01:15.3090572Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:15.3091015Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:1524: in __enter__
2025-10-08T16:01:15.3091458Z     elif spec is None and _is_async_obj(original):
2025-10-08T16:01:15.3091739Z                           ^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:15.3092148Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:58: in _is_async_obj
2025-10-08T16:01:15.3092564Z     if hasattr(obj, '__func__'):
2025-10-08T16:01:15.3092787Z        ^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:15.3093203Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/werkzeug/local.py:318: in __get__
2025-10-08T16:01:15.3093658Z     obj = instance._get_current_object()
2025-10-08T16:01:15.3093912Z           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:15.3094181Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:15.3094388Z 
2025-10-08T16:01:15.3094483Z     def _get_current_object() -> T:
2025-10-08T16:01:15.3094718Z         try:
2025-10-08T16:01:15.3094899Z             obj = local.get()
2025-10-08T16:01:15.3095134Z         except LookupError:
2025-10-08T16:01:15.3095398Z >           raise RuntimeError(unbound_message) from None
2025-10-08T16:01:15.3095721Z E           RuntimeError: Working outside of request context.
2025-10-08T16:01:15.3096002Z E           
2025-10-08T16:01:15.3096289Z E           This typically means that you attempted to use functionality that needed
2025-10-08T16:01:15.3096719Z E           an active HTTP request. Consult the documentation on testing for
2025-10-08T16:01:15.3097082Z E           information about how to avoid this problem.
2025-10-08T16:01:15.3097282Z 
2025-10-08T16:01:15.3097788Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/werkzeug/local.py:519: RuntimeError
2025-10-08T16:01:15.3098306Z =========================== short test summary info ============================
2025-10-08T16:01:15.3098969Z FAILED tests/test_monitoring_simple.py::TestAdvancedRateLimiter::test_fallback_rate_limiting - RuntimeError: Working outside of application context.
2025-10-08T16:01:15.3099494Z 
2025-10-08T16:01:15.3099685Z This typically means that you attempted to use functionality that needed
2025-10-08T16:01:15.3100128Z the current application. To solve this, set up an application context
2025-10-08T16:01:15.3100544Z with app.app_context(). See the documentation for more information.
2025-10-08T16:01:15.3101194Z FAILED tests/test_monitoring_simple.py::TestAdminAPIMonitor::test_get_redis_key_caching - AttributeError: 'Cache' object has no attribute 'app'
2025-10-08T16:01:15.3102221Z FAILED tests/test_monitoring_simple.py::TestAdminAPIMonitor::test_redis_metrics_storage - RuntimeError: Working outside of application context.
2025-10-08T16:01:15.3102721Z 
2025-10-08T16:01:15.3102931Z This typically means that you attempted to use functionality that needed
2025-10-08T16:01:15.3103367Z the current application. To solve this, set up an application context
2025-10-08T16:01:15.3103772Z with app.app_context(). See the documentation for more information.
2025-10-08T16:01:15.3104485Z FAILED tests/test_monitoring_simple.py::TestMonitoringDecorators::test_check_advanced_rate_limit_allowed - RuntimeError: Working outside of application context.
2025-10-08T16:01:15.3105142Z 
2025-10-08T16:01:15.3105318Z This typically means that you attempted to use functionality that needed
2025-10-08T16:01:15.3105758Z the current application. To solve this, set up an application context
2025-10-08T16:01:15.3106173Z with app.app_context(). See the documentation for more information.
2025-10-08T16:01:15.3106895Z FAILED tests/test_monitoring_simple.py::TestMonitoringDecorators::test_check_advanced_rate_limit_exceeded - RuntimeError: Working outside of application context.
2025-10-08T16:01:15.3107558Z 
2025-10-08T16:01:15.3107741Z This typically means that you attempted to use functionality that needed
2025-10-08T16:01:15.3108180Z the current application. To solve this, set up an application context
2025-10-08T16:01:15.3108588Z with app.app_context(). See the documentation for more information.
2025-10-08T16:01:15.3109274Z FAILED tests/test_monitoring_simple.py::TestMonitoringDecorators::test_track_admin_request_decorator - RuntimeError: Working outside of request context.
2025-10-08T16:01:15.3109824Z 
2025-10-08T16:01:15.3110013Z This typically means that you attempted to use functionality that needed
2025-10-08T16:01:15.3110438Z an active HTTP request. Consult the documentation on testing for
2025-10-08T16:01:15.3110784Z information about how to avoid this problem.
2025-10-08T16:01:15.3111098Z ========================= 6 failed, 10 passed in 1.62s =========================
2025-10-08T16:01:15.7332151Z ============================= test session starts ==============================
2025-10-08T16:01:15.7332824Z platform linux -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
2025-10-08T16:01:15.7333331Z cachedir: .pytest_cache
2025-10-08T16:01:15.7333591Z rootdir: /home/runner/work/pyfedi/pyfedi
2025-10-08T16:01:15.7333899Z plugins: anyio-4.11.0
2025-10-08T16:01:16.9968773Z collecting ... collected 9 items
2025-10-08T16:01:16.9969169Z 
2025-10-08T16:01:16.9985795Z tests/test_dedupe_post_ids.py::TestDudupePostIds::test_basic_dedupe PASSED [ 11%]
2025-10-08T16:01:16.9995451Z tests/test_dedupe_post_ids.py::TestDudupePostIds::test_empty_input PASSED [ 22%]
2025-10-08T16:01:17.0004928Z tests/test_dedupe_post_ids.py::TestDudupePostIds::test_low_value_reposter_cross_posts PASSED [ 33%]
2025-10-08T16:01:17.0014288Z tests/test_dedupe_post_ids.py::TestDudupePostIds::test_mixed_scenarios PASSED [ 44%]
2025-10-08T16:01:17.0023997Z tests/test_dedupe_post_ids.py::TestDudupePostIds::test_no_cross_posts_found PASSED [ 55%]
2025-10-08T16:01:17.0037563Z tests/test_dedupe_post_ids.py::TestDudupePostIds::test_performance_with_1000_posts PASSED [ 66%]
2025-10-08T16:01:17.0046731Z tests/test_dedupe_post_ids.py::TestDudupePostIds::test_priority_prevents_filtering PASSED [ 77%]
2025-10-08T16:01:17.0055728Z tests/test_dedupe_post_ids.py::TestDudupePostIds::test_regular_cross_posts PASSED [ 88%]
2025-10-08T16:01:17.3487286Z tests/test_dedupe_post_ids.py::TestDudupePostIds::test_worst_case_performance PASSED [100%]
2025-10-08T16:01:17.3488177Z 
2025-10-08T16:01:17.3488381Z ============================== 9 passed in 1.31s ===============================
2025-10-08T16:01:17.8397596Z ============================= test session starts ==============================
2025-10-08T16:01:17.8398300Z platform linux -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
2025-10-08T16:01:17.8398816Z cachedir: .pytest_cache
2025-10-08T16:01:17.8399070Z rootdir: /home/runner/work/pyfedi/pyfedi
2025-10-08T16:01:17.8399651Z plugins: anyio-4.11.0
2025-10-08T16:01:17.8883505Z collecting ... collected 3 items
2025-10-08T16:01:17.8883750Z 
2025-10-08T16:01:18.0108121Z tests/test_explore_template_render.py::test_explore_template_renders_with_empty_topics FAILED [ 33%]
2025-10-08T16:01:18.1101640Z tests/test_explore_template_render.py::test_explore_template_renders_with_topics FAILED [ 66%]
2025-10-08T16:01:18.1394886Z tests/test_explore_template_render.py::test_explore_template_length_filter_usage PASSED [100%]
2025-10-08T16:01:18.1395526Z 
2025-10-08T16:01:18.1395706Z =================================== FAILURES ===================================
2025-10-08T16:01:18.1396309Z _______________ test_explore_template_renders_with_empty_topics ________________
2025-10-08T16:01:18.1396724Z 
2025-10-08T16:01:18.1396946Z     def test_explore_template_renders_with_empty_topics():
2025-10-08T16:01:18.1397760Z         """Test that explore template renders when topics list is empty."""
2025-10-08T16:01:18.1398386Z         templates_dir = os.path.join(
2025-10-08T16:01:18.1398879Z             os.path.dirname(os.path.dirname(__file__)),
2025-10-08T16:01:18.1399351Z             'app', 'templates'
2025-10-08T16:01:18.1399697Z         )
2025-10-08T16:01:18.1399970Z     
2025-10-08T16:01:18.1400303Z         if not os.path.exists(templates_dir):
2025-10-08T16:01:18.1400801Z             pytest.skip("Templates directory not found")
2025-10-08T16:01:18.1401256Z     
2025-10-08T16:01:18.1401553Z         # Create Jinja2 environment
2025-10-08T16:01:18.1402078Z         env = Environment(loader=FileSystemLoader(templates_dir))
2025-10-08T16:01:18.1402573Z     
2025-10-08T16:01:18.1402970Z         # Mock the custom functions and filters
2025-10-08T16:01:18.1403410Z         def mock_theme():
2025-10-08T16:01:18.1403769Z             return 'piefed'
2025-10-08T16:01:18.1404109Z     
2025-10-08T16:01:18.1404401Z         def mock_file_exists(path):
2025-10-08T16:01:18.1404802Z             return False
2025-10-08T16:01:18.1405124Z     
2025-10-08T16:01:18.1405420Z         def mock_translate(text):
2025-10-08T16:01:18.1405795Z             return text
2025-10-08T16:01:18.1406112Z     
2025-10-08T16:01:18.1406423Z         # Add functions to globals (not filters)
2025-10-08T16:01:18.1406886Z         env.globals['theme'] = mock_theme
2025-10-08T16:01:18.1407535Z         env.globals['file_exists'] = mock_file_exists
2025-10-08T16:01:18.1408030Z         env.globals['_'] = mock_translate
2025-10-08T16:01:18.1408534Z         env.globals['current_user'] = type('MockUser', (), {
2025-10-08T16:01:18.1409043Z             'is_authenticated': False,
2025-10-08T16:01:18.1409459Z             'is_anonymous': True,
2025-10-08T16:01:18.1409855Z             'link': lambda: 'testuser'
2025-10-08T16:01:18.1410244Z         })()
2025-10-08T16:01:18.1410522Z     
2025-10-08T16:01:18.1410779Z         try:
2025-10-08T16:01:18.1411137Z             template = env.get_template('explore.html')
2025-10-08T16:01:18.1411578Z     
2025-10-08T16:01:18.1411924Z             # Test with empty topics
2025-10-08T16:01:18.1412343Z >           rendered = template.render(
2025-10-08T16:01:18.1412760Z                 topics=[],
2025-10-08T16:01:18.1413134Z                 menu_instance_feeds=[],
2025-10-08T16:01:18.1413548Z                 menu_my_feeds=None,
2025-10-08T16:01:18.1413971Z                 menu_subscribed_feeds=None
2025-10-08T16:01:18.1414373Z             )
2025-10-08T16:01:18.1414553Z 
2025-10-08T16:01:18.1414728Z tests/test_explore_template_render.py:49: 
2025-10-08T16:01:18.1415230Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:18.1416097Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/jinja2/environment.py:1295: in render
2025-10-08T16:01:18.1416928Z     self.environment.handle_exception()
2025-10-08T16:01:18.1417969Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/jinja2/environment.py:942: in handle_exception
2025-10-08T16:01:18.1418908Z     raise rewrite_traceback_stack(source=source)
2025-10-08T16:01:18.1419820Z app/templates/explore.html:6: in top-level template code
2025-10-08T16:01:18.1420459Z     {% from 'bootstrap5/form.html' import render_form -%}
2025-10-08T16:01:18.1420945Z     ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:18.1421376Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:18.1421728Z 
2025-10-08T16:01:18.1422022Z self = <jinja2.loaders.FileSystemLoader object at 0x7fca4cbec830>
2025-10-08T16:01:18.1422988Z environment = <jinja2.environment.Environment object at 0x7fca4c8b1550>
2025-10-08T16:01:18.1423621Z template = 'bootstrap5/form.html'
2025-10-08T16:01:18.1423895Z 
2025-10-08T16:01:18.1424027Z     def get_source(
2025-10-08T16:01:18.1424417Z         self, environment: "Environment", template: str
2025-10-08T16:01:18.1424939Z     ) -> t.Tuple[str, str, t.Callable[[], bool]]:
2025-10-08T16:01:18.1425427Z         pieces = split_template_path(template)
2025-10-08T16:01:18.1425843Z     
2025-10-08T16:01:18.1426166Z         for searchpath in self.searchpath:
2025-10-08T16:01:18.1426707Z             # Use posixpath even on Windows to avoid "drive:" or UNC
2025-10-08T16:01:18.1427286Z             # segments breaking out of the search directory.
2025-10-08T16:01:18.1428023Z             filename = posixpath.join(searchpath, *pieces)
2025-10-08T16:01:18.1428520Z     
2025-10-08T16:01:18.1428821Z             if os.path.isfile(filename):
2025-10-08T16:01:18.1429245Z                 break
2025-10-08T16:01:18.1429555Z         else:
2025-10-08T16:01:18.1429964Z             plural = "path" if len(self.searchpath) == 1 else "paths"
2025-10-08T16:01:18.1430576Z             paths_str = ", ".join(repr(p) for p in self.searchpath)
2025-10-08T16:01:18.1431100Z >           raise TemplateNotFound(
2025-10-08T16:01:18.1431505Z                 template,
2025-10-08T16:01:18.1431971Z                 f"{template!r} not found in search {plural}: {paths_str}",
2025-10-08T16:01:18.1432511Z             )
2025-10-08T16:01:18.1433365Z E           jinja2.exceptions.TemplateNotFound: 'bootstrap5/form.html' not found in search path: '/home/runner/work/pyfedi/pyfedi/app/templates'
2025-10-08T16:01:18.1434195Z 
2025-10-08T16:01:18.1434741Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/jinja2/loaders.py:209: TemplateNotFound
2025-10-08T16:01:18.1435729Z __________________ test_explore_template_renders_with_topics ___________________
2025-10-08T16:01:18.1436187Z 
2025-10-08T16:01:18.1436390Z     def test_explore_template_renders_with_topics():
2025-10-08T16:01:18.1436965Z         """Test that explore template renders when topics exist."""
2025-10-08T16:01:18.1437700Z         templates_dir = os.path.join(
2025-10-08T16:01:18.1438219Z             os.path.dirname(os.path.dirname(__file__)),
2025-10-08T16:01:18.1438686Z             'app', 'templates'
2025-10-08T16:01:18.1439036Z         )
2025-10-08T16:01:18.1439299Z     
2025-10-08T16:01:18.1439616Z         if not os.path.exists(templates_dir):
2025-10-08T16:01:18.1440132Z             pytest.skip("Templates directory not found")
2025-10-08T16:01:18.1440563Z     
2025-10-08T16:01:18.1440820Z         # Mock topic object
2025-10-08T16:01:18.1441153Z         class MockTopic:
2025-10-08T16:01:18.1441477Z             def __init__(self, name):
2025-10-08T16:01:18.1441845Z                 self.name = name
2025-10-08T16:01:18.1442174Z     
2025-10-08T16:01:18.1442432Z             def path(self):
2025-10-08T16:01:18.1442847Z                 return self.name.lower().replace(' ', '-')
2025-10-08T16:01:18.1443242Z     
2025-10-08T16:01:18.1443519Z         # Create mock topic tree structure
2025-10-08T16:01:18.1443911Z         mock_topics = [
2025-10-08T16:01:18.1444210Z             {
2025-10-08T16:01:18.1444511Z                 'topic': MockTopic('Technology'),
2025-10-08T16:01:18.1444918Z                 'children': [
2025-10-08T16:01:18.1445256Z                     {
2025-10-08T16:01:18.1445604Z                         'topic': MockTopic('Programming'),
2025-10-08T16:01:18.1446043Z                         'children': []
2025-10-08T16:01:18.1446606Z                     }
2025-10-08T16:01:18.1446900Z                 ]
2025-10-08T16:01:18.1447171Z             },
2025-10-08T16:01:18.1447626Z             {
2025-10-08T16:01:18.1447928Z                 'topic': MockTopic('Science'),
2025-10-08T16:01:18.1448339Z                 'children': []
2025-10-08T16:01:18.1448671Z             }
2025-10-08T16:01:18.1448929Z         ]
2025-10-08T16:01:18.1449374Z     
2025-10-08T16:01:18.1449652Z         # Create Jinja2 environment
2025-10-08T16:01:18.1450137Z         env = Environment(loader=FileSystemLoader(templates_dir))
2025-10-08T16:01:18.1450600Z     
2025-10-08T16:01:18.1450881Z         # Mock the custom functions and globals
2025-10-08T16:01:18.1451266Z         env.globals['theme'] = lambda: 'piefed'
2025-10-08T16:01:18.1451672Z         env.globals['file_exists'] = lambda path: False
2025-10-08T16:01:18.1452072Z         env.globals['_'] = lambda text: text
2025-10-08T16:01:18.1452495Z         env.globals['current_user'] = type('MockUser', (), {
2025-10-08T16:01:18.1452904Z             'is_authenticated': False,
2025-10-08T16:01:18.1453245Z             'is_anonymous': True,
2025-10-08T16:01:18.1453571Z             'link': lambda: 'testuser'
2025-10-08T16:01:18.1453878Z         })()
2025-10-08T16:01:18.1454106Z     
2025-10-08T16:01:18.1454319Z         try:
2025-10-08T16:01:18.1454608Z             template = env.get_template('explore.html')
2025-10-08T16:01:18.1454977Z     
2025-10-08T16:01:18.1455250Z             # Test with topics
2025-10-08T16:01:18.1455633Z >           rendered = template.render(
2025-10-08T16:01:18.1456049Z                 topics=mock_topics,
2025-10-08T16:01:18.1456453Z                 menu_instance_feeds=[],
2025-10-08T16:01:18.1456868Z                 menu_my_feeds=None,
2025-10-08T16:01:18.1457264Z                 menu_subscribed_feeds=None
2025-10-08T16:01:18.1457807Z             )
2025-10-08T16:01:18.1457962Z 
2025-10-08T16:01:18.1458124Z tests/test_explore_template_render.py:125: 
2025-10-08T16:01:18.1458584Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:18.1459383Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/jinja2/environment.py:1295: in render
2025-10-08T16:01:18.1460161Z     self.environment.handle_exception()
2025-10-08T16:01:18.1460967Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/jinja2/environment.py:942: in handle_exception
2025-10-08T16:01:18.1461903Z     raise rewrite_traceback_stack(source=source)
2025-10-08T16:01:18.1462491Z app/templates/explore.html:6: in top-level template code
2025-10-08T16:01:18.1463103Z     {% from 'bootstrap5/form.html' import render_form -%}
2025-10-08T16:01:18.1463588Z     ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:18.1464015Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:18.1464362Z 
2025-10-08T16:01:18.1464658Z self = <jinja2.loaders.FileSystemLoader object at 0x7fca4c88a850>
2025-10-08T16:01:18.1465437Z environment = <jinja2.environment.Environment object at 0x7fca4c88ad50>
2025-10-08T16:01:18.1466069Z template = 'bootstrap5/form.html'
2025-10-08T16:01:18.1466351Z 
2025-10-08T16:01:18.1466476Z     def get_source(
2025-10-08T16:01:18.1466873Z         self, environment: "Environment", template: str
2025-10-08T16:01:18.1467539Z     ) -> t.Tuple[str, str, t.Callable[[], bool]]:
2025-10-08T16:01:18.1468048Z         pieces = split_template_path(template)
2025-10-08T16:01:18.1468486Z     
2025-10-08T16:01:18.1468800Z         for searchpath in self.searchpath:
2025-10-08T16:01:18.1469342Z             # Use posixpath even on Windows to avoid "drive:" or UNC
2025-10-08T16:01:18.1469943Z             # segments breaking out of the search directory.
2025-10-08T16:01:18.1470514Z             filename = posixpath.join(searchpath, *pieces)
2025-10-08T16:01:18.1470975Z     
2025-10-08T16:01:18.1471287Z             if os.path.isfile(filename):
2025-10-08T16:01:18.1471709Z                 break
2025-10-08T16:01:18.1472024Z         else:
2025-10-08T16:01:18.1472626Z             plural = "path" if len(self.searchpath) == 1 else "paths"
2025-10-08T16:01:18.1473270Z             paths_str = ", ".join(repr(p) for p in self.searchpath)
2025-10-08T16:01:18.1473799Z >           raise TemplateNotFound(
2025-10-08T16:01:18.1474214Z                 template,
2025-10-08T16:01:18.1474688Z                 f"{template!r} not found in search {plural}: {paths_str}",
2025-10-08T16:01:18.1475374Z             )
2025-10-08T16:01:18.1476248Z E           jinja2.exceptions.TemplateNotFound: 'bootstrap5/form.html' not found in search path: '/home/runner/work/pyfedi/pyfedi/app/templates'
2025-10-08T16:01:18.1477108Z 
2025-10-08T16:01:18.1477825Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/jinja2/loaders.py:209: TemplateNotFound
2025-10-08T16:01:18.1478735Z =========================== short test summary info ============================
2025-10-08T16:01:18.1480345Z FAILED tests/test_explore_template_render.py::test_explore_template_renders_with_empty_topics - jinja2.exceptions.TemplateNotFound: 'bootstrap5/form.html' not found in search path: '/home/runner/work/pyfedi/pyfedi/app/templates'
2025-10-08T16:01:18.1482798Z FAILED tests/test_explore_template_render.py::test_explore_template_renders_with_topics - jinja2.exceptions.TemplateNotFound: 'bootstrap5/form.html' not found in search path: '/home/runner/work/pyfedi/pyfedi/app/templates'
2025-10-08T16:01:18.1484253Z ========================= 2 failed, 1 passed in 0.28s ==========================
2025-10-08T16:01:18.3840317Z ============================= test session starts ==============================
2025-10-08T16:01:18.3841275Z platform linux -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
2025-10-08T16:01:18.3842107Z cachedir: .pytest_cache
2025-10-08T16:01:18.3842538Z rootdir: /home/runner/work/pyfedi/pyfedi
2025-10-08T16:01:18.3843022Z plugins: anyio-4.11.0
2025-10-08T16:01:19.4362949Z collecting ... collected 1 item
2025-10-08T16:01:19.4363321Z 
2025-10-08T16:01:20.9863631Z tests/test_api_community_subscriptions.py::test_api_community_subscriptions FAILED [100%]
2025-10-08T16:01:20.9864284Z 
2025-10-08T16:01:20.9864487Z =================================== FAILURES ===================================
2025-10-08T16:01:20.9865113Z _______________________ test_api_community_subscriptions _______________________
2025-10-08T16:01:20.9865556Z 
2025-10-08T16:01:20.9865885Z self = <sqlalchemy.engine.base.Connection object at 0x7fb61b5d3a80>
2025-10-08T16:01:20.9866844Z dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb624d742f0>
2025-10-08T16:01:20.9868385Z context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb61b010e10>
2025-10-08T16:01:20.9869092Z statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fb61b629400>
2025-10-08T16:01:20.9869562Z parameters = [(1,)]
2025-10-08T16:01:20.9869697Z 
2025-10-08T16:01:20.9869798Z     def _exec_single_context(
2025-10-08T16:01:20.9870032Z         self,
2025-10-08T16:01:20.9870244Z         dialect: Dialect,
2025-10-08T16:01:20.9870486Z         context: ExecutionContext,
2025-10-08T16:01:20.9870759Z         statement: Union[str, Compiled],
2025-10-08T16:01:20.9871095Z         parameters: Optional[_AnyMultiExecuteParams],
2025-10-08T16:01:20.9871419Z     ) -> CursorResult[Any]:
2025-10-08T16:01:20.9871732Z         """continue the _execute_context() method for a single DBAPI
2025-10-08T16:01:20.9872123Z         cursor.execute() or cursor.executemany() call.
2025-10-08T16:01:20.9872419Z     
2025-10-08T16:01:20.9872593Z         """
2025-10-08T16:01:20.9872839Z         if dialect.bind_typing is BindTyping.SETINPUTSIZES:
2025-10-08T16:01:20.9873256Z             generic_setinputsizes = context._prepare_set_input_sizes()
2025-10-08T16:01:20.9873595Z     
2025-10-08T16:01:20.9873787Z             if generic_setinputsizes:
2025-10-08T16:01:20.9874047Z                 try:
2025-10-08T16:01:20.9874280Z                     dialect.do_set_input_sizes(
2025-10-08T16:01:20.9874834Z                         context.cursor, generic_setinputsizes, context
2025-10-08T16:01:20.9875130Z                     )
2025-10-08T16:01:20.9875342Z                 except BaseException as e:
2025-10-08T16:01:20.9875647Z                     self._handle_dbapi_exception(
2025-10-08T16:01:20.9875948Z                         e, str(statement), parameters, None, context
2025-10-08T16:01:20.9876362Z                     )
2025-10-08T16:01:20.9876545Z     
2025-10-08T16:01:20.9876736Z         cursor, str_statement, parameters = (
2025-10-08T16:01:20.9876997Z             context.cursor,
2025-10-08T16:01:20.9877211Z             context.statement,
2025-10-08T16:01:20.9877697Z             context.parameters,
2025-10-08T16:01:20.9877920Z         )
2025-10-08T16:01:20.9878073Z     
2025-10-08T16:01:20.9878296Z         effective_parameters: Optional[_AnyExecuteParams]
2025-10-08T16:01:20.9878573Z     
2025-10-08T16:01:20.9878748Z         if not context.executemany:
2025-10-08T16:01:20.9879020Z             effective_parameters = parameters[0]
2025-10-08T16:01:20.9879272Z         else:
2025-10-08T16:01:20.9879462Z             effective_parameters = parameters
2025-10-08T16:01:20.9879708Z     
2025-10-08T16:01:20.9879910Z         if self._has_events or self.engine._has_events:
2025-10-08T16:01:20.9880220Z             for fn in self.dispatch.before_cursor_execute:
2025-10-08T16:01:20.9880531Z                 str_statement, effective_parameters = fn(
2025-10-08T16:01:20.9880799Z                     self,
2025-10-08T16:01:20.9880998Z                     cursor,
2025-10-08T16:01:20.9881213Z                     str_statement,
2025-10-08T16:01:20.9881455Z                     effective_parameters,
2025-10-08T16:01:20.9881694Z                     context,
2025-10-08T16:01:20.9881923Z                     context.executemany,
2025-10-08T16:01:20.9882156Z                 )
2025-10-08T16:01:20.9882332Z     
2025-10-08T16:01:20.9882494Z         if self._echo:
2025-10-08T16:01:20.9882711Z             self._log_info(str_statement)
2025-10-08T16:01:20.9882954Z     
2025-10-08T16:01:20.9883136Z             stats = context._get_cache_stats()
2025-10-08T16:01:20.9883375Z     
2025-10-08T16:01:20.9883572Z             if not self.engine.hide_parameters:
2025-10-08T16:01:20.9883826Z                 self._log_info(
2025-10-08T16:01:20.9884044Z                     "[%s] %r",
2025-10-08T16:01:20.9884256Z                     stats,
2025-10-08T16:01:20.9884474Z                     sql_util._repr_params(
2025-10-08T16:01:20.9884738Z                         effective_parameters,
2025-10-08T16:01:20.9884988Z                         batches=10,
2025-10-08T16:01:20.9885234Z                         ismulti=context.executemany,
2025-10-08T16:01:20.9885488Z                     ),
2025-10-08T16:01:20.9885675Z                 )
2025-10-08T16:01:20.9885854Z             else:
2025-10-08T16:01:20.9886033Z                 self._log_info(
2025-10-08T16:01:20.9886317Z                     "[%s] [SQL parameters hidden due to hide_parameters=True]",
2025-10-08T16:01:20.9886626Z                     stats,
2025-10-08T16:01:20.9886815Z                 )
2025-10-08T16:01:20.9886986Z     
2025-10-08T16:01:20.9887175Z         evt_handled: bool = False
2025-10-08T16:01:20.9887509Z         try:
2025-10-08T16:01:20.9887750Z             if context.execute_style is ExecuteStyle.EXECUTEMANY:
2025-10-08T16:01:20.9888068Z                 effective_parameters = cast(
2025-10-08T16:01:20.9888367Z                     "_CoreMultiExecuteParams", effective_parameters
2025-10-08T16:01:20.9888647Z                 )
2025-10-08T16:01:20.9888844Z                 if self.dialect._has_events:
2025-10-08T16:01:20.9889134Z                     for fn in self.dialect.dispatch.do_executemany:
2025-10-08T16:01:20.9889414Z                         if fn(
2025-10-08T16:01:20.9889628Z                             cursor,
2025-10-08T16:01:20.9889857Z                             str_statement,
2025-10-08T16:01:20.9890104Z                             effective_parameters,
2025-10-08T16:01:20.9890496Z                             context,
2025-10-08T16:01:20.9890726Z                         ):
2025-10-08T16:01:20.9890936Z                             evt_handled = True
2025-10-08T16:01:20.9891178Z                             break
2025-10-08T16:01:20.9891401Z                 if not evt_handled:
2025-10-08T16:01:20.9891646Z                     self.dialect.do_executemany(
2025-10-08T16:01:20.9891897Z                         cursor,
2025-10-08T16:01:20.9892242Z                         str_statement,
2025-10-08T16:01:20.9892488Z                         effective_parameters,
2025-10-08T16:01:20.9892729Z                         context,
2025-10-08T16:01:20.9892942Z                     )
2025-10-08T16:01:20.9893205Z             elif not effective_parameters and context.no_parameters:
2025-10-08T16:01:20.9893513Z                 if self.dialect._has_events:
2025-10-08T16:01:20.9893821Z                     for fn in self.dialect.dispatch.do_execute_no_params:
2025-10-08T16:01:20.9894152Z                         if fn(cursor, str_statement, context):
2025-10-08T16:01:20.9894425Z                             evt_handled = True
2025-10-08T16:01:20.9894669Z                             break
2025-10-08T16:01:20.9894893Z                 if not evt_handled:
2025-10-08T16:01:20.9895142Z                     self.dialect.do_execute_no_params(
2025-10-08T16:01:20.9895416Z                         cursor, str_statement, context
2025-10-08T16:01:20.9895665Z                     )
2025-10-08T16:01:20.9895882Z             else:
2025-10-08T16:01:20.9896079Z                 effective_parameters = cast(
2025-10-08T16:01:20.9896375Z                     "_CoreSingleExecuteParams", effective_parameters
2025-10-08T16:01:20.9896652Z                 )
2025-10-08T16:01:20.9896841Z                 if self.dialect._has_events:
2025-10-08T16:01:20.9897127Z                     for fn in self.dialect.dispatch.do_execute:
2025-10-08T16:01:20.9897505Z                         if fn(
2025-10-08T16:01:20.9897713Z                             cursor,
2025-10-08T16:01:20.9897947Z                             str_statement,
2025-10-08T16:01:20.9898199Z                             effective_parameters,
2025-10-08T16:01:20.9898451Z                             context,
2025-10-08T16:01:20.9898665Z                         ):
2025-10-08T16:01:20.9898880Z                             evt_handled = True
2025-10-08T16:01:20.9899121Z                             break
2025-10-08T16:01:20.9899344Z                 if not evt_handled:
2025-10-08T16:01:20.9899580Z >                   self.dialect.do_execute(
2025-10-08T16:01:20.9899878Z                         cursor, str_statement, effective_parameters, context
2025-10-08T16:01:20.9900162Z                     )
2025-10-08T16:01:20.9900291Z 
2025-10-08T16:01:20.9900587Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1967: 
2025-10-08T16:01:20.9901073Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:20.9901273Z 
2025-10-08T16:01:20.9901552Z self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb624d742f0>
2025-10-08T16:01:20.9902011Z cursor = <sqlite3.Cursor object at 0x7fb61b009a40>
2025-10-08T16:01:20.9902831Z statement = 'SELECT user.id AS user_id, user.user_name AS user_user_name, user.alt_user_name AS user_alt_user_name, user.title AS ...le_2.id = user.cover_id LEFT OUTER JOIN instance AS instance_1 ON instance_1.id = user.instance_id \nWHERE user.id = ?'
2025-10-08T16:01:20.9903612Z parameters = (1,)
2025-10-08T16:01:20.9903996Z context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb61b010e10>
2025-10-08T16:01:20.9904348Z 
2025-10-08T16:01:20.9904515Z     def do_execute(self, cursor, statement, parameters, context=None):
2025-10-08T16:01:20.9904861Z >       cursor.execute(statement, parameters)
2025-10-08T16:01:20.9905162Z E       sqlite3.OperationalError: no such table: user
2025-10-08T16:01:20.9905364Z 
2025-10-08T16:01:20.9905844Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/default.py:951: OperationalError
2025-10-08T16:01:20.9906286Z 
2025-10-08T16:01:20.9906457Z The above exception was the direct cause of the following exception:
2025-10-08T16:01:20.9906713Z 
2025-10-08T16:01:20.9906791Z app = <Flask 'app'>
2025-10-08T16:01:20.9906911Z 
2025-10-08T16:01:20.9907020Z     def test_api_community_subscriptions(app):
2025-10-08T16:01:20.9907294Z         with app.app_context():
2025-10-08T16:01:20.9907962Z             from app.api.alpha.utils.community import put_community_subscribe
2025-10-08T16:01:20.9908292Z     
2025-10-08T16:01:20.9908459Z             user_id = 1
2025-10-08T16:01:20.9908669Z >           user = User.query.get(user_id)
2025-10-08T16:01:20.9908929Z                    ^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:20.9909085Z 
2025-10-08T16:01:20.9909210Z tests/test_api_community_subscriptions.py:29: 
2025-10-08T16:01:20.9909529Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:20.9909806Z <string>:2: in get
2025-10-08T16:01:20.9909993Z     ???
2025-10-08T16:01:20.9910430Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/util/deprecations.py:386: in warned
2025-10-08T16:01:20.9910988Z     return fn(*args, **kwargs)  # type: ignore[no-any-return]
2025-10-08T16:01:20.9911286Z            ^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:20.9911716Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/query.py:1126: in get
2025-10-08T16:01:20.9912240Z     return self._get_impl(ident, loading.load_on_pk_identity)
2025-10-08T16:01:20.9912542Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:20.9913021Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/query.py:1135: in _get_impl
2025-10-08T16:01:20.9913501Z     return self.session._get_impl(
2025-10-08T16:01:20.9913965Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/session.py:3873: in _get_impl
2025-10-08T16:01:20.9914439Z     return db_load_fn(
2025-10-08T16:01:20.9914910Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/loading.py:695: in load_on_pk_identity
2025-10-08T16:01:20.9915418Z     session.execute(
2025-10-08T16:01:20.9915835Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2365: in execute
2025-10-08T16:01:20.9916313Z     return self._execute_internal(
2025-10-08T16:01:20.9916811Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
2025-10-08T16:01:20.9917488Z     result: Result[Any] = compile_state_cls.orm_execute_statement(
2025-10-08T16:01:20.9918082Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
2025-10-08T16:01:20.9918600Z     result = conn.execute(
2025-10-08T16:01:20.9919040Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
2025-10-08T16:01:20.9919493Z     return meth(
2025-10-08T16:01:20.9919970Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
2025-10-08T16:01:20.9920760Z     return connection._execute_clauseelement(
2025-10-08T16:01:20.9921315Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
2025-10-08T16:01:20.9921843Z     ret = self._execute_context(
2025-10-08T16:01:20.9922336Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
2025-10-08T16:01:20.9922858Z     return self._exec_single_context(
2025-10-08T16:01:20.9923372Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
2025-10-08T16:01:20.9923898Z     self._handle_dbapi_exception(
2025-10-08T16:01:20.9924562Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
2025-10-08T16:01:20.9925188Z     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
2025-10-08T16:01:20.9925776Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
2025-10-08T16:01:20.9926298Z     self.dialect.do_execute(
2025-10-08T16:01:20.9926563Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:20.9926883Z 
2025-10-08T16:01:20.9927155Z self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fb624d742f0>
2025-10-08T16:01:20.9927744Z cursor = <sqlite3.Cursor object at 0x7fb61b009a40>
2025-10-08T16:01:20.9928563Z statement = 'SELECT user.id AS user_id, user.user_name AS user_user_name, user.alt_user_name AS user_alt_user_name, user.title AS ...le_2.id = user.cover_id LEFT OUTER JOIN instance AS instance_1 ON instance_1.id = user.instance_id \nWHERE user.id = ?'
2025-10-08T16:01:20.9929343Z parameters = (1,)
2025-10-08T16:01:20.9929731Z context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fb61b010e10>
2025-10-08T16:01:20.9930086Z 
2025-10-08T16:01:20.9930252Z     def do_execute(self, cursor, statement, parameters, context=None):
2025-10-08T16:01:20.9930602Z >       cursor.execute(statement, parameters)
2025-10-08T16:01:20.9931012Z E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: user
2025-10-08T16:01:20.9946137Z E       [SQL: SELECT user.id AS user_id, user.user_name AS user_user_name, user.alt_user_name AS user_alt_user_name, user.title AS user_title, user.email AS user_email, user.password_hash AS user_password_hash, user.verified AS user_verified, user.verification_token AS user_verification_token, user.banned AS user_banned, user.banned_until AS user_banned_until, user.ban_posts AS user_ban_posts, user.ban_comments AS user_ban_comments, user.deleted AS user_deleted, user.deleted_by AS user_deleted_by, user.about AS user_about, user.about_html AS user_about_html, user.keywords AS user_keywords, user.matrix_user_id AS user_matrix_user_id, user.hide_nsfw AS user_hide_nsfw, user.hide_nsfl AS user_hide_nsfl, user.created AS user_created, user.last_seen AS user_last_seen, user.avatar_id AS user_avatar_id, user.cover_id AS user_cover_id, user.public_key AS user_public_key, user.private_key AS user_private_key, user.newsletter AS user_newsletter, user.email_unread AS user_email_unread, user.email_unread_sent AS user_email_unread_sent, user.receive_message_mode AS user_receive_message_mode, user.bounces AS user_bounces, user.timezone AS user_timezone, user.reputation AS user_reputation, user.attitude AS user_attitude, user.post_count AS user_post_count, user.post_reply_count AS user_post_reply_count, user.stripe_customer_id AS user_stripe_customer_id, user.stripe_subscription_id AS user_stripe_subscription_id, user.searchable AS user_searchable, user.indexable AS user_indexable, user.bot AS user_bot, user.bot_override AS user_bot_override, user.suppress_crossposts AS user_suppress_crossposts, user.vote_privately AS user_vote_privately, user.ignore_bots AS user_ignore_bots, user.unread_notifications AS user_unread_notifications, user.ip_address AS user_ip_address, user.ip_address_country AS user_ip_address_country, user.instance_id AS user_instance_id, user.reports AS user_reports, user.default_sort AS user_default_sort, user.default_comment_sort AS user_default_comment_sort, user.default_filter AS user_default_filter, user.theme AS user_theme, user.font AS user_font, user.community_keyword_filter AS user_community_keyword_filter, user.referrer AS user_referrer, user.markdown_editor AS user_markdown_editor, user.interface_language AS user_interface_language, user.language_id AS user_language_id, user.read_language_ids AS user_read_language_ids, user.reply_collapse_threshold AS user_reply_collapse_threshold, user.reply_hide_threshold AS user_reply_hide_threshold, user.feed_auto_follow AS user_feed_auto_follow, user.feed_auto_leave AS user_feed_auto_leave, user.accept_private_messages AS user_accept_private_messages, user.google_oauth_id AS user_google_oauth_id, user.hide_low_quality AS user_hide_low_quality, user.show_subscribed_communities AS user_show_subscribed_communities, user.additional_css AS user_additional_css, user.mastodon_oauth_id AS user_mastodon_oauth_id, user.discord_oauth_id AS user_discord_oauth_id, user.password_updated_at AS user_password_updated_at, user.ap_id AS user_ap_id, user.ap_profile_id AS user_ap_profile_id, user.ap_public_url AS user_ap_public_url, user.ap_fetched_at AS user_ap_fetched_at, user.ap_followers_url AS user_ap_followers_url, user.ap_preferred_username AS user_ap_preferred_username, user.ap_manually_approves_followers AS user_ap_manually_approves_followers, user.ap_deleted_at AS user_ap_deleted_at, user.ap_inbox_url AS user_ap_inbox_url, user.ap_domain AS user_ap_domain, user.search_vector AS user_search_vector, user.hide_read_posts AS user_hide_read_posts, file_1.id AS file_1_id, file_1.file_path AS file_1_file_path, file_1.file_name AS file_1_file_name, file_1.width AS file_1_width, file_1.height AS file_1_height, file_1.alt_text AS file_1_alt_text, file_1.source_url AS file_1_source_url, file_1.thumbnail_path AS file_1_thumbnail_path, file_1.thumbnail_width AS file_1_thumbnail_width, file_1.thumbnail_height AS file_1_thumbnail_height, file_1.hash AS file_1_hash, file_2.id AS file_2_id, file_2.file_path AS file_2_file_path, file_2.file_name AS file_2_file_name, file_2.width AS file_2_width, file_2.height AS file_2_height, file_2.alt_text AS file_2_alt_text, file_2.source_url AS file_2_source_url, file_2.thumbnail_path AS file_2_thumbnail_path, file_2.thumbnail_width AS file_2_thumbnail_width, file_2.thumbnail_height AS file_2_thumbnail_height, file_2.hash AS file_2_hash, instance_1.id AS instance_1_id, instance_1.domain AS instance_1_domain, instance_1.inbox AS instance_1_inbox, instance_1.shared_inbox AS instance_1_shared_inbox, instance_1.outbox AS instance_1_outbox, instance_1.vote_weight AS instance_1_vote_weight, instance_1.software AS instance_1_software, instance_1.version AS instance_1_version, instance_1.created_at AS instance_1_created_at, instance_1.updated_at AS instance_1_updated_at, instance_1.last_seen AS instance_1_last_seen, instance_1.last_successful_send AS instance_1_last_successful_send, instance_1.failures AS instance_1_failures, instance_1.most_recent_attempt AS instance_1_most_recent_attempt, instance_1.dormant AS instance_1_dormant, instance_1.start_trying_again AS instance_1_start_trying_again, instance_1.gone_forever AS instance_1_gone_forever, instance_1.ip_address AS instance_1_ip_address, instance_1.trusted AS instance_1_trusted, instance_1.posting_warning AS instance_1_posting_warning, instance_1.nodeinfo_href AS instance_1_nodeinfo_href 
2025-10-08T16:01:20.9961909Z E       FROM user LEFT OUTER JOIN file AS file_1 ON file_1.id = user.avatar_id LEFT OUTER JOIN file AS file_2 ON file_2.id = user.cover_id LEFT OUTER JOIN instance AS instance_1 ON instance_1.id = user.instance_id 
2025-10-08T16:01:20.9962574Z E       WHERE user.id = ?]
2025-10-08T16:01:20.9962790Z E       [parameters: (1,)]
2025-10-08T16:01:20.9963102Z E       (Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-08T16:01:20.9963344Z 
2025-10-08T16:01:20.9963701Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/default.py:951: OperationalError
2025-10-08T16:01:20.9964299Z ------------------------------ Captured log setup ------------------------------
2025-10-08T16:01:20.9964631Z INFO     app:__init__.py:298 Started!
2025-10-08T16:01:20.9964961Z INFO     app:startup_validation.py:102 Running startup validations...
2025-10-08T16:01:20.9965368Z INFO     app:startup_validation.py:118 Startup validations completed
2025-10-08T16:01:20.9965720Z =============================== warnings summary ===============================
2025-10-08T16:01:20.9966135Z tests/test_api_community_subscriptions.py::test_api_community_subscriptions
2025-10-08T16:01:20.9967250Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pytesseract/pytesseract.py:32: DeprecationWarning: 'pkgutil.find_loader' is deprecated and slated for removal in Python 3.14; use importlib.util.find_spec() instead
2025-10-08T16:01:20.9968271Z     numpy_installed = find_loader('numpy') is not None
2025-10-08T16:01:20.9968473Z 
2025-10-08T16:01:20.9968669Z tests/test_api_community_subscriptions.py::test_api_community_subscriptions
2025-10-08T16:01:20.9969764Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pytesseract/pytesseract.py:36: DeprecationWarning: 'pkgutil.find_loader' is deprecated and slated for removal in Python 3.14; use importlib.util.find_spec() instead
2025-10-08T16:01:21.5406193Z     pandas_installed = find_loader('pandas') is not None
2025-10-08T16:01:21.5406613Z 
2025-10-08T16:01:21.5407019Z tests/test_api_community_subscriptions.py::test_api_community_subscriptions
2025-10-08T16:01:21.5408668Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pyasn1/codec/ber/encoder.py:952: DeprecationWarning: tagMap is deprecated. Please use TAG_MAP instead.
2025-10-08T16:01:21.5409817Z     warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)
2025-10-08T16:01:21.5410174Z 
2025-10-08T16:01:21.5410396Z tests/test_api_community_subscriptions.py::test_api_community_subscriptions
2025-10-08T16:01:21.5411282Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pyasn1/codec/ber/encoder.py:952: DeprecationWarning: typeMap is deprecated. Please use TYPE_MAP instead.
2025-10-08T16:01:21.5412185Z     warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)
2025-10-08T16:01:21.5412512Z 
2025-10-08T16:01:21.5412730Z tests/test_api_community_subscriptions.py::test_api_community_subscriptions
2025-10-08T16:01:21.5414102Z   /home/runner/work/pyfedi/pyfedi/tests/test_api_community_subscriptions.py:29: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
2025-10-08T16:01:21.5415350Z     user = User.query.get(user_id)
2025-10-08T16:01:21.5415525Z 
2025-10-08T16:01:21.5415719Z -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
2025-10-08T16:01:21.5416136Z =========================== short test summary info ============================
2025-10-08T16:01:21.5416888Z FAILED tests/test_api_community_subscriptions.py::test_api_community_subscriptions - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: user
2025-10-08T16:01:21.5433426Z [SQL: SELECT user.id AS user_id, user.user_name AS user_user_name, user.alt_user_name AS user_alt_user_name, user.title AS user_title, user.email AS user_email, user.password_hash AS user_password_hash, user.verified AS user_verified, user.verification_token AS user_verification_token, user.banned AS user_banned, user.banned_until AS user_banned_until, user.ban_posts AS user_ban_posts, user.ban_comments AS user_ban_comments, user.deleted AS user_deleted, user.deleted_by AS user_deleted_by, user.about AS user_about, user.about_html AS user_about_html, user.keywords AS user_keywords, user.matrix_user_id AS user_matrix_user_id, user.hide_nsfw AS user_hide_nsfw, user.hide_nsfl AS user_hide_nsfl, user.created AS user_created, user.last_seen AS user_last_seen, user.avatar_id AS user_avatar_id, user.cover_id AS user_cover_id, user.public_key AS user_public_key, user.private_key AS user_private_key, user.newsletter AS user_newsletter, user.email_unread AS user_email_unread, user.email_unread_sent AS user_email_unread_sent, user.receive_message_mode AS user_receive_message_mode, user.bounces AS user_bounces, user.timezone AS user_timezone, user.reputation AS user_reputation, user.attitude AS user_attitude, user.post_count AS user_post_count, user.post_reply_count AS user_post_reply_count, user.stripe_customer_id AS user_stripe_customer_id, user.stripe_subscription_id AS user_stripe_subscription_id, user.searchable AS user_searchable, user.indexable AS user_indexable, user.bot AS user_bot, user.bot_override AS user_bot_override, user.suppress_crossposts AS user_suppress_crossposts, user.vote_privately AS user_vote_privately, user.ignore_bots AS user_ignore_bots, user.unread_notifications AS user_unread_notifications, user.ip_address AS user_ip_address, user.ip_address_country AS user_ip_address_country, user.instance_id AS user_instance_id, user.reports AS user_reports, user.default_sort AS user_default_sort, user.default_comment_sort AS user_default_comment_sort, user.default_filter AS user_default_filter, user.theme AS user_theme, user.font AS user_font, user.community_keyword_filter AS user_community_keyword_filter, user.referrer AS user_referrer, user.markdown_editor AS user_markdown_editor, user.interface_language AS user_interface_language, user.language_id AS user_language_id, user.read_language_ids AS user_read_language_ids, user.reply_collapse_threshold AS user_reply_collapse_threshold, user.reply_hide_threshold AS user_reply_hide_threshold, user.feed_auto_follow AS user_feed_auto_follow, user.feed_auto_leave AS user_feed_auto_leave, user.accept_private_messages AS user_accept_private_messages, user.google_oauth_id AS user_google_oauth_id, user.hide_low_quality AS user_hide_low_quality, user.show_subscribed_communities AS user_show_subscribed_communities, user.additional_css AS user_additional_css, user.mastodon_oauth_id AS user_mastodon_oauth_id, user.discord_oauth_id AS user_discord_oauth_id, user.password_updated_at AS user_password_updated_at, user.ap_id AS user_ap_id, user.ap_profile_id AS user_ap_profile_id, user.ap_public_url AS user_ap_public_url, user.ap_fetched_at AS user_ap_fetched_at, user.ap_followers_url AS user_ap_followers_url, user.ap_preferred_username AS user_ap_preferred_username, user.ap_manually_approves_followers AS user_ap_manually_approves_followers, user.ap_deleted_at AS user_ap_deleted_at, user.ap_inbox_url AS user_ap_inbox_url, user.ap_domain AS user_ap_domain, user.search_vector AS user_search_vector, user.hide_read_posts AS user_hide_read_posts, file_1.id AS file_1_id, file_1.file_path AS file_1_file_path, file_1.file_name AS file_1_file_name, file_1.width AS file_1_width, file_1.height AS file_1_height, file_1.alt_text AS file_1_alt_text, file_1.source_url AS file_1_source_url, file_1.thumbnail_path AS file_1_thumbnail_path, file_1.thumbnail_width AS file_1_thumbnail_width, file_1.thumbnail_height AS file_1_thumbnail_height, file_1.hash AS file_1_hash, file_2.id AS file_2_id, file_2.file_path AS file_2_file_path, file_2.file_name AS file_2_file_name, file_2.width AS file_2_width, file_2.height AS file_2_height, file_2.alt_text AS file_2_alt_text, file_2.source_url AS file_2_source_url, file_2.thumbnail_path AS file_2_thumbnail_path, file_2.thumbnail_width AS file_2_thumbnail_width, file_2.thumbnail_height AS file_2_thumbnail_height, file_2.hash AS file_2_hash, instance_1.id AS instance_1_id, instance_1.domain AS instance_1_domain, instance_1.inbox AS instance_1_inbox, instance_1.shared_inbox AS instance_1_shared_inbox, instance_1.outbox AS instance_1_outbox, instance_1.vote_weight AS instance_1_vote_weight, instance_1.software AS instance_1_software, instance_1.version AS instance_1_version, instance_1.created_at AS instance_1_created_at, instance_1.updated_at AS instance_1_updated_at, instance_1.last_seen AS instance_1_last_seen, instance_1.last_successful_send AS instance_1_last_successful_send, instance_1.failures AS instance_1_failures, instance_1.most_recent_attempt AS instance_1_most_recent_attempt, instance_1.dormant AS instance_1_dormant, instance_1.start_trying_again AS instance_1_start_trying_again, instance_1.gone_forever AS instance_1_gone_forever, instance_1.ip_address AS instance_1_ip_address, instance_1.trusted AS instance_1_trusted, instance_1.posting_warning AS instance_1_posting_warning, instance_1.nodeinfo_href AS instance_1_nodeinfo_href 
2025-10-08T16:01:21.5449313Z FROM user LEFT OUTER JOIN file AS file_1 ON file_1.id = user.avatar_id LEFT OUTER JOIN file AS file_2 ON file_2.id = user.cover_id LEFT OUTER JOIN instance AS instance_1 ON instance_1.id = user.instance_id 
2025-10-08T16:01:21.5449979Z WHERE user.id = ?]
2025-10-08T16:01:21.5450168Z [parameters: (1,)]
2025-10-08T16:01:21.5450445Z (Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-08T16:01:21.5450815Z ======================== 1 failed, 5 warnings in 2.61s =========================
2025-10-08T16:01:22.2645377Z ============================= test session starts ==============================
2025-10-08T16:01:22.2646089Z platform linux -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
2025-10-08T16:01:22.2646582Z cachedir: .pytest_cache
2025-10-08T16:01:22.2646827Z rootdir: /home/runner/work/pyfedi/pyfedi
2025-10-08T16:01:22.2647100Z plugins: anyio-4.11.0
2025-10-08T16:01:22.3028378Z collecting ... collected 15 items
2025-10-08T16:01:22.3028728Z 
2025-10-08T16:01:23.6772401Z tests/test_user_management_simple.py::TestUserManagementLogic::test_ban_already_banned_user FAILED [  6%]
2025-10-08T16:01:23.6793153Z tests/test_user_management_simple.py::TestUserManagementLogic::test_ban_user_success PASSED [ 13%]
2025-10-08T16:01:23.6802084Z tests/test_user_management_simple.py::TestUserManagementLogic::test_bulk_operations_basic PASSED [ 20%]
2025-10-08T16:01:23.6810984Z tests/test_user_management_simple.py::TestUserManagementLogic::test_bulk_operations_partial_failure PASSED [ 26%]
2025-10-08T16:01:23.6818262Z tests/test_user_management_simple.py::TestUserManagementLogic::test_bulk_operations_too_many_users PASSED [ 33%]
2025-10-08T16:01:23.7832365Z tests/test_user_management_simple.py::TestUserManagementLogic::test_disable_user_success FAILED [ 40%]
2025-10-08T16:01:23.8782986Z tests/test_user_management_simple.py::TestUserManagementLogic::test_soft_delete_user FAILED [ 46%]
2025-10-08T16:01:23.8807043Z tests/test_user_management_simple.py::TestUserManagementLogic::test_update_user_email_conflict PASSED [ 53%]
2025-10-08T16:01:23.8821917Z tests/test_user_management_simple.py::TestUserManagementLogic::test_update_user_not_found PASSED [ 60%]
2025-10-08T16:01:23.9768700Z tests/test_user_management_simple.py::TestUserManagementLogic::test_update_user_success FAILED [ 66%]
2025-10-08T16:01:24.0292201Z tests/test_user_management_simple.py::TestUserStatistics::test_export_user_data_basic FAILED [ 73%]
2025-10-08T16:01:24.0399473Z tests/test_user_management_simple.py::TestUserStatistics::test_get_registration_statistics FAILED [ 80%]
2025-10-08T16:01:24.0514975Z tests/test_user_management_simple.py::TestUserStatistics::test_get_user_statistics FAILED [ 86%]
2025-10-08T16:01:24.0524770Z tests/test_user_management_simple.py::TestInputValidation::test_bulk_operation_validation PASSED [ 93%]
2025-10-08T16:01:24.0921052Z tests/test_user_management_simple.py::TestInputValidation::test_unknown_action_validation FAILED [100%]
2025-10-08T16:01:24.0921672Z 
2025-10-08T16:01:24.0921838Z =================================== FAILURES ===================================
2025-10-08T16:01:24.0922329Z _____________ TestUserManagementLogic.test_ban_already_banned_user _____________
2025-10-08T16:01:24.0922679Z 
2025-10-08T16:01:24.0923043Z self = <tests.test_user_management_simple.TestUserManagementLogic testMethod=test_ban_already_banned_user>
2025-10-08T16:01:24.0923669Z mock_user_class = <MagicMock name='User' id='140041271031664'>
2025-10-08T16:01:24.0923943Z 
2025-10-08T16:01:24.0924085Z     @patch('app.api.admin.user_management.User')
2025-10-08T16:01:24.0924483Z     def test_ban_already_banned_user(self, mock_user_class):
2025-10-08T16:01:24.0924856Z         """Test banning already banned user"""
2025-10-08T16:01:24.0925256Z         from app.api.admin.user_management import perform_user_action
2025-10-08T16:01:24.0925623Z     
2025-10-08T16:01:24.0925829Z         # Mock already banned user
2025-10-08T16:01:24.0926112Z         mock_user = MagicMock()
2025-10-08T16:01:24.0926372Z         mock_user.id = 123
2025-10-08T16:01:24.0926857Z         mock_user.banned = True
2025-10-08T16:01:24.0927281Z         mock_user_class.query.filter_by.return_value.first.return_value = mock_user
2025-10-08T16:01:24.0927994Z     
2025-10-08T16:01:24.0928242Z         with self.assertRaises(ValueError) as context:
2025-10-08T16:01:24.0928756Z >           perform_user_action(123, 'ban')
2025-10-08T16:01:24.0929123Z 
2025-10-08T16:01:24.0929573Z tests/test_user_management_simple.py:108: 
2025-10-08T16:01:24.0930010Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:24.0930438Z app/api/admin/user_management.py:186: in perform_user_action
2025-10-08T16:01:24.0930819Z     db.session.rollback()
2025-10-08T16:01:24.0931365Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/scoping.py:1793: in rollback
2025-10-08T16:01:24.0931970Z     return self._proxied.rollback()
2025-10-08T16:01:24.0932247Z            ^^^^^^^^^^^^^
2025-10-08T16:01:24.0932769Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/scoping.py:197: in _proxied
2025-10-08T16:01:24.0933336Z     return self.registry()
2025-10-08T16:01:24.0933582Z            ^^^^^^^^^^^^^^^
2025-10-08T16:01:24.0934129Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/util/_collections.py:634: in __call__
2025-10-08T16:01:24.0934724Z     key = self.scopefunc()
2025-10-08T16:01:24.0934972Z           ^^^^^^^^^^^^^^^^
2025-10-08T16:01:24.0935509Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask_sqlalchemy/session.py:111: in _app_ctx_id
2025-10-08T16:01:24.0936206Z     return id(app_ctx._get_current_object())  # type: ignore[attr-defined]
2025-10-08T16:01:24.0936635Z               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:24.0936956Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:24.0937190Z 
2025-10-08T16:01:24.0937305Z     def _get_current_object() -> T:
2025-10-08T16:01:24.0937698Z         try:
2025-10-08T16:01:24.0937922Z             obj = local.get()
2025-10-08T16:01:24.0938194Z         except LookupError:
2025-10-08T16:01:24.0938489Z >           raise RuntimeError(unbound_message) from None
2025-10-08T16:01:24.0938889Z E           RuntimeError: Working outside of application context.
2025-10-08T16:01:24.0939238Z E           
2025-10-08T16:01:24.0939579Z E           This typically means that you attempted to use functionality that needed
2025-10-08T16:01:24.0940121Z E           the current application. To solve this, set up an application context
2025-10-08T16:01:24.0940635Z E           with app.app_context(). See the documentation for more information.
2025-10-08T16:01:24.0940935Z 
2025-10-08T16:01:24.0941292Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/werkzeug/local.py:519: RuntimeError
2025-10-08T16:01:24.0941989Z ______________ TestUserManagementLogic.test_disable_user_success _______________
2025-10-08T16:01:24.0942597Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:1423: in patched
2025-10-08T16:01:24.0943025Z     with self.decoration_helper(patched,
2025-10-08T16:01:24.0943444Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/contextlib.py:141: in __enter__
2025-10-08T16:01:24.0943832Z     return next(self.gen)
2025-10-08T16:01:24.0944043Z            ^^^^^^^^^^^^^^
2025-10-08T16:01:24.0944429Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:1405: in decoration_helper
2025-10-08T16:01:24.0944877Z     arg = exit_stack.enter_context(patching)
2025-10-08T16:01:24.0945142Z           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:24.0945533Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/contextlib.py:530: in enter_context
2025-10-08T16:01:24.0945929Z     result = _enter(cm)
2025-10-08T16:01:24.0946119Z              ^^^^^^^^^^
2025-10-08T16:01:24.0946468Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:1524: in __enter__
2025-10-08T16:01:24.0946893Z     elif spec is None and _is_async_obj(original):
2025-10-08T16:01:24.0947300Z                           ^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:24.0947954Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:58: in _is_async_obj
2025-10-08T16:01:24.0948367Z     if hasattr(obj, '__func__'):
2025-10-08T16:01:24.0948592Z        ^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:24.0949003Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/werkzeug/local.py:318: in __get__
2025-10-08T16:01:24.0949592Z     obj = instance._get_current_object()
2025-10-08T16:01:24.0949839Z           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:24.0950099Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:24.0950309Z 
2025-10-08T16:01:24.0950401Z     def _get_current_object() -> T:
2025-10-08T16:01:24.0950632Z         try:
2025-10-08T16:01:24.0950819Z             obj = local.get()
2025-10-08T16:01:24.0951038Z         except LookupError:
2025-10-08T16:01:24.0951297Z >           raise RuntimeError(unbound_message) from None
2025-10-08T16:01:24.0951631Z E           RuntimeError: Working outside of application context.
2025-10-08T16:01:24.0951918Z E           
2025-10-08T16:01:24.0952205Z E           This typically means that you attempted to use functionality that needed
2025-10-08T16:01:24.0952657Z E           the current application. To solve this, set up an application context
2025-10-08T16:01:24.0953085Z E           with app.app_context(). See the documentation for more information.
2025-10-08T16:01:24.0953341Z 
2025-10-08T16:01:24.0953630Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/werkzeug/local.py:519: RuntimeError
2025-10-08T16:01:24.0954188Z ________________ TestUserManagementLogic.test_soft_delete_user _________________
2025-10-08T16:01:24.0954688Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:1423: in patched
2025-10-08T16:01:24.0955092Z     with self.decoration_helper(patched,
2025-10-08T16:01:24.0955487Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/contextlib.py:141: in __enter__
2025-10-08T16:01:24.0955870Z     return next(self.gen)
2025-10-08T16:01:24.0956075Z            ^^^^^^^^^^^^^^
2025-10-08T16:01:24.0956454Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:1405: in decoration_helper
2025-10-08T16:01:24.0956898Z     arg = exit_stack.enter_context(patching)
2025-10-08T16:01:24.0957158Z           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:24.0957655Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/contextlib.py:530: in enter_context
2025-10-08T16:01:24.0958048Z     result = _enter(cm)
2025-10-08T16:01:24.0958244Z              ^^^^^^^^^^
2025-10-08T16:01:24.0958578Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:1524: in __enter__
2025-10-08T16:01:24.0959000Z     elif spec is None and _is_async_obj(original):
2025-10-08T16:01:24.0959281Z                           ^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:24.0959686Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:58: in _is_async_obj
2025-10-08T16:01:24.0960092Z     if hasattr(obj, '__func__'):
2025-10-08T16:01:24.0960316Z        ^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:24.0960728Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/werkzeug/local.py:318: in __get__
2025-10-08T16:01:24.0961171Z     obj = instance._get_current_object()
2025-10-08T16:01:24.0961417Z           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:24.0961688Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:24.0961884Z 
2025-10-08T16:01:24.0961978Z     def _get_current_object() -> T:
2025-10-08T16:01:24.0962202Z         try:
2025-10-08T16:01:24.0962378Z             obj = local.get()
2025-10-08T16:01:24.0962598Z         except LookupError:
2025-10-08T16:01:24.0962846Z >           raise RuntimeError(unbound_message) from None
2025-10-08T16:01:24.0963181Z E           RuntimeError: Working outside of application context.
2025-10-08T16:01:24.0963469Z E           
2025-10-08T16:01:24.0963864Z E           This typically means that you attempted to use functionality that needed
2025-10-08T16:01:24.0964317Z E           the current application. To solve this, set up an application context
2025-10-08T16:01:24.0964740Z E           with app.app_context(). See the documentation for more information.
2025-10-08T16:01:24.0964987Z 
2025-10-08T16:01:24.0965277Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/werkzeug/local.py:519: RuntimeError
2025-10-08T16:01:24.0965938Z _______________ TestUserManagementLogic.test_update_user_success _______________
2025-10-08T16:01:24.0966436Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:1423: in patched
2025-10-08T16:01:24.0966840Z     with self.decoration_helper(patched,
2025-10-08T16:01:24.0967226Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/contextlib.py:141: in __enter__
2025-10-08T16:01:24.0967832Z     return next(self.gen)
2025-10-08T16:01:24.0968038Z            ^^^^^^^^^^^^^^
2025-10-08T16:01:24.0968425Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:1405: in decoration_helper
2025-10-08T16:01:24.0968861Z     arg = exit_stack.enter_context(patching)
2025-10-08T16:01:24.0969120Z           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:24.0969503Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/contextlib.py:530: in enter_context
2025-10-08T16:01:24.0969899Z     result = _enter(cm)
2025-10-08T16:01:24.0970087Z              ^^^^^^^^^^
2025-10-08T16:01:24.0970431Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:1524: in __enter__
2025-10-08T16:01:24.0970854Z     elif spec is None and _is_async_obj(original):
2025-10-08T16:01:24.0971123Z                           ^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:24.0971522Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:58: in _is_async_obj
2025-10-08T16:01:24.0971929Z     if hasattr(obj, '__func__'):
2025-10-08T16:01:24.0972145Z        ^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:24.0972565Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/werkzeug/local.py:318: in __get__
2025-10-08T16:01:24.0973024Z     obj = instance._get_current_object()
2025-10-08T16:01:24.0973265Z           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:24.0973524Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:24.0973724Z 
2025-10-08T16:01:24.0973820Z     def _get_current_object() -> T:
2025-10-08T16:01:24.0974047Z         try:
2025-10-08T16:01:24.0974225Z             obj = local.get()
2025-10-08T16:01:24.0974448Z         except LookupError:
2025-10-08T16:01:24.0974701Z >           raise RuntimeError(unbound_message) from None
2025-10-08T16:01:24.0975031Z E           RuntimeError: Working outside of application context.
2025-10-08T16:01:24.0975313Z E           
2025-10-08T16:01:24.0975596Z E           This typically means that you attempted to use functionality that needed
2025-10-08T16:01:24.0976054Z E           the current application. To solve this, set up an application context
2025-10-08T16:01:24.0976483Z E           with app.app_context(). See the documentation for more information.
2025-10-08T16:01:24.0976738Z 
2025-10-08T16:01:24.0977031Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/werkzeug/local.py:519: RuntimeError
2025-10-08T16:01:24.0977728Z ________________ TestUserStatistics.test_export_user_data_basic ________________
2025-10-08T16:01:24.0978006Z 
2025-10-08T16:01:24.0978274Z self = <tests.test_user_management_simple.TestUserStatistics testMethod=test_export_user_data_basic>
2025-10-08T16:01:24.0978628Z 
2025-10-08T16:01:24.0978725Z     def test_export_user_data_basic(self):
2025-10-08T16:01:24.0978986Z         """Test basic user data export"""
2025-10-08T16:01:24.0979299Z         from app.api.admin.user_management import export_user_data
2025-10-08T16:01:24.0979596Z     
2025-10-08T16:01:24.0979772Z         # Mock the list_users function
2025-10-08T16:01:24.0980006Z         mock_users_data = [
2025-10-08T16:01:24.0980427Z             {'id': 1, 'username': 'user1', 'email': 'user1@test.com'},
2025-10-08T16:01:24.0980758Z             {'id': 2, 'username': 'user2', 'email': 'user2@test.com'}
2025-10-08T16:01:24.0981027Z         ]
2025-10-08T16:01:24.0981180Z     
2025-10-08T16:01:24.0981441Z >       with patch('app.api.admin.user_management.list_users') as mock_list:
2025-10-08T16:01:24.0981786Z              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:24.0982063Z 
2025-10-08T16:01:24.0982165Z tests/test_user_management_simple.py:269: 
2025-10-08T16:01:24.0982459Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:24.0982887Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:1497: in __enter__
2025-10-08T16:01:24.0983293Z     original, local = self.get_original()
2025-10-08T16:01:24.0983535Z                       ^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:24.0983805Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:24.0984000Z 
2025-10-08T16:01:24.0984130Z self = <unittest.mock._patch object at 0x7f5de62fdc80>
2025-10-08T16:01:24.0984336Z 
2025-10-08T16:01:24.0984417Z     def get_original(self):
2025-10-08T16:01:24.0984638Z         target = self.getter()
2025-10-08T16:01:24.0984860Z         name = self.attribute
2025-10-08T16:01:24.0985064Z     
2025-10-08T16:01:24.0985224Z         original = DEFAULT
2025-10-08T16:01:24.0985433Z         local = False
2025-10-08T16:01:24.0985614Z     
2025-10-08T16:01:24.0985762Z         try:
2025-10-08T16:01:24.0985957Z             original = target.__dict__[name]
2025-10-08T16:01:24.0986234Z         except (AttributeError, KeyError):
2025-10-08T16:01:24.0986505Z             original = getattr(target, name, DEFAULT)
2025-10-08T16:01:24.0986758Z         else:
2025-10-08T16:01:24.0986937Z             local = True
2025-10-08T16:01:24.0987119Z     
2025-10-08T16:01:24.0987447Z         if name in _builtins and isinstance(target, ModuleType):
2025-10-08T16:01:24.0987880Z             self.create = True
2025-10-08T16:01:24.0988085Z     
2025-10-08T16:01:24.0988276Z         if not self.create and original is DEFAULT:
2025-10-08T16:01:24.0988570Z >           raise AttributeError(
2025-10-08T16:01:24.0988853Z                 "%s does not have the attribute %r" % (target, name)
2025-10-08T16:01:24.0989123Z             )
2025-10-08T16:01:24.0996684Z E           AttributeError: <module 'app.api.admin.user_management' from '/home/runner/work/pyfedi/pyfedi/app/api/admin/user_management.py'> does not have the attribute 'list_users'
2025-10-08T16:01:24.0997625Z 
2025-10-08T16:01:24.0997912Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:1467: AttributeError
2025-10-08T16:01:24.0998460Z _____________ TestUserStatistics.test_get_registration_statistics ______________
2025-10-08T16:01:24.0998750Z 
2025-10-08T16:01:24.0999037Z self = <tests.test_user_management_simple.TestUserStatistics testMethod=test_get_registration_statistics>
2025-10-08T16:01:24.0999552Z mock_utcnow = <MagicMock name='utcnow' id='140041391596480'>
2025-10-08T16:01:24.0999904Z mock_user_class = <MagicMock name='User' id='140041382829024'>
2025-10-08T16:01:24.1000124Z 
2025-10-08T16:01:24.1000240Z     @patch('app.api.admin.user_management.User')
2025-10-08T16:01:24.1000548Z     @patch('app.api.admin.user_management.utcnow')
2025-10-08T16:01:24.1000918Z     def test_get_registration_statistics(self, mock_utcnow, mock_user_class):
2025-10-08T16:01:24.1001293Z         """Test getting registration statistics"""
2025-10-08T16:01:24.1001641Z         from app.api.admin.user_management import get_registration_statistics
2025-10-08T16:01:24.1001963Z     
2025-10-08T16:01:24.1002140Z         mock_time = datetime(2025, 1, 1, 12, 0, 0)
2025-10-08T16:01:24.1002410Z         mock_utcnow.return_value = mock_time
2025-10-08T16:01:24.1002651Z     
2025-10-08T16:01:24.1002815Z         # Mock database query
2025-10-08T16:01:24.1003130Z         mock_user_class.query.filter.return_value.count.return_value = 50
2025-10-08T16:01:24.1003612Z     
2025-10-08T16:01:24.1003870Z >       result = get_registration_statistics(days=7, include_hourly=True)
2025-10-08T16:01:24.1004202Z                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:24.1004378Z 
2025-10-08T16:01:24.1004484Z tests/test_user_management_simple.py:250: 
2025-10-08T16:01:24.1004776Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:24.1005092Z 
2025-10-08T16:01:24.1005180Z days = 7, include_hourly = True
2025-10-08T16:01:24.1005333Z 
2025-10-08T16:01:24.1005490Z     def get_registration_statistics(days=30, include_hourly=False):
2025-10-08T16:01:24.1005793Z         """
2025-10-08T16:01:24.1006010Z         Get detailed registration statistics over time.
2025-10-08T16:01:24.1006267Z     
2025-10-08T16:01:24.1006425Z         Args:
2025-10-08T16:01:24.1006624Z             days (int): Number of days to analyze
2025-10-08T16:01:24.1006921Z             include_hourly (bool): Include hourly breakdown
2025-10-08T16:01:24.1007188Z     
2025-10-08T16:01:24.1007473Z         Returns:
2025-10-08T16:01:24.1007734Z             dict: Registration statistics
2025-10-08T16:01:24.1007975Z         """
2025-10-08T16:01:24.1008142Z         now = utcnow()
2025-10-08T16:01:24.1008358Z         start_date = now - timedelta(days=days)
2025-10-08T16:01:24.1008598Z     
2025-10-08T16:01:24.1008774Z         # Total registrations in period
2025-10-08T16:01:24.1009225Z >       total_registrations = User.query.filter(and_(User.deleted is False, User.created >= start_date)).count()
2025-10-08T16:01:24.1009682Z                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:24.1010094Z E       TypeError: '>=' not supported between instances of 'MagicMock' and 'datetime.datetime'
2025-10-08T16:01:24.1010395Z 
2025-10-08T16:01:24.1010518Z app/api/admin/user_management.py:300: TypeError
2025-10-08T16:01:24.1010885Z _________________ TestUserStatistics.test_get_user_statistics __________________
2025-10-08T16:01:24.1011153Z 
2025-10-08T16:01:24.1011406Z self = <tests.test_user_management_simple.TestUserStatistics testMethod=test_get_user_statistics>
2025-10-08T16:01:24.1011883Z mock_utcnow = <MagicMock name='utcnow' id='140041270402352'>
2025-10-08T16:01:24.1012232Z mock_user_class = <MagicMock name='User' id='140041270402016'>
2025-10-08T16:01:24.1012447Z 
2025-10-08T16:01:24.1012564Z     @patch('app.api.admin.user_management.User')
2025-10-08T16:01:24.1012871Z     @patch('app.api.admin.user_management.utcnow')
2025-10-08T16:01:24.1013225Z     def test_get_user_statistics(self, mock_utcnow, mock_user_class):
2025-10-08T16:01:24.1013551Z         """Test getting user statistics"""
2025-10-08T16:01:24.1013865Z         from app.api.admin.user_management import get_user_statistics
2025-10-08T16:01:24.1014164Z     
2025-10-08T16:01:24.1014344Z         mock_time = datetime(2025, 1, 1, 12, 0, 0)
2025-10-08T16:01:24.1014606Z         mock_utcnow.return_value = mock_time
2025-10-08T16:01:24.1014847Z     
2025-10-08T16:01:24.1015016Z         # Mock database queries
2025-10-08T16:01:24.1015335Z         mock_user_class.query.filter_by.return_value.count.return_value = 100
2025-10-08T16:01:24.1015762Z         mock_user_class.query.filter.return_value.count.return_value = 25
2025-10-08T16:01:24.1016074Z     
2025-10-08T16:01:24.1016246Z >       result = get_user_statistics()
2025-10-08T16:01:24.1016482Z                  ^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:24.1016634Z 
2025-10-08T16:01:24.1016733Z tests/test_user_management_simple.py:230: 
2025-10-08T16:01:24.1017022Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:24.1017216Z 
2025-10-08T16:01:24.1017307Z     def get_user_statistics():
2025-10-08T16:01:24.1017618Z         """
2025-10-08T16:01:24.1017804Z         Get comprehensive user statistics.
2025-10-08T16:01:24.1018032Z     
2025-10-08T16:01:24.1018184Z         Returns:
2025-10-08T16:01:24.1018370Z             dict: User statistics
2025-10-08T16:01:24.1018705Z         """
2025-10-08T16:01:24.1018870Z         now = utcnow()
2025-10-08T16:01:24.1019082Z         day_ago = now - timedelta(days=1)
2025-10-08T16:01:24.1019334Z         week_ago = now - timedelta(days=7)
2025-10-08T16:01:24.1019589Z         month_ago = now - timedelta(days=30)
2025-10-08T16:01:24.1019822Z     
2025-10-08T16:01:24.1019984Z         # Base statistics
2025-10-08T16:01:24.1020349Z         total_users = User.query.filter_by(deleted=False).count()
2025-10-08T16:01:24.1020740Z         local_users = User.query.filter_by(deleted=False, instance_id=1).count()
2025-10-08T16:01:24.1021093Z         remote_users = total_users - local_users
2025-10-08T16:01:24.1021445Z         verified_users = User.query.filter_by(deleted=False, verified=True).count()
2025-10-08T16:01:24.1021886Z         banned_users = User.query.filter_by(deleted=False, banned=True).count()
2025-10-08T16:01:24.1022214Z     
2025-10-08T16:01:24.1022385Z         # Activity statistics
2025-10-08T16:01:24.1022764Z >       active_24h = User.query.filter(and_(User.deleted is False, User.last_seen >= day_ago)).count()
2025-10-08T16:01:24.1023188Z                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:24.1023596Z E       TypeError: '>=' not supported between instances of 'MagicMock' and 'datetime.datetime'
2025-10-08T16:01:24.1023898Z 
2025-10-08T16:01:24.1024025Z app/api/admin/user_management.py:256: TypeError
2025-10-08T16:01:24.1024395Z ______________ TestInputValidation.test_unknown_action_validation ______________
2025-10-08T16:01:24.1024672Z 
2025-10-08T16:01:24.1024951Z self = <tests.test_user_management_simple.TestInputValidation testMethod=test_unknown_action_validation>
2025-10-08T16:01:24.1025314Z 
2025-10-08T16:01:24.1025419Z     def test_unknown_action_validation(self):
2025-10-08T16:01:24.1025700Z         """Test that unknown actions are rejected"""
2025-10-08T16:01:24.1026039Z         from app.api.admin.user_management import perform_user_action
2025-10-08T16:01:24.1026342Z     
2025-10-08T16:01:24.1026595Z         with patch('app.api.admin.user_management.User') as mock_user_class:
2025-10-08T16:01:24.1026923Z             mock_user = MagicMock()
2025-10-08T16:01:24.1027271Z             mock_user_class.query.filter_by.return_value.first.return_value = mock_user
2025-10-08T16:01:24.1027717Z     
2025-10-08T16:01:24.1027915Z             with self.assertRaises(ValueError) as context:
2025-10-08T16:01:24.1028223Z >               perform_user_action(123, 'invalid_action')
2025-10-08T16:01:24.1028411Z 
2025-10-08T16:01:24.1028511Z tests/test_user_management_simple.py:293: 
2025-10-08T16:01:24.1028796Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:24.1029135Z app/api/admin/user_management.py:186: in perform_user_action
2025-10-08T16:01:24.1029444Z     db.session.rollback()
2025-10-08T16:01:24.1029896Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/scoping.py:1793: in rollback
2025-10-08T16:01:24.1030379Z     return self._proxied.rollback()
2025-10-08T16:01:24.1030610Z            ^^^^^^^^^^^^^
2025-10-08T16:01:24.1031033Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/scoping.py:197: in _proxied
2025-10-08T16:01:24.1031500Z     return self.registry()
2025-10-08T16:01:24.1031694Z            ^^^^^^^^^^^^^^^
2025-10-08T16:01:24.1032139Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/util/_collections.py:634: in __call__
2025-10-08T16:01:24.1032634Z     key = self.scopefunc()
2025-10-08T16:01:24.1032827Z           ^^^^^^^^^^^^^^^^
2025-10-08T16:01:24.1033271Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask_sqlalchemy/session.py:111: in _app_ctx_id
2025-10-08T16:01:24.1033845Z     return id(app_ctx._get_current_object())  # type: ignore[attr-defined]
2025-10-08T16:01:24.1034171Z               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:24.1034605Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:24.1034812Z 
2025-10-08T16:01:24.1034899Z     def _get_current_object() -> T:
2025-10-08T16:01:24.1035124Z         try:
2025-10-08T16:01:24.1035294Z             obj = local.get()
2025-10-08T16:01:24.1035515Z         except LookupError:
2025-10-08T16:01:24.1035762Z >           raise RuntimeError(unbound_message) from None
2025-10-08T16:01:24.1036199Z E           RuntimeError: Working outside of application context.
2025-10-08T16:01:24.1036482Z E           
2025-10-08T16:01:24.1036794Z E           This typically means that you attempted to use functionality that needed
2025-10-08T16:01:24.3825401Z E           the current application. To solve this, set up an application context
2025-10-08T16:01:24.3826260Z E           with app.app_context(). See the documentation for more information.
2025-10-08T16:01:24.3826619Z 
2025-10-08T16:01:24.3827023Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/werkzeug/local.py:519: RuntimeError
2025-10-08T16:01:24.3827962Z =========================== short test summary info ============================
2025-10-08T16:01:24.3828706Z FAILED tests/test_user_management_simple.py::TestUserManagementLogic::test_ban_already_banned_user - RuntimeError: Working outside of application context.
2025-10-08T16:01:24.3829275Z 
2025-10-08T16:01:24.3829473Z This typically means that you attempted to use functionality that needed
2025-10-08T16:01:24.3830041Z the current application. To solve this, set up an application context
2025-10-08T16:01:24.3830760Z with app.app_context(). See the documentation for more information.
2025-10-08T16:01:24.3831747Z FAILED tests/test_user_management_simple.py::TestUserManagementLogic::test_disable_user_success - RuntimeError: Working outside of application context.
2025-10-08T16:01:24.3832307Z 
2025-10-08T16:01:24.3832503Z This typically means that you attempted to use functionality that needed
2025-10-08T16:01:24.3832959Z the current application. To solve this, set up an application context
2025-10-08T16:01:24.3833398Z with app.app_context(). See the documentation for more information.
2025-10-08T16:01:24.3834104Z FAILED tests/test_user_management_simple.py::TestUserManagementLogic::test_soft_delete_user - RuntimeError: Working outside of application context.
2025-10-08T16:01:24.3834641Z 
2025-10-08T16:01:24.3834854Z This typically means that you attempted to use functionality that needed
2025-10-08T16:01:24.3835309Z the current application. To solve this, set up an application context
2025-10-08T16:01:24.3835740Z with app.app_context(). See the documentation for more information.
2025-10-08T16:01:24.3836455Z FAILED tests/test_user_management_simple.py::TestUserManagementLogic::test_update_user_success - RuntimeError: Working outside of application context.
2025-10-08T16:01:24.3837004Z 
2025-10-08T16:01:24.3837192Z This typically means that you attempted to use functionality that needed
2025-10-08T16:01:24.3837867Z the current application. To solve this, set up an application context
2025-10-08T16:01:24.3838303Z with app.app_context(). See the documentation for more information.
2025-10-08T16:01:24.3839415Z FAILED tests/test_user_management_simple.py::TestUserStatistics::test_export_user_data_basic - AttributeError: <module 'app.api.admin.user_management' from '/home/runner/work/pyfedi/pyfedi/app/api/admin/user_management.py'> does not have the attribute 'list_users'
2025-10-08T16:01:24.3840974Z FAILED tests/test_user_management_simple.py::TestUserStatistics::test_get_registration_statistics - TypeError: '>=' not supported between instances of 'MagicMock' and 'datetime.datetime'
2025-10-08T16:01:24.3842189Z FAILED tests/test_user_management_simple.py::TestUserStatistics::test_get_user_statistics - TypeError: '>=' not supported between instances of 'MagicMock' and 'datetime.datetime'
2025-10-08T16:01:24.3843302Z FAILED tests/test_user_management_simple.py::TestInputValidation::test_unknown_action_validation - RuntimeError: Working outside of application context.
2025-10-08T16:01:24.3843861Z 
2025-10-08T16:01:24.3844355Z This typically means that you attempted to use functionality that needed
2025-10-08T16:01:24.3844827Z the current application. To solve this, set up an application context
2025-10-08T16:01:24.3845264Z with app.app_context(). See the documentation for more information.
2025-10-08T16:01:24.3845650Z ========================= 8 failed, 7 passed in 1.84s ==========================
2025-10-08T16:01:24.8660983Z ============================= test session starts ==============================
2025-10-08T16:01:24.8661610Z platform linux -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
2025-10-08T16:01:24.8662111Z cachedir: .pytest_cache
2025-10-08T16:01:24.8662377Z rootdir: /home/runner/work/pyfedi/pyfedi
2025-10-08T16:01:24.8662664Z plugins: anyio-4.11.0
2025-10-08T16:01:26.1590787Z collecting ... collected 35 items
2025-10-08T16:01:26.1591063Z 
2025-10-08T16:01:26.1607006Z tests/test_private_registration.py::TestSecurityFunctions::test_validate_registration_secret_success PASSED [  2%]
2025-10-08T16:01:26.1620187Z tests/test_private_registration.py::TestSecurityFunctions::test_validate_registration_secret_failure PASSED [  5%]
2025-10-08T16:01:26.3300178Z tests/test_private_registration.py::TestSecurityFunctions::test_validate_registration_secret_empty FAILED [  8%]
2025-10-08T16:01:26.3312620Z tests/test_private_registration.py::TestSecurityFunctions::test_ip_whitelist_validation_allowed PASSED [ 11%]
2025-10-08T16:01:26.3321693Z tests/test_private_registration.py::TestSecurityFunctions::test_ip_whitelist_validation_denied PASSED [ 14%]
2025-10-08T16:01:26.3329701Z tests/test_private_registration.py::TestSecurityFunctions::test_ip_whitelist_no_restrictions PASSED [ 17%]
2025-10-08T16:01:26.3335985Z tests/test_private_registration.py::TestSecurityFunctions::test_generate_secure_password PASSED [ 20%]
2025-10-08T16:01:26.3354252Z tests/test_private_registration.py::TestSecurityFunctions::test_generate_username_suggestions SKIPPED [ 22%]
2025-10-08T16:01:26.3368942Z tests/test_private_registration.py::TestPrivateRegistrationLogic::test_validate_user_availability_success SKIPPED [ 25%]
2025-10-08T16:01:26.3382675Z tests/test_private_registration.py::TestPrivateRegistrationLogic::test_validate_user_availability_username_taken SKIPPED [ 28%]
2025-10-08T16:01:26.3396307Z tests/test_private_registration.py::TestPrivateRegistrationLogic::test_validate_user_availability_email_taken SKIPPED [ 31%]
2025-10-08T16:01:26.3410218Z tests/test_private_registration.py::TestPrivateRegistrationLogic::test_create_private_user_success SKIPPED [ 34%]
2025-10-08T16:01:26.3423618Z tests/test_private_registration.py::TestPrivateRegistrationLogic::test_create_private_user_with_generated_password SKIPPED [ 37%]
2025-10-08T16:01:26.3440799Z tests/test_private_registration.py::TestPrivateRegistrationLogic::test_create_private_user_duplicate_username SKIPPED [ 40%]
2025-10-08T16:01:26.3454116Z tests/test_private_registration.py::TestPrivateRegistrationLogic::test_get_user_by_lookup_found SKIPPED [ 42%]
2025-10-08T16:01:26.3467721Z tests/test_private_registration.py::TestPrivateRegistrationLogic::test_get_user_by_lookup_not_found SKIPPED [ 45%]
2025-10-08T16:01:26.3481106Z tests/test_private_registration.py::TestPrivateRegistrationLogic::test_list_users_basic SKIPPED [ 48%]
2025-10-08T16:01:26.3494471Z tests/test_private_registration.py::TestPrivateRegistrationLogic::test_list_users_filtering SKIPPED [ 51%]
2025-10-08T16:01:26.3508119Z tests/test_private_registration.py::TestPrivateRegistrationAPI::test_private_registration_success SKIPPED [ 54%]
2025-10-08T16:01:26.3521531Z tests/test_private_registration.py::TestPrivateRegistrationAPI::test_private_registration_invalid_secret SKIPPED [ 57%]
2025-10-08T16:01:26.3534891Z tests/test_private_registration.py::TestPrivateRegistrationAPI::test_private_registration_disabled SKIPPED [ 60%]
2025-10-08T16:01:26.3552195Z tests/test_private_registration.py::TestPrivateRegistrationAPI::test_private_registration_missing_secret SKIPPED [ 62%]
2025-10-08T16:01:26.3566340Z tests/test_private_registration.py::TestPrivateRegistrationAPI::test_user_validation_endpoint SKIPPED [ 65%]
2025-10-08T16:01:26.3579573Z tests/test_private_registration.py::TestPrivateRegistrationAPI::test_user_list_endpoint SKIPPED [ 68%]
2025-10-08T16:01:26.3592871Z tests/test_private_registration.py::TestPrivateRegistrationAPI::test_user_lookup_endpoint SKIPPED [ 71%]
2025-10-08T16:01:26.3606231Z tests/test_private_registration.py::TestPrivateRegistrationAPI::test_health_check_endpoint SKIPPED [ 74%]
2025-10-08T16:01:26.3619663Z tests/test_private_registration.py::TestSecurityProtections::test_input_sanitization SKIPPED [ 77%]
2025-10-08T16:01:26.3633136Z tests/test_private_registration.py::TestSecurityProtections::test_sql_injection_protection SKIPPED [ 80%]
2025-10-08T16:01:26.3646471Z tests/test_private_registration.py::TestSecurityProtections::test_rate_limiting_simulation SKIPPED [ 82%]
2025-10-08T16:01:26.3663680Z tests/test_private_registration.py::TestCaseConflictValidation::test_case_insensitive_username_conflict SKIPPED [ 85%]
2025-10-08T16:01:26.3677030Z tests/test_private_registration.py::TestCaseConflictValidation::test_activitypub_profile_conflict SKIPPED [ 88%]
2025-10-08T16:01:26.3690581Z tests/test_private_registration.py::TestCaseConflictValidation::test_exact_case_match_still_works SKIPPED [ 91%]
2025-10-08T16:01:26.3703787Z tests/test_private_registration.py::TestCaseConflictValidation::test_case_preserved_in_suggestions SKIPPED [ 94%]
2025-10-08T16:01:26.3717271Z tests/test_private_registration.py::TestCaseConflictValidation::test_no_false_positives_for_available_usernames SKIPPED [ 97%]
2025-10-08T16:01:26.6555177Z tests/test_private_registration.py::TestCaseConflictValidation::test_deleted_user_case_conflict SKIPPED [100%]
2025-10-08T16:01:26.6556183Z 
2025-10-08T16:01:26.6556434Z =================================== FAILURES ===================================
2025-10-08T16:01:26.6557054Z ________ TestSecurityFunctions.test_validate_registration_secret_empty _________
2025-10-08T16:01:26.6557912Z 
2025-10-08T16:01:26.6558099Z args = ('PRIVATE_REGISTRATION_SECRET', ''), kwargs = {}
2025-10-08T16:01:26.6558398Z 
2025-10-08T16:01:26.6558512Z     @functools.wraps(f)
2025-10-08T16:01:26.6558826Z     def decorated_function(*args, **kwargs):
2025-10-08T16:01:26.6559179Z         #: bypass cache
2025-10-08T16:01:26.6559526Z         if self._bypass_cache(unless, f, *args, **kwargs):
2025-10-08T16:01:26.6559917Z             return self._call_fn(f, *args, **kwargs)
2025-10-08T16:01:26.6560213Z     
2025-10-08T16:01:26.6560417Z         nonlocal source_check
2025-10-08T16:01:26.6560690Z         if source_check is None:
2025-10-08T16:01:26.6560978Z             source_check = self.source_check
2025-10-08T16:01:26.6561257Z     
2025-10-08T16:01:26.6561443Z         try:
2025-10-08T16:01:26.6561749Z >           cache_key = decorated_function.make_cache_key(f, *args, **kwargs)
2025-10-08T16:01:26.6562157Z                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:26.6562379Z 
2025-10-08T16:01:26.6562726Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask_caching/__init__.py:861: 
2025-10-08T16:01:26.6563307Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:26.6563943Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask_caching/__init__.py:618: in make_cache_key
2025-10-08T16:01:26.6564579Z     fname, version_data = self._memoize_version(
2025-10-08T16:01:26.6565232Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask_caching/__init__.py:568: in _memoize_version
2025-10-08T16:01:26.6565933Z     version_data_list = list(self.cache.get_many(*fetch_keys))
2025-10-08T16:01:26.6566301Z                              ^^^^^^^^^^
2025-10-08T16:01:26.6566614Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:26.6566861Z 
2025-10-08T16:01:26.6567008Z self = <flask_caching.Cache object at 0x7f50cf96d940>
2025-10-08T16:01:26.6567761Z 
2025-10-08T16:01:26.6567869Z     @property
2025-10-08T16:01:26.6568117Z     def cache(self) -> SimpleCache:
2025-10-08T16:01:26.6568422Z >       app = current_app or self.app
2025-10-08T16:01:26.6568709Z                              ^^^^^^^^
2025-10-08T16:01:26.6569057Z E       AttributeError: 'Cache' object has no attribute 'app'
2025-10-08T16:01:26.6569325Z 
2025-10-08T16:01:26.6569883Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask_caching/__init__.py:190: AttributeError
2025-10-08T16:01:26.6570347Z 
2025-10-08T16:01:26.6570516Z During handling of the above exception, another exception occurred:
2025-10-08T16:01:26.6570772Z 
2025-10-08T16:01:26.6571012Z self = <tests.test_private_registration.TestSecurityFunctions object at 0x7f50cda69480>
2025-10-08T16:01:26.6571331Z 
2025-10-08T16:01:26.6571464Z     def test_validate_registration_secret_empty(self):
2025-10-08T16:01:26.6571765Z         """Test validation with empty secrets"""
2025-10-08T16:01:26.6572079Z >       assert validate_registration_secret('') == False
2025-10-08T16:01:26.6572362Z                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:26.6572523Z 
2025-10-08T16:01:26.6572631Z tests/test_private_registration.py:93: 
2025-10-08T16:01:26.6572922Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:26.6573291Z app/api/admin/security.py:30: in validate_registration_secret
2025-10-08T16:01:26.6573653Z     expected = get_private_registration_secret()
2025-10-08T16:01:26.6573922Z                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:26.6574212Z app/utils.py:3540: in get_private_registration_secret
2025-10-08T16:01:26.6574550Z     return get_setting('PRIVATE_REGISTRATION_SECRET', '')
2025-10-08T16:01:26.6574844Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:26.6575114Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:26.6575314Z 
2025-10-08T16:01:26.6575444Z args = ('PRIVATE_REGISTRATION_SECRET', ''), kwargs = {}
2025-10-08T16:01:26.6575649Z 
2025-10-08T16:01:26.6575737Z     @functools.wraps(f)
2025-10-08T16:01:26.6575958Z     def decorated_function(*args, **kwargs):
2025-10-08T16:01:26.6576211Z         #: bypass cache
2025-10-08T16:01:26.6576446Z         if self._bypass_cache(unless, f, *args, **kwargs):
2025-10-08T16:01:26.6576743Z             return self._call_fn(f, *args, **kwargs)
2025-10-08T16:01:26.6576987Z     
2025-10-08T16:01:26.6577166Z         nonlocal source_check
2025-10-08T16:01:26.6577519Z         if source_check is None:
2025-10-08T16:01:26.6577761Z             source_check = self.source_check
2025-10-08T16:01:26.6577995Z     
2025-10-08T16:01:26.6578149Z         try:
2025-10-08T16:01:26.6578396Z             cache_key = decorated_function.make_cache_key(f, *args, **kwargs)
2025-10-08T16:01:26.6578702Z     
2025-10-08T16:01:26.6578856Z             if (
2025-10-08T16:01:26.6579045Z                 callable(forced_update)
2025-10-08T16:01:26.6579287Z                 and (
2025-10-08T16:01:26.6579496Z                     forced_update(*args, **kwargs)
2025-10-08T16:01:26.6579770Z                     if wants_args(forced_update)
2025-10-08T16:01:26.6580024Z                     else forced_update()
2025-10-08T16:01:26.6580251Z                 )
2025-10-08T16:01:26.6580428Z                 is True
2025-10-08T16:01:26.6580606Z             ):
2025-10-08T16:01:26.6580785Z                 rv = None
2025-10-08T16:01:26.6580986Z                 found = False
2025-10-08T16:01:26.6581186Z             else:
2025-10-08T16:01:26.6581383Z                 rv = self.cache.get(cache_key)
2025-10-08T16:01:26.6581636Z                 found = True
2025-10-08T16:01:26.6581831Z     
2025-10-08T16:01:26.6582040Z                 # If the value returned by cache.get() is None, it
2025-10-08T16:01:26.6582370Z                 # might be because the key is not found in the cache
2025-10-08T16:01:26.6582689Z                 # or because the cached value is actually None
2025-10-08T16:01:26.6583078Z                 if rv is None:
2025-10-08T16:01:26.6583342Z                     # If we're sure we don't need to cache None values
2025-10-08T16:01:26.6583654Z                     # (cache_none=False), don't bother checking for
2025-10-08T16:01:26.6583966Z                     # key existence, as it can lead to false positives
2025-10-08T16:01:26.6584273Z                     # if a concurrent call already cached the
2025-10-08T16:01:26.6584679Z                     # key between steps. This would cause us to
2025-10-08T16:01:26.6584965Z                     # return None when we shouldn't
2025-10-08T16:01:26.6585221Z                     if not cache_none:
2025-10-08T16:01:26.6585458Z                         found = False
2025-10-08T16:01:26.6585682Z                     else:
2025-10-08T16:01:26.6585899Z                         found = self.cache.has(cache_key)
2025-10-08T16:01:26.6586159Z         except Exception:
2025-10-08T16:01:26.6586373Z >           if self.app.debug:
2025-10-08T16:01:26.6586585Z                ^^^^^^^^
2025-10-08T16:01:26.6586844Z E           AttributeError: 'Cache' object has no attribute 'app'
2025-10-08T16:01:26.6587063Z 
2025-10-08T16:01:26.6587509Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask_caching/__init__.py:893: AttributeError
2025-10-08T16:01:26.6588048Z =========================== short test summary info ============================
2025-10-08T16:01:26.6588741Z FAILED tests/test_private_registration.py::TestSecurityFunctions::test_validate_registration_secret_empty - AttributeError: 'Cache' object has no attribute 'app'
2025-10-08T16:01:26.6589432Z =================== 1 failed, 6 passed, 28 skipped in 1.52s ====================
2025-10-08T16:01:27.1132951Z ============================= test session starts ==============================
2025-10-08T16:01:27.1133819Z platform linux -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
2025-10-08T16:01:27.1134382Z cachedir: .pytest_cache
2025-10-08T16:01:27.1134695Z rootdir: /home/runner/work/pyfedi/pyfedi
2025-10-08T16:01:27.1135028Z plugins: anyio-4.11.0
2025-10-08T16:01:28.1599573Z collecting ... collected 1 item
2025-10-08T16:01:28.1599906Z 
2025-10-08T16:01:29.7007887Z tests/test_api_user_subscriptions.py::test_api_user_subscriptions FAILED [100%]
2025-10-08T16:01:29.7008549Z 
2025-10-08T16:01:29.7008768Z =================================== FAILURES ===================================
2025-10-08T16:01:29.7009481Z _________________________ test_api_user_subscriptions __________________________
2025-10-08T16:01:29.7009924Z 
2025-10-08T16:01:29.7010273Z self = <sqlalchemy.engine.base.Connection object at 0x7ff77eef7bb0>
2025-10-08T16:01:29.7011315Z dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7ff7887902f0>
2025-10-08T16:01:29.7012578Z context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7ff77e934e10>
2025-10-08T16:01:29.7013666Z statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7ff77ef51400>
2025-10-08T16:01:29.7014328Z parameters = [(1,)]
2025-10-08T16:01:29.7014516Z 
2025-10-08T16:01:29.7014645Z     def _exec_single_context(
2025-10-08T16:01:29.7014989Z         self,
2025-10-08T16:01:29.7015265Z         dialect: Dialect,
2025-10-08T16:01:29.7015597Z         context: ExecutionContext,
2025-10-08T16:01:29.7015978Z         statement: Union[str, Compiled],
2025-10-08T16:01:29.7016441Z         parameters: Optional[_AnyMultiExecuteParams],
2025-10-08T16:01:29.7016878Z     ) -> CursorResult[Any]:
2025-10-08T16:01:29.7017284Z         """continue the _execute_context() method for a single DBAPI
2025-10-08T16:01:29.7018042Z         cursor.execute() or cursor.executemany() call.
2025-10-08T16:01:29.7018456Z     
2025-10-08T16:01:29.7018692Z         """
2025-10-08T16:01:29.7019041Z         if dialect.bind_typing is BindTyping.SETINPUTSIZES:
2025-10-08T16:01:29.7019614Z             generic_setinputsizes = context._prepare_set_input_sizes()
2025-10-08T16:01:29.7020085Z     
2025-10-08T16:01:29.7020627Z             if generic_setinputsizes:
2025-10-08T16:01:29.7021008Z                 try:
2025-10-08T16:01:29.7021327Z                     dialect.do_set_input_sizes(
2025-10-08T16:01:29.7021786Z                         context.cursor, generic_setinputsizes, context
2025-10-08T16:01:29.7022209Z                     )
2025-10-08T16:01:29.7022519Z                 except BaseException as e:
2025-10-08T16:01:29.7023118Z                     self._handle_dbapi_exception(
2025-10-08T16:01:29.7023552Z                         e, str(statement), parameters, None, context
2025-10-08T16:01:29.7023957Z                     )
2025-10-08T16:01:29.7024219Z     
2025-10-08T16:01:29.7024496Z         cursor, str_statement, parameters = (
2025-10-08T16:01:29.7024877Z             context.cursor,
2025-10-08T16:01:29.7025209Z             context.statement,
2025-10-08T16:01:29.7025558Z             context.parameters,
2025-10-08T16:01:29.7025878Z         )
2025-10-08T16:01:29.7026107Z     
2025-10-08T16:01:29.7026449Z         effective_parameters: Optional[_AnyExecuteParams]
2025-10-08T16:01:29.7026868Z     
2025-10-08T16:01:29.7027126Z         if not context.executemany:
2025-10-08T16:01:29.7027683Z             effective_parameters = parameters[0]
2025-10-08T16:01:29.7028057Z         else:
2025-10-08T16:01:29.7028346Z             effective_parameters = parameters
2025-10-08T16:01:29.7028703Z     
2025-10-08T16:01:29.7029007Z         if self._has_events or self.engine._has_events:
2025-10-08T16:01:29.7029473Z             for fn in self.dispatch.before_cursor_execute:
2025-10-08T16:01:29.7029943Z                 str_statement, effective_parameters = fn(
2025-10-08T16:01:29.7030329Z                     self,
2025-10-08T16:01:29.7030628Z                     cursor,
2025-10-08T16:01:29.7030935Z                     str_statement,
2025-10-08T16:01:29.7031284Z                     effective_parameters,
2025-10-08T16:01:29.7031680Z                     context,
2025-10-08T16:01:29.7032016Z                     context.executemany,
2025-10-08T16:01:29.7032374Z                 )
2025-10-08T16:01:29.7032628Z     
2025-10-08T16:01:29.7032874Z         if self._echo:
2025-10-08T16:01:29.7033179Z             self._log_info(str_statement)
2025-10-08T16:01:29.7033519Z     
2025-10-08T16:01:29.7033788Z             stats = context._get_cache_stats()
2025-10-08T16:01:29.7034140Z     
2025-10-08T16:01:29.7034403Z             if not self.engine.hide_parameters:
2025-10-08T16:01:29.7034789Z                 self._log_info(
2025-10-08T16:01:29.7035102Z                     "[%s] %r",
2025-10-08T16:01:29.7035398Z                     stats,
2025-10-08T16:01:29.7035718Z                     sql_util._repr_params(
2025-10-08T16:01:29.7036099Z                         effective_parameters,
2025-10-08T16:01:29.7036464Z                         batches=10,
2025-10-08T16:01:29.7036834Z                         ismulti=context.executemany,
2025-10-08T16:01:29.7037205Z                     ),
2025-10-08T16:01:29.7037623Z                 )
2025-10-08T16:01:29.7037876Z             else:
2025-10-08T16:01:29.7038152Z                 self._log_info(
2025-10-08T16:01:29.7038603Z                     "[%s] [SQL parameters hidden due to hide_parameters=True]",
2025-10-08T16:01:29.7039057Z                     stats,
2025-10-08T16:01:29.7039345Z                 )
2025-10-08T16:01:29.7039588Z     
2025-10-08T16:01:29.7039834Z         evt_handled: bool = False
2025-10-08T16:01:29.7040169Z         try:
2025-10-08T16:01:29.7040523Z             if context.execute_style is ExecuteStyle.EXECUTEMANY:
2025-10-08T16:01:29.7040997Z                 effective_parameters = cast(
2025-10-08T16:01:29.7041455Z                     "_CoreMultiExecuteParams", effective_parameters
2025-10-08T16:01:29.7041888Z                 )
2025-10-08T16:01:29.7042175Z                 if self.dialect._has_events:
2025-10-08T16:01:29.7042593Z                     for fn in self.dialect.dispatch.do_executemany:
2025-10-08T16:01:29.7043019Z                         if fn(
2025-10-08T16:01:29.7043347Z                             cursor,
2025-10-08T16:01:29.7043864Z                             str_statement,
2025-10-08T16:01:29.7044253Z                             effective_parameters,
2025-10-08T16:01:29.7044625Z                             context,
2025-10-08T16:01:29.7044958Z                         ):
2025-10-08T16:01:29.7045275Z                             evt_handled = True
2025-10-08T16:01:29.7045635Z                             break
2025-10-08T16:01:29.7046119Z                 if not evt_handled:
2025-10-08T16:01:29.7046482Z                     self.dialect.do_executemany(
2025-10-08T16:01:29.7046880Z                         cursor,
2025-10-08T16:01:29.7047242Z                         str_statement,
2025-10-08T16:01:29.7047756Z                         effective_parameters,
2025-10-08T16:01:29.7048126Z                         context,
2025-10-08T16:01:29.7048443Z                     )
2025-10-08T16:01:29.7048811Z             elif not effective_parameters and context.no_parameters:
2025-10-08T16:01:29.7049292Z                 if self.dialect._has_events:
2025-10-08T16:01:29.7049759Z                     for fn in self.dialect.dispatch.do_execute_no_params:
2025-10-08T16:01:29.7050260Z                         if fn(cursor, str_statement, context):
2025-10-08T16:01:29.7050682Z                             evt_handled = True
2025-10-08T16:01:29.7051055Z                             break
2025-10-08T16:01:29.7051388Z                 if not evt_handled:
2025-10-08T16:01:29.7051770Z                     self.dialect.do_execute_no_params(
2025-10-08T16:01:29.7052189Z                         cursor, str_statement, context
2025-10-08T16:01:29.7052578Z                     )
2025-10-08T16:01:29.7052841Z             else:
2025-10-08T16:01:29.7053142Z                 effective_parameters = cast(
2025-10-08T16:01:29.7053595Z                     "_CoreSingleExecuteParams", effective_parameters
2025-10-08T16:01:29.7054029Z                 )
2025-10-08T16:01:29.7054312Z                 if self.dialect._has_events:
2025-10-08T16:01:29.7054738Z                     for fn in self.dialect.dispatch.do_execute:
2025-10-08T16:01:29.7055144Z                         if fn(
2025-10-08T16:01:29.7055452Z                             cursor,
2025-10-08T16:01:29.7055804Z                             str_statement,
2025-10-08T16:01:29.7056176Z                             effective_parameters,
2025-10-08T16:01:29.7056547Z                             context,
2025-10-08T16:01:29.7056893Z                         ):
2025-10-08T16:01:29.7057221Z                             evt_handled = True
2025-10-08T16:01:29.7057757Z                             break
2025-10-08T16:01:29.7058089Z                 if not evt_handled:
2025-10-08T16:01:29.7058448Z >                   self.dialect.do_execute(
2025-10-08T16:01:29.7058904Z                         cursor, str_statement, effective_parameters, context
2025-10-08T16:01:29.7059383Z                     )
2025-10-08T16:01:29.7059560Z 
2025-10-08T16:01:29.7060008Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1967: 
2025-10-08T16:01:29.7060751Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:29.7061055Z 
2025-10-08T16:01:29.7061499Z self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7ff7887902f0>
2025-10-08T16:01:29.7062229Z cursor = <sqlite3.Cursor object at 0x7ff77e929bc0>
2025-10-08T16:01:29.7063507Z statement = 'SELECT user.id AS user_id, user.user_name AS user_user_name, user.alt_user_name AS user_alt_user_name, user.title AS ...le_2.id = user.cover_id LEFT OUTER JOIN instance AS instance_1 ON instance_1.id = user.instance_id \nWHERE user.id = ?'
2025-10-08T16:01:29.7064914Z parameters = (1,)
2025-10-08T16:01:29.7065500Z context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7ff77e934e10>
2025-10-08T16:01:29.7066071Z 
2025-10-08T16:01:29.7066320Z     def do_execute(self, cursor, statement, parameters, context=None):
2025-10-08T16:01:29.7066846Z >       cursor.execute(statement, parameters)
2025-10-08T16:01:29.7067611Z E       sqlite3.OperationalError: no such table: user
2025-10-08T16:01:29.7067948Z 
2025-10-08T16:01:29.7068513Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/default.py:951: OperationalError
2025-10-08T16:01:29.7069241Z 
2025-10-08T16:01:29.7069505Z The above exception was the direct cause of the following exception:
2025-10-08T16:01:29.7070093Z 
2025-10-08T16:01:29.7070207Z app = <Flask 'app'>
2025-10-08T16:01:29.7070383Z 
2025-10-08T16:01:29.7070525Z     def test_api_user_subscriptions(app):
2025-10-08T16:01:29.7070914Z         with app.app_context():
2025-10-08T16:01:29.7071349Z             from app.api.alpha.utils.user import put_user_subscribe
2025-10-08T16:01:29.7071815Z     
2025-10-08T16:01:29.7072060Z             user_id = 1
2025-10-08T16:01:29.7072377Z >           user = User.query.get(user_id)
2025-10-08T16:01:29.7072766Z                    ^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:29.7073020Z 
2025-10-08T16:01:29.7073197Z tests/test_api_user_subscriptions.py:29: 
2025-10-08T16:01:29.7073654Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:29.7074079Z <string>:2: in get
2025-10-08T16:01:29.7074388Z     ???
2025-10-08T16:01:29.7075064Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/util/deprecations.py:386: in warned
2025-10-08T16:01:29.7075920Z     return fn(*args, **kwargs)  # type: ignore[no-any-return]
2025-10-08T16:01:29.7076370Z            ^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:29.7077037Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/query.py:1126: in get
2025-10-08T16:01:29.7077984Z     return self._get_impl(ident, loading.load_on_pk_identity)
2025-10-08T16:01:29.7078450Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:29.7079152Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/query.py:1135: in _get_impl
2025-10-08T16:01:29.7079902Z     return self.session._get_impl(
2025-10-08T16:01:29.7080619Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/session.py:3873: in _get_impl
2025-10-08T16:01:29.7081370Z     return db_load_fn(
2025-10-08T16:01:29.7082077Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/loading.py:695: in load_on_pk_identity
2025-10-08T16:01:29.7082848Z     session.execute(
2025-10-08T16:01:29.7083495Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2365: in execute
2025-10-08T16:01:29.7084234Z     return self._execute_internal(
2025-10-08T16:01:29.7084991Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
2025-10-08T16:01:29.7085875Z     result: Result[Any] = compile_state_cls.orm_execute_statement(
2025-10-08T16:01:29.7086787Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
2025-10-08T16:01:29.7087732Z     result = conn.execute(
2025-10-08T16:01:29.7088415Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
2025-10-08T16:01:29.7089132Z     return meth(
2025-10-08T16:01:29.7089882Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
2025-10-08T16:01:29.7090743Z     return connection._execute_clauseelement(
2025-10-08T16:01:29.7091595Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
2025-10-08T16:01:29.7092385Z     ret = self._execute_context(
2025-10-08T16:01:29.7093117Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
2025-10-08T16:01:29.7093915Z     return self._exec_single_context(
2025-10-08T16:01:29.7094887Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
2025-10-08T16:01:29.7095709Z     self._handle_dbapi_exception(
2025-10-08T16:01:29.7096512Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
2025-10-08T16:01:29.7097633Z     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
2025-10-08T16:01:29.7098567Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
2025-10-08T16:01:29.7099581Z     self.dialect.do_execute(
2025-10-08T16:01:29.7099980Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:29.7100314Z 
2025-10-08T16:01:29.7100782Z self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7ff7887902f0>
2025-10-08T16:01:29.7101496Z cursor = <sqlite3.Cursor object at 0x7ff77e929bc0>
2025-10-08T16:01:29.7102768Z statement = 'SELECT user.id AS user_id, user.user_name AS user_user_name, user.alt_user_name AS user_alt_user_name, user.title AS ...le_2.id = user.cover_id LEFT OUTER JOIN instance AS instance_1 ON instance_1.id = user.instance_id \nWHERE user.id = ?'
2025-10-08T16:01:29.7103984Z parameters = (1,)
2025-10-08T16:01:29.7104578Z context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7ff77e934e10>
2025-10-08T16:01:29.7105123Z 
2025-10-08T16:01:29.7105369Z     def do_execute(self, cursor, statement, parameters, context=None):
2025-10-08T16:01:29.7105891Z >       cursor.execute(statement, parameters)
2025-10-08T16:01:29.7106501Z E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: user
2025-10-08T16:01:29.7131622Z E       [SQL: SELECT user.id AS user_id, user.user_name AS user_user_name, user.alt_user_name AS user_alt_user_name, user.title AS user_title, user.email AS user_email, user.password_hash AS user_password_hash, user.verified AS user_verified, user.verification_token AS user_verification_token, user.banned AS user_banned, user.banned_until AS user_banned_until, user.ban_posts AS user_ban_posts, user.ban_comments AS user_ban_comments, user.deleted AS user_deleted, user.deleted_by AS user_deleted_by, user.about AS user_about, user.about_html AS user_about_html, user.keywords AS user_keywords, user.matrix_user_id AS user_matrix_user_id, user.hide_nsfw AS user_hide_nsfw, user.hide_nsfl AS user_hide_nsfl, user.created AS user_created, user.last_seen AS user_last_seen, user.avatar_id AS user_avatar_id, user.cover_id AS user_cover_id, user.public_key AS user_public_key, user.private_key AS user_private_key, user.newsletter AS user_newsletter, user.email_unread AS user_email_unread, user.email_unread_sent AS user_email_unread_sent, user.receive_message_mode AS user_receive_message_mode, user.bounces AS user_bounces, user.timezone AS user_timezone, user.reputation AS user_reputation, user.attitude AS user_attitude, user.post_count AS user_post_count, user.post_reply_count AS user_post_reply_count, user.stripe_customer_id AS user_stripe_customer_id, user.stripe_subscription_id AS user_stripe_subscription_id, user.searchable AS user_searchable, user.indexable AS user_indexable, user.bot AS user_bot, user.bot_override AS user_bot_override, user.suppress_crossposts AS user_suppress_crossposts, user.vote_privately AS user_vote_privately, user.ignore_bots AS user_ignore_bots, user.unread_notifications AS user_unread_notifications, user.ip_address AS user_ip_address, user.ip_address_country AS user_ip_address_country, user.instance_id AS user_instance_id, user.reports AS user_reports, user.default_sort AS user_default_sort, user.default_comment_sort AS user_default_comment_sort, user.default_filter AS user_default_filter, user.theme AS user_theme, user.font AS user_font, user.community_keyword_filter AS user_community_keyword_filter, user.referrer AS user_referrer, user.markdown_editor AS user_markdown_editor, user.interface_language AS user_interface_language, user.language_id AS user_language_id, user.read_language_ids AS user_read_language_ids, user.reply_collapse_threshold AS user_reply_collapse_threshold, user.reply_hide_threshold AS user_reply_hide_threshold, user.feed_auto_follow AS user_feed_auto_follow, user.feed_auto_leave AS user_feed_auto_leave, user.accept_private_messages AS user_accept_private_messages, user.google_oauth_id AS user_google_oauth_id, user.hide_low_quality AS user_hide_low_quality, user.show_subscribed_communities AS user_show_subscribed_communities, user.additional_css AS user_additional_css, user.mastodon_oauth_id AS user_mastodon_oauth_id, user.discord_oauth_id AS user_discord_oauth_id, user.password_updated_at AS user_password_updated_at, user.ap_id AS user_ap_id, user.ap_profile_id AS user_ap_profile_id, user.ap_public_url AS user_ap_public_url, user.ap_fetched_at AS user_ap_fetched_at, user.ap_followers_url AS user_ap_followers_url, user.ap_preferred_username AS user_ap_preferred_username, user.ap_manually_approves_followers AS user_ap_manually_approves_followers, user.ap_deleted_at AS user_ap_deleted_at, user.ap_inbox_url AS user_ap_inbox_url, user.ap_domain AS user_ap_domain, user.search_vector AS user_search_vector, user.hide_read_posts AS user_hide_read_posts, file_1.id AS file_1_id, file_1.file_path AS file_1_file_path, file_1.file_name AS file_1_file_name, file_1.width AS file_1_width, file_1.height AS file_1_height, file_1.alt_text AS file_1_alt_text, file_1.source_url AS file_1_source_url, file_1.thumbnail_path AS file_1_thumbnail_path, file_1.thumbnail_width AS file_1_thumbnail_width, file_1.thumbnail_height AS file_1_thumbnail_height, file_1.hash AS file_1_hash, file_2.id AS file_2_id, file_2.file_path AS file_2_file_path, file_2.file_name AS file_2_file_name, file_2.width AS file_2_width, file_2.height AS file_2_height, file_2.alt_text AS file_2_alt_text, file_2.source_url AS file_2_source_url, file_2.thumbnail_path AS file_2_thumbnail_path, file_2.thumbnail_width AS file_2_thumbnail_width, file_2.thumbnail_height AS file_2_thumbnail_height, file_2.hash AS file_2_hash, instance_1.id AS instance_1_id, instance_1.domain AS instance_1_domain, instance_1.inbox AS instance_1_inbox, instance_1.shared_inbox AS instance_1_shared_inbox, instance_1.outbox AS instance_1_outbox, instance_1.vote_weight AS instance_1_vote_weight, instance_1.software AS instance_1_software, instance_1.version AS instance_1_version, instance_1.created_at AS instance_1_created_at, instance_1.updated_at AS instance_1_updated_at, instance_1.last_seen AS instance_1_last_seen, instance_1.last_successful_send AS instance_1_last_successful_send, instance_1.failures AS instance_1_failures, instance_1.most_recent_attempt AS instance_1_most_recent_attempt, instance_1.dormant AS instance_1_dormant, instance_1.start_trying_again AS instance_1_start_trying_again, instance_1.gone_forever AS instance_1_gone_forever, instance_1.ip_address AS instance_1_ip_address, instance_1.trusted AS instance_1_trusted, instance_1.posting_warning AS instance_1_posting_warning, instance_1.nodeinfo_href AS instance_1_nodeinfo_href 
2025-10-08T16:01:29.7157264Z E       FROM user LEFT OUTER JOIN file AS file_1 ON file_1.id = user.avatar_id LEFT OUTER JOIN file AS file_2 ON file_2.id = user.cover_id LEFT OUTER JOIN instance AS instance_1 ON instance_1.id = user.instance_id 
2025-10-08T16:01:29.7158418Z E       WHERE user.id = ?]
2025-10-08T16:01:29.7158731Z E       [parameters: (1,)]
2025-10-08T16:01:29.7159182Z E       (Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-08T16:01:29.7159563Z 
2025-10-08T16:01:29.7160109Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/default.py:951: OperationalError
2025-10-08T16:01:29.7160991Z ------------------------------ Captured log setup ------------------------------
2025-10-08T16:01:29.7161498Z INFO     app:__init__.py:298 Started!
2025-10-08T16:01:29.7161992Z INFO     app:startup_validation.py:102 Running startup validations...
2025-10-08T16:01:29.7162613Z INFO     app:startup_validation.py:118 Startup validations completed
2025-10-08T16:01:29.7163321Z =============================== warnings summary ===============================
2025-10-08T16:01:29.7163894Z tests/test_api_user_subscriptions.py::test_api_user_subscriptions
2025-10-08T16:01:29.7165429Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pytesseract/pytesseract.py:32: DeprecationWarning: 'pkgutil.find_loader' is deprecated and slated for removal in Python 3.14; use importlib.util.find_spec() instead
2025-10-08T16:01:29.7166855Z     numpy_installed = find_loader('numpy') is not None
2025-10-08T16:01:29.7167496Z 
2025-10-08T16:01:29.7167760Z tests/test_api_user_subscriptions.py::test_api_user_subscriptions
2025-10-08T16:01:29.7169209Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pytesseract/pytesseract.py:36: DeprecationWarning: 'pkgutil.find_loader' is deprecated and slated for removal in Python 3.14; use importlib.util.find_spec() instead
2025-10-08T16:01:30.2391070Z     pandas_installed = find_loader('pandas') is not None
2025-10-08T16:01:30.2391467Z 
2025-10-08T16:01:30.2391763Z tests/test_api_user_subscriptions.py::test_api_user_subscriptions
2025-10-08T16:01:30.2392828Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pyasn1/codec/ber/encoder.py:952: DeprecationWarning: tagMap is deprecated. Please use TAG_MAP instead.
2025-10-08T16:01:30.2393930Z     warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)
2025-10-08T16:01:30.2394351Z 
2025-10-08T16:01:30.2394580Z tests/test_api_user_subscriptions.py::test_api_user_subscriptions
2025-10-08T16:01:30.2395611Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pyasn1/codec/ber/encoder.py:952: DeprecationWarning: typeMap is deprecated. Please use TYPE_MAP instead.
2025-10-08T16:01:30.2396771Z     warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)
2025-10-08T16:01:30.2397253Z 
2025-10-08T16:01:30.2397729Z tests/test_api_user_subscriptions.py::test_api_user_subscriptions
2025-10-08T16:01:30.2399290Z   /home/runner/work/pyfedi/pyfedi/tests/test_api_user_subscriptions.py:29: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
2025-10-08T16:01:30.2400703Z     user = User.query.get(user_id)
2025-10-08T16:01:30.2400892Z 
2025-10-08T16:01:30.2401119Z -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
2025-10-08T16:01:30.2401598Z =========================== short test summary info ============================
2025-10-08T16:01:30.2402413Z FAILED tests/test_api_user_subscriptions.py::test_api_user_subscriptions - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: user
2025-10-08T16:01:30.2419462Z [SQL: SELECT user.id AS user_id, user.user_name AS user_user_name, user.alt_user_name AS user_alt_user_name, user.title AS user_title, user.email AS user_email, user.password_hash AS user_password_hash, user.verified AS user_verified, user.verification_token AS user_verification_token, user.banned AS user_banned, user.banned_until AS user_banned_until, user.ban_posts AS user_ban_posts, user.ban_comments AS user_ban_comments, user.deleted AS user_deleted, user.deleted_by AS user_deleted_by, user.about AS user_about, user.about_html AS user_about_html, user.keywords AS user_keywords, user.matrix_user_id AS user_matrix_user_id, user.hide_nsfw AS user_hide_nsfw, user.hide_nsfl AS user_hide_nsfl, user.created AS user_created, user.last_seen AS user_last_seen, user.avatar_id AS user_avatar_id, user.cover_id AS user_cover_id, user.public_key AS user_public_key, user.private_key AS user_private_key, user.newsletter AS user_newsletter, user.email_unread AS user_email_unread, user.email_unread_sent AS user_email_unread_sent, user.receive_message_mode AS user_receive_message_mode, user.bounces AS user_bounces, user.timezone AS user_timezone, user.reputation AS user_reputation, user.attitude AS user_attitude, user.post_count AS user_post_count, user.post_reply_count AS user_post_reply_count, user.stripe_customer_id AS user_stripe_customer_id, user.stripe_subscription_id AS user_stripe_subscription_id, user.searchable AS user_searchable, user.indexable AS user_indexable, user.bot AS user_bot, user.bot_override AS user_bot_override, user.suppress_crossposts AS user_suppress_crossposts, user.vote_privately AS user_vote_privately, user.ignore_bots AS user_ignore_bots, user.unread_notifications AS user_unread_notifications, user.ip_address AS user_ip_address, user.ip_address_country AS user_ip_address_country, user.instance_id AS user_instance_id, user.reports AS user_reports, user.default_sort AS user_default_sort, user.default_comment_sort AS user_default_comment_sort, user.default_filter AS user_default_filter, user.theme AS user_theme, user.font AS user_font, user.community_keyword_filter AS user_community_keyword_filter, user.referrer AS user_referrer, user.markdown_editor AS user_markdown_editor, user.interface_language AS user_interface_language, user.language_id AS user_language_id, user.read_language_ids AS user_read_language_ids, user.reply_collapse_threshold AS user_reply_collapse_threshold, user.reply_hide_threshold AS user_reply_hide_threshold, user.feed_auto_follow AS user_feed_auto_follow, user.feed_auto_leave AS user_feed_auto_leave, user.accept_private_messages AS user_accept_private_messages, user.google_oauth_id AS user_google_oauth_id, user.hide_low_quality AS user_hide_low_quality, user.show_subscribed_communities AS user_show_subscribed_communities, user.additional_css AS user_additional_css, user.mastodon_oauth_id AS user_mastodon_oauth_id, user.discord_oauth_id AS user_discord_oauth_id, user.password_updated_at AS user_password_updated_at, user.ap_id AS user_ap_id, user.ap_profile_id AS user_ap_profile_id, user.ap_public_url AS user_ap_public_url, user.ap_fetched_at AS user_ap_fetched_at, user.ap_followers_url AS user_ap_followers_url, user.ap_preferred_username AS user_ap_preferred_username, user.ap_manually_approves_followers AS user_ap_manually_approves_followers, user.ap_deleted_at AS user_ap_deleted_at, user.ap_inbox_url AS user_ap_inbox_url, user.ap_domain AS user_ap_domain, user.search_vector AS user_search_vector, user.hide_read_posts AS user_hide_read_posts, file_1.id AS file_1_id, file_1.file_path AS file_1_file_path, file_1.file_name AS file_1_file_name, file_1.width AS file_1_width, file_1.height AS file_1_height, file_1.alt_text AS file_1_alt_text, file_1.source_url AS file_1_source_url, file_1.thumbnail_path AS file_1_thumbnail_path, file_1.thumbnail_width AS file_1_thumbnail_width, file_1.thumbnail_height AS file_1_thumbnail_height, file_1.hash AS file_1_hash, file_2.id AS file_2_id, file_2.file_path AS file_2_file_path, file_2.file_name AS file_2_file_name, file_2.width AS file_2_width, file_2.height AS file_2_height, file_2.alt_text AS file_2_alt_text, file_2.source_url AS file_2_source_url, file_2.thumbnail_path AS file_2_thumbnail_path, file_2.thumbnail_width AS file_2_thumbnail_width, file_2.thumbnail_height AS file_2_thumbnail_height, file_2.hash AS file_2_hash, instance_1.id AS instance_1_id, instance_1.domain AS instance_1_domain, instance_1.inbox AS instance_1_inbox, instance_1.shared_inbox AS instance_1_shared_inbox, instance_1.outbox AS instance_1_outbox, instance_1.vote_weight AS instance_1_vote_weight, instance_1.software AS instance_1_software, instance_1.version AS instance_1_version, instance_1.created_at AS instance_1_created_at, instance_1.updated_at AS instance_1_updated_at, instance_1.last_seen AS instance_1_last_seen, instance_1.last_successful_send AS instance_1_last_successful_send, instance_1.failures AS instance_1_failures, instance_1.most_recent_attempt AS instance_1_most_recent_attempt, instance_1.dormant AS instance_1_dormant, instance_1.start_trying_again AS instance_1_start_trying_again, instance_1.gone_forever AS instance_1_gone_forever, instance_1.ip_address AS instance_1_ip_address, instance_1.trusted AS instance_1_trusted, instance_1.posting_warning AS instance_1_posting_warning, instance_1.nodeinfo_href AS instance_1_nodeinfo_href 
2025-10-08T16:01:30.2434930Z FROM user LEFT OUTER JOIN file AS file_1 ON file_1.id = user.avatar_id LEFT OUTER JOIN file AS file_2 ON file_2.id = user.cover_id LEFT OUTER JOIN instance AS instance_1 ON instance_1.id = user.instance_id 
2025-10-08T16:01:30.2435577Z WHERE user.id = ?]
2025-10-08T16:01:30.2435772Z [parameters: (1,)]
2025-10-08T16:01:30.2436044Z (Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-08T16:01:30.2436550Z ======================== 1 failed, 5 warnings in 2.60s =========================
2025-10-08T16:01:31.0146501Z ============================= test session starts ==============================
2025-10-08T16:01:31.0147934Z platform linux -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
2025-10-08T16:01:31.0148793Z cachedir: .pytest_cache
2025-10-08T16:01:31.0149197Z rootdir: /home/runner/work/pyfedi/pyfedi
2025-10-08T16:01:31.0149649Z plugins: anyio-4.11.0
2025-10-08T16:01:31.0507538Z collecting ... collected 14 items
2025-10-08T16:01:31.0507903Z 
2025-10-08T16:01:32.2838611Z tests/test_private_registration_security_simple.py::TestPrivateRegistrationSecurity::test_constant_time_comparison PASSED [  7%]
2025-10-08T16:01:32.2863246Z tests/test_private_registration_security_simple.py::TestPrivateRegistrationSecurity::test_environment_variable_functions PASSED [ 14%]
2025-10-08T16:01:32.2876809Z tests/test_private_registration_security_simple.py::TestPrivateRegistrationSecurity::test_secret_validation_function PASSED [ 21%]
2025-10-08T16:01:32.2885059Z tests/test_private_registration_security_simple.py::TestPrivateRegistrationSecurity::test_secure_password_generation PASSED [ 28%]
2025-10-08T16:01:32.2893537Z tests/test_private_registration_security_simple.py::TestPrivateRegistrationSecurity::test_user_input_sanitization PASSED [ 35%]
2025-10-08T16:01:32.5776058Z tests/test_private_registration_security_simple.py::TestPrivateRegistrationEndpoints::test_admin_routes_exist PASSED [ 42%]
2025-10-08T16:01:32.5784654Z tests/test_private_registration_security_simple.py::TestPrivateRegistrationEndpoints::test_private_registration_functions_exist PASSED [ 50%]
2025-10-08T16:01:32.5792626Z tests/test_private_registration_security_simple.py::TestPrivateRegistrationEndpoints::test_require_private_registration_auth_decorator PASSED [ 57%]
2025-10-08T16:01:32.5800233Z tests/test_private_registration_security_simple.py::TestPrivateRegistrationEndpoints::test_schema_classes_exist PASSED [ 64%]
2025-10-08T16:01:32.5808292Z tests/test_private_registration_security_simple.py::TestPrivateRegistrationEndpoints::test_validation_function_components PASSED [ 71%]
2025-10-08T16:01:32.5836759Z tests/test_private_registration_security_simple.py::TestSecurityProtocolCompliance::test_error_handling_security PASSED [ 78%]
2025-10-08T16:01:32.5854327Z tests/test_private_registration_security_simple.py::TestSecurityProtocolCompliance::test_feature_toggle_security PASSED [ 85%]
2025-10-08T16:01:32.5864737Z tests/test_private_registration_security_simple.py::TestSecurityProtocolCompliance::test_ip_whitelist_function_exists PASSED [ 92%]
2025-10-08T16:01:33.0593310Z tests/test_private_registration_security_simple.py::TestSecurityProtocolCompliance::test_secret_environment_priority PASSED [100%]
2025-10-08T16:01:33.0594184Z 
2025-10-08T16:01:33.0594362Z =============================== warnings summary ===============================
2025-10-08T16:01:33.0595154Z tests/test_private_registration_security_simple.py::TestPrivateRegistrationEndpoints::test_admin_routes_exist
2025-10-08T16:01:33.0596750Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pytesseract/pytesseract.py:32: DeprecationWarning: 'pkgutil.find_loader' is deprecated and slated for removal in Python 3.14; use importlib.util.find_spec() instead
2025-10-08T16:01:33.0598494Z     numpy_installed = find_loader('numpy') is not None
2025-10-08T16:01:33.0598789Z 
2025-10-08T16:01:33.0599620Z tests/test_private_registration_security_simple.py::TestPrivateRegistrationEndpoints::test_admin_routes_exist
2025-10-08T16:01:33.0601046Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pytesseract/pytesseract.py:36: DeprecationWarning: 'pkgutil.find_loader' is deprecated and slated for removal in Python 3.14; use importlib.util.find_spec() instead
2025-10-08T16:01:33.0602103Z     pandas_installed = find_loader('pandas') is not None
2025-10-08T16:01:33.0602511Z 
2025-10-08T16:01:33.0602879Z tests/test_private_registration_security_simple.py::TestPrivateRegistrationEndpoints::test_admin_routes_exist
2025-10-08T16:01:33.0603948Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pyasn1/codec/ber/encoder.py:952: DeprecationWarning: tagMap is deprecated. Please use TAG_MAP instead.
2025-10-08T16:01:33.0604907Z     warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)
2025-10-08T16:01:33.0605264Z 
2025-10-08T16:01:33.0605641Z tests/test_private_registration_security_simple.py::TestPrivateRegistrationEndpoints::test_admin_routes_exist
2025-10-08T16:01:33.0606709Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pyasn1/codec/ber/encoder.py:952: DeprecationWarning: typeMap is deprecated. Please use TYPE_MAP instead.
2025-10-08T16:01:33.0607960Z     warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)
2025-10-08T16:01:33.0608319Z 
2025-10-08T16:01:33.0608549Z -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
2025-10-08T16:01:33.0608998Z ======================== 14 passed, 4 warnings in 1.58s ========================
2025-10-08T16:01:33.7407015Z ============================= test session starts ==============================
2025-10-08T16:01:33.7408176Z platform linux -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
2025-10-08T16:01:33.7408764Z cachedir: .pytest_cache
2025-10-08T16:01:33.7409060Z rootdir: /home/runner/work/pyfedi/pyfedi
2025-10-08T16:01:33.7409395Z plugins: anyio-4.11.0
2025-10-08T16:01:33.8586592Z collecting ... collected 3 items
2025-10-08T16:01:33.8586927Z 
2025-10-08T16:01:35.0211506Z tests/test_explore_real_world.py::test_explore_page_shows_topics_and_communities ERROR [ 33%]
2025-10-08T16:01:35.0833274Z tests/test_explore_real_world.py::test_explore_page_empty_database ERROR [ 66%]
2025-10-08T16:01:35.4479583Z tests/test_explore_real_world.py::test_explore_template_syntax_not_exposed ERROR [100%]
2025-10-08T16:01:35.4480319Z 
2025-10-08T16:01:35.4480560Z ==================================== ERRORS ====================================
2025-10-08T16:01:35.4481126Z _______ ERROR at setup of test_explore_page_shows_topics_and_communities _______
2025-10-08T16:01:35.4481474Z 
2025-10-08T16:01:35.4481600Z     @pytest.fixture(scope='module')
2025-10-08T16:01:35.4481910Z     def app():
2025-10-08T16:01:35.4482249Z         """Create a fully configured test application with database."""
2025-10-08T16:01:35.4482672Z         from app import create_app, db
2025-10-08T16:01:35.4483089Z         from app.models import Site, Instance, User, Topic, Community
2025-10-08T16:01:35.4483472Z     
2025-10-08T16:01:35.4483784Z         # Patch PostgreSQL-specific functions that don't work in SQLite
2025-10-08T16:01:35.4484288Z >       with patch('app.models.db.engine.execute') as mock_execute:
2025-10-08T16:01:35.4484732Z              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:35.4484923Z 
2025-10-08T16:01:35.4485047Z tests/test_explore_real_world.py:35: 
2025-10-08T16:01:35.4485355Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:35.4485853Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:1481: in __enter__
2025-10-08T16:01:35.4486314Z     self.target = self.getter()
2025-10-08T16:01:35.4486554Z                   ^^^^^^^^^^^^^
2025-10-08T16:01:35.4486952Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/pkgutil.py:528: in resolve_name
2025-10-08T16:01:35.4487684Z     result = getattr(result, p)
2025-10-08T16:01:35.4488414Z              ^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:35.4489018Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask_sqlalchemy/extension.py:709: in engine
2025-10-08T16:01:35.4489575Z     return self.engines[None]
2025-10-08T16:01:35.4489818Z            ^^^^^^^^^^^^
2025-10-08T16:01:35.4490302Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask_sqlalchemy/extension.py:687: in engines
2025-10-08T16:01:35.4491152Z     app = current_app._get_current_object()  # type: ignore[attr-defined]
2025-10-08T16:01:35.4491535Z           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:35.4491837Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:35.4492068Z 
2025-10-08T16:01:35.4492170Z     def _get_current_object() -> T:
2025-10-08T16:01:35.4492428Z         try:
2025-10-08T16:01:35.4492626Z             obj = local.get()
2025-10-08T16:01:35.4492869Z         except LookupError:
2025-10-08T16:01:35.4493180Z >           raise RuntimeError(unbound_message) from None
2025-10-08T16:01:35.4493558Z E           RuntimeError: Working outside of application context.
2025-10-08T16:01:35.4493876Z E           
2025-10-08T16:01:35.4494194Z E           This typically means that you attempted to use functionality that needed
2025-10-08T16:01:35.4494708Z E           the current application. To solve this, set up an application context
2025-10-08T16:01:35.4495207Z E           with app.app_context(). See the documentation for more information.
2025-10-08T16:01:35.4495489Z 
2025-10-08T16:01:35.4495811Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/werkzeug/local.py:519: RuntimeError
2025-10-08T16:01:35.4496358Z ______________ ERROR at setup of test_explore_page_empty_database ______________
2025-10-08T16:01:35.4496610Z 
2025-10-08T16:01:35.4496711Z     @pytest.fixture(scope='module')
2025-10-08T16:01:35.4496942Z     def app():
2025-10-08T16:01:35.4497206Z         """Create a fully configured test application with database."""
2025-10-08T16:01:35.4497654Z         from app import create_app, db
2025-10-08T16:01:35.4497971Z         from app.models import Site, Instance, User, Topic, Community
2025-10-08T16:01:35.4506560Z     
2025-10-08T16:01:35.4507008Z         # Patch PostgreSQL-specific functions that don't work in SQLite
2025-10-08T16:01:35.4507833Z >       with patch('app.models.db.engine.execute') as mock_execute:
2025-10-08T16:01:35.4508393Z              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:35.4508681Z 
2025-10-08T16:01:35.4508842Z tests/test_explore_real_world.py:35: 
2025-10-08T16:01:35.4509318Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:35.4510067Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:1481: in __enter__
2025-10-08T16:01:35.4510767Z     self.target = self.getter()
2025-10-08T16:01:35.4511149Z                   ^^^^^^^^^^^^^
2025-10-08T16:01:35.4511674Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/pkgutil.py:528: in resolve_name
2025-10-08T16:01:35.4512065Z     result = getattr(result, p)
2025-10-08T16:01:35.4512278Z              ^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:35.4512724Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask_sqlalchemy/extension.py:709: in engine
2025-10-08T16:01:35.4513207Z     return self.engines[None]
2025-10-08T16:01:35.4513417Z            ^^^^^^^^^^^^
2025-10-08T16:01:35.4513853Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask_sqlalchemy/extension.py:687: in engines
2025-10-08T16:01:35.4514418Z     app = current_app._get_current_object()  # type: ignore[attr-defined]
2025-10-08T16:01:35.4514754Z           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:35.4515024Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:35.4515235Z 
2025-10-08T16:01:35.4515328Z     def _get_current_object() -> T:
2025-10-08T16:01:35.4515563Z         try:
2025-10-08T16:01:35.4515741Z             obj = local.get()
2025-10-08T16:01:35.4516132Z         except LookupError:
2025-10-08T16:01:35.4516403Z >           raise RuntimeError(unbound_message) from None
2025-10-08T16:01:35.4516767Z E           RuntimeError: Working outside of application context.
2025-10-08T16:01:35.4517054Z E           
2025-10-08T16:01:35.4517519Z E           This typically means that you attempted to use functionality that needed
2025-10-08T16:01:35.4518130Z E           the current application. To solve this, set up an application context
2025-10-08T16:01:35.4518551Z E           with app.app_context(). See the documentation for more information.
2025-10-08T16:01:35.4518806Z 
2025-10-08T16:01:35.4519099Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/werkzeug/local.py:519: RuntimeError
2025-10-08T16:01:35.4519651Z __________ ERROR at setup of test_explore_template_syntax_not_exposed __________
2025-10-08T16:01:35.4519907Z 
2025-10-08T16:01:35.4520004Z     @pytest.fixture(scope='module')
2025-10-08T16:01:35.4520232Z     def app():
2025-10-08T16:01:35.4520498Z         """Create a fully configured test application with database."""
2025-10-08T16:01:35.4520821Z         from app import create_app, db
2025-10-08T16:01:35.4521136Z         from app.models import Site, Instance, User, Topic, Community
2025-10-08T16:01:35.4521430Z     
2025-10-08T16:01:35.4521683Z         # Patch PostgreSQL-specific functions that don't work in SQLite
2025-10-08T16:01:35.4522079Z >       with patch('app.models.db.engine.execute') as mock_execute:
2025-10-08T16:01:35.4522388Z              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:35.4522559Z 
2025-10-08T16:01:35.4522654Z tests/test_explore_real_world.py:35: 
2025-10-08T16:01:35.4522930Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:35.4523361Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/unittest/mock.py:1481: in __enter__
2025-10-08T16:01:35.4523773Z     self.target = self.getter()
2025-10-08T16:01:35.4524000Z                   ^^^^^^^^^^^^^
2025-10-08T16:01:35.4524362Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/pkgutil.py:528: in resolve_name
2025-10-08T16:01:35.4524750Z     result = getattr(result, p)
2025-10-08T16:01:35.4524967Z              ^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:35.4525413Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask_sqlalchemy/extension.py:709: in engine
2025-10-08T16:01:35.4525900Z     return self.engines[None]
2025-10-08T16:01:35.4526112Z            ^^^^^^^^^^^^
2025-10-08T16:01:35.4526550Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask_sqlalchemy/extension.py:687: in engines
2025-10-08T16:01:35.4527116Z     app = current_app._get_current_object()  # type: ignore[attr-defined]
2025-10-08T16:01:35.4527750Z           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:35.4528042Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:35.4528244Z 
2025-10-08T16:01:35.4528344Z     def _get_current_object() -> T:
2025-10-08T16:01:35.4528586Z         try:
2025-10-08T16:01:35.4528766Z             obj = local.get()
2025-10-08T16:01:35.4528993Z         except LookupError:
2025-10-08T16:01:35.4529247Z >           raise RuntimeError(unbound_message) from None
2025-10-08T16:01:35.4529584Z E           RuntimeError: Working outside of application context.
2025-10-08T16:01:35.4529894Z E           
2025-10-08T16:01:35.4530186Z E           This typically means that you attempted to use functionality that needed
2025-10-08T16:01:35.4530639Z E           the current application. To solve this, set up an application context
2025-10-08T16:01:35.4531067Z E           with app.app_context(). See the documentation for more information.
2025-10-08T16:01:35.4531330Z 
2025-10-08T16:01:35.4531627Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/werkzeug/local.py:519: RuntimeError
2025-10-08T16:01:35.4532126Z =========================== short test summary info ============================
2025-10-08T16:01:35.4532866Z ERROR tests/test_explore_real_world.py::test_explore_page_shows_topics_and_communities - RuntimeError: Working outside of application context.
2025-10-08T16:01:35.4533372Z 
2025-10-08T16:01:35.4533560Z This typically means that you attempted to use functionality that needed
2025-10-08T16:01:35.4534006Z the current application. To solve this, set up an application context
2025-10-08T16:01:35.4534423Z with app.app_context(). See the documentation for more information.
2025-10-08T16:01:35.4535115Z ERROR tests/test_explore_real_world.py::test_explore_page_empty_database - RuntimeError: Working outside of application context.
2025-10-08T16:01:35.4535547Z 
2025-10-08T16:01:35.4535725Z This typically means that you attempted to use functionality that needed
2025-10-08T16:01:35.4536154Z the current application. To solve this, set up an application context
2025-10-08T16:01:35.4536570Z with app.app_context(). See the documentation for more information.
2025-10-08T16:01:35.4537179Z ERROR tests/test_explore_real_world.py::test_explore_template_syntax_not_exposed - RuntimeError: Working outside of application context.
2025-10-08T16:01:35.4537753Z 
2025-10-08T16:01:35.4537931Z This typically means that you attempted to use functionality that needed
2025-10-08T16:01:35.4538358Z the current application. To solve this, set up an application context
2025-10-08T16:01:35.4538762Z with app.app_context(). See the documentation for more information.
2025-10-08T16:01:35.4539115Z ============================== 3 errors in 1.42s ===============================
2025-10-08T16:01:35.8976004Z ============================= test session starts ==============================
2025-10-08T16:01:35.8976965Z platform linux -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
2025-10-08T16:01:35.8977883Z cachedir: .pytest_cache
2025-10-08T16:01:35.8978181Z rootdir: /home/runner/work/pyfedi/pyfedi
2025-10-08T16:01:35.8978509Z plugins: anyio-4.11.0
2025-10-08T16:01:36.9524759Z collecting ... collected 1 item
2025-10-08T16:01:36.9525156Z 
2025-10-08T16:01:38.5070963Z tests/test_api_instance_blocks.py::test_api_instance_blocks FAILED       [100%]
2025-10-08T16:01:38.5071728Z 
2025-10-08T16:01:38.5071951Z =================================== FAILURES ===================================
2025-10-08T16:01:38.5072614Z ___________________________ test_api_instance_blocks ___________________________
2025-10-08T16:01:38.5073088Z 
2025-10-08T16:01:38.5073425Z self = <sqlalchemy.engine.base.Connection object at 0x7f4facedba80>
2025-10-08T16:01:38.5074434Z dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f4fb66882f0>
2025-10-08T16:01:38.5075527Z context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f4fac924b90>
2025-10-08T16:01:38.5076285Z statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f4facf3d400>
2025-10-08T16:01:38.5076793Z parameters = [(1,)]
2025-10-08T16:01:38.5076936Z 
2025-10-08T16:01:38.5077040Z     def _exec_single_context(
2025-10-08T16:01:38.5077311Z         self,
2025-10-08T16:01:38.5077773Z         dialect: Dialect,
2025-10-08T16:01:38.5078040Z         context: ExecutionContext,
2025-10-08T16:01:38.5078343Z         statement: Union[str, Compiled],
2025-10-08T16:01:38.5078695Z         parameters: Optional[_AnyMultiExecuteParams],
2025-10-08T16:01:38.5079039Z     ) -> CursorResult[Any]:
2025-10-08T16:01:38.5079381Z         """continue the _execute_context() method for a single DBAPI
2025-10-08T16:01:38.5079807Z         cursor.execute() or cursor.executemany() call.
2025-10-08T16:01:38.5080133Z     
2025-10-08T16:01:38.5080317Z         """
2025-10-08T16:01:38.5080589Z         if dialect.bind_typing is BindTyping.SETINPUTSIZES:
2025-10-08T16:01:38.5081032Z             generic_setinputsizes = context._prepare_set_input_sizes()
2025-10-08T16:01:38.5081390Z     
2025-10-08T16:01:38.5081599Z             if generic_setinputsizes:
2025-10-08T16:01:38.5081876Z                 try:
2025-10-08T16:01:38.5082355Z                     dialect.do_set_input_sizes(
2025-10-08T16:01:38.5082728Z                         context.cursor, generic_setinputsizes, context
2025-10-08T16:01:38.5083032Z                     )
2025-10-08T16:01:38.5083239Z                 except BaseException as e:
2025-10-08T16:01:38.5083515Z                     self._handle_dbapi_exception(
2025-10-08T16:01:38.5083808Z                         e, str(statement), parameters, None, context
2025-10-08T16:01:38.5084228Z                     )
2025-10-08T16:01:38.5084402Z     
2025-10-08T16:01:38.5084588Z         cursor, str_statement, parameters = (
2025-10-08T16:01:38.5084852Z             context.cursor,
2025-10-08T16:01:38.5085069Z             context.statement,
2025-10-08T16:01:38.5085299Z             context.parameters,
2025-10-08T16:01:38.5085523Z         )
2025-10-08T16:01:38.5085682Z     
2025-10-08T16:01:38.5085907Z         effective_parameters: Optional[_AnyExecuteParams]
2025-10-08T16:01:38.5086187Z     
2025-10-08T16:01:38.5086360Z         if not context.executemany:
2025-10-08T16:01:38.5086632Z             effective_parameters = parameters[0]
2025-10-08T16:01:38.5086886Z         else:
2025-10-08T16:01:38.5087079Z             effective_parameters = parameters
2025-10-08T16:01:38.5087320Z     
2025-10-08T16:01:38.5087651Z         if self._has_events or self.engine._has_events:
2025-10-08T16:01:38.5087975Z             for fn in self.dispatch.before_cursor_execute:
2025-10-08T16:01:38.5088285Z                 str_statement, effective_parameters = fn(
2025-10-08T16:01:38.5088555Z                     self,
2025-10-08T16:01:38.5088755Z                     cursor,
2025-10-08T16:01:38.5088960Z                     str_statement,
2025-10-08T16:01:38.5089203Z                     effective_parameters,
2025-10-08T16:01:38.5089445Z                     context,
2025-10-08T16:01:38.5089661Z                     context.executemany,
2025-10-08T16:01:38.5089895Z                 )
2025-10-08T16:01:38.5090067Z     
2025-10-08T16:01:38.5090224Z         if self._echo:
2025-10-08T16:01:38.5090444Z             self._log_info(str_statement)
2025-10-08T16:01:38.5090674Z     
2025-10-08T16:01:38.5090855Z             stats = context._get_cache_stats()
2025-10-08T16:01:38.5091095Z     
2025-10-08T16:01:38.5091282Z             if not self.engine.hide_parameters:
2025-10-08T16:01:38.5091541Z                 self._log_info(
2025-10-08T16:01:38.5091753Z                     "[%s] %r",
2025-10-08T16:01:38.5091960Z                     stats,
2025-10-08T16:01:38.5092180Z                     sql_util._repr_params(
2025-10-08T16:01:38.5092437Z                         effective_parameters,
2025-10-08T16:01:38.5092681Z                         batches=10,
2025-10-08T16:01:38.5092930Z                         ismulti=context.executemany,
2025-10-08T16:01:38.5093175Z                     ),
2025-10-08T16:01:38.5093360Z                 )
2025-10-08T16:01:38.5093533Z             else:
2025-10-08T16:01:38.5093715Z                 self._log_info(
2025-10-08T16:01:38.5093999Z                     "[%s] [SQL parameters hidden due to hide_parameters=True]",
2025-10-08T16:01:38.5094302Z                     stats,
2025-10-08T16:01:38.5094535Z                 )
2025-10-08T16:01:38.5094702Z     
2025-10-08T16:01:38.5094875Z         evt_handled: bool = False
2025-10-08T16:01:38.5095099Z         try:
2025-10-08T16:01:38.5095330Z             if context.execute_style is ExecuteStyle.EXECUTEMANY:
2025-10-08T16:01:38.5095646Z                 effective_parameters = cast(
2025-10-08T16:01:38.5095955Z                     "_CoreMultiExecuteParams", effective_parameters
2025-10-08T16:01:38.5096224Z                 )
2025-10-08T16:01:38.5096421Z                 if self.dialect._has_events:
2025-10-08T16:01:38.5096712Z                     for fn in self.dialect.dispatch.do_executemany:
2025-10-08T16:01:38.5096991Z                         if fn(
2025-10-08T16:01:38.5097204Z                             cursor,
2025-10-08T16:01:38.5097535Z                             str_statement,
2025-10-08T16:01:38.5097792Z                             effective_parameters,
2025-10-08T16:01:38.5098225Z                             context,
2025-10-08T16:01:38.5098458Z                         ):
2025-10-08T16:01:38.5098673Z                             evt_handled = True
2025-10-08T16:01:38.5098910Z                             break
2025-10-08T16:01:38.5099133Z                 if not evt_handled:
2025-10-08T16:01:38.5099389Z                     self.dialect.do_executemany(
2025-10-08T16:01:38.5099764Z                         cursor,
2025-10-08T16:01:38.5099978Z                         str_statement,
2025-10-08T16:01:38.5100229Z                         effective_parameters,
2025-10-08T16:01:38.5100477Z                         context,
2025-10-08T16:01:38.5100681Z                     )
2025-10-08T16:01:38.5100935Z             elif not effective_parameters and context.no_parameters:
2025-10-08T16:01:38.5101249Z                 if self.dialect._has_events:
2025-10-08T16:01:38.5101544Z                     for fn in self.dialect.dispatch.do_execute_no_params:
2025-10-08T16:01:38.5101880Z                         if fn(cursor, str_statement, context):
2025-10-08T16:01:38.5102163Z                             evt_handled = True
2025-10-08T16:01:38.5102409Z                             break
2025-10-08T16:01:38.5102635Z                 if not evt_handled:
2025-10-08T16:01:38.5102893Z                     self.dialect.do_execute_no_params(
2025-10-08T16:01:38.5103170Z                         cursor, str_statement, context
2025-10-08T16:01:38.5103417Z                     )
2025-10-08T16:01:38.5103600Z             else:
2025-10-08T16:01:38.5103806Z                 effective_parameters = cast(
2025-10-08T16:01:38.5104097Z                     "_CoreSingleExecuteParams", effective_parameters
2025-10-08T16:01:38.5104376Z                 )
2025-10-08T16:01:38.5104576Z                 if self.dialect._has_events:
2025-10-08T16:01:38.5104855Z                     for fn in self.dialect.dispatch.do_execute:
2025-10-08T16:01:38.5105132Z                         if fn(
2025-10-08T16:01:38.5105350Z                             cursor,
2025-10-08T16:01:38.5105578Z                             str_statement,
2025-10-08T16:01:38.5105824Z                             effective_parameters,
2025-10-08T16:01:38.5106075Z                             context,
2025-10-08T16:01:38.5106297Z                         ):
2025-10-08T16:01:38.5106507Z                             evt_handled = True
2025-10-08T16:01:38.5106747Z                             break
2025-10-08T16:01:38.5106973Z                 if not evt_handled:
2025-10-08T16:01:38.5107204Z >                   self.dialect.do_execute(
2025-10-08T16:01:38.5107733Z                         cursor, str_statement, effective_parameters, context
2025-10-08T16:01:38.5108033Z                     )
2025-10-08T16:01:38.5108149Z 
2025-10-08T16:01:38.5108446Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1967: 
2025-10-08T16:01:38.5108927Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:38.5109132Z 
2025-10-08T16:01:38.5109408Z self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f4fb66882f0>
2025-10-08T16:01:38.5109875Z cursor = <sqlite3.Cursor object at 0x7f4fac915d40>
2025-10-08T16:01:38.5110711Z statement = 'SELECT user.id AS user_id, user.user_name AS user_user_name, user.alt_user_name AS user_alt_user_name, user.title AS ...le_2.id = user.cover_id LEFT OUTER JOIN instance AS instance_1 ON instance_1.id = user.instance_id \nWHERE user.id = ?'
2025-10-08T16:01:38.5111495Z parameters = (1,)
2025-10-08T16:01:38.5111888Z context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f4fac924b90>
2025-10-08T16:01:38.5112247Z 
2025-10-08T16:01:38.5112424Z     def do_execute(self, cursor, statement, parameters, context=None):
2025-10-08T16:01:38.5112773Z >       cursor.execute(statement, parameters)
2025-10-08T16:01:38.5113075Z E       sqlite3.OperationalError: no such table: user
2025-10-08T16:01:38.5113282Z 
2025-10-08T16:01:38.5113782Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/default.py:951: OperationalError
2025-10-08T16:01:38.5114225Z 
2025-10-08T16:01:38.5114404Z The above exception was the direct cause of the following exception:
2025-10-08T16:01:38.5114655Z 
2025-10-08T16:01:38.5114740Z app = <Flask 'app'>
2025-10-08T16:01:38.5114856Z 
2025-10-08T16:01:38.5114951Z     def test_api_instance_blocks(app):
2025-10-08T16:01:38.5115322Z         with app.app_context():
2025-10-08T16:01:38.5115617Z             from app.api.alpha.utils.site import post_site_block
2025-10-08T16:01:38.5115967Z             from app.api.alpha.utils.post import get_post_list
2025-10-08T16:01:38.5116248Z     
2025-10-08T16:01:38.5116414Z             user_id = 1
2025-10-08T16:01:38.5116621Z >           user = User.query.get(user_id)
2025-10-08T16:01:38.5116876Z                    ^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:38.5117035Z 
2025-10-08T16:01:38.5117131Z tests/test_api_instance_blocks.py:30: 
2025-10-08T16:01:38.5117614Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:38.5117898Z <string>:2: in get
2025-10-08T16:01:38.5118082Z     ???
2025-10-08T16:01:38.5118555Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/util/deprecations.py:386: in warned
2025-10-08T16:01:38.5119111Z     return fn(*args, **kwargs)  # type: ignore[no-any-return]
2025-10-08T16:01:38.5119424Z            ^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:38.5119854Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/query.py:1126: in get
2025-10-08T16:01:38.5120362Z     return self._get_impl(ident, loading.load_on_pk_identity)
2025-10-08T16:01:38.5120666Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:38.5121140Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/query.py:1135: in _get_impl
2025-10-08T16:01:38.5121619Z     return self.session._get_impl(
2025-10-08T16:01:38.5122092Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/session.py:3873: in _get_impl
2025-10-08T16:01:38.5122574Z     return db_load_fn(
2025-10-08T16:01:38.5123043Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/loading.py:695: in load_on_pk_identity
2025-10-08T16:01:38.5123551Z     session.execute(
2025-10-08T16:01:38.5123969Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2365: in execute
2025-10-08T16:01:38.5124447Z     return self._execute_internal(
2025-10-08T16:01:38.5124941Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
2025-10-08T16:01:38.5125506Z     result: Result[Any] = compile_state_cls.orm_execute_statement(
2025-10-08T16:01:38.5126095Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
2025-10-08T16:01:38.5126613Z     result = conn.execute(
2025-10-08T16:01:38.5127052Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
2025-10-08T16:01:38.5127610Z     return meth(
2025-10-08T16:01:38.5128084Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
2025-10-08T16:01:38.5128630Z     return connection._execute_clauseelement(
2025-10-08T16:01:38.5129173Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
2025-10-08T16:01:38.5129701Z     ret = self._execute_context(
2025-10-08T16:01:38.5130188Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
2025-10-08T16:01:38.5130698Z     return self._exec_single_context(
2025-10-08T16:01:38.5131205Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
2025-10-08T16:01:38.5131725Z     self._handle_dbapi_exception(
2025-10-08T16:01:38.5132400Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
2025-10-08T16:01:38.5133016Z     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
2025-10-08T16:01:38.5133601Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
2025-10-08T16:01:38.5134237Z     self.dialect.do_execute(
2025-10-08T16:01:38.5134497Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:38.5134695Z 
2025-10-08T16:01:38.5134972Z self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f4fb66882f0>
2025-10-08T16:01:38.5135436Z cursor = <sqlite3.Cursor object at 0x7f4fac915d40>
2025-10-08T16:01:38.5136256Z statement = 'SELECT user.id AS user_id, user.user_name AS user_user_name, user.alt_user_name AS user_alt_user_name, user.title AS ...le_2.id = user.cover_id LEFT OUTER JOIN instance AS instance_1 ON instance_1.id = user.instance_id \nWHERE user.id = ?'
2025-10-08T16:01:38.5137055Z parameters = (1,)
2025-10-08T16:01:38.5137643Z context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f4fac924b90>
2025-10-08T16:01:38.5138006Z 
2025-10-08T16:01:38.5138173Z     def do_execute(self, cursor, statement, parameters, context=None):
2025-10-08T16:01:38.5138517Z >       cursor.execute(statement, parameters)
2025-10-08T16:01:38.5138928Z E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: user
2025-10-08T16:01:38.5154216Z E       [SQL: SELECT user.id AS user_id, user.user_name AS user_user_name, user.alt_user_name AS user_alt_user_name, user.title AS user_title, user.email AS user_email, user.password_hash AS user_password_hash, user.verified AS user_verified, user.verification_token AS user_verification_token, user.banned AS user_banned, user.banned_until AS user_banned_until, user.ban_posts AS user_ban_posts, user.ban_comments AS user_ban_comments, user.deleted AS user_deleted, user.deleted_by AS user_deleted_by, user.about AS user_about, user.about_html AS user_about_html, user.keywords AS user_keywords, user.matrix_user_id AS user_matrix_user_id, user.hide_nsfw AS user_hide_nsfw, user.hide_nsfl AS user_hide_nsfl, user.created AS user_created, user.last_seen AS user_last_seen, user.avatar_id AS user_avatar_id, user.cover_id AS user_cover_id, user.public_key AS user_public_key, user.private_key AS user_private_key, user.newsletter AS user_newsletter, user.email_unread AS user_email_unread, user.email_unread_sent AS user_email_unread_sent, user.receive_message_mode AS user_receive_message_mode, user.bounces AS user_bounces, user.timezone AS user_timezone, user.reputation AS user_reputation, user.attitude AS user_attitude, user.post_count AS user_post_count, user.post_reply_count AS user_post_reply_count, user.stripe_customer_id AS user_stripe_customer_id, user.stripe_subscription_id AS user_stripe_subscription_id, user.searchable AS user_searchable, user.indexable AS user_indexable, user.bot AS user_bot, user.bot_override AS user_bot_override, user.suppress_crossposts AS user_suppress_crossposts, user.vote_privately AS user_vote_privately, user.ignore_bots AS user_ignore_bots, user.unread_notifications AS user_unread_notifications, user.ip_address AS user_ip_address, user.ip_address_country AS user_ip_address_country, user.instance_id AS user_instance_id, user.reports AS user_reports, user.default_sort AS user_default_sort, user.default_comment_sort AS user_default_comment_sort, user.default_filter AS user_default_filter, user.theme AS user_theme, user.font AS user_font, user.community_keyword_filter AS user_community_keyword_filter, user.referrer AS user_referrer, user.markdown_editor AS user_markdown_editor, user.interface_language AS user_interface_language, user.language_id AS user_language_id, user.read_language_ids AS user_read_language_ids, user.reply_collapse_threshold AS user_reply_collapse_threshold, user.reply_hide_threshold AS user_reply_hide_threshold, user.feed_auto_follow AS user_feed_auto_follow, user.feed_auto_leave AS user_feed_auto_leave, user.accept_private_messages AS user_accept_private_messages, user.google_oauth_id AS user_google_oauth_id, user.hide_low_quality AS user_hide_low_quality, user.show_subscribed_communities AS user_show_subscribed_communities, user.additional_css AS user_additional_css, user.mastodon_oauth_id AS user_mastodon_oauth_id, user.discord_oauth_id AS user_discord_oauth_id, user.password_updated_at AS user_password_updated_at, user.ap_id AS user_ap_id, user.ap_profile_id AS user_ap_profile_id, user.ap_public_url AS user_ap_public_url, user.ap_fetched_at AS user_ap_fetched_at, user.ap_followers_url AS user_ap_followers_url, user.ap_preferred_username AS user_ap_preferred_username, user.ap_manually_approves_followers AS user_ap_manually_approves_followers, user.ap_deleted_at AS user_ap_deleted_at, user.ap_inbox_url AS user_ap_inbox_url, user.ap_domain AS user_ap_domain, user.search_vector AS user_search_vector, user.hide_read_posts AS user_hide_read_posts, file_1.id AS file_1_id, file_1.file_path AS file_1_file_path, file_1.file_name AS file_1_file_name, file_1.width AS file_1_width, file_1.height AS file_1_height, file_1.alt_text AS file_1_alt_text, file_1.source_url AS file_1_source_url, file_1.thumbnail_path AS file_1_thumbnail_path, file_1.thumbnail_width AS file_1_thumbnail_width, file_1.thumbnail_height AS file_1_thumbnail_height, file_1.hash AS file_1_hash, file_2.id AS file_2_id, file_2.file_path AS file_2_file_path, file_2.file_name AS file_2_file_name, file_2.width AS file_2_width, file_2.height AS file_2_height, file_2.alt_text AS file_2_alt_text, file_2.source_url AS file_2_source_url, file_2.thumbnail_path AS file_2_thumbnail_path, file_2.thumbnail_width AS file_2_thumbnail_width, file_2.thumbnail_height AS file_2_thumbnail_height, file_2.hash AS file_2_hash, instance_1.id AS instance_1_id, instance_1.domain AS instance_1_domain, instance_1.inbox AS instance_1_inbox, instance_1.shared_inbox AS instance_1_shared_inbox, instance_1.outbox AS instance_1_outbox, instance_1.vote_weight AS instance_1_vote_weight, instance_1.software AS instance_1_software, instance_1.version AS instance_1_version, instance_1.created_at AS instance_1_created_at, instance_1.updated_at AS instance_1_updated_at, instance_1.last_seen AS instance_1_last_seen, instance_1.last_successful_send AS instance_1_last_successful_send, instance_1.failures AS instance_1_failures, instance_1.most_recent_attempt AS instance_1_most_recent_attempt, instance_1.dormant AS instance_1_dormant, instance_1.start_trying_again AS instance_1_start_trying_again, instance_1.gone_forever AS instance_1_gone_forever, instance_1.ip_address AS instance_1_ip_address, instance_1.trusted AS instance_1_trusted, instance_1.posting_warning AS instance_1_posting_warning, instance_1.nodeinfo_href AS instance_1_nodeinfo_href 
2025-10-08T16:01:38.5169824Z E       FROM user LEFT OUTER JOIN file AS file_1 ON file_1.id = user.avatar_id LEFT OUTER JOIN file AS file_2 ON file_2.id = user.cover_id LEFT OUTER JOIN instance AS instance_1 ON instance_1.id = user.instance_id 
2025-10-08T16:01:38.5170494Z E       WHERE user.id = ?]
2025-10-08T16:01:38.5170712Z E       [parameters: (1,)]
2025-10-08T16:01:38.5171024Z E       (Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-08T16:01:38.5171270Z 
2025-10-08T16:01:38.5171639Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/default.py:951: OperationalError
2025-10-08T16:01:38.5172260Z ------------------------------ Captured log setup ------------------------------
2025-10-08T16:01:38.5172604Z INFO     app:__init__.py:298 Started!
2025-10-08T16:01:38.5172937Z INFO     app:startup_validation.py:102 Running startup validations...
2025-10-08T16:01:38.5173350Z INFO     app:startup_validation.py:118 Startup validations completed
2025-10-08T16:01:38.5173704Z =============================== warnings summary ===============================
2025-10-08T16:01:38.5174204Z tests/test_api_instance_blocks.py::test_api_instance_blocks
2025-10-08T16:01:38.5175152Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pytesseract/pytesseract.py:32: DeprecationWarning: 'pkgutil.find_loader' is deprecated and slated for removal in Python 3.14; use importlib.util.find_spec() instead
2025-10-08T16:01:38.5176055Z     numpy_installed = find_loader('numpy') is not None
2025-10-08T16:01:38.5176262Z 
2025-10-08T16:01:38.5176526Z tests/test_api_instance_blocks.py::test_api_instance_blocks
2025-10-08T16:01:38.5177547Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pytesseract/pytesseract.py:36: DeprecationWarning: 'pkgutil.find_loader' is deprecated and slated for removal in Python 3.14; use importlib.util.find_spec() instead
2025-10-08T16:01:39.1038662Z     pandas_installed = find_loader('pandas') is not None
2025-10-08T16:01:39.1039139Z 
2025-10-08T16:01:39.1039418Z tests/test_api_instance_blocks.py::test_api_instance_blocks
2025-10-08T16:01:39.1040464Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pyasn1/codec/ber/encoder.py:952: DeprecationWarning: tagMap is deprecated. Please use TAG_MAP instead.
2025-10-08T16:01:39.1041548Z     warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)
2025-10-08T16:01:39.1041966Z 
2025-10-08T16:01:39.1042170Z tests/test_api_instance_blocks.py::test_api_instance_blocks
2025-10-08T16:01:39.1043148Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pyasn1/codec/ber/encoder.py:952: DeprecationWarning: typeMap is deprecated. Please use TYPE_MAP instead.
2025-10-08T16:01:39.1044171Z     warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)
2025-10-08T16:01:39.1044506Z 
2025-10-08T16:01:39.1044660Z tests/test_api_instance_blocks.py::test_api_instance_blocks
2025-10-08T16:01:39.1045955Z   /home/runner/work/pyfedi/pyfedi/tests/test_api_instance_blocks.py:30: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
2025-10-08T16:01:39.1047167Z     user = User.query.get(user_id)
2025-10-08T16:01:39.1047559Z 
2025-10-08T16:01:39.1047813Z -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
2025-10-08T16:01:39.1048250Z =========================== short test summary info ============================
2025-10-08T16:01:39.1048952Z FAILED tests/test_api_instance_blocks.py::test_api_instance_blocks - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: user
2025-10-08T16:01:39.1065083Z [SQL: SELECT user.id AS user_id, user.user_name AS user_user_name, user.alt_user_name AS user_alt_user_name, user.title AS user_title, user.email AS user_email, user.password_hash AS user_password_hash, user.verified AS user_verified, user.verification_token AS user_verification_token, user.banned AS user_banned, user.banned_until AS user_banned_until, user.ban_posts AS user_ban_posts, user.ban_comments AS user_ban_comments, user.deleted AS user_deleted, user.deleted_by AS user_deleted_by, user.about AS user_about, user.about_html AS user_about_html, user.keywords AS user_keywords, user.matrix_user_id AS user_matrix_user_id, user.hide_nsfw AS user_hide_nsfw, user.hide_nsfl AS user_hide_nsfl, user.created AS user_created, user.last_seen AS user_last_seen, user.avatar_id AS user_avatar_id, user.cover_id AS user_cover_id, user.public_key AS user_public_key, user.private_key AS user_private_key, user.newsletter AS user_newsletter, user.email_unread AS user_email_unread, user.email_unread_sent AS user_email_unread_sent, user.receive_message_mode AS user_receive_message_mode, user.bounces AS user_bounces, user.timezone AS user_timezone, user.reputation AS user_reputation, user.attitude AS user_attitude, user.post_count AS user_post_count, user.post_reply_count AS user_post_reply_count, user.stripe_customer_id AS user_stripe_customer_id, user.stripe_subscription_id AS user_stripe_subscription_id, user.searchable AS user_searchable, user.indexable AS user_indexable, user.bot AS user_bot, user.bot_override AS user_bot_override, user.suppress_crossposts AS user_suppress_crossposts, user.vote_privately AS user_vote_privately, user.ignore_bots AS user_ignore_bots, user.unread_notifications AS user_unread_notifications, user.ip_address AS user_ip_address, user.ip_address_country AS user_ip_address_country, user.instance_id AS user_instance_id, user.reports AS user_reports, user.default_sort AS user_default_sort, user.default_comment_sort AS user_default_comment_sort, user.default_filter AS user_default_filter, user.theme AS user_theme, user.font AS user_font, user.community_keyword_filter AS user_community_keyword_filter, user.referrer AS user_referrer, user.markdown_editor AS user_markdown_editor, user.interface_language AS user_interface_language, user.language_id AS user_language_id, user.read_language_ids AS user_read_language_ids, user.reply_collapse_threshold AS user_reply_collapse_threshold, user.reply_hide_threshold AS user_reply_hide_threshold, user.feed_auto_follow AS user_feed_auto_follow, user.feed_auto_leave AS user_feed_auto_leave, user.accept_private_messages AS user_accept_private_messages, user.google_oauth_id AS user_google_oauth_id, user.hide_low_quality AS user_hide_low_quality, user.show_subscribed_communities AS user_show_subscribed_communities, user.additional_css AS user_additional_css, user.mastodon_oauth_id AS user_mastodon_oauth_id, user.discord_oauth_id AS user_discord_oauth_id, user.password_updated_at AS user_password_updated_at, user.ap_id AS user_ap_id, user.ap_profile_id AS user_ap_profile_id, user.ap_public_url AS user_ap_public_url, user.ap_fetched_at AS user_ap_fetched_at, user.ap_followers_url AS user_ap_followers_url, user.ap_preferred_username AS user_ap_preferred_username, user.ap_manually_approves_followers AS user_ap_manually_approves_followers, user.ap_deleted_at AS user_ap_deleted_at, user.ap_inbox_url AS user_ap_inbox_url, user.ap_domain AS user_ap_domain, user.search_vector AS user_search_vector, user.hide_read_posts AS user_hide_read_posts, file_1.id AS file_1_id, file_1.file_path AS file_1_file_path, file_1.file_name AS file_1_file_name, file_1.width AS file_1_width, file_1.height AS file_1_height, file_1.alt_text AS file_1_alt_text, file_1.source_url AS file_1_source_url, file_1.thumbnail_path AS file_1_thumbnail_path, file_1.thumbnail_width AS file_1_thumbnail_width, file_1.thumbnail_height AS file_1_thumbnail_height, file_1.hash AS file_1_hash, file_2.id AS file_2_id, file_2.file_path AS file_2_file_path, file_2.file_name AS file_2_file_name, file_2.width AS file_2_width, file_2.height AS file_2_height, file_2.alt_text AS file_2_alt_text, file_2.source_url AS file_2_source_url, file_2.thumbnail_path AS file_2_thumbnail_path, file_2.thumbnail_width AS file_2_thumbnail_width, file_2.thumbnail_height AS file_2_thumbnail_height, file_2.hash AS file_2_hash, instance_1.id AS instance_1_id, instance_1.domain AS instance_1_domain, instance_1.inbox AS instance_1_inbox, instance_1.shared_inbox AS instance_1_shared_inbox, instance_1.outbox AS instance_1_outbox, instance_1.vote_weight AS instance_1_vote_weight, instance_1.software AS instance_1_software, instance_1.version AS instance_1_version, instance_1.created_at AS instance_1_created_at, instance_1.updated_at AS instance_1_updated_at, instance_1.last_seen AS instance_1_last_seen, instance_1.last_successful_send AS instance_1_last_successful_send, instance_1.failures AS instance_1_failures, instance_1.most_recent_attempt AS instance_1_most_recent_attempt, instance_1.dormant AS instance_1_dormant, instance_1.start_trying_again AS instance_1_start_trying_again, instance_1.gone_forever AS instance_1_gone_forever, instance_1.ip_address AS instance_1_ip_address, instance_1.trusted AS instance_1_trusted, instance_1.posting_warning AS instance_1_posting_warning, instance_1.nodeinfo_href AS instance_1_nodeinfo_href 
2025-10-08T16:01:39.1080958Z FROM user LEFT OUTER JOIN file AS file_1 ON file_1.id = user.avatar_id LEFT OUTER JOIN file AS file_2 ON file_2.id = user.cover_id LEFT OUTER JOIN instance AS instance_1 ON instance_1.id = user.instance_id 
2025-10-08T16:01:39.1081625Z WHERE user.id = ?]
2025-10-08T16:01:39.1081821Z [parameters: (1,)]
2025-10-08T16:01:39.1082110Z (Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-08T16:01:39.1082479Z ======================== 1 failed, 5 warnings in 2.62s =========================
2025-10-08T16:01:39.8360718Z ============================= test session starts ==============================
2025-10-08T16:01:39.8361448Z platform linux -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
2025-10-08T16:01:39.8362035Z cachedir: .pytest_cache
2025-10-08T16:01:39.8362335Z rootdir: /home/runner/work/pyfedi/pyfedi
2025-10-08T16:01:39.8362679Z plugins: anyio-4.11.0
2025-10-08T16:01:39.9391355Z collecting ... collected 5 items
2025-10-08T16:01:39.9391637Z 
2025-10-08T16:01:40.9158770Z tests/test_api_endpoints.py::TestCriticalAPIEndpoints::test_api_site_endpoint_exists SKIPPED [ 20%]
2025-10-08T16:01:40.9174647Z tests/test_api_endpoints.py::TestCriticalAPIEndpoints::test_api_site_response_format SKIPPED [ 40%]
2025-10-08T16:01:40.9190003Z tests/test_api_endpoints.py::TestActivityPubEndpoints::test_community_activitypub_endpoint SKIPPED [ 60%]
2025-10-08T16:01:40.9204736Z tests/test_api_endpoints.py::TestAPIParameterCompatibility::test_pagination_parameters SKIPPED [ 80%]
2025-10-08T16:01:41.1853392Z tests/test_api_endpoints.py::TestResponseFieldConsistency::test_site_response_has_expected_structure SKIPPED [100%]
2025-10-08T16:01:41.1853986Z 
2025-10-08T16:01:41.1854151Z ============================== 5 skipped in 1.09s ==============================
2025-10-08T16:01:41.6194610Z ============================= test session starts ==============================
2025-10-08T16:01:41.6195265Z platform linux -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
2025-10-08T16:01:41.6195827Z cachedir: .pytest_cache
2025-10-08T16:01:41.6196103Z rootdir: /home/runner/work/pyfedi/pyfedi
2025-10-08T16:01:41.6196417Z plugins: anyio-4.11.0
2025-10-08T16:01:42.8946586Z collecting ... collected 12 items
2025-10-08T16:01:42.8946972Z 
2025-10-08T16:01:42.8972516Z tests/test_activitypub_setup_edge_cases.py::TestFinalizeUserSetupEdgeCases::test_finalize_user_setup_is_idempotent SKIPPED [  8%]
2025-10-08T16:01:42.8988506Z tests/test_activitypub_setup_edge_cases.py::TestFinalizeUserSetupEdgeCases::test_finalize_user_setup_with_partial_setup SKIPPED [ 16%]
2025-10-08T16:01:42.9003740Z tests/test_activitypub_setup_edge_cases.py::TestFinalizeUserSetupEdgeCases::test_finalize_user_setup_marks_registration_notifications_read SKIPPED [ 25%]
2025-10-08T16:01:42.9018565Z tests/test_activitypub_setup_edge_cases.py::TestFinalizeUserSetupEdgeCases::test_finalize_user_setup_with_plugin_hook SKIPPED [ 33%]
2025-10-08T16:01:42.9033719Z tests/test_activitypub_setup_edge_cases.py::TestStartupValidationErrorHandling::test_validation_continues_after_individual_user_failure SKIPPED [ 41%]
2025-10-08T16:01:42.9048544Z tests/test_activitypub_setup_edge_cases.py::TestStartupValidationErrorHandling::test_validation_handles_database_errors_gracefully SKIPPED [ 50%]
2025-10-08T16:01:42.9063814Z tests/test_activitypub_setup_edge_cases.py::TestStartupValidationErrorHandling::test_validation_logs_errors_for_failed_users SKIPPED [ 58%]
2025-10-08T16:01:42.9081624Z tests/test_activitypub_setup_edge_cases.py::TestActivityPubURLFormatting::test_username_with_special_characters SKIPPED [ 66%]
2025-10-08T16:01:42.9095888Z tests/test_activitypub_setup_edge_cases.py::TestActivityPubURLFormatting::test_username_case_handling_in_urls SKIPPED [ 75%]
2025-10-08T16:01:42.9110346Z tests/test_activitypub_setup_edge_cases.py::TestStartupValidationPerformance::test_validation_with_many_complete_users_is_fast SKIPPED [ 83%]
2025-10-08T16:01:42.9125028Z tests/test_activitypub_setup_edge_cases.py::TestStartupValidationPerformance::test_validation_result_includes_user_summary SKIPPED [ 91%]
2025-10-08T16:01:43.2289464Z tests/test_activitypub_setup_edge_cases.py::TestRegistrationNotificationCleanup::test_finalize_marks_only_registration_notifications SKIPPED [100%]
2025-10-08T16:01:43.2290444Z 
2025-10-08T16:01:43.2290665Z ============================= 12 skipped in 1.30s ==============================
2025-10-08T16:01:43.7588380Z ============================= test session starts ==============================
2025-10-08T16:01:43.7589646Z platform linux -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
2025-10-08T16:01:43.7590227Z cachedir: .pytest_cache
2025-10-08T16:01:43.7590544Z rootdir: /home/runner/work/pyfedi/pyfedi
2025-10-08T16:01:43.7590936Z plugins: anyio-4.11.0
2025-10-08T16:01:43.8774059Z collecting ... collected 3 items
2025-10-08T16:01:43.8774350Z 
2025-10-08T16:01:45.9307902Z tests/test_explore_page_integration.py::test_explore_route_responds FAILED [ 33%]
2025-10-08T16:01:46.4732620Z tests/test_explore_page_integration.py::test_explore_route_with_mock_topics FAILED [ 66%]
2025-10-08T16:01:46.4752954Z tests/test_explore_page_integration.py::test_explore_template_jinja_syntax PASSED [100%]
2025-10-08T16:01:46.4753637Z 
2025-10-08T16:01:46.4753852Z =================================== FAILURES ===================================
2025-10-08T16:01:46.4754506Z _________________________ test_explore_route_responds __________________________
2025-10-08T16:01:46.4754977Z 
2025-10-08T16:01:46.4755156Z     def test_explore_route_responds():
2025-10-08T16:01:46.4755732Z         """Test that the explore route responds without crashing."""
2025-10-08T16:01:46.4756311Z         from app import create_app
2025-10-08T16:01:46.4756724Z     
2025-10-08T16:01:46.4757024Z         app = create_app()
2025-10-08T16:01:46.4757676Z         app.config['TESTING'] = True
2025-10-08T16:01:46.4758164Z         app.config['WTF_CSRF_ENABLED'] = False
2025-10-08T16:01:46.4758590Z     
2025-10-08T16:01:46.4758905Z         with app.test_client() as client:
2025-10-08T16:01:46.4759528Z             # Mock the topic_tree function to return empty list (simulating no topics)
2025-10-08T16:01:46.4760194Z             with patch('app.main.routes.topic_tree') as mock_topic_tree:
2025-10-08T16:01:46.4760745Z                 mock_topic_tree.return_value = []
2025-10-08T16:01:46.4761146Z     
2025-10-08T16:01:46.4761464Z                 # Mock the menu functions to return empty lists
2025-10-08T16:01:46.4762081Z                 with patch('app.main.routes.menu_instance_feeds') as mock_instance_feeds, \
2025-10-08T16:01:46.4762747Z                      patch('app.main.routes.menu_my_feeds') as mock_my_feeds, \
2025-10-08T16:01:46.4763387Z                      patch('app.main.routes.menu_subscribed_feeds') as mock_subscribed_feeds:
2025-10-08T16:01:46.4763900Z     
2025-10-08T16:01:46.4764194Z                     mock_instance_feeds.return_value = []
2025-10-08T16:01:46.4764633Z                     mock_my_feeds.return_value = []
2025-10-08T16:01:46.4765075Z                     mock_subscribed_feeds.return_value = []
2025-10-08T16:01:46.4765476Z     
2025-10-08T16:01:46.4765764Z >                   response = client.get('/explore')
2025-10-08T16:01:46.4766173Z                                ^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:46.4766422Z 
2025-10-08T16:01:46.4766578Z tests/test_explore_page_integration.py:45: 
2025-10-08T16:01:46.4767037Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:46.4767952Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/werkzeug/test.py:1162: in get
2025-10-08T16:01:46.4768641Z     return self.open(*args, **kw)
2025-10-08T16:01:46.4768982Z            ^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:46.4769602Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask/testing.py:235: in open
2025-10-08T16:01:46.4770271Z     response = super().open(
2025-10-08T16:01:46.4771163Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/werkzeug/test.py:1116: in open
2025-10-08T16:01:46.4772021Z     response_parts = self.run_wsgi_app(request.environ, buffered=buffered)
2025-10-08T16:01:46.4772578Z                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:46.4773301Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/werkzeug/test.py:988: in run_wsgi_app
2025-10-08T16:01:46.4774099Z     rv = run_wsgi_app(self.application, environ, buffered=buffered)
2025-10-08T16:01:46.4774786Z          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:46.4775514Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/werkzeug/test.py:1264: in run_wsgi_app
2025-10-08T16:01:46.4776253Z     app_rv = app(environ, start_response)
2025-10-08T16:01:46.4776625Z              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:46.4777279Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask/app.py:1536: in __call__
2025-10-08T16:01:46.4778148Z     return self.wsgi_app(environ, start_response)
2025-10-08T16:01:46.4778563Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:46.4779349Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/werkzeug/middleware/proxy_fix.py:183: in __call__
2025-10-08T16:01:46.4780168Z     return self.app(environ, start_response)
2025-10-08T16:01:46.4780539Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:46.4781205Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask/app.py:1514: in wsgi_app
2025-10-08T16:01:46.4781923Z     response = self.handle_exception(e)
2025-10-08T16:01:46.4782299Z                ^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:46.4782930Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask/app.py:1511: in wsgi_app
2025-10-08T16:01:46.4783618Z     response = self.full_dispatch_request()
2025-10-08T16:01:46.4784007Z                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:46.4784733Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask/app.py:919: in full_dispatch_request
2025-10-08T16:01:46.4785481Z     rv = self.handle_user_exception(e)
2025-10-08T16:01:46.4785840Z          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:46.4786570Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask/app.py:917: in full_dispatch_request
2025-10-08T16:01:46.4787298Z     rv = self.dispatch_request()
2025-10-08T16:01:46.4787877Z          ^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:46.4788546Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask/app.py:902: in dispatch_request
2025-10-08T16:01:46.4789538Z     return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
2025-10-08T16:01:46.4790226Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:46.4790662Z app/utils.py:1081: in decorated_view
2025-10-08T16:01:46.4791447Z     if (g.site.private_instance and current_user.is_authenticated) or is_activitypub_request() or g.site.private_instance is False:
2025-10-08T16:01:46.4792196Z         ^^^^^^
2025-10-08T16:01:46.4792528Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:46.4792829Z 
2025-10-08T16:01:46.4793098Z self = <flask.ctx._AppCtxGlobals object at 0x7ff1bfbf3110>, name = 'site'
2025-10-08T16:01:46.4793499Z 
2025-10-08T16:01:46.4793655Z     def __getattr__(self, name: str) -> t.Any:
2025-10-08T16:01:46.4794028Z         try:
2025-10-08T16:01:46.4794304Z             return self.__dict__[name]
2025-10-08T16:01:46.4794658Z         except KeyError:
2025-10-08T16:01:46.4794988Z >           raise AttributeError(name) from None
2025-10-08T16:01:46.4795386Z E           AttributeError: site
2025-10-08T16:01:46.4795608Z 
2025-10-08T16:01:46.4796032Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask/ctx.py:56: AttributeError
2025-10-08T16:01:46.4796821Z ------------------------------ Captured log call -------------------------------
2025-10-08T16:01:46.4797668Z INFO     app:__init__.py:298 Started!
2025-10-08T16:01:46.4798206Z INFO     app:startup_validation.py:102 Running startup validations...
2025-10-08T16:01:46.4798856Z INFO     app:startup_validation.py:118 Startup validations completed
2025-10-08T16:01:46.4799506Z _____________________ test_explore_route_with_mock_topics ______________________
2025-10-08T16:01:46.4799888Z 
2025-10-08T16:01:46.4800209Z     def test_explore_route_with_mock_topics():
2025-10-08T16:01:46.4800706Z         """Test that the explore route works when topics exist."""
2025-10-08T16:01:46.4801151Z         from app import create_app
2025-10-08T16:01:46.4801479Z     
2025-10-08T16:01:46.4801732Z         app = create_app()
2025-10-08T16:01:46.4802057Z         app.config['TESTING'] = True
2025-10-08T16:01:46.4802438Z         app.config['WTF_CSRF_ENABLED'] = False
2025-10-08T16:01:46.4802800Z     
2025-10-08T16:01:46.4803047Z         # Mock topic object
2025-10-08T16:01:46.4803375Z         class MockTopic:
2025-10-08T16:01:46.4803752Z             def __init__(self, name, parent_id=None):
2025-10-08T16:01:46.4804155Z                 self.name = name
2025-10-08T16:01:46.4804500Z                 self.parent_id = parent_id
2025-10-08T16:01:46.4804897Z                 self.id = hash(name)  # Simple ID
2025-10-08T16:01:46.4805260Z     
2025-10-08T16:01:46.4805503Z             def path(self):
2025-10-08T16:01:46.4805880Z                 return self.name.lower().replace(' ', '-')
2025-10-08T16:01:46.4806271Z     
2025-10-08T16:01:46.4806512Z         # Create mock topic tree
2025-10-08T16:01:46.4806850Z         mock_topics = [
2025-10-08T16:01:46.4807132Z             {
2025-10-08T16:01:46.4807576Z                 'topic': MockTopic('Technology'),
2025-10-08T16:01:46.4807968Z                 'children': [
2025-10-08T16:01:46.4808280Z                     {
2025-10-08T16:01:46.4808606Z                         'topic': MockTopic('Programming'),
2025-10-08T16:01:46.4809003Z                         'children': []
2025-10-08T16:01:46.4809335Z                     }
2025-10-08T16:01:46.4809614Z                 ]
2025-10-08T16:01:46.4809867Z             },
2025-10-08T16:01:46.4810109Z             {
2025-10-08T16:01:46.4810392Z                 'topic': MockTopic('Science'),
2025-10-08T16:01:46.4810752Z                 'children': []
2025-10-08T16:01:46.4811057Z             }
2025-10-08T16:01:46.4811306Z         ]
2025-10-08T16:01:46.4811527Z     
2025-10-08T16:01:46.4811804Z         with app.test_client() as client:
2025-10-08T16:01:46.4812298Z             with patch('app.main.routes.topic_tree') as mock_topic_tree:
2025-10-08T16:01:46.4812828Z                 mock_topic_tree.return_value = mock_topics
2025-10-08T16:01:46.4813208Z     
2025-10-08T16:01:46.4813461Z                 # Mock the menu functions
2025-10-08T16:01:46.4814038Z                 with patch('app.main.routes.menu_instance_feeds') as mock_instance_feeds, \
2025-10-08T16:01:46.4814695Z                      patch('app.main.routes.menu_my_feeds') as mock_my_feeds, \
2025-10-08T16:01:46.4815380Z                      patch('app.main.routes.menu_subscribed_feeds') as mock_subscribed_feeds:
2025-10-08T16:01:46.4815907Z     
2025-10-08T16:01:46.4816192Z                     mock_instance_feeds.return_value = []
2025-10-08T16:01:46.4816610Z                     mock_my_feeds.return_value = []
2025-10-08T16:01:46.4817031Z                     mock_subscribed_feeds.return_value = []
2025-10-08T16:01:46.4817559Z     
2025-10-08T16:01:46.4817844Z >                   response = client.get('/explore')
2025-10-08T16:01:46.4818250Z                                ^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:46.4818508Z 
2025-10-08T16:01:46.4818677Z tests/test_explore_page_integration.py:125: 
2025-10-08T16:01:46.4819141Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:46.4819889Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/werkzeug/test.py:1162: in get
2025-10-08T16:01:46.4820585Z     return self.open(*args, **kw)
2025-10-08T16:01:46.4821105Z            ^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:46.4821748Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask/testing.py:235: in open
2025-10-08T16:01:46.4822420Z     response = super().open(
2025-10-08T16:01:46.4823047Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/werkzeug/test.py:1116: in open
2025-10-08T16:01:46.4823861Z     response_parts = self.run_wsgi_app(request.environ, buffered=buffered)
2025-10-08T16:01:46.4824558Z                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:46.4825273Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/werkzeug/test.py:988: in run_wsgi_app
2025-10-08T16:01:46.4826063Z     rv = run_wsgi_app(self.application, environ, buffered=buffered)
2025-10-08T16:01:46.4826550Z          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:46.4827283Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/werkzeug/test.py:1264: in run_wsgi_app
2025-10-08T16:01:46.4828164Z     app_rv = app(environ, start_response)
2025-10-08T16:01:46.4828533Z              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:46.4829175Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask/app.py:1536: in __call__
2025-10-08T16:01:46.4829862Z     return self.wsgi_app(environ, start_response)
2025-10-08T16:01:46.4830264Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:46.4831037Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/werkzeug/middleware/proxy_fix.py:183: in __call__
2025-10-08T16:01:46.4831836Z     return self.app(environ, start_response)
2025-10-08T16:01:46.4832215Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:47.0154739Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask/app.py:1514: in wsgi_app
2025-10-08T16:01:47.0155613Z     response = self.handle_exception(e)
2025-10-08T16:01:47.0156003Z                ^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:47.0156733Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask/app.py:1511: in wsgi_app
2025-10-08T16:01:47.0157904Z     response = self.full_dispatch_request()
2025-10-08T16:01:47.0158310Z                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:47.0159034Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask/app.py:919: in full_dispatch_request
2025-10-08T16:01:47.0159789Z     rv = self.handle_user_exception(e)
2025-10-08T16:01:47.0160169Z          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:47.0160885Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask/app.py:917: in full_dispatch_request
2025-10-08T16:01:47.0161644Z     rv = self.dispatch_request()
2025-10-08T16:01:47.0161991Z          ^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:47.0162640Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask/app.py:902: in dispatch_request
2025-10-08T16:01:47.0163649Z     return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
2025-10-08T16:01:47.0164337Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:47.0164733Z app/utils.py:1081: in decorated_view
2025-10-08T16:01:47.0165505Z     if (g.site.private_instance and current_user.is_authenticated) or is_activitypub_request() or g.site.private_instance is False:
2025-10-08T16:01:47.0166269Z         ^^^^^^
2025-10-08T16:01:47.0166607Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:01:47.0166902Z 
2025-10-08T16:01:47.0167165Z self = <flask.ctx._AppCtxGlobals object at 0x7ff1bfa6d810>, name = 'site'
2025-10-08T16:01:47.0167721Z 
2025-10-08T16:01:47.0167886Z     def __getattr__(self, name: str) -> t.Any:
2025-10-08T16:01:47.0168254Z         try:
2025-10-08T16:01:47.0168521Z             return self.__dict__[name]
2025-10-08T16:01:47.0168883Z         except KeyError:
2025-10-08T16:01:47.0169223Z >           raise AttributeError(name) from None
2025-10-08T16:01:47.0169980Z E           AttributeError: site
2025-10-08T16:01:47.0170243Z 
2025-10-08T16:01:47.0170706Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/flask/ctx.py:56: AttributeError
2025-10-08T16:01:47.0171527Z ------------------------------ Captured log call -------------------------------
2025-10-08T16:01:47.0172032Z INFO     app:__init__.py:298 Started!
2025-10-08T16:01:47.0172526Z INFO     app:startup_validation.py:102 Running startup validations...
2025-10-08T16:01:47.0173368Z INFO     app:startup_validation.py:118 Startup validations completed
2025-10-08T16:01:47.0173917Z =============================== warnings summary ===============================
2025-10-08T16:01:47.0174521Z tests/test_explore_page_integration.py::test_explore_route_responds
2025-10-08T16:01:47.0176014Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pytesseract/pytesseract.py:32: DeprecationWarning: 'pkgutil.find_loader' is deprecated and slated for removal in Python 3.14; use importlib.util.find_spec() instead
2025-10-08T16:01:47.0177621Z     numpy_installed = find_loader('numpy') is not None
2025-10-08T16:01:47.0177934Z 
2025-10-08T16:01:47.0178198Z tests/test_explore_page_integration.py::test_explore_route_responds
2025-10-08T16:01:47.0179689Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pytesseract/pytesseract.py:36: DeprecationWarning: 'pkgutil.find_loader' is deprecated and slated for removal in Python 3.14; use importlib.util.find_spec() instead
2025-10-08T16:01:47.0181127Z     pandas_installed = find_loader('pandas') is not None
2025-10-08T16:01:47.0181449Z 
2025-10-08T16:01:47.0181704Z tests/test_explore_page_integration.py::test_explore_route_responds
2025-10-08T16:01:47.0182893Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pyasn1/codec/ber/encoder.py:952: DeprecationWarning: tagMap is deprecated. Please use TAG_MAP instead.
2025-10-08T16:01:47.0184205Z     warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)
2025-10-08T16:01:47.0184695Z 
2025-10-08T16:01:47.0184952Z tests/test_explore_page_integration.py::test_explore_route_responds
2025-10-08T16:01:47.0186149Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pyasn1/codec/ber/encoder.py:952: DeprecationWarning: typeMap is deprecated. Please use TYPE_MAP instead.
2025-10-08T16:01:47.0187595Z     warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)
2025-10-08T16:01:47.0188089Z 
2025-10-08T16:01:47.0188394Z -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
2025-10-08T16:01:47.0188979Z =========================== short test summary info ============================
2025-10-08T16:01:47.0189714Z FAILED tests/test_explore_page_integration.py::test_explore_route_responds - AttributeError: site
2025-10-08T16:01:47.0190721Z FAILED tests/test_explore_page_integration.py::test_explore_route_with_mock_topics - AttributeError: site
2025-10-08T16:01:47.0191521Z =================== 2 failed, 1 passed, 4 warnings in 2.73s ====================
2025-10-08T16:01:47.7030867Z ============================= test session starts ==============================
2025-10-08T16:01:47.7031828Z platform linux -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
2025-10-08T16:01:47.7032711Z cachedir: .pytest_cache
2025-10-08T16:01:47.7033185Z rootdir: /home/runner/work/pyfedi/pyfedi
2025-10-08T16:01:47.7033679Z plugins: anyio-4.11.0
2025-10-08T16:01:48.9651683Z collecting ... collected 8 items
2025-10-08T16:01:48.9651981Z 
2025-10-08T16:01:48.9675700Z tests/test_startup_session_cleanup.py::TestStartupSessionCleanup::test_session_is_clean_after_startup_validation SKIPPED [ 12%]
2025-10-08T16:01:48.9691320Z tests/test_startup_session_cleanup.py::TestStartupSessionCleanup::test_deferred_attributes_load_after_validation SKIPPED [ 25%]
2025-10-08T16:01:48.9705526Z tests/test_startup_session_cleanup.py::TestStartupSessionCleanup::test_multiple_queries_after_validation SKIPPED [ 37%]
2025-10-08T16:01:48.9720616Z tests/test_startup_session_cleanup.py::TestStartupSessionCleanup::test_session_identity_map_cleared SKIPPED [ 50%]
2025-10-08T16:01:48.9734285Z tests/test_startup_session_cleanup.py::TestStartupSessionCleanup::test_validation_with_no_users_to_fix SKIPPED [ 62%]
2025-10-08T16:01:48.9748678Z tests/test_startup_session_cleanup.py::TestStartupSessionCleanup::test_validation_cleanup_handles_errors_gracefully SKIPPED [ 75%]
2025-10-08T16:01:48.9762999Z tests/test_startup_session_cleanup.py::TestSessionCleanupWithAppContext::test_validation_in_app_context_doesnt_pollute_next_context SKIPPED [ 87%]
2025-10-08T16:01:49.2723501Z tests/test_startup_session_cleanup.py::test_session_cleanup_integration SKIPPED [100%]
2025-10-08T16:01:49.2723989Z 
2025-10-08T16:01:49.2724158Z ============================== 8 skipped in 1.28s ==============================
2025-10-08T16:01:49.7362964Z ============================= test session starts ==============================
2025-10-08T16:01:49.7363770Z platform linux -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
2025-10-08T16:01:49.7364338Z cachedir: .pytest_cache
2025-10-08T16:01:49.7364635Z rootdir: /home/runner/work/pyfedi/pyfedi
2025-10-08T16:01:49.7364961Z plugins: anyio-4.11.0
2025-10-08T16:01:49.7636467Z collecting ... collected 4 items
2025-10-08T16:01:49.7636774Z 
2025-10-08T16:01:49.8051894Z tests/test_explore_ci_real_world.py::test_explore_template_compiles_correctly PASSED [ 25%]
2025-10-08T16:01:49.8207055Z tests/test_explore_ci_real_world.py::test_explore_renders_with_empty_data PASSED [ 50%]
2025-10-08T16:01:49.8359460Z tests/test_explore_ci_real_world.py::test_explore_renders_with_topics PASSED [ 75%]
2025-10-08T16:01:49.8970699Z tests/test_explore_ci_real_world.py::test_no_template_syntax_in_output PASSED [100%]
2025-10-08T16:01:49.8971147Z 
2025-10-08T16:01:49.8971314Z =============================== warnings summary ===============================
2025-10-08T16:01:49.8971868Z tests/test_explore_ci_real_world.py::test_explore_template_compiles_correctly
2025-10-08T16:01:49.8973255Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/_pytest/python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but tests/test_explore_ci_real_world.py::test_explore_template_compiles_correctly returned <class 'bool'>.
2025-10-08T16:01:49.8974510Z   Did you mean to use `assert` instead of `return`?
2025-10-08T16:01:49.8975111Z   See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
2025-10-08T16:01:49.8975638Z     warnings.warn(
2025-10-08T16:01:49.8975808Z 
2025-10-08T16:01:49.8976098Z tests/test_explore_ci_real_world.py::test_explore_renders_with_empty_data
2025-10-08T16:01:49.8977645Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/_pytest/python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but tests/test_explore_ci_real_world.py::test_explore_renders_with_empty_data returned <class 'bool'>.
2025-10-08T16:01:49.8978864Z   Did you mean to use `assert` instead of `return`?
2025-10-08T16:01:49.8979409Z   See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
2025-10-08T16:01:49.8979905Z     warnings.warn(
2025-10-08T16:01:49.8980042Z 
2025-10-08T16:01:49.8980256Z tests/test_explore_ci_real_world.py::test_explore_renders_with_topics
2025-10-08T16:01:49.8981509Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/_pytest/python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but tests/test_explore_ci_real_world.py::test_explore_renders_with_topics returned <class 'bool'>.
2025-10-08T16:01:49.8982667Z   Did you mean to use `assert` instead of `return`?
2025-10-08T16:01:49.8983194Z   See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
2025-10-08T16:01:49.8983692Z     warnings.warn(
2025-10-08T16:01:49.8983823Z 
2025-10-08T16:01:49.8984461Z tests/test_explore_ci_real_world.py::test_no_template_syntax_in_output
2025-10-08T16:01:49.8985729Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/_pytest/python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but tests/test_explore_ci_real_world.py::test_no_template_syntax_in_output returned <class 'bool'>.
2025-10-08T16:01:49.8986807Z   Did you mean to use `assert` instead of `return`?
2025-10-08T16:01:49.8987497Z   See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
2025-10-08T16:01:49.8987901Z     warnings.warn(
2025-10-08T16:01:49.8988007Z 
2025-10-08T16:01:49.8988208Z -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
2025-10-08T16:01:49.8988597Z ======================== 4 passed, 4 warnings in 0.14s =========================
2025-10-08T16:01:50.1404079Z ============================= test session starts ==============================
2025-10-08T16:01:50.1404819Z platform linux -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
2025-10-08T16:01:50.1405402Z cachedir: .pytest_cache
2025-10-08T16:01:50.1405697Z rootdir: /home/runner/work/pyfedi/pyfedi
2025-10-08T16:01:50.1406026Z plugins: anyio-4.11.0
2025-10-08T16:01:51.1984554Z collecting ... collected 2 items
2025-10-08T16:01:51.1984934Z 
2025-10-08T16:01:54.2951074Z tests/test_migration_heads.py::test_single_migration_head PASSED         [ 50%]
2025-10-08T16:01:57.5375199Z tests/test_migration_heads.py::test_migration_history_linear PASSED      [100%]
2025-10-08T16:01:57.5375932Z 
2025-10-08T16:01:57.5376209Z =============================== warnings summary ===============================
2025-10-08T16:01:57.5376764Z tests/test_migration_heads.py::test_single_migration_head
2025-10-08T16:01:57.5378558Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pytesseract/pytesseract.py:32: DeprecationWarning: 'pkgutil.find_loader' is deprecated and slated for removal in Python 3.14; use importlib.util.find_spec() instead
2025-10-08T16:01:57.5379936Z     numpy_installed = find_loader('numpy') is not None
2025-10-08T16:01:57.5380185Z 
2025-10-08T16:01:57.5380357Z tests/test_migration_heads.py::test_single_migration_head
2025-10-08T16:01:57.5381479Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pytesseract/pytesseract.py:36: DeprecationWarning: 'pkgutil.find_loader' is deprecated and slated for removal in Python 3.14; use importlib.util.find_spec() instead
2025-10-08T16:01:57.5382589Z     pandas_installed = find_loader('pandas') is not None
2025-10-08T16:01:57.5382846Z 
2025-10-08T16:01:57.5383012Z tests/test_migration_heads.py::test_single_migration_head
2025-10-08T16:01:57.5383909Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pyasn1/codec/ber/encoder.py:952: DeprecationWarning: tagMap is deprecated. Please use TAG_MAP instead.
2025-10-08T16:01:57.5384925Z     warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)
2025-10-08T16:01:57.5385304Z 
2025-10-08T16:01:57.5385478Z tests/test_migration_heads.py::test_single_migration_head
2025-10-08T16:01:57.5386376Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pyasn1/codec/ber/encoder.py:952: DeprecationWarning: typeMap is deprecated. Please use TYPE_MAP instead.
2025-10-08T16:01:57.5387571Z     warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)
2025-10-08T16:01:57.5387996Z 
2025-10-08T16:01:57.5388246Z -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
2025-10-08T16:01:57.5388741Z ======================== 2 passed, 4 warnings in 6.84s =========================
2025-10-08T16:01:58.3135228Z ============================= test session starts ==============================
2025-10-08T16:01:58.3135935Z platform linux -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
2025-10-08T16:01:58.3136506Z cachedir: .pytest_cache
2025-10-08T16:01:58.3136799Z rootdir: /home/runner/work/pyfedi/pyfedi
2025-10-08T16:01:58.3137786Z plugins: anyio-4.11.0
2025-10-08T16:01:59.7969850Z collecting ... collected 0 items / 1 error
2025-10-08T16:01:59.7970265Z 
2025-10-08T16:01:59.7970436Z ==================================== ERRORS ====================================
2025-10-08T16:01:59.7971062Z ______________ ERROR collecting tests/test_sql_injection_fixes.py ______________
2025-10-08T16:01:59.7971974Z ImportError while importing test module '/home/runner/work/pyfedi/pyfedi/tests/test_sql_injection_fixes.py'.
2025-10-08T16:01:59.7973346Z Hint: make sure your test modules/packages have valid Python names.
2025-10-08T16:01:59.7973846Z Traceback:
2025-10-08T16:01:59.7974425Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/importlib/__init__.py:88: in import_module
2025-10-08T16:01:59.7975204Z     return _bootstrap._gcd_import(name[level:], package, level)
2025-10-08T16:01:59.7975688Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:01:59.7976118Z tests/test_sql_injection_fixes.py:12: in <module>
2025-10-08T16:01:59.7976663Z     from app.models import User, Conversation, Message, Notification
2025-10-08T16:01:59.7977851Z E   ImportError: cannot import name 'Message' from 'app.models' (/home/runner/work/pyfedi/pyfedi/app/models.py)
2025-10-08T16:01:59.7978615Z =========================== short test summary info ============================
2025-10-08T16:01:59.7979084Z ERROR tests/test_sql_injection_fixes.py
2025-10-08T16:01:59.7979581Z !!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
2025-10-08T16:01:59.7980103Z =============================== 1 error in 1.25s ===============================
2025-10-08T16:02:00.2415030Z ============================= test session starts ==============================
2025-10-08T16:02:00.2415850Z platform linux -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
2025-10-08T16:02:00.2416439Z cachedir: .pytest_cache
2025-10-08T16:02:00.2416741Z rootdir: /home/runner/work/pyfedi/pyfedi
2025-10-08T16:02:00.2417111Z plugins: anyio-4.11.0
2025-10-08T16:02:01.5081168Z collecting ... collected 31 items
2025-10-08T16:02:01.5081558Z 
2025-10-08T16:02:01.5140025Z tests/test_markdown_to_html.py::TestMarkdownToHtml::test_angle_brackets PASSED [  3%]
2025-10-08T16:02:01.5163332Z tests/test_markdown_to_html.py::TestMarkdownToHtml::test_angle_brackets_in_blockquote PASSED [  6%]
2025-10-08T16:02:01.5176884Z tests/test_markdown_to_html.py::TestMarkdownToHtml::test_basic_markdown PASSED [  9%]
2025-10-08T16:02:01.5189895Z tests/test_markdown_to_html.py::TestMarkdownToHtml::test_blockquote PASSED [ 12%]
2025-10-08T16:02:01.5202368Z tests/test_markdown_to_html.py::TestMarkdownToHtml::test_bracketed_links PASSED [ 16%]
2025-10-08T16:02:01.5216548Z tests/test_markdown_to_html.py::TestMarkdownToHtml::test_bracketed_links_code_block PASSED [ 19%]
2025-10-08T16:02:01.5228264Z tests/test_markdown_to_html.py::TestMarkdownToHtml::test_bracketed_links_inline_code PASSED [ 22%]
2025-10-08T16:02:01.5239675Z tests/test_markdown_to_html.py::TestMarkdownToHtml::test_code_block_link PASSED [ 25%]
2025-10-08T16:02:01.5250929Z tests/test_markdown_to_html.py::TestMarkdownToHtml::test_code_blocks PASSED [ 29%]
2025-10-08T16:02:01.5266116Z tests/test_markdown_to_html.py::TestMarkdownToHtml::test_complex_markdown_with_angle_brackets PASSED [ 32%]
2025-10-08T16:02:01.5277591Z tests/test_markdown_to_html.py::TestMarkdownToHtml::test_disallowed_tags PASSED [ 35%]
2025-10-08T16:02:01.5314311Z tests/test_markdown_to_html.py::TestMarkdownToHtml::test_double_bold PASSED [ 38%]
2025-10-08T16:02:01.5324913Z tests/test_markdown_to_html.py::TestMarkdownToHtml::test_ellipsis PASSED [ 41%]
2025-10-08T16:02:01.5335913Z tests/test_markdown_to_html.py::TestMarkdownToHtml::test_em_dash PASSED  [ 45%]
2025-10-08T16:02:01.5353423Z tests/test_markdown_to_html.py::TestMarkdownToHtml::test_em_dash_hr PASSED [ 48%]
2025-10-08T16:02:01.5363766Z tests/test_markdown_to_html.py::TestMarkdownToHtml::test_en_dash PASSED  [ 51%]
2025-10-08T16:02:01.5375472Z tests/test_markdown_to_html.py::TestMarkdownToHtml::test_gt_lt_in_code PASSED [ 54%]
2025-10-08T16:02:01.5388214Z tests/test_markdown_to_html.py::TestMarkdownToHtml::test_gt_lt_in_code_block PASSED [ 58%]
2025-10-08T16:02:01.5399401Z tests/test_markdown_to_html.py::TestMarkdownToHtml::test_ignore_smartypants_code_block PASSED [ 61%]
2025-10-08T16:02:01.5412007Z tests/test_markdown_to_html.py::TestMarkdownToHtml::test_ignore_smartypants_inline_code PASSED [ 64%]
2025-10-08T16:02:01.5422542Z tests/test_markdown_to_html.py::TestMarkdownToHtml::test_lemmy_autocomplete_community PASSED [ 67%]
2025-10-08T16:02:01.5432889Z tests/test_markdown_to_html.py::TestMarkdownToHtml::test_lemmy_autocomplete_feed PASSED [ 70%]
2025-10-08T16:02:01.5443403Z tests/test_markdown_to_html.py::TestMarkdownToHtml::test_lemmy_autocomplete_multiple_links PASSED [ 74%]
2025-10-08T16:02:01.5453939Z tests/test_markdown_to_html.py::TestMarkdownToHtml::test_lemmy_autocomplete_person PASSED [ 77%]
2025-10-08T16:02:01.5465035Z tests/test_markdown_to_html.py::TestMarkdownToHtml::test_links PASSED    [ 80%]
2025-10-08T16:02:01.5476421Z tests/test_markdown_to_html.py::TestMarkdownToHtml::test_links_w_periods PASSED [ 83%]
2025-10-08T16:02:01.5505593Z tests/test_markdown_to_html.py::TestMarkdownToHtml::test_lists PASSED    [ 87%]
2025-10-08T16:02:01.5516591Z tests/test_markdown_to_html.py::TestMarkdownToHtml::test_paragraphs PASSED [ 90%]
2025-10-08T16:02:01.5527680Z tests/test_markdown_to_html.py::TestMarkdownToHtml::test_spoiler_in_fenced_code PASSED [ 93%]
2025-10-08T16:02:01.5538618Z tests/test_markdown_to_html.py::TestMarkdownToHtml::test_strikethrough_in_fenced_code PASSED [ 96%]
2025-10-08T16:02:01.8464480Z tests/test_markdown_to_html.py::TestMarkdownToHtml::test_strikethrough_in_inline_code PASSED [100%]
2025-10-08T16:02:01.8465128Z 
2025-10-08T16:02:01.8465330Z ============================== 31 passed in 1.32s ==============================
2025-10-08T16:02:02.3854126Z ============================= test session starts ==============================
2025-10-08T16:02:02.3855097Z platform linux -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
2025-10-08T16:02:02.3855942Z cachedir: .pytest_cache
2025-10-08T16:02:02.3856376Z rootdir: /home/runner/work/pyfedi/pyfedi
2025-10-08T16:02:02.3856843Z plugins: anyio-4.11.0
2025-10-08T16:02:03.4532387Z collecting ... collected 1 item
2025-10-08T16:02:03.4532762Z 
2025-10-08T16:02:05.0099002Z tests/test_api_post_bookmarks.py::test_api_post_bookmarks FAILED         [100%]
2025-10-08T16:02:05.0099593Z 
2025-10-08T16:02:05.0099807Z =================================== FAILURES ===================================
2025-10-08T16:02:05.0100504Z ___________________________ test_api_post_bookmarks ____________________________
2025-10-08T16:02:05.0100973Z 
2025-10-08T16:02:05.0101316Z self = <sqlalchemy.engine.base.Connection object at 0x7faef4cebce0>
2025-10-08T16:02:05.0102392Z dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faefe598440>
2025-10-08T16:02:05.0103671Z context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faef4748a50>
2025-10-08T16:02:05.0104778Z statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7faef4d51550>
2025-10-08T16:02:05.0105449Z parameters = [(1,)]
2025-10-08T16:02:05.0105631Z 
2025-10-08T16:02:05.0105776Z     def _exec_single_context(
2025-10-08T16:02:05.0106107Z         self,
2025-10-08T16:02:05.0106408Z         dialect: Dialect,
2025-10-08T16:02:05.0106740Z         context: ExecutionContext,
2025-10-08T16:02:05.0107114Z         statement: Union[str, Compiled],
2025-10-08T16:02:05.0107845Z         parameters: Optional[_AnyMultiExecuteParams],
2025-10-08T16:02:05.0108316Z     ) -> CursorResult[Any]:
2025-10-08T16:02:05.0108742Z         """continue the _execute_context() method for a single DBAPI
2025-10-08T16:02:05.0109255Z         cursor.execute() or cursor.executemany() call.
2025-10-08T16:02:05.0109661Z     
2025-10-08T16:02:05.0109902Z         """
2025-10-08T16:02:05.0110502Z         if dialect.bind_typing is BindTyping.SETINPUTSIZES:
2025-10-08T16:02:05.0111109Z             generic_setinputsizes = context._prepare_set_input_sizes()
2025-10-08T16:02:05.0111573Z     
2025-10-08T16:02:05.0111832Z             if generic_setinputsizes:
2025-10-08T16:02:05.0112182Z                 try:
2025-10-08T16:02:05.0112503Z                     dialect.do_set_input_sizes(
2025-10-08T16:02:05.0113153Z                         context.cursor, generic_setinputsizes, context
2025-10-08T16:02:05.0113580Z                     )
2025-10-08T16:02:05.0113890Z                 except BaseException as e:
2025-10-08T16:02:05.0114284Z                     self._handle_dbapi_exception(
2025-10-08T16:02:05.0114720Z                         e, str(statement), parameters, None, context
2025-10-08T16:02:05.0115132Z                     )
2025-10-08T16:02:05.0115397Z     
2025-10-08T16:02:05.0115672Z         cursor, str_statement, parameters = (
2025-10-08T16:02:05.0116073Z             context.cursor,
2025-10-08T16:02:05.0116400Z             context.statement,
2025-10-08T16:02:05.0116736Z             context.parameters,
2025-10-08T16:02:05.0117058Z         )
2025-10-08T16:02:05.0117293Z     
2025-10-08T16:02:05.0117774Z         effective_parameters: Optional[_AnyExecuteParams]
2025-10-08T16:02:05.0118200Z     
2025-10-08T16:02:05.0118460Z         if not context.executemany:
2025-10-08T16:02:05.0118852Z             effective_parameters = parameters[0]
2025-10-08T16:02:05.0119232Z         else:
2025-10-08T16:02:05.0119512Z             effective_parameters = parameters
2025-10-08T16:02:05.0119866Z     
2025-10-08T16:02:05.0120156Z         if self._has_events or self.engine._has_events:
2025-10-08T16:02:05.0120631Z             for fn in self.dispatch.before_cursor_execute:
2025-10-08T16:02:05.0121086Z                 str_statement, effective_parameters = fn(
2025-10-08T16:02:05.0121478Z                     self,
2025-10-08T16:02:05.0121774Z                     cursor,
2025-10-08T16:02:05.0122082Z                     str_statement,
2025-10-08T16:02:05.0122447Z                     effective_parameters,
2025-10-08T16:02:05.0122815Z                     context,
2025-10-08T16:02:05.0123153Z                     context.executemany,
2025-10-08T16:02:05.0123507Z                 )
2025-10-08T16:02:05.0123757Z     
2025-10-08T16:02:05.0123998Z         if self._echo:
2025-10-08T16:02:05.0124307Z             self._log_info(str_statement)
2025-10-08T16:02:05.0124656Z     
2025-10-08T16:02:05.0124932Z             stats = context._get_cache_stats()
2025-10-08T16:02:05.0125284Z     
2025-10-08T16:02:05.0125554Z             if not self.engine.hide_parameters:
2025-10-08T16:02:05.0125928Z                 self._log_info(
2025-10-08T16:02:05.0126243Z                     "[%s] %r",
2025-10-08T16:02:05.0126542Z                     stats,
2025-10-08T16:02:05.0126860Z                     sql_util._repr_params(
2025-10-08T16:02:05.0127252Z                         effective_parameters,
2025-10-08T16:02:05.0127779Z                         batches=10,
2025-10-08T16:02:05.0128172Z                         ismulti=context.executemany,
2025-10-08T16:02:05.0128559Z                     ),
2025-10-08T16:02:05.0128835Z                 )
2025-10-08T16:02:05.0129085Z             else:
2025-10-08T16:02:05.0129359Z                 self._log_info(
2025-10-08T16:02:05.0129798Z                     "[%s] [SQL parameters hidden due to hide_parameters=True]",
2025-10-08T16:02:05.0130262Z                     stats,
2025-10-08T16:02:05.0130543Z                 )
2025-10-08T16:02:05.0130796Z     
2025-10-08T16:02:05.0131047Z         evt_handled: bool = False
2025-10-08T16:02:05.0131387Z         try:
2025-10-08T16:02:05.0131749Z             if context.execute_style is ExecuteStyle.EXECUTEMANY:
2025-10-08T16:02:05.0132231Z                 effective_parameters = cast(
2025-10-08T16:02:05.0132680Z                     "_CoreMultiExecuteParams", effective_parameters
2025-10-08T16:02:05.0133096Z                 )
2025-10-08T16:02:05.0133381Z                 if self.dialect._has_events:
2025-10-08T16:02:05.0133989Z                     for fn in self.dialect.dispatch.do_executemany:
2025-10-08T16:02:05.0134440Z                         if fn(
2025-10-08T16:02:05.0134757Z                             cursor,
2025-10-08T16:02:05.0135087Z                             str_statement,
2025-10-08T16:02:05.0135475Z                             effective_parameters,
2025-10-08T16:02:05.0135876Z                             context,
2025-10-08T16:02:05.0136393Z                         ):
2025-10-08T16:02:05.0136716Z                             evt_handled = True
2025-10-08T16:02:05.0144952Z                             break
2025-10-08T16:02:05.0145367Z                 if not evt_handled:
2025-10-08T16:02:05.0145755Z                     self.dialect.do_executemany(
2025-10-08T16:02:05.0146129Z                         cursor,
2025-10-08T16:02:05.0146471Z                         str_statement,
2025-10-08T16:02:05.0146856Z                         effective_parameters,
2025-10-08T16:02:05.0147239Z                         context,
2025-10-08T16:02:05.0147780Z                     )
2025-10-08T16:02:05.0148178Z             elif not effective_parameters and context.no_parameters:
2025-10-08T16:02:05.0148651Z                 if self.dialect._has_events:
2025-10-08T16:02:05.0149130Z                     for fn in self.dialect.dispatch.do_execute_no_params:
2025-10-08T16:02:05.0149631Z                         if fn(cursor, str_statement, context):
2025-10-08T16:02:05.0150096Z                             evt_handled = True
2025-10-08T16:02:05.0150450Z                             break
2025-10-08T16:02:05.0150823Z                 if not evt_handled:
2025-10-08T16:02:05.0151205Z                     self.dialect.do_execute_no_params(
2025-10-08T16:02:05.0151626Z                         cursor, str_statement, context
2025-10-08T16:02:05.0152007Z                     )
2025-10-08T16:02:05.0152280Z             else:
2025-10-08T16:02:05.0152566Z                 effective_parameters = cast(
2025-10-08T16:02:05.0153029Z                     "_CoreSingleExecuteParams", effective_parameters
2025-10-08T16:02:05.0153458Z                 )
2025-10-08T16:02:05.0153759Z                 if self.dialect._has_events:
2025-10-08T16:02:05.0154183Z                     for fn in self.dialect.dispatch.do_execute:
2025-10-08T16:02:05.0154600Z                         if fn(
2025-10-08T16:02:05.0154914Z                             cursor,
2025-10-08T16:02:05.0155256Z                             str_statement,
2025-10-08T16:02:05.0155633Z                             effective_parameters,
2025-10-08T16:02:05.0156018Z                             context,
2025-10-08T16:02:05.0156344Z                         ):
2025-10-08T16:02:05.0156659Z                             evt_handled = True
2025-10-08T16:02:05.0157006Z                             break
2025-10-08T16:02:05.0157472Z                 if not evt_handled:
2025-10-08T16:02:05.0157826Z >                   self.dialect.do_execute(
2025-10-08T16:02:05.0158292Z                         cursor, str_statement, effective_parameters, context
2025-10-08T16:02:05.0158743Z                     )
2025-10-08T16:02:05.0158919Z 
2025-10-08T16:02:05.0159372Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1967: 
2025-10-08T16:02:05.0160118Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:02:05.0160426Z 
2025-10-08T16:02:05.0160849Z self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faefe598440>
2025-10-08T16:02:05.0161616Z cursor = <sqlite3.Cursor object at 0x7faef471e8c0>
2025-10-08T16:02:05.0162873Z statement = 'SELECT user.id AS user_id, user.user_name AS user_user_name, user.alt_user_name AS user_alt_user_name, user.title AS ...le_2.id = user.cover_id LEFT OUTER JOIN instance AS instance_1 ON instance_1.id = user.instance_id \nWHERE user.id = ?'
2025-10-08T16:02:05.0164097Z parameters = (1,)
2025-10-08T16:02:05.0164701Z context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faef4748a50>
2025-10-08T16:02:05.0165494Z 
2025-10-08T16:02:05.0165776Z     def do_execute(self, cursor, statement, parameters, context=None):
2025-10-08T16:02:05.0166321Z >       cursor.execute(statement, parameters)
2025-10-08T16:02:05.0166827Z E       sqlite3.OperationalError: no such table: user
2025-10-08T16:02:05.0167131Z 
2025-10-08T16:02:05.0167837Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/default.py:951: OperationalError
2025-10-08T16:02:05.0168668Z 
2025-10-08T16:02:05.0168945Z The above exception was the direct cause of the following exception:
2025-10-08T16:02:05.0169321Z 
2025-10-08T16:02:05.0169433Z app = <Flask 'app'>
2025-10-08T16:02:05.0169605Z 
2025-10-08T16:02:05.0169747Z     def test_api_post_bookmarks(app):
2025-10-08T16:02:05.0170120Z         with app.app_context():
2025-10-08T16:02:05.0170532Z             from app.api.alpha.utils.post import put_post_save
2025-10-08T16:02:05.0170969Z     
2025-10-08T16:02:05.0171213Z             user_id = 1
2025-10-08T16:02:05.0171530Z >           user = User.query.get(user_id)
2025-10-08T16:02:05.0171881Z                    ^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:02:05.0172111Z 
2025-10-08T16:02:05.0172249Z tests/test_api_post_bookmarks.py:30: 
2025-10-08T16:02:05.0172665Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:02:05.0173076Z <string>:2: in get
2025-10-08T16:02:05.0173362Z     ???
2025-10-08T16:02:05.0174012Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/util/deprecations.py:386: in warned
2025-10-08T16:02:05.0174845Z     return fn(*args, **kwargs)  # type: ignore[no-any-return]
2025-10-08T16:02:05.0175283Z            ^^^^^^^^^^^^^^^^^^^
2025-10-08T16:02:05.0175913Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/query.py:1126: in get
2025-10-08T16:02:05.0176694Z     return self._get_impl(ident, loading.load_on_pk_identity)
2025-10-08T16:02:05.0177155Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:02:05.0178019Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/query.py:1135: in _get_impl
2025-10-08T16:02:05.0178749Z     return self.session._get_impl(
2025-10-08T16:02:05.0179462Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/session.py:3873: in _get_impl
2025-10-08T16:02:05.0180183Z     return db_load_fn(
2025-10-08T16:02:05.0180901Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/loading.py:695: in load_on_pk_identity
2025-10-08T16:02:05.0181712Z     session.execute(
2025-10-08T16:02:05.0182359Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2365: in execute
2025-10-08T16:02:05.0183095Z     return self._execute_internal(
2025-10-08T16:02:05.0183841Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
2025-10-08T16:02:05.0184713Z     result: Result[Any] = compile_state_cls.orm_execute_statement(
2025-10-08T16:02:05.0185592Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
2025-10-08T16:02:05.0186371Z     result = conn.execute(
2025-10-08T16:02:05.0187035Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
2025-10-08T16:02:05.0187927Z     return meth(
2025-10-08T16:02:05.0188656Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
2025-10-08T16:02:05.0189540Z     return connection._execute_clauseelement(
2025-10-08T16:02:05.0190395Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
2025-10-08T16:02:05.0191211Z     ret = self._execute_context(
2025-10-08T16:02:05.0191977Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
2025-10-08T16:02:05.0192965Z     return self._exec_single_context(
2025-10-08T16:02:05.0193836Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
2025-10-08T16:02:05.0194626Z     self._handle_dbapi_exception(
2025-10-08T16:02:05.0195414Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
2025-10-08T16:02:05.0196488Z     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
2025-10-08T16:02:05.0197501Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
2025-10-08T16:02:05.0198299Z     self.dialect.do_execute(
2025-10-08T16:02:05.0198678Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:02:05.0198966Z 
2025-10-08T16:02:05.0199389Z self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faefe598440>
2025-10-08T16:02:05.0200131Z cursor = <sqlite3.Cursor object at 0x7faef471e8c0>
2025-10-08T16:02:05.0201401Z statement = 'SELECT user.id AS user_id, user.user_name AS user_user_name, user.alt_user_name AS user_alt_user_name, user.title AS ...le_2.id = user.cover_id LEFT OUTER JOIN instance AS instance_1 ON instance_1.id = user.instance_id \nWHERE user.id = ?'
2025-10-08T16:02:05.0202588Z parameters = (1,)
2025-10-08T16:02:05.0203188Z context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faef4748a50>
2025-10-08T16:02:05.0203750Z 
2025-10-08T16:02:05.0204003Z     def do_execute(self, cursor, statement, parameters, context=None):
2025-10-08T16:02:05.0204509Z >       cursor.execute(statement, parameters)
2025-10-08T16:02:05.0205137Z E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: user
2025-10-08T16:02:05.0229192Z E       [SQL: SELECT user.id AS user_id, user.user_name AS user_user_name, user.alt_user_name AS user_alt_user_name, user.title AS user_title, user.email AS user_email, user.password_hash AS user_password_hash, user.verified AS user_verified, user.verification_token AS user_verification_token, user.banned AS user_banned, user.banned_until AS user_banned_until, user.ban_posts AS user_ban_posts, user.ban_comments AS user_ban_comments, user.deleted AS user_deleted, user.deleted_by AS user_deleted_by, user.about AS user_about, user.about_html AS user_about_html, user.keywords AS user_keywords, user.matrix_user_id AS user_matrix_user_id, user.hide_nsfw AS user_hide_nsfw, user.hide_nsfl AS user_hide_nsfl, user.created AS user_created, user.last_seen AS user_last_seen, user.avatar_id AS user_avatar_id, user.cover_id AS user_cover_id, user.public_key AS user_public_key, user.private_key AS user_private_key, user.newsletter AS user_newsletter, user.email_unread AS user_email_unread, user.email_unread_sent AS user_email_unread_sent, user.receive_message_mode AS user_receive_message_mode, user.bounces AS user_bounces, user.timezone AS user_timezone, user.reputation AS user_reputation, user.attitude AS user_attitude, user.post_count AS user_post_count, user.post_reply_count AS user_post_reply_count, user.stripe_customer_id AS user_stripe_customer_id, user.stripe_subscription_id AS user_stripe_subscription_id, user.searchable AS user_searchable, user.indexable AS user_indexable, user.bot AS user_bot, user.bot_override AS user_bot_override, user.suppress_crossposts AS user_suppress_crossposts, user.vote_privately AS user_vote_privately, user.ignore_bots AS user_ignore_bots, user.unread_notifications AS user_unread_notifications, user.ip_address AS user_ip_address, user.ip_address_country AS user_ip_address_country, user.instance_id AS user_instance_id, user.reports AS user_reports, user.default_sort AS user_default_sort, user.default_comment_sort AS user_default_comment_sort, user.default_filter AS user_default_filter, user.theme AS user_theme, user.font AS user_font, user.community_keyword_filter AS user_community_keyword_filter, user.referrer AS user_referrer, user.markdown_editor AS user_markdown_editor, user.interface_language AS user_interface_language, user.language_id AS user_language_id, user.read_language_ids AS user_read_language_ids, user.reply_collapse_threshold AS user_reply_collapse_threshold, user.reply_hide_threshold AS user_reply_hide_threshold, user.feed_auto_follow AS user_feed_auto_follow, user.feed_auto_leave AS user_feed_auto_leave, user.accept_private_messages AS user_accept_private_messages, user.google_oauth_id AS user_google_oauth_id, user.hide_low_quality AS user_hide_low_quality, user.show_subscribed_communities AS user_show_subscribed_communities, user.additional_css AS user_additional_css, user.mastodon_oauth_id AS user_mastodon_oauth_id, user.discord_oauth_id AS user_discord_oauth_id, user.password_updated_at AS user_password_updated_at, user.ap_id AS user_ap_id, user.ap_profile_id AS user_ap_profile_id, user.ap_public_url AS user_ap_public_url, user.ap_fetched_at AS user_ap_fetched_at, user.ap_followers_url AS user_ap_followers_url, user.ap_preferred_username AS user_ap_preferred_username, user.ap_manually_approves_followers AS user_ap_manually_approves_followers, user.ap_deleted_at AS user_ap_deleted_at, user.ap_inbox_url AS user_ap_inbox_url, user.ap_domain AS user_ap_domain, user.search_vector AS user_search_vector, user.hide_read_posts AS user_hide_read_posts, file_1.id AS file_1_id, file_1.file_path AS file_1_file_path, file_1.file_name AS file_1_file_name, file_1.width AS file_1_width, file_1.height AS file_1_height, file_1.alt_text AS file_1_alt_text, file_1.source_url AS file_1_source_url, file_1.thumbnail_path AS file_1_thumbnail_path, file_1.thumbnail_width AS file_1_thumbnail_width, file_1.thumbnail_height AS file_1_thumbnail_height, file_1.hash AS file_1_hash, file_2.id AS file_2_id, file_2.file_path AS file_2_file_path, file_2.file_name AS file_2_file_name, file_2.width AS file_2_width, file_2.height AS file_2_height, file_2.alt_text AS file_2_alt_text, file_2.source_url AS file_2_source_url, file_2.thumbnail_path AS file_2_thumbnail_path, file_2.thumbnail_width AS file_2_thumbnail_width, file_2.thumbnail_height AS file_2_thumbnail_height, file_2.hash AS file_2_hash, instance_1.id AS instance_1_id, instance_1.domain AS instance_1_domain, instance_1.inbox AS instance_1_inbox, instance_1.shared_inbox AS instance_1_shared_inbox, instance_1.outbox AS instance_1_outbox, instance_1.vote_weight AS instance_1_vote_weight, instance_1.software AS instance_1_software, instance_1.version AS instance_1_version, instance_1.created_at AS instance_1_created_at, instance_1.updated_at AS instance_1_updated_at, instance_1.last_seen AS instance_1_last_seen, instance_1.last_successful_send AS instance_1_last_successful_send, instance_1.failures AS instance_1_failures, instance_1.most_recent_attempt AS instance_1_most_recent_attempt, instance_1.dormant AS instance_1_dormant, instance_1.start_trying_again AS instance_1_start_trying_again, instance_1.gone_forever AS instance_1_gone_forever, instance_1.ip_address AS instance_1_ip_address, instance_1.trusted AS instance_1_trusted, instance_1.posting_warning AS instance_1_posting_warning, instance_1.nodeinfo_href AS instance_1_nodeinfo_href 
2025-10-08T16:02:05.0244803Z E       FROM user LEFT OUTER JOIN file AS file_1 ON file_1.id = user.avatar_id LEFT OUTER JOIN file AS file_2 ON file_2.id = user.cover_id LEFT OUTER JOIN instance AS instance_1 ON instance_1.id = user.instance_id 
2025-10-08T16:02:05.0245476Z E       WHERE user.id = ?]
2025-10-08T16:02:05.0245709Z E       [parameters: (1,)]
2025-10-08T16:02:05.0246023Z E       (Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-08T16:02:05.0246290Z 
2025-10-08T16:02:05.0246656Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/default.py:951: OperationalError
2025-10-08T16:02:05.0247255Z ------------------------------ Captured log setup ------------------------------
2025-10-08T16:02:05.0247768Z INFO     app:__init__.py:298 Started!
2025-10-08T16:02:05.0248102Z INFO     app:startup_validation.py:102 Running startup validations...
2025-10-08T16:02:05.0248641Z INFO     app:startup_validation.py:118 Startup validations completed
2025-10-08T16:02:05.0249006Z =============================== warnings summary ===============================
2025-10-08T16:02:05.0249366Z tests/test_api_post_bookmarks.py::test_api_post_bookmarks
2025-10-08T16:02:05.0250302Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pytesseract/pytesseract.py:32: DeprecationWarning: 'pkgutil.find_loader' is deprecated and slated for removal in Python 3.14; use importlib.util.find_spec() instead
2025-10-08T16:02:05.0251305Z     numpy_installed = find_loader('numpy') is not None
2025-10-08T16:02:05.0251504Z 
2025-10-08T16:02:05.0251650Z tests/test_api_post_bookmarks.py::test_api_post_bookmarks
2025-10-08T16:02:05.0252552Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pytesseract/pytesseract.py:36: DeprecationWarning: 'pkgutil.find_loader' is deprecated and slated for removal in Python 3.14; use importlib.util.find_spec() instead
2025-10-08T16:02:05.5958061Z     pandas_installed = find_loader('pandas') is not None
2025-10-08T16:02:05.5958617Z 
2025-10-08T16:02:05.5958855Z tests/test_api_post_bookmarks.py::test_api_post_bookmarks
2025-10-08T16:02:05.5959837Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pyasn1/codec/ber/encoder.py:952: DeprecationWarning: tagMap is deprecated. Please use TAG_MAP instead.
2025-10-08T16:02:05.5960952Z     warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)
2025-10-08T16:02:05.5961310Z 
2025-10-08T16:02:05.5961471Z tests/test_api_post_bookmarks.py::test_api_post_bookmarks
2025-10-08T16:02:05.5962316Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pyasn1/codec/ber/encoder.py:952: DeprecationWarning: typeMap is deprecated. Please use TYPE_MAP instead.
2025-10-08T16:02:05.5963265Z     warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)
2025-10-08T16:02:05.5963616Z 
2025-10-08T16:02:05.5963783Z tests/test_api_post_bookmarks.py::test_api_post_bookmarks
2025-10-08T16:02:05.5965121Z   /home/runner/work/pyfedi/pyfedi/tests/test_api_post_bookmarks.py:30: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
2025-10-08T16:02:05.5966405Z     user = User.query.get(user_id)
2025-10-08T16:02:05.5966588Z 
2025-10-08T16:02:05.5966792Z -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
2025-10-08T16:02:05.5967234Z =========================== short test summary info ============================
2025-10-08T16:02:05.5968189Z FAILED tests/test_api_post_bookmarks.py::test_api_post_bookmarks - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: user
2025-10-08T16:02:05.5984367Z [SQL: SELECT user.id AS user_id, user.user_name AS user_user_name, user.alt_user_name AS user_alt_user_name, user.title AS user_title, user.email AS user_email, user.password_hash AS user_password_hash, user.verified AS user_verified, user.verification_token AS user_verification_token, user.banned AS user_banned, user.banned_until AS user_banned_until, user.ban_posts AS user_ban_posts, user.ban_comments AS user_ban_comments, user.deleted AS user_deleted, user.deleted_by AS user_deleted_by, user.about AS user_about, user.about_html AS user_about_html, user.keywords AS user_keywords, user.matrix_user_id AS user_matrix_user_id, user.hide_nsfw AS user_hide_nsfw, user.hide_nsfl AS user_hide_nsfl, user.created AS user_created, user.last_seen AS user_last_seen, user.avatar_id AS user_avatar_id, user.cover_id AS user_cover_id, user.public_key AS user_public_key, user.private_key AS user_private_key, user.newsletter AS user_newsletter, user.email_unread AS user_email_unread, user.email_unread_sent AS user_email_unread_sent, user.receive_message_mode AS user_receive_message_mode, user.bounces AS user_bounces, user.timezone AS user_timezone, user.reputation AS user_reputation, user.attitude AS user_attitude, user.post_count AS user_post_count, user.post_reply_count AS user_post_reply_count, user.stripe_customer_id AS user_stripe_customer_id, user.stripe_subscription_id AS user_stripe_subscription_id, user.searchable AS user_searchable, user.indexable AS user_indexable, user.bot AS user_bot, user.bot_override AS user_bot_override, user.suppress_crossposts AS user_suppress_crossposts, user.vote_privately AS user_vote_privately, user.ignore_bots AS user_ignore_bots, user.unread_notifications AS user_unread_notifications, user.ip_address AS user_ip_address, user.ip_address_country AS user_ip_address_country, user.instance_id AS user_instance_id, user.reports AS user_reports, user.default_sort AS user_default_sort, user.default_comment_sort AS user_default_comment_sort, user.default_filter AS user_default_filter, user.theme AS user_theme, user.font AS user_font, user.community_keyword_filter AS user_community_keyword_filter, user.referrer AS user_referrer, user.markdown_editor AS user_markdown_editor, user.interface_language AS user_interface_language, user.language_id AS user_language_id, user.read_language_ids AS user_read_language_ids, user.reply_collapse_threshold AS user_reply_collapse_threshold, user.reply_hide_threshold AS user_reply_hide_threshold, user.feed_auto_follow AS user_feed_auto_follow, user.feed_auto_leave AS user_feed_auto_leave, user.accept_private_messages AS user_accept_private_messages, user.google_oauth_id AS user_google_oauth_id, user.hide_low_quality AS user_hide_low_quality, user.show_subscribed_communities AS user_show_subscribed_communities, user.additional_css AS user_additional_css, user.mastodon_oauth_id AS user_mastodon_oauth_id, user.discord_oauth_id AS user_discord_oauth_id, user.password_updated_at AS user_password_updated_at, user.ap_id AS user_ap_id, user.ap_profile_id AS user_ap_profile_id, user.ap_public_url AS user_ap_public_url, user.ap_fetched_at AS user_ap_fetched_at, user.ap_followers_url AS user_ap_followers_url, user.ap_preferred_username AS user_ap_preferred_username, user.ap_manually_approves_followers AS user_ap_manually_approves_followers, user.ap_deleted_at AS user_ap_deleted_at, user.ap_inbox_url AS user_ap_inbox_url, user.ap_domain AS user_ap_domain, user.search_vector AS user_search_vector, user.hide_read_posts AS user_hide_read_posts, file_1.id AS file_1_id, file_1.file_path AS file_1_file_path, file_1.file_name AS file_1_file_name, file_1.width AS file_1_width, file_1.height AS file_1_height, file_1.alt_text AS file_1_alt_text, file_1.source_url AS file_1_source_url, file_1.thumbnail_path AS file_1_thumbnail_path, file_1.thumbnail_width AS file_1_thumbnail_width, file_1.thumbnail_height AS file_1_thumbnail_height, file_1.hash AS file_1_hash, file_2.id AS file_2_id, file_2.file_path AS file_2_file_path, file_2.file_name AS file_2_file_name, file_2.width AS file_2_width, file_2.height AS file_2_height, file_2.alt_text AS file_2_alt_text, file_2.source_url AS file_2_source_url, file_2.thumbnail_path AS file_2_thumbnail_path, file_2.thumbnail_width AS file_2_thumbnail_width, file_2.thumbnail_height AS file_2_thumbnail_height, file_2.hash AS file_2_hash, instance_1.id AS instance_1_id, instance_1.domain AS instance_1_domain, instance_1.inbox AS instance_1_inbox, instance_1.shared_inbox AS instance_1_shared_inbox, instance_1.outbox AS instance_1_outbox, instance_1.vote_weight AS instance_1_vote_weight, instance_1.software AS instance_1_software, instance_1.version AS instance_1_version, instance_1.created_at AS instance_1_created_at, instance_1.updated_at AS instance_1_updated_at, instance_1.last_seen AS instance_1_last_seen, instance_1.last_successful_send AS instance_1_last_successful_send, instance_1.failures AS instance_1_failures, instance_1.most_recent_attempt AS instance_1_most_recent_attempt, instance_1.dormant AS instance_1_dormant, instance_1.start_trying_again AS instance_1_start_trying_again, instance_1.gone_forever AS instance_1_gone_forever, instance_1.ip_address AS instance_1_ip_address, instance_1.trusted AS instance_1_trusted, instance_1.posting_warning AS instance_1_posting_warning, instance_1.nodeinfo_href AS instance_1_nodeinfo_href 
2025-10-08T16:02:05.6000018Z FROM user LEFT OUTER JOIN file AS file_1 ON file_1.id = user.avatar_id LEFT OUTER JOIN file AS file_2 ON file_2.id = user.cover_id LEFT OUTER JOIN instance AS instance_1 ON instance_1.id = user.instance_id 
2025-10-08T16:02:05.6000804Z WHERE user.id = ?]
2025-10-08T16:02:05.6001002Z [parameters: (1,)]
2025-10-08T16:02:05.6001289Z (Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-08T16:02:05.6001650Z ======================== 1 failed, 5 warnings in 2.63s =========================
2025-10-08T16:02:06.3555403Z ============================= test session starts ==============================
2025-10-08T16:02:06.3556384Z platform linux -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
2025-10-08T16:02:06.3557233Z cachedir: .pytest_cache
2025-10-08T16:02:06.3557978Z rootdir: /home/runner/work/pyfedi/pyfedi
2025-10-08T16:02:06.3558447Z plugins: anyio-4.11.0
2025-10-08T16:02:07.6128695Z collecting ... collected 4 items
2025-10-08T16:02:07.6128968Z 
2025-10-08T16:02:07.6154550Z tests/test_private_registration_activitypub_integration.py::TestPrivateRegistrationActivityPubSetup::test_create_private_user_sets_activitypub_fields_when_activated SKIPPED [ 25%]
2025-10-08T16:02:07.6170001Z tests/test_private_registration_activitypub_integration.py::TestPrivateRegistrationActivityPubSetup::test_create_private_user_skips_activitypub_when_not_activated SKIPPED [ 50%]
2025-10-08T16:02:07.6184571Z tests/test_private_registration_activitypub_integration.py::TestPrivateRegistrationActivityPubSetup::test_multiple_users_get_unique_keypairs SKIPPED [ 75%]
2025-10-08T16:02:07.9332530Z tests/test_private_registration_activitypub_integration.py::TestPrivateRegistrationActivityPubSetup::test_activitypub_urls_are_lowercase SKIPPED [100%]
2025-10-08T16:02:07.9333291Z 
2025-10-08T16:02:07.9333490Z ============================== 4 skipped in 1.27s ==============================
2025-10-08T16:02:08.4105107Z ============================= test session starts ==============================
2025-10-08T16:02:08.4106076Z platform linux -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
2025-10-08T16:02:08.4106970Z cachedir: .pytest_cache
2025-10-08T16:02:08.4107648Z rootdir: /home/runner/work/pyfedi/pyfedi
2025-10-08T16:02:08.4108130Z plugins: anyio-4.11.0
2025-10-08T16:02:08.4328782Z collecting ... collected 2 items
2025-10-08T16:02:08.4329122Z 
2025-10-08T16:02:08.4378287Z tests/test_finalize_user_setup_call.py::test_create_private_user_calls_finalize_user_setup PASSED [ 50%]
2025-10-08T16:02:08.4642952Z tests/test_finalize_user_setup_call.py::test_finalize_user_setup_call_is_conditional PASSED [100%]
2025-10-08T16:02:08.4643563Z 
2025-10-08T16:02:08.4643786Z ============================== 2 passed in 0.04s ===============================
2025-10-08T16:02:08.7030247Z ============================= test session starts ==============================
2025-10-08T16:02:08.7030867Z platform linux -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
2025-10-08T16:02:08.7031363Z cachedir: .pytest_cache
2025-10-08T16:02:08.7031627Z rootdir: /home/runner/work/pyfedi/pyfedi
2025-10-08T16:02:08.7031945Z plugins: anyio-4.11.0
2025-10-08T16:02:08.7994235Z collecting ... collected 3 items
2025-10-08T16:02:08.7994514Z 
2025-10-08T16:02:08.8006220Z tests/test_explore_page.py::test_explore_template_syntax PASSED          [ 33%]
2025-10-08T16:02:10.5558033Z tests/test_explore_page.py::test_explore_route_exists PASSED             [ 66%]
2025-10-08T16:02:11.0556419Z tests/test_explore_page.py::test_all_templates_use_correct_length_syntax PASSED [100%]
2025-10-08T16:02:11.0557122Z 
2025-10-08T16:02:11.0557309Z =============================== warnings summary ===============================
2025-10-08T16:02:11.0558623Z tests/test_explore_page.py::test_explore_route_exists
2025-10-08T16:02:11.0560004Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pytesseract/pytesseract.py:32: DeprecationWarning: 'pkgutil.find_loader' is deprecated and slated for removal in Python 3.14; use importlib.util.find_spec() instead
2025-10-08T16:02:11.0561317Z     numpy_installed = find_loader('numpy') is not None
2025-10-08T16:02:11.0561784Z 
2025-10-08T16:02:11.0561972Z tests/test_explore_page.py::test_explore_route_exists
2025-10-08T16:02:11.0563261Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pytesseract/pytesseract.py:36: DeprecationWarning: 'pkgutil.find_loader' is deprecated and slated for removal in Python 3.14; use importlib.util.find_spec() instead
2025-10-08T16:02:11.0564303Z     pandas_installed = find_loader('pandas') is not None
2025-10-08T16:02:11.0564540Z 
2025-10-08T16:02:11.0564681Z tests/test_explore_page.py::test_explore_route_exists
2025-10-08T16:02:11.0565514Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pyasn1/codec/ber/encoder.py:952: DeprecationWarning: tagMap is deprecated. Please use TAG_MAP instead.
2025-10-08T16:02:11.0566456Z     warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)
2025-10-08T16:02:11.0566819Z 
2025-10-08T16:02:11.0566960Z tests/test_explore_page.py::test_explore_route_exists
2025-10-08T16:02:11.0567953Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pyasn1/codec/ber/encoder.py:952: DeprecationWarning: typeMap is deprecated. Please use TYPE_MAP instead.
2025-10-08T16:02:11.0568909Z     warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)
2025-10-08T16:02:11.0569259Z 
2025-10-08T16:02:11.0569479Z -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
2025-10-08T16:02:11.0569917Z ======================== 3 passed, 4 warnings in 1.87s =========================
2025-10-08T16:02:11.7469314Z ============================= test session starts ==============================
2025-10-08T16:02:11.7470281Z platform linux -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
2025-10-08T16:02:11.7471105Z cachedir: .pytest_cache
2025-10-08T16:02:11.7471531Z rootdir: /home/runner/work/pyfedi/pyfedi
2025-10-08T16:02:11.7471996Z plugins: anyio-4.11.0
2025-10-08T16:02:11.8072984Z collecting ... collected 10 items
2025-10-08T16:02:11.8073363Z 
2025-10-08T16:02:11.8088172Z tests/test_private_registration_security.py::TestRateLimiting::test_rate_limit_enforcement ERROR [ 10%]
2025-10-08T16:02:11.8098441Z tests/test_private_registration_security.py::TestRateLimiting::test_rate_limit_per_ip ERROR [ 20%]
2025-10-08T16:02:11.8109090Z tests/test_private_registration_security.py::TestIPSecurity::test_allowed_ip_ranges ERROR [ 30%]
2025-10-08T16:02:11.8117516Z tests/test_private_registration_security.py::TestIPSecurity::test_x_forwarded_for_parsing ERROR [ 40%]
2025-10-08T16:02:11.8125922Z tests/test_private_registration_security.py::TestIPSecurity::test_no_ip_restrictions ERROR [ 50%]
2025-10-08T16:02:11.8135386Z tests/test_private_registration_security.py::TestConcurrentRequests::test_concurrent_registrations ERROR [ 60%]
2025-10-08T16:02:11.8148348Z tests/test_private_registration_security.py::TestConcurrentRequests::test_concurrent_duplicate_registrations ERROR [ 70%]
2025-10-08T16:02:11.8157194Z tests/test_private_registration_security.py::TestAttackScenarios::test_secret_brute_force_protection ERROR [ 80%]
2025-10-08T16:02:11.8166333Z tests/test_private_registration_security.py::TestAttackScenarios::test_large_payload_handling ERROR [ 90%]
2025-10-08T16:02:11.8185036Z tests/test_private_registration_security.py::TestAttackScenarios::test_malicious_headers ERROR [100%]
2025-10-08T16:02:11.8185796Z 
2025-10-08T16:02:11.8185998Z ==================================== ERRORS ====================================
2025-10-08T16:02:11.8187013Z ________ ERROR at setup of TestRateLimiting.test_rate_limit_enforcement ________
2025-10-08T16:02:11.8188249Z file /home/runner/work/pyfedi/pyfedi/tests/test_private_registration_security.py, line 22
2025-10-08T16:02:11.8189041Z       @patch.dict('os.environ', {
2025-10-08T16:02:11.8189514Z           'PRIVATE_REGISTRATION_RATE_LIMIT': '3',
2025-10-08T16:02:11.8190018Z           'PRIVATE_REGISTRATION_ENABLED': 'true',
2025-10-08T16:02:11.8190609Z           'PRIVATE_REGISTRATION_SECRET': 'test-rate-limit-secret'
2025-10-08T16:02:11.8191326Z       })
2025-10-08T16:02:11.8191658Z       def test_rate_limit_enforcement(self, test_app):
2025-10-08T16:02:11.8192122Z E       fixture 'test_app' not found
2025-10-08T16:02:11.8194229Z >       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, doctest_namespace, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
2025-10-08T16:02:11.8196425Z >       use 'pytest --fixtures [testpath]' for help on them.
2025-10-08T16:02:11.8196764Z 
2025-10-08T16:02:11.8197147Z /home/runner/work/pyfedi/pyfedi/tests/test_private_registration_security.py:22
2025-10-08T16:02:11.8198129Z __________ ERROR at setup of TestRateLimiting.test_rate_limit_per_ip ___________
2025-10-08T16:02:11.8198933Z file /home/runner/work/pyfedi/pyfedi/tests/test_private_registration_security.py, line 71
2025-10-08T16:02:11.8199605Z       def test_rate_limit_per_ip(self, test_app):
2025-10-08T16:02:11.8200019Z E       fixture 'test_app' not found
2025-10-08T16:02:11.8202084Z >       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, doctest_namespace, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
2025-10-08T16:02:11.8204254Z >       use 'pytest --fixtures [testpath]' for help on them.
2025-10-08T16:02:11.8204578Z 
2025-10-08T16:02:11.8204921Z /home/runner/work/pyfedi/pyfedi/tests/test_private_registration_security.py:71
2025-10-08T16:02:11.8205674Z ___________ ERROR at setup of TestIPSecurity.test_allowed_ip_ranges ____________
2025-10-08T16:02:11.8206492Z file /home/runner/work/pyfedi/pyfedi/tests/test_private_registration_security.py, line 123
2025-10-08T16:02:11.8207156Z       @patch.dict('os.environ', {
2025-10-08T16:02:11.8207798Z           'PRIVATE_REGISTRATION_ALLOWED_IPS': '127.0.0.1,10.0.0.0/8',
2025-10-08T16:02:11.8208323Z           'PRIVATE_REGISTRATION_ENABLED': 'true',
2025-10-08T16:02:11.8208833Z           'PRIVATE_REGISTRATION_SECRET': 'test-ip-security-secret'
2025-10-08T16:02:11.8209281Z       })
2025-10-08T16:02:11.8209580Z       def test_allowed_ip_ranges(self, test_app):
2025-10-08T16:02:11.8209996Z E       fixture 'test_app' not found
2025-10-08T16:02:11.8212022Z >       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, doctest_namespace, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
2025-10-08T16:02:11.8214153Z >       use 'pytest --fixtures [testpath]' for help on them.
2025-10-08T16:02:11.8214475Z 
2025-10-08T16:02:11.8214820Z /home/runner/work/pyfedi/pyfedi/tests/test_private_registration_security.py:123
2025-10-08T16:02:11.8215608Z ________ ERROR at setup of TestIPSecurity.test_x_forwarded_for_parsing _________
2025-10-08T16:02:11.8216436Z file /home/runner/work/pyfedi/pyfedi/tests/test_private_registration_security.py, line 168
2025-10-08T16:02:11.8217157Z       def test_x_forwarded_for_parsing(self, test_app):
2025-10-08T16:02:11.8217926Z E       fixture 'test_app' not found
2025-10-08T16:02:11.8219954Z >       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, doctest_namespace, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
2025-10-08T16:02:11.8222208Z >       use 'pytest --fixtures [testpath]' for help on them.
2025-10-08T16:02:11.8222531Z 
2025-10-08T16:02:11.8222890Z /home/runner/work/pyfedi/pyfedi/tests/test_private_registration_security.py:168
2025-10-08T16:02:11.8223653Z ___________ ERROR at setup of TestIPSecurity.test_no_ip_restrictions ___________
2025-10-08T16:02:11.8224466Z file /home/runner/work/pyfedi/pyfedi/tests/test_private_registration_security.py, line 194
2025-10-08T16:02:11.8225159Z       def test_no_ip_restrictions(self, test_app):
2025-10-08T16:02:11.8225596Z E       fixture 'test_app' not found
2025-10-08T16:02:11.8227783Z >       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, doctest_namespace, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
2025-10-08T16:02:11.8230009Z >       use 'pytest --fixtures [testpath]' for help on them.
2025-10-08T16:02:11.8230353Z 
2025-10-08T16:02:11.8230711Z /home/runner/work/pyfedi/pyfedi/tests/test_private_registration_security.py:194
2025-10-08T16:02:11.8231550Z ____ ERROR at setup of TestConcurrentRequests.test_concurrent_registrations ____
2025-10-08T16:02:11.8232410Z file /home/runner/work/pyfedi/pyfedi/tests/test_private_registration_security.py, line 228
2025-10-08T16:02:11.8233218Z       def test_concurrent_registrations(self, test_app):
2025-10-08T16:02:11.8233699Z E       fixture 'test_app' not found
2025-10-08T16:02:11.8235828Z >       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, doctest_namespace, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
2025-10-08T16:02:11.8238363Z >       use 'pytest --fixtures [testpath]' for help on them.
2025-10-08T16:02:11.8238731Z 
2025-10-08T16:02:11.8239117Z /home/runner/work/pyfedi/pyfedi/tests/test_private_registration_security.py:228
2025-10-08T16:02:11.8240038Z _ ERROR at setup of TestConcurrentRequests.test_concurrent_duplicate_registrations _
2025-10-08T16:02:11.8241001Z file /home/runner/work/pyfedi/pyfedi/tests/test_private_registration_security.py, line 263
2025-10-08T16:02:11.8241851Z       def test_concurrent_duplicate_registrations(self, test_app):
2025-10-08T16:02:11.8242404Z E       fixture 'test_app' not found
2025-10-08T16:02:11.8244649Z >       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, doctest_namespace, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
2025-10-08T16:02:11.8246996Z >       use 'pytest --fixtures [testpath]' for help on them.
2025-10-08T16:02:11.8247539Z 
2025-10-08T16:02:11.8247937Z /home/runner/work/pyfedi/pyfedi/tests/test_private_registration_security.py:263
2025-10-08T16:02:11.8248835Z ___ ERROR at setup of TestAttackScenarios.test_secret_brute_force_protection ___
2025-10-08T16:02:11.8249794Z file /home/runner/work/pyfedi/pyfedi/tests/test_private_registration_security.py, line 305
2025-10-08T16:02:11.8250803Z       def test_secret_brute_force_protection(self, test_app):
2025-10-08T16:02:11.8251346Z E       fixture 'test_app' not found
2025-10-08T16:02:11.8253747Z >       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, doctest_namespace, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
2025-10-08T16:02:11.8256334Z >       use 'pytest --fixtures [testpath]' for help on them.
2025-10-08T16:02:11.8256715Z 
2025-10-08T16:02:11.8257107Z /home/runner/work/pyfedi/pyfedi/tests/test_private_registration_security.py:305
2025-10-08T16:02:11.8258159Z ______ ERROR at setup of TestAttackScenarios.test_large_payload_handling _______
2025-10-08T16:02:11.8259094Z file /home/runner/work/pyfedi/pyfedi/tests/test_private_registration_security.py, line 338
2025-10-08T16:02:11.8259910Z       def test_large_payload_handling(self, test_app):
2025-10-08T16:02:11.8260386Z E       fixture 'test_app' not found
2025-10-08T16:02:11.8262527Z >       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, doctest_namespace, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
2025-10-08T16:02:11.8264763Z >       use 'pytest --fixtures [testpath]' for help on them.
2025-10-08T16:02:11.8265134Z 
2025-10-08T16:02:11.8265511Z /home/runner/work/pyfedi/pyfedi/tests/test_private_registration_security.py:338
2025-10-08T16:02:11.8266512Z _________ ERROR at setup of TestAttackScenarios.test_malicious_headers _________
2025-10-08T16:02:11.8267672Z file /home/runner/work/pyfedi/pyfedi/tests/test_private_registration_security.py, line 371
2025-10-08T16:02:11.8268452Z       def test_malicious_headers(self, test_app):
2025-10-08T16:02:11.8268911Z E       fixture 'test_app' not found
2025-10-08T16:02:11.8453200Z >       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, doctest_namespace, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
2025-10-08T16:02:11.8455478Z >       use 'pytest --fixtures [testpath]' for help on them.
2025-10-08T16:02:11.8455857Z 
2025-10-08T16:02:11.8456263Z /home/runner/work/pyfedi/pyfedi/tests/test_private_registration_security.py:371
2025-10-08T16:02:11.8457036Z =========================== short test summary info ============================
2025-10-08T16:02:11.8458109Z ERROR tests/test_private_registration_security.py::TestRateLimiting::test_rate_limit_enforcement
2025-10-08T16:02:11.8459190Z ERROR tests/test_private_registration_security.py::TestRateLimiting::test_rate_limit_per_ip
2025-10-08T16:02:11.8460325Z ERROR tests/test_private_registration_security.py::TestIPSecurity::test_allowed_ip_ranges
2025-10-08T16:02:11.8461358Z ERROR tests/test_private_registration_security.py::TestIPSecurity::test_x_forwarded_for_parsing
2025-10-08T16:02:11.8462401Z ERROR tests/test_private_registration_security.py::TestIPSecurity::test_no_ip_restrictions
2025-10-08T16:02:11.8463511Z ERROR tests/test_private_registration_security.py::TestConcurrentRequests::test_concurrent_registrations
2025-10-08T16:02:11.8464788Z ERROR tests/test_private_registration_security.py::TestConcurrentRequests::test_concurrent_duplicate_registrations
2025-10-08T16:02:11.8466064Z ERROR tests/test_private_registration_security.py::TestAttackScenarios::test_secret_brute_force_protection
2025-10-08T16:02:11.8467612Z ERROR tests/test_private_registration_security.py::TestAttackScenarios::test_large_payload_handling
2025-10-08T16:02:11.8468753Z ERROR tests/test_private_registration_security.py::TestAttackScenarios::test_malicious_headers
2025-10-08T16:02:11.8469554Z ============================== 10 errors in 0.08s ==============================
2025-10-08T16:02:12.0868264Z ============================= test session starts ==============================
2025-10-08T16:02:12.0869260Z platform linux -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
2025-10-08T16:02:12.0870418Z cachedir: .pytest_cache
2025-10-08T16:02:12.0870818Z rootdir: /home/runner/work/pyfedi/pyfedi
2025-10-08T16:02:12.0871280Z plugins: anyio-4.11.0
2025-10-08T16:02:13.1399135Z collecting ... collected 1 item
2025-10-08T16:02:13.1399512Z 
2025-10-08T16:02:14.5056208Z tests/test_api_get_community.py::test_api_get_community FAILED           [100%]
2025-10-08T16:02:14.5056849Z 
2025-10-08T16:02:14.5057066Z =================================== FAILURES ===================================
2025-10-08T16:02:14.5057975Z ____________________________ test_api_get_community ____________________________
2025-10-08T16:02:14.5058420Z 
2025-10-08T16:02:14.5058834Z self = <sqlalchemy.engine.base.Connection object at 0x7fd83bbc36f0>
2025-10-08T16:02:14.5059867Z dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fd84545c2f0>
2025-10-08T16:02:14.5061014Z context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fd83b7fc690>
2025-10-08T16:02:14.5062078Z statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7fd83bc25550>
2025-10-08T16:02:14.5062745Z parameters = [(1, 0)]
2025-10-08T16:02:14.5062949Z 
2025-10-08T16:02:14.5063090Z     def _exec_single_context(
2025-10-08T16:02:14.5063428Z         self,
2025-10-08T16:02:14.5063691Z         dialect: Dialect,
2025-10-08T16:02:14.5064022Z         context: ExecutionContext,
2025-10-08T16:02:14.5064404Z         statement: Union[str, Compiled],
2025-10-08T16:02:14.5064859Z         parameters: Optional[_AnyMultiExecuteParams],
2025-10-08T16:02:14.5065298Z     ) -> CursorResult[Any]:
2025-10-08T16:02:14.5065719Z         """continue the _execute_context() method for a single DBAPI
2025-10-08T16:02:14.5066237Z         cursor.execute() or cursor.executemany() call.
2025-10-08T16:02:14.5066640Z     
2025-10-08T16:02:14.5066882Z         """
2025-10-08T16:02:14.5067229Z         if dialect.bind_typing is BindTyping.SETINPUTSIZES:
2025-10-08T16:02:14.5068044Z             generic_setinputsizes = context._prepare_set_input_sizes()
2025-10-08T16:02:14.5068509Z     
2025-10-08T16:02:14.5068776Z             if generic_setinputsizes:
2025-10-08T16:02:14.5069119Z                 try:
2025-10-08T16:02:14.5069437Z                     dialect.do_set_input_sizes(
2025-10-08T16:02:14.5069907Z                         context.cursor, generic_setinputsizes, context
2025-10-08T16:02:14.5070339Z                     )
2025-10-08T16:02:14.5070648Z                 except BaseException as e:
2025-10-08T16:02:14.5071059Z                     self._handle_dbapi_exception(
2025-10-08T16:02:14.5071508Z                         e, str(statement), parameters, None, context
2025-10-08T16:02:14.5071909Z                     )
2025-10-08T16:02:14.5072171Z     
2025-10-08T16:02:14.5072451Z         cursor, str_statement, parameters = (
2025-10-08T16:02:14.5072832Z             context.cursor,
2025-10-08T16:02:14.5073158Z             context.statement,
2025-10-08T16:02:14.5073517Z             context.parameters,
2025-10-08T16:02:14.5073833Z         )
2025-10-08T16:02:14.5074069Z     
2025-10-08T16:02:14.5074391Z         effective_parameters: Optional[_AnyExecuteParams]
2025-10-08T16:02:14.5074815Z     
2025-10-08T16:02:14.5075079Z         if not context.executemany:
2025-10-08T16:02:14.5075465Z             effective_parameters = parameters[0]
2025-10-08T16:02:14.5075841Z         else:
2025-10-08T16:02:14.5076122Z             effective_parameters = parameters
2025-10-08T16:02:14.5076486Z     
2025-10-08T16:02:14.5077076Z         if self._has_events or self.engine._has_events:
2025-10-08T16:02:14.5077754Z             for fn in self.dispatch.before_cursor_execute:
2025-10-08T16:02:14.5078225Z                 str_statement, effective_parameters = fn(
2025-10-08T16:02:14.5078646Z                     self,
2025-10-08T16:02:14.5078944Z                     cursor,
2025-10-08T16:02:14.5079254Z                     str_statement,
2025-10-08T16:02:14.5079604Z                     effective_parameters,
2025-10-08T16:02:14.5080181Z                     context,
2025-10-08T16:02:14.5080513Z                     context.executemany,
2025-10-08T16:02:14.5080859Z                 )
2025-10-08T16:02:14.5081111Z     
2025-10-08T16:02:14.5081359Z         if self._echo:
2025-10-08T16:02:14.5081679Z             self._log_info(str_statement)
2025-10-08T16:02:14.5082030Z     
2025-10-08T16:02:14.5082294Z             stats = context._get_cache_stats()
2025-10-08T16:02:14.5082661Z     
2025-10-08T16:02:14.5082938Z             if not self.engine.hide_parameters:
2025-10-08T16:02:14.5083345Z                 self._log_info(
2025-10-08T16:02:14.5083667Z                     "[%s] %r",
2025-10-08T16:02:14.5083965Z                     stats,
2025-10-08T16:02:14.5084275Z                     sql_util._repr_params(
2025-10-08T16:02:14.5084669Z                         effective_parameters,
2025-10-08T16:02:14.5085038Z                         batches=10,
2025-10-08T16:02:14.5085425Z                         ismulti=context.executemany,
2025-10-08T16:02:14.5085809Z                     ),
2025-10-08T16:02:14.5086081Z                 )
2025-10-08T16:02:14.5086339Z             else:
2025-10-08T16:02:14.5086605Z                 self._log_info(
2025-10-08T16:02:14.5087052Z                     "[%s] [SQL parameters hidden due to hide_parameters=True]",
2025-10-08T16:02:14.5087667Z                     stats,
2025-10-08T16:02:14.5087953Z                 )
2025-10-08T16:02:14.5088199Z     
2025-10-08T16:02:14.5088453Z         evt_handled: bool = False
2025-10-08T16:02:14.5088773Z         try:
2025-10-08T16:02:14.5089139Z             if context.execute_style is ExecuteStyle.EXECUTEMANY:
2025-10-08T16:02:14.5089630Z                 effective_parameters = cast(
2025-10-08T16:02:14.5090089Z                     "_CoreMultiExecuteParams", effective_parameters
2025-10-08T16:02:14.5090522Z                 )
2025-10-08T16:02:14.5090806Z                 if self.dialect._has_events:
2025-10-08T16:02:14.5091234Z                     for fn in self.dialect.dispatch.do_executemany:
2025-10-08T16:02:14.5091656Z                         if fn(
2025-10-08T16:02:14.5091970Z                             cursor,
2025-10-08T16:02:14.5092307Z                             str_statement,
2025-10-08T16:02:14.5092682Z                             effective_parameters,
2025-10-08T16:02:14.5093065Z                             context,
2025-10-08T16:02:14.5093405Z                         ):
2025-10-08T16:02:14.5093721Z                             evt_handled = True
2025-10-08T16:02:14.5094090Z                             break
2025-10-08T16:02:14.5094428Z                 if not evt_handled:
2025-10-08T16:02:14.5094798Z                     self.dialect.do_executemany(
2025-10-08T16:02:14.5095176Z                         cursor,
2025-10-08T16:02:14.5095509Z                         str_statement,
2025-10-08T16:02:14.5095883Z                         effective_parameters,
2025-10-08T16:02:14.5096242Z                         context,
2025-10-08T16:02:14.5096549Z                     )
2025-10-08T16:02:14.5096953Z             elif not effective_parameters and context.no_parameters:
2025-10-08T16:02:14.5097625Z                 if self.dialect._has_events:
2025-10-08T16:02:14.5098111Z                     for fn in self.dialect.dispatch.do_execute_no_params:
2025-10-08T16:02:14.5098621Z                         if fn(cursor, str_statement, context):
2025-10-08T16:02:14.5099024Z                             evt_handled = True
2025-10-08T16:02:14.5099385Z                             break
2025-10-08T16:02:14.5099725Z                 if not evt_handled:
2025-10-08T16:02:14.5100281Z                     self.dialect.do_execute_no_params(
2025-10-08T16:02:14.5100719Z                         cursor, str_statement, context
2025-10-08T16:02:14.5101106Z                     )
2025-10-08T16:02:14.5101382Z             else:
2025-10-08T16:02:14.5101679Z                 effective_parameters = cast(
2025-10-08T16:02:14.5102129Z                     "_CoreSingleExecuteParams", effective_parameters
2025-10-08T16:02:14.5102755Z                 )
2025-10-08T16:02:14.5103041Z                 if self.dialect._has_events:
2025-10-08T16:02:14.5103467Z                     for fn in self.dialect.dispatch.do_execute:
2025-10-08T16:02:14.5103882Z                         if fn(
2025-10-08T16:02:14.5104192Z                             cursor,
2025-10-08T16:02:14.5104520Z                             str_statement,
2025-10-08T16:02:14.5104908Z                             effective_parameters,
2025-10-08T16:02:14.5105286Z                             context,
2025-10-08T16:02:14.5105624Z                         ):
2025-10-08T16:02:14.5105959Z                             evt_handled = True
2025-10-08T16:02:14.5106328Z                             break
2025-10-08T16:02:14.5106666Z                 if not evt_handled:
2025-10-08T16:02:14.5107043Z >                   self.dialect.do_execute(
2025-10-08T16:02:14.5107652Z                         cursor, str_statement, effective_parameters, context
2025-10-08T16:02:14.5108102Z                     )
2025-10-08T16:02:14.5108286Z 
2025-10-08T16:02:14.5108741Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1967: 
2025-10-08T16:02:14.5109490Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:02:14.5109808Z 
2025-10-08T16:02:14.5110237Z self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fd84545c2f0>
2025-10-08T16:02:14.5110966Z cursor = <sqlite3.Cursor object at 0x7fd83b7ea7c0>
2025-10-08T16:02:14.5112341Z statement = 'SELECT community.id AS community_id, community.icon_id AS community_icon_id, community.image_id AS community_image_id...munity LEFT OUTER JOIN file AS file_1 ON file_1.id = community.icon_id \nWHERE community.banned = 0\n LIMIT ? OFFSET ?'
2025-10-08T16:02:14.5113678Z parameters = (1, 0)
2025-10-08T16:02:14.5114288Z context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fd83b7fc690>
2025-10-08T16:02:14.5114861Z 
2025-10-08T16:02:14.5115115Z     def do_execute(self, cursor, statement, parameters, context=None):
2025-10-08T16:02:14.5115656Z >       cursor.execute(statement, parameters)
2025-10-08T16:02:14.5116134Z E       sqlite3.OperationalError: no such table: community
2025-10-08T16:02:14.5116471Z 
2025-10-08T16:02:14.5117030Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/default.py:951: OperationalError
2025-10-08T16:02:14.5117862Z 
2025-10-08T16:02:14.5118130Z The above exception was the direct cause of the following exception:
2025-10-08T16:02:14.5118560Z 
2025-10-08T16:02:14.5118683Z app = <Flask 'app'>
2025-10-08T16:02:14.5118862Z 
2025-10-08T16:02:14.5118997Z     def test_api_get_community(app):
2025-10-08T16:02:14.5119373Z         with app.app_context():
2025-10-08T16:02:14.5119807Z             from app.api.alpha.utils.community import get_community
2025-10-08T16:02:14.5120386Z >           community = Community.query.filter_by(banned=False).first()
2025-10-08T16:02:14.5120900Z                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:02:14.5121192Z 
2025-10-08T16:02:14.5121337Z tests/test_api_get_community.py:26: 
2025-10-08T16:02:14.5121748Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:02:14.5122537Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/query.py:2759: in first
2025-10-08T16:02:14.5123345Z     return self.limit(1)._iter().first()  # type: ignore
2025-10-08T16:02:14.5123790Z            ^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:02:14.5124714Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/query.py:2857: in _iter
2025-10-08T16:02:14.5125636Z     result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
2025-10-08T16:02:14.5126510Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2365: in execute
2025-10-08T16:02:14.5127248Z     return self._execute_internal(
2025-10-08T16:02:14.5128378Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
2025-10-08T16:02:14.5129281Z     result: Result[Any] = compile_state_cls.orm_execute_statement(
2025-10-08T16:02:14.5130201Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
2025-10-08T16:02:14.5131025Z     result = conn.execute(
2025-10-08T16:02:14.5131692Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
2025-10-08T16:02:14.5132400Z     return meth(
2025-10-08T16:02:14.5133134Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
2025-10-08T16:02:14.5134004Z     return connection._execute_clauseelement(
2025-10-08T16:02:14.5134837Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
2025-10-08T16:02:14.5135670Z     ret = self._execute_context(
2025-10-08T16:02:14.5136423Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
2025-10-08T16:02:14.5137207Z     return self._exec_single_context(
2025-10-08T16:02:14.5138195Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
2025-10-08T16:02:14.5139020Z     self._handle_dbapi_exception(
2025-10-08T16:02:14.5139859Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
2025-10-08T16:02:14.5140808Z     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
2025-10-08T16:02:14.5141710Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
2025-10-08T16:02:14.5142503Z     self.dialect.do_execute(
2025-10-08T16:02:14.5142877Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:02:14.5143202Z 
2025-10-08T16:02:14.5143619Z self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7fd84545c2f0>
2025-10-08T16:02:14.5144332Z cursor = <sqlite3.Cursor object at 0x7fd83b7ea7c0>
2025-10-08T16:02:14.5145687Z statement = 'SELECT community.id AS community_id, community.icon_id AS community_icon_id, community.image_id AS community_image_id...munity LEFT OUTER JOIN file AS file_1 ON file_1.id = community.icon_id \nWHERE community.banned = 0\n LIMIT ? OFFSET ?'
2025-10-08T16:02:14.5146988Z parameters = (1, 0)
2025-10-08T16:02:14.5147731Z context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7fd83b7fc690>
2025-10-08T16:02:14.5148305Z 
2025-10-08T16:02:14.5148566Z     def do_execute(self, cursor, statement, parameters, context=None):
2025-10-08T16:02:14.5149081Z >       cursor.execute(statement, parameters)
2025-10-08T16:02:14.5149759Z E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: community
2025-10-08T16:02:14.5166480Z E       [SQL: SELECT community.id AS community_id, community.icon_id AS community_icon_id, community.image_id AS community_image_id, community.user_id AS community_user_id, community.name AS community_name, community.title AS community_title, community.description AS community_description, community.description_html AS community_description_html, community.rules AS community_rules, community.content_warning AS community_content_warning, community.subscriptions_count AS community_subscriptions_count, community.total_subscriptions_count AS community_total_subscriptions_count, community.post_count AS community_post_count, community.post_reply_count AS community_post_reply_count, community.nsfw AS community_nsfw, community.nsfl AS community_nsfl, community.instance_id AS community_instance_id, community.low_quality AS community_low_quality, community.created_at AS community_created_at, community.last_active AS community_last_active, community.public_key AS community_public_key, community.private_key AS community_private_key, community.content_retention AS community_content_retention, community.topic_id AS community_topic_id, community.default_layout AS community_default_layout, community.posting_warning AS community_posting_warning, community.downvote_accept_mode AS community_downvote_accept_mode, community.rss_url AS community_rss_url, community.can_be_archived AS community_can_be_archived, community.ap_id AS community_ap_id, community.ap_profile_id AS community_ap_profile_id, community.ap_followers_url AS community_ap_followers_url, community.ap_preferred_username AS community_ap_preferred_username, community.ap_discoverable AS community_ap_discoverable, community.ap_public_url AS community_ap_public_url, community.ap_fetched_at AS community_ap_fetched_at, community.ap_deleted_at AS community_ap_deleted_at, community.ap_inbox_url AS community_ap_inbox_url, community.ap_outbox_url AS community_ap_outbox_url, community.ap_featured_url AS community_ap_featured_url, community.ap_moderators_url AS community_ap_moderators_url, community.ap_domain AS community_ap_domain, community.banned AS community_banned, community.restricted_to_mods AS community_restricted_to_mods, community.local_only AS community_local_only, community.private AS community_private, community.new_mods_wanted AS community_new_mods_wanted, community.searchable AS community_searchable, community.private_mods AS community_private_mods, community.active_daily AS community_active_daily, community.active_weekly AS community_active_weekly, community.active_monthly AS community_active_monthly, community.active_6monthly AS community_active_6monthly, community.show_popular AS community_show_popular, community.show_all AS community_show_all, community.ignore_remote_language AS community_ignore_remote_language, community.search_vector AS community_search_vector, file_1.id AS file_1_id, file_1.file_path AS file_1_file_path, file_1.file_name AS file_1_file_name, file_1.width AS file_1_width, file_1.height AS file_1_height, file_1.alt_text AS file_1_alt_text, file_1.source_url AS file_1_source_url, file_1.thumbnail_path AS file_1_thumbnail_path, file_1.thumbnail_width AS file_1_thumbnail_width, file_1.thumbnail_height AS file_1_thumbnail_height, file_1.hash AS file_1_hash 
2025-10-08T16:02:14.5183277Z E       FROM community LEFT OUTER JOIN file AS file_1 ON file_1.id = community.icon_id 
2025-10-08T16:02:14.5183859Z E       WHERE community.banned = 0
2025-10-08T16:02:14.5184222Z E        LIMIT ? OFFSET ?]
2025-10-08T16:02:14.5184543Z E       [parameters: (1, 0)]
2025-10-08T16:02:14.5185009Z E       (Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-08T16:02:14.5185384Z 
2025-10-08T16:02:14.5185933Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/default.py:951: OperationalError
2025-10-08T16:02:14.5186840Z ------------------------------ Captured log setup ------------------------------
2025-10-08T16:02:14.5187481Z INFO     app:__init__.py:298 Started!
2025-10-08T16:02:14.5187990Z INFO     app:startup_validation.py:102 Running startup validations...
2025-10-08T16:02:14.5188649Z INFO     app:startup_validation.py:118 Startup validations completed
2025-10-08T16:02:14.5189194Z =============================== warnings summary ===============================
2025-10-08T16:02:14.5189733Z tests/test_api_get_community.py::test_api_get_community
2025-10-08T16:02:14.5191240Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pytesseract/pytesseract.py:32: DeprecationWarning: 'pkgutil.find_loader' is deprecated and slated for removal in Python 3.14; use importlib.util.find_spec() instead
2025-10-08T16:02:14.5192840Z     numpy_installed = find_loader('numpy') is not None
2025-10-08T16:02:14.5193168Z 
2025-10-08T16:02:14.5193372Z tests/test_api_get_community.py::test_api_get_community
2025-10-08T16:02:14.5194837Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pytesseract/pytesseract.py:36: DeprecationWarning: 'pkgutil.find_loader' is deprecated and slated for removal in Python 3.14; use importlib.util.find_spec() instead
2025-10-08T16:02:14.5196426Z     pandas_installed = find_loader('pandas') is not None
2025-10-08T16:02:14.5196759Z 
2025-10-08T16:02:14.5196964Z tests/test_api_get_community.py::test_api_get_community
2025-10-08T16:02:14.5198318Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pyasn1/codec/ber/encoder.py:952: DeprecationWarning: tagMap is deprecated. Please use TAG_MAP instead.
2025-10-08T16:02:14.5199664Z     warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)
2025-10-08T16:02:14.5200158Z 
2025-10-08T16:02:14.5200380Z tests/test_api_get_community.py::test_api_get_community
2025-10-08T16:02:14.5201568Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pyasn1/codec/ber/encoder.py:952: DeprecationWarning: typeMap is deprecated. Please use TYPE_MAP instead.
2025-10-08T16:02:14.5202893Z     warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)
2025-10-08T16:02:14.5203399Z 
2025-10-08T16:02:14.5203693Z -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
2025-10-08T16:02:14.5204309Z =========================== short test summary info ============================
2025-10-08T16:02:14.5205317Z FAILED tests/test_api_get_community.py::test_api_get_community - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: community
2025-10-08T16:02:14.5222443Z [SQL: SELECT community.id AS community_id, community.icon_id AS community_icon_id, community.image_id AS community_image_id, community.user_id AS community_user_id, community.name AS community_name, community.title AS community_title, community.description AS community_description, community.description_html AS community_description_html, community.rules AS community_rules, community.content_warning AS community_content_warning, community.subscriptions_count AS community_subscriptions_count, community.total_subscriptions_count AS community_total_subscriptions_count, community.post_count AS community_post_count, community.post_reply_count AS community_post_reply_count, community.nsfw AS community_nsfw, community.nsfl AS community_nsfl, community.instance_id AS community_instance_id, community.low_quality AS community_low_quality, community.created_at AS community_created_at, community.last_active AS community_last_active, community.public_key AS community_public_key, community.private_key AS community_private_key, community.content_retention AS community_content_retention, community.topic_id AS community_topic_id, community.default_layout AS community_default_layout, community.posting_warning AS community_posting_warning, community.downvote_accept_mode AS community_downvote_accept_mode, community.rss_url AS community_rss_url, community.can_be_archived AS community_can_be_archived, community.ap_id AS community_ap_id, community.ap_profile_id AS community_ap_profile_id, community.ap_followers_url AS community_ap_followers_url, community.ap_preferred_username AS community_ap_preferred_username, community.ap_discoverable AS community_ap_discoverable, community.ap_public_url AS community_ap_public_url, community.ap_fetched_at AS community_ap_fetched_at, community.ap_deleted_at AS community_ap_deleted_at, community.ap_inbox_url AS community_ap_inbox_url, community.ap_outbox_url AS community_ap_outbox_url, community.ap_featured_url AS community_ap_featured_url, community.ap_moderators_url AS community_ap_moderators_url, community.ap_domain AS community_ap_domain, community.banned AS community_banned, community.restricted_to_mods AS community_restricted_to_mods, community.local_only AS community_local_only, community.private AS community_private, community.new_mods_wanted AS community_new_mods_wanted, community.searchable AS community_searchable, community.private_mods AS community_private_mods, community.active_daily AS community_active_daily, community.active_weekly AS community_active_weekly, community.active_monthly AS community_active_monthly, community.active_6monthly AS community_active_6monthly, community.show_popular AS community_show_popular, community.show_all AS community_show_all, community.ignore_remote_language AS community_ignore_remote_language, community.search_vector AS community_search_vector, file_1.id AS file_1_id, file_1.file_path AS file_1_file_path, file_1.file_name AS file_1_file_name, file_1.width AS file_1_width, file_1.height AS file_1_height, file_1.alt_text AS file_1_alt_text, file_1.source_url AS file_1_source_url, file_1.thumbnail_path AS file_1_thumbnail_path, file_1.thumbnail_width AS file_1_thumbnail_width, file_1.thumbnail_height AS file_1_thumbnail_height, file_1.hash AS file_1_hash 
2025-10-08T16:02:14.5239421Z FROM community LEFT OUTER JOIN file AS file_1 ON file_1.id = community.icon_id 
2025-10-08T16:02:14.5239976Z WHERE community.banned = 0
2025-10-08T16:02:14.5240283Z  LIMIT ? OFFSET ?]
2025-10-08T16:02:14.5240557Z [parameters: (1, 0)]
2025-10-08T16:02:15.0858745Z (Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-08T16:02:15.0859337Z ======================== 1 failed, 4 warnings in 2.43s =========================
2025-10-08T16:02:15.8189388Z ============================= test session starts ==============================
2025-10-08T16:02:15.8190390Z platform linux -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
2025-10-08T16:02:15.8191246Z cachedir: .pytest_cache
2025-10-08T16:02:15.8191680Z rootdir: /home/runner/work/pyfedi/pyfedi
2025-10-08T16:02:15.8192134Z plugins: anyio-4.11.0
2025-10-08T16:02:15.8559729Z collecting ... collected 11 items
2025-10-08T16:02:15.8560113Z 
2025-10-08T16:02:17.0651914Z tests/test_private_registration_simple.py::TestSecurityFunctions::test_generate_secure_password PASSED [  9%]
2025-10-08T16:02:17.0660383Z tests/test_private_registration_simple.py::TestSecurityFunctions::test_hmac_compare_digest_works PASSED [ 18%]
2025-10-08T16:02:17.0673464Z tests/test_private_registration_simple.py::TestSecurityFunctions::test_ip_whitelist_no_restrictions PASSED [ 27%]
2025-10-08T16:02:17.0683830Z tests/test_private_registration_simple.py::TestSecurityFunctions::test_ip_whitelist_validation_allowed PASSED [ 36%]
2025-10-08T16:02:17.0693411Z tests/test_private_registration_simple.py::TestSecurityFunctions::test_ip_whitelist_validation_denied PASSED [ 45%]
2025-10-08T16:02:17.0704886Z tests/test_private_registration_simple.py::TestSecurityFunctions::test_validate_registration_secret_empty PASSED [ 54%]
2025-10-08T16:02:17.0714174Z tests/test_private_registration_simple.py::TestSecurityFunctions::test_validate_registration_secret_failure PASSED [ 63%]
2025-10-08T16:02:17.0723952Z tests/test_private_registration_simple.py::TestSecurityFunctions::test_validate_registration_secret_success PASSED [ 72%]
2025-10-08T16:02:17.0732340Z tests/test_private_registration_simple.py::TestPrivateRegistrationLogic::test_input_sanitization PASSED [ 81%]
2025-10-08T16:02:17.1682472Z tests/test_private_registration_simple.py::TestPrivateRegistrationLogic::test_validate_user_availability_success FAILED [ 90%]
2025-10-08T16:02:17.4700857Z tests/test_private_registration_simple.py::TestPrivateRegistrationLogic::test_validate_user_availability_username_taken FAILED [100%]
2025-10-08T16:02:17.4701947Z 
2025-10-08T16:02:17.4702114Z =================================== FAILURES ===================================
2025-10-08T16:02:17.4702706Z _____ TestPrivateRegistrationLogic.test_validate_user_availability_success _____
2025-10-08T16:02:17.4703158Z 
2025-10-08T16:02:17.4703702Z self = <tests.test_private_registration_simple.TestPrivateRegistrationLogic testMethod=test_validate_user_availability_success>
2025-10-08T16:02:17.4704760Z mock_user = <MagicMock name='User' id='139813830942000'>
2025-10-08T16:02:17.4704996Z 
2025-10-08T16:02:17.4705149Z     @patch('app.api.admin.private_registration.User')
2025-10-08T16:02:17.4705553Z     def test_validate_user_availability_success(self, mock_user):
2025-10-08T16:02:17.4705955Z         """Test user availability validation when available"""
2025-10-08T16:02:17.4706559Z         from app.api.admin.private_registration import validate_user_availability
2025-10-08T16:02:17.4706945Z     
2025-10-08T16:02:17.4707218Z         # Mock that both username and email are available
2025-10-08T16:02:17.4707840Z         mock_user.query.filter_by.return_value.first.return_value = None
2025-10-08T16:02:17.4708194Z     
2025-10-08T16:02:17.4708479Z >       result = validate_user_availability('newuser', 'new@example.com')
2025-10-08T16:02:17.4708861Z                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:02:17.4709059Z 
2025-10-08T16:02:17.4709200Z tests/test_private_registration_simple.py:97: 
2025-10-08T16:02:17.4709566Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:02:17.4710019Z app/api/admin/private_registration.py:41: in validate_user_availability
2025-10-08T16:02:17.4710560Z     ap_profile_id = f"https://{current_app.config['SERVER_NAME']}/u/{username.lower()}"
2025-10-08T16:02:17.4710979Z                                ^^^^^^^^^^^^^^^^^^
2025-10-08T16:02:17.4711489Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/werkzeug/local.py:318: in __get__
2025-10-08T16:02:17.4712022Z     obj = instance._get_current_object()
2025-10-08T16:02:17.4712303Z           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:02:17.4712594Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:02:17.4712824Z 
2025-10-08T16:02:17.4712924Z     def _get_current_object() -> T:
2025-10-08T16:02:17.4713182Z         try:
2025-10-08T16:02:17.4713377Z             obj = local.get()
2025-10-08T16:02:17.4713632Z         except LookupError:
2025-10-08T16:02:17.4713925Z >           raise RuntimeError(unbound_message) from None
2025-10-08T16:02:17.4714306Z E           RuntimeError: Working outside of application context.
2025-10-08T16:02:17.4714635Z E           
2025-10-08T16:02:17.4714959Z E           This typically means that you attempted to use functionality that needed
2025-10-08T16:02:17.4715420Z E           the current application. To solve this, set up an application context
2025-10-08T16:02:17.4715850Z E           with app.app_context(). See the documentation for more information.
2025-10-08T16:02:17.4716100Z 
2025-10-08T16:02:17.4716393Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/werkzeug/local.py:519: RuntimeError
2025-10-08T16:02:17.4716997Z _ TestPrivateRegistrationLogic.test_validate_user_availability_username_taken __
2025-10-08T16:02:17.4717312Z 
2025-10-08T16:02:17.4717819Z self = <tests.test_private_registration_simple.TestPrivateRegistrationLogic testMethod=test_validate_user_availability_username_taken>
2025-10-08T16:02:17.4718517Z mock_suggestions = <MagicMock name='generate_username_suggestions' id='139813717806784'>
2025-10-08T16:02:17.4718935Z mock_user = <MagicMock name='User' id='139813717808128'>
2025-10-08T16:02:17.4719138Z 
2025-10-08T16:02:17.4719270Z     @patch('app.api.admin.private_registration.User')
2025-10-08T16:02:17.4719674Z     @patch('app.api.admin.private_registration.generate_username_suggestions')
2025-10-08T16:02:17.4720169Z     def test_validate_user_availability_username_taken(self, mock_suggestions, mock_user):
2025-10-08T16:02:17.4720625Z         """Test user availability validation when username is taken"""
2025-10-08T16:02:17.4721046Z         from app.api.admin.private_registration import validate_user_availability
2025-10-08T16:02:17.4721386Z     
2025-10-08T16:02:17.4721573Z         # Mock existing user for username check
2025-10-08T16:02:17.4721842Z         mock_existing_user = MagicMock()
2025-10-08T16:02:17.4722248Z         mock_user.query.filter_by.side_effect = [
2025-10-08T16:02:17.4722648Z             MagicMock(first=MagicMock(return_value=mock_existing_user)),  # username taken
2025-10-08T16:02:17.4723101Z             MagicMock(first=MagicMock(return_value=None))  # email available
2025-10-08T16:02:17.4723421Z         ]
2025-10-08T16:02:17.4723673Z         mock_suggestions.return_value = ['testuser1', 'testuser2']
2025-10-08T16:02:17.4724076Z     
2025-10-08T16:02:17.4724336Z >       result = validate_user_availability('testuser', 'test@example.com')
2025-10-08T16:02:17.4724681Z                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:02:17.4724860Z 
2025-10-08T16:02:17.4724982Z tests/test_private_registration_simple.py:117: 
2025-10-08T16:02:17.4725285Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:02:17.4725676Z app/api/admin/private_registration.py:41: in validate_user_availability
2025-10-08T16:02:17.4726159Z     ap_profile_id = f"https://{current_app.config['SERVER_NAME']}/u/{username.lower()}"
2025-10-08T16:02:17.4726530Z                                ^^^^^^^^^^^^^^^^^^
2025-10-08T16:02:17.4726978Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/werkzeug/local.py:318: in __get__
2025-10-08T16:02:17.4727699Z     obj = instance._get_current_object()
2025-10-08T16:02:17.4727979Z           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:02:17.4728245Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:02:17.4728448Z 
2025-10-08T16:02:17.4728544Z     def _get_current_object() -> T:
2025-10-08T16:02:17.4728775Z         try:
2025-10-08T16:02:17.4728951Z             obj = local.get()
2025-10-08T16:02:17.4729178Z         except LookupError:
2025-10-08T16:02:17.4729431Z >           raise RuntimeError(unbound_message) from None
2025-10-08T16:02:17.4729763Z E           RuntimeError: Working outside of application context.
2025-10-08T16:02:17.4730052Z E           
2025-10-08T16:02:17.4730344Z E           This typically means that you attempted to use functionality that needed
2025-10-08T16:02:17.4730833Z E           the current application. To solve this, set up an application context
2025-10-08T16:02:17.4731256Z E           with app.app_context(). See the documentation for more information.
2025-10-08T16:02:17.4731509Z 
2025-10-08T16:02:17.4731796Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/werkzeug/local.py:519: RuntimeError
2025-10-08T16:02:17.4732312Z =========================== short test summary info ============================
2025-10-08T16:02:17.4733059Z FAILED tests/test_private_registration_simple.py::TestPrivateRegistrationLogic::test_validate_user_availability_success - RuntimeError: Working outside of application context.
2025-10-08T16:02:17.4733669Z 
2025-10-08T16:02:17.4733846Z This typically means that you attempted to use functionality that needed
2025-10-08T16:02:17.4734283Z the current application. To solve this, set up an application context
2025-10-08T16:02:17.4734698Z with app.app_context(). See the documentation for more information.
2025-10-08T16:02:17.4735482Z FAILED tests/test_private_registration_simple.py::TestPrivateRegistrationLogic::test_validate_user_availability_username_taken - RuntimeError: Working outside of application context.
2025-10-08T16:02:17.4736100Z 
2025-10-08T16:02:17.4736274Z This typically means that you attempted to use functionality that needed
2025-10-08T16:02:17.4736706Z the current application. To solve this, set up an application context
2025-10-08T16:02:17.4737112Z with app.app_context(). See the documentation for more information.
2025-10-08T16:02:17.4737574Z ========================= 2 failed, 9 passed in 1.38s ==========================
2025-10-08T16:02:17.9488157Z ============================= test session starts ==============================
2025-10-08T16:02:17.9488894Z platform linux -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
2025-10-08T16:02:17.9489766Z cachedir: .pytest_cache
2025-10-08T16:02:17.9490074Z rootdir: /home/runner/work/pyfedi/pyfedi
2025-10-08T16:02:17.9490421Z plugins: anyio-4.11.0
2025-10-08T16:02:19.2025028Z collecting ... collected 7 items
2025-10-08T16:02:19.2025411Z 
2025-10-08T16:02:19.2049952Z tests/test_startup_validation_activitypub.py::TestStartupValidationActivityPub::test_finds_incomplete_users SKIPPED [ 14%]
2025-10-08T16:02:19.2066237Z tests/test_startup_validation_activitypub.py::TestStartupValidationActivityPub::test_ignores_complete_users SKIPPED [ 28%]
2025-10-08T16:02:19.2081718Z tests/test_startup_validation_activitypub.py::TestStartupValidationActivityPub::test_ignores_unverified_users SKIPPED [ 42%]
2025-10-08T16:02:19.2096885Z tests/test_startup_validation_activitypub.py::TestStartupValidationActivityPub::test_ignores_banned_and_deleted_users SKIPPED [ 57%]
2025-10-08T16:02:19.2111766Z tests/test_startup_validation_activitypub.py::TestStartupValidationActivityPub::test_ignores_remote_users SKIPPED [ 71%]
2025-10-08T16:02:19.2126639Z tests/test_startup_validation_activitypub.py::TestStartupValidationActivityPub::test_fixes_multiple_incomplete_users SKIPPED [ 85%]
2025-10-08T16:02:19.4761611Z tests/test_startup_validation_activitypub.py::test_startup_validation_code_exists PASSED [100%]
2025-10-08T16:02:19.4762161Z 
2025-10-08T16:02:19.4762353Z ========================= 1 passed, 6 skipped in 1.27s =========================
2025-10-08T16:02:19.9426161Z ============================= test session starts ==============================
2025-10-08T16:02:19.9426931Z platform linux -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
2025-10-08T16:02:19.9427754Z cachedir: .pytest_cache
2025-10-08T16:02:19.9428076Z rootdir: /home/runner/work/pyfedi/pyfedi
2025-10-08T16:02:19.9428437Z plugins: anyio-4.11.0
2025-10-08T16:02:21.0061470Z collecting ... collected 1 item
2025-10-08T16:02:21.0061769Z 
2025-10-08T16:02:22.5754052Z tests/test_api_reply_subscriptions.py::test_api_reply_subscriptions FAILED [100%]
2025-10-08T16:02:22.5754773Z 
2025-10-08T16:02:22.5755008Z =================================== FAILURES ===================================
2025-10-08T16:02:22.5755790Z _________________________ test_api_reply_subscriptions _________________________
2025-10-08T16:02:22.5756306Z 
2025-10-08T16:02:22.5756682Z self = <sqlalchemy.engine.base.Connection object at 0x7f5b0bccbce0>
2025-10-08T16:02:22.5757928Z dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f5b155782f0>
2025-10-08T16:02:22.5758800Z context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f5b0b728a50>
2025-10-08T16:02:22.5759598Z statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f5b0bd35400>
2025-10-08T16:02:22.5760059Z parameters = [(1,)]
2025-10-08T16:02:22.5760198Z 
2025-10-08T16:02:22.5760292Z     def _exec_single_context(
2025-10-08T16:02:22.5760536Z         self,
2025-10-08T16:02:22.5760732Z         dialect: Dialect,
2025-10-08T16:02:22.5761022Z         context: ExecutionContext,
2025-10-08T16:02:22.5761297Z         statement: Union[str, Compiled],
2025-10-08T16:02:22.5761624Z         parameters: Optional[_AnyMultiExecuteParams],
2025-10-08T16:02:22.5761943Z     ) -> CursorResult[Any]:
2025-10-08T16:02:22.5762253Z         """continue the _execute_context() method for a single DBAPI
2025-10-08T16:02:22.5762638Z         cursor.execute() or cursor.executemany() call.
2025-10-08T16:02:22.5762940Z     
2025-10-08T16:02:22.5763112Z         """
2025-10-08T16:02:22.5763360Z         if dialect.bind_typing is BindTyping.SETINPUTSIZES:
2025-10-08T16:02:22.5763772Z             generic_setinputsizes = context._prepare_set_input_sizes()
2025-10-08T16:02:22.5764112Z     
2025-10-08T16:02:22.5764303Z             if generic_setinputsizes:
2025-10-08T16:02:22.5764566Z                 try:
2025-10-08T16:02:22.5764796Z                     dialect.do_set_input_sizes(
2025-10-08T16:02:22.5765125Z                         context.cursor, generic_setinputsizes, context
2025-10-08T16:02:22.5765645Z                     )
2025-10-08T16:02:22.5765882Z                 except BaseException as e:
2025-10-08T16:02:22.5766181Z                     self._handle_dbapi_exception(
2025-10-08T16:02:22.5766503Z                         e, str(statement), parameters, None, context
2025-10-08T16:02:22.5766801Z                     )
2025-10-08T16:02:22.5766997Z     
2025-10-08T16:02:22.5767474Z         cursor, str_statement, parameters = (
2025-10-08T16:02:22.5767770Z             context.cursor,
2025-10-08T16:02:22.5768011Z             context.statement,
2025-10-08T16:02:22.5768260Z             context.parameters,
2025-10-08T16:02:22.5768499Z         )
2025-10-08T16:02:22.5768674Z     
2025-10-08T16:02:22.5768911Z         effective_parameters: Optional[_AnyExecuteParams]
2025-10-08T16:02:22.5769221Z     
2025-10-08T16:02:22.5769414Z         if not context.executemany:
2025-10-08T16:02:22.5769697Z             effective_parameters = parameters[0]
2025-10-08T16:02:22.5769976Z         else:
2025-10-08T16:02:22.5770196Z             effective_parameters = parameters
2025-10-08T16:02:22.5770462Z     
2025-10-08T16:02:22.5770679Z         if self._has_events or self.engine._has_events:
2025-10-08T16:02:22.5771029Z             for fn in self.dispatch.before_cursor_execute:
2025-10-08T16:02:22.5771370Z                 str_statement, effective_parameters = fn(
2025-10-08T16:02:22.5771683Z                     self,
2025-10-08T16:02:22.5772029Z                     cursor,
2025-10-08T16:02:22.5772296Z                     str_statement,
2025-10-08T16:02:22.5772581Z                     effective_parameters,
2025-10-08T16:02:22.5772852Z                     context,
2025-10-08T16:02:22.5773101Z                     context.executemany,
2025-10-08T16:02:22.5773365Z                 )
2025-10-08T16:02:22.5773557Z     
2025-10-08T16:02:22.5780440Z         if self._echo:
2025-10-08T16:02:22.5780733Z             self._log_info(str_statement)
2025-10-08T16:02:22.5780987Z     
2025-10-08T16:02:22.5781194Z             stats = context._get_cache_stats()
2025-10-08T16:02:22.5781444Z     
2025-10-08T16:02:22.5781632Z             if not self.engine.hide_parameters:
2025-10-08T16:02:22.5781909Z                 self._log_info(
2025-10-08T16:02:22.5782132Z                     "[%s] %r",
2025-10-08T16:02:22.5782341Z                     stats,
2025-10-08T16:02:22.5782631Z                     sql_util._repr_params(
2025-10-08T16:02:22.5783071Z                         effective_parameters,
2025-10-08T16:02:22.5783342Z                         batches=10,
2025-10-08T16:02:22.5783595Z                         ismulti=context.executemany,
2025-10-08T16:02:22.5783853Z                     ),
2025-10-08T16:02:22.5784039Z                 )
2025-10-08T16:02:22.5784208Z             else:
2025-10-08T16:02:22.5784391Z                 self._log_info(
2025-10-08T16:02:22.5784679Z                     "[%s] [SQL parameters hidden due to hide_parameters=True]",
2025-10-08T16:02:22.5784982Z                     stats,
2025-10-08T16:02:22.5785213Z                 )
2025-10-08T16:02:22.5785391Z     
2025-10-08T16:02:22.5785568Z         evt_handled: bool = False
2025-10-08T16:02:22.5785785Z         try:
2025-10-08T16:02:22.5786024Z             if context.execute_style is ExecuteStyle.EXECUTEMANY:
2025-10-08T16:02:22.5786347Z                 effective_parameters = cast(
2025-10-08T16:02:22.5786642Z                     "_CoreMultiExecuteParams", effective_parameters
2025-10-08T16:02:22.5786919Z                 )
2025-10-08T16:02:22.5787112Z                 if self.dialect._has_events:
2025-10-08T16:02:22.5787507Z                     for fn in self.dialect.dispatch.do_executemany:
2025-10-08T16:02:22.5787790Z                         if fn(
2025-10-08T16:02:22.5788006Z                             cursor,
2025-10-08T16:02:22.5788227Z                             str_statement,
2025-10-08T16:02:22.5788479Z                             effective_parameters,
2025-10-08T16:02:22.5788727Z                             context,
2025-10-08T16:02:22.5788945Z                         ):
2025-10-08T16:02:22.5789329Z                             evt_handled = True
2025-10-08T16:02:22.5789591Z                             break
2025-10-08T16:02:22.5789819Z                 if not evt_handled:
2025-10-08T16:02:22.5790071Z                     self.dialect.do_executemany(
2025-10-08T16:02:22.5790327Z                         cursor,
2025-10-08T16:02:22.5790546Z                         str_statement,
2025-10-08T16:02:22.5790910Z                         effective_parameters,
2025-10-08T16:02:22.5791157Z                         context,
2025-10-08T16:02:22.5791367Z                     )
2025-10-08T16:02:22.5791621Z             elif not effective_parameters and context.no_parameters:
2025-10-08T16:02:22.5791938Z                 if self.dialect._has_events:
2025-10-08T16:02:22.5792246Z                     for fn in self.dialect.dispatch.do_execute_no_params:
2025-10-08T16:02:22.5792576Z                         if fn(cursor, str_statement, context):
2025-10-08T16:02:22.5792854Z                             evt_handled = True
2025-10-08T16:02:22.5793095Z                             break
2025-10-08T16:02:22.5793316Z                 if not evt_handled:
2025-10-08T16:02:22.5793562Z                     self.dialect.do_execute_no_params(
2025-10-08T16:02:22.5793841Z                         cursor, str_statement, context
2025-10-08T16:02:22.5794088Z                     )
2025-10-08T16:02:22.5794270Z             else:
2025-10-08T16:02:22.5794471Z                 effective_parameters = cast(
2025-10-08T16:02:22.5794766Z                     "_CoreSingleExecuteParams", effective_parameters
2025-10-08T16:02:22.5795042Z                 )
2025-10-08T16:02:22.5795237Z                 if self.dialect._has_events:
2025-10-08T16:02:22.5795521Z                     for fn in self.dialect.dispatch.do_execute:
2025-10-08T16:02:22.5795797Z                         if fn(
2025-10-08T16:02:22.5796005Z                             cursor,
2025-10-08T16:02:22.5796235Z                             str_statement,
2025-10-08T16:02:22.5796491Z                             effective_parameters,
2025-10-08T16:02:22.5796741Z                             context,
2025-10-08T16:02:22.5796957Z                         ):
2025-10-08T16:02:22.5797172Z                             evt_handled = True
2025-10-08T16:02:22.5797549Z                             break
2025-10-08T16:02:22.5797766Z                 if not evt_handled:
2025-10-08T16:02:22.5798001Z >                   self.dialect.do_execute(
2025-10-08T16:02:22.5798299Z                         cursor, str_statement, effective_parameters, context
2025-10-08T16:02:22.5798583Z                     )
2025-10-08T16:02:22.5798701Z 
2025-10-08T16:02:22.5798994Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1967: 
2025-10-08T16:02:22.5799476Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:02:22.5799676Z 
2025-10-08T16:02:22.5799949Z self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f5b155782f0>
2025-10-08T16:02:22.5800413Z cursor = <sqlite3.Cursor object at 0x7f5b0b8fedc0>
2025-10-08T16:02:22.5801239Z statement = 'SELECT user.id AS user_id, user.user_name AS user_user_name, user.alt_user_name AS user_alt_user_name, user.title AS ...le_2.id = user.cover_id LEFT OUTER JOIN instance AS instance_1 ON instance_1.id = user.instance_id \nWHERE user.id = ?'
2025-10-08T16:02:22.5802018Z parameters = (1,)
2025-10-08T16:02:22.5802406Z context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f5b0b728a50>
2025-10-08T16:02:22.5802756Z 
2025-10-08T16:02:22.5802917Z     def do_execute(self, cursor, statement, parameters, context=None):
2025-10-08T16:02:22.5803258Z >       cursor.execute(statement, parameters)
2025-10-08T16:02:22.5803558Z E       sqlite3.OperationalError: no such table: user
2025-10-08T16:02:22.5803759Z 
2025-10-08T16:02:22.5804119Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/default.py:951: OperationalError
2025-10-08T16:02:22.5804554Z 
2025-10-08T16:02:22.5804842Z The above exception was the direct cause of the following exception:
2025-10-08T16:02:22.5805105Z 
2025-10-08T16:02:22.5805183Z app = <Flask 'app'>
2025-10-08T16:02:22.5805297Z 
2025-10-08T16:02:22.5805401Z     def test_api_reply_subscriptions(app):
2025-10-08T16:02:22.5805662Z         with app.app_context():
2025-10-08T16:02:22.5805956Z             from app.api.alpha.utils.reply import put_reply_subscribe
2025-10-08T16:02:22.5806383Z     
2025-10-08T16:02:22.5806546Z             user_id = 1
2025-10-08T16:02:22.5806752Z >           user = User.query.get(user_id)
2025-10-08T16:02:22.5806994Z                    ^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:02:22.5807145Z 
2025-10-08T16:02:22.5807248Z tests/test_api_reply_subscriptions.py:29: 
2025-10-08T16:02:22.5807677Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:02:22.5807952Z <string>:2: in get
2025-10-08T16:02:22.5808135Z     ???
2025-10-08T16:02:22.5808561Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/util/deprecations.py:386: in warned
2025-10-08T16:02:22.5809108Z     return fn(*args, **kwargs)  # type: ignore[no-any-return]
2025-10-08T16:02:22.5809396Z            ^^^^^^^^^^^^^^^^^^^
2025-10-08T16:02:22.5809827Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/query.py:1126: in get
2025-10-08T16:02:22.5810328Z     return self._get_impl(ident, loading.load_on_pk_identity)
2025-10-08T16:02:22.5810637Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:02:22.5811109Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/query.py:1135: in _get_impl
2025-10-08T16:02:22.5811589Z     return self.session._get_impl(
2025-10-08T16:02:22.5812050Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/session.py:3873: in _get_impl
2025-10-08T16:02:22.5812522Z     return db_load_fn(
2025-10-08T16:02:22.5812990Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/loading.py:695: in load_on_pk_identity
2025-10-08T16:02:22.5813491Z     session.execute(
2025-10-08T16:02:22.5813913Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2365: in execute
2025-10-08T16:02:22.5814386Z     return self._execute_internal(
2025-10-08T16:02:22.5814885Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
2025-10-08T16:02:22.5815456Z     result: Result[Any] = compile_state_cls.orm_execute_statement(
2025-10-08T16:02:22.5816046Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
2025-10-08T16:02:22.5816562Z     result = conn.execute(
2025-10-08T16:02:22.5816996Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
2025-10-08T16:02:22.5817546Z     return meth(
2025-10-08T16:02:22.5818034Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
2025-10-08T16:02:22.5818601Z     return connection._execute_clauseelement(
2025-10-08T16:02:22.5819154Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
2025-10-08T16:02:22.5819693Z     ret = self._execute_context(
2025-10-08T16:02:22.5820192Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
2025-10-08T16:02:22.5820712Z     return self._exec_single_context(
2025-10-08T16:02:22.5821226Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
2025-10-08T16:02:22.5821747Z     self._handle_dbapi_exception(
2025-10-08T16:02:22.5822265Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
2025-10-08T16:02:22.5822981Z     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
2025-10-08T16:02:22.5823570Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
2025-10-08T16:02:22.5824090Z     self.dialect.do_execute(
2025-10-08T16:02:22.5824354Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:02:22.5824659Z 
2025-10-08T16:02:22.5824926Z self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f5b155782f0>
2025-10-08T16:02:22.5825396Z cursor = <sqlite3.Cursor object at 0x7f5b0b8fedc0>
2025-10-08T16:02:22.5826210Z statement = 'SELECT user.id AS user_id, user.user_name AS user_user_name, user.alt_user_name AS user_alt_user_name, user.title AS ...le_2.id = user.cover_id LEFT OUTER JOIN instance AS instance_1 ON instance_1.id = user.instance_id \nWHERE user.id = ?'
2025-10-08T16:02:22.5826984Z parameters = (1,)
2025-10-08T16:02:22.5827467Z context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f5b0b728a50>
2025-10-08T16:02:22.5827829Z 
2025-10-08T16:02:22.5827996Z     def do_execute(self, cursor, statement, parameters, context=None):
2025-10-08T16:02:22.5828346Z >       cursor.execute(statement, parameters)
2025-10-08T16:02:22.5828753Z E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: user
2025-10-08T16:02:22.5843976Z E       [SQL: SELECT user.id AS user_id, user.user_name AS user_user_name, user.alt_user_name AS user_alt_user_name, user.title AS user_title, user.email AS user_email, user.password_hash AS user_password_hash, user.verified AS user_verified, user.verification_token AS user_verification_token, user.banned AS user_banned, user.banned_until AS user_banned_until, user.ban_posts AS user_ban_posts, user.ban_comments AS user_ban_comments, user.deleted AS user_deleted, user.deleted_by AS user_deleted_by, user.about AS user_about, user.about_html AS user_about_html, user.keywords AS user_keywords, user.matrix_user_id AS user_matrix_user_id, user.hide_nsfw AS user_hide_nsfw, user.hide_nsfl AS user_hide_nsfl, user.created AS user_created, user.last_seen AS user_last_seen, user.avatar_id AS user_avatar_id, user.cover_id AS user_cover_id, user.public_key AS user_public_key, user.private_key AS user_private_key, user.newsletter AS user_newsletter, user.email_unread AS user_email_unread, user.email_unread_sent AS user_email_unread_sent, user.receive_message_mode AS user_receive_message_mode, user.bounces AS user_bounces, user.timezone AS user_timezone, user.reputation AS user_reputation, user.attitude AS user_attitude, user.post_count AS user_post_count, user.post_reply_count AS user_post_reply_count, user.stripe_customer_id AS user_stripe_customer_id, user.stripe_subscription_id AS user_stripe_subscription_id, user.searchable AS user_searchable, user.indexable AS user_indexable, user.bot AS user_bot, user.bot_override AS user_bot_override, user.suppress_crossposts AS user_suppress_crossposts, user.vote_privately AS user_vote_privately, user.ignore_bots AS user_ignore_bots, user.unread_notifications AS user_unread_notifications, user.ip_address AS user_ip_address, user.ip_address_country AS user_ip_address_country, user.instance_id AS user_instance_id, user.reports AS user_reports, user.default_sort AS user_default_sort, user.default_comment_sort AS user_default_comment_sort, user.default_filter AS user_default_filter, user.theme AS user_theme, user.font AS user_font, user.community_keyword_filter AS user_community_keyword_filter, user.referrer AS user_referrer, user.markdown_editor AS user_markdown_editor, user.interface_language AS user_interface_language, user.language_id AS user_language_id, user.read_language_ids AS user_read_language_ids, user.reply_collapse_threshold AS user_reply_collapse_threshold, user.reply_hide_threshold AS user_reply_hide_threshold, user.feed_auto_follow AS user_feed_auto_follow, user.feed_auto_leave AS user_feed_auto_leave, user.accept_private_messages AS user_accept_private_messages, user.google_oauth_id AS user_google_oauth_id, user.hide_low_quality AS user_hide_low_quality, user.show_subscribed_communities AS user_show_subscribed_communities, user.additional_css AS user_additional_css, user.mastodon_oauth_id AS user_mastodon_oauth_id, user.discord_oauth_id AS user_discord_oauth_id, user.password_updated_at AS user_password_updated_at, user.ap_id AS user_ap_id, user.ap_profile_id AS user_ap_profile_id, user.ap_public_url AS user_ap_public_url, user.ap_fetched_at AS user_ap_fetched_at, user.ap_followers_url AS user_ap_followers_url, user.ap_preferred_username AS user_ap_preferred_username, user.ap_manually_approves_followers AS user_ap_manually_approves_followers, user.ap_deleted_at AS user_ap_deleted_at, user.ap_inbox_url AS user_ap_inbox_url, user.ap_domain AS user_ap_domain, user.search_vector AS user_search_vector, user.hide_read_posts AS user_hide_read_posts, file_1.id AS file_1_id, file_1.file_path AS file_1_file_path, file_1.file_name AS file_1_file_name, file_1.width AS file_1_width, file_1.height AS file_1_height, file_1.alt_text AS file_1_alt_text, file_1.source_url AS file_1_source_url, file_1.thumbnail_path AS file_1_thumbnail_path, file_1.thumbnail_width AS file_1_thumbnail_width, file_1.thumbnail_height AS file_1_thumbnail_height, file_1.hash AS file_1_hash, file_2.id AS file_2_id, file_2.file_path AS file_2_file_path, file_2.file_name AS file_2_file_name, file_2.width AS file_2_width, file_2.height AS file_2_height, file_2.alt_text AS file_2_alt_text, file_2.source_url AS file_2_source_url, file_2.thumbnail_path AS file_2_thumbnail_path, file_2.thumbnail_width AS file_2_thumbnail_width, file_2.thumbnail_height AS file_2_thumbnail_height, file_2.hash AS file_2_hash, instance_1.id AS instance_1_id, instance_1.domain AS instance_1_domain, instance_1.inbox AS instance_1_inbox, instance_1.shared_inbox AS instance_1_shared_inbox, instance_1.outbox AS instance_1_outbox, instance_1.vote_weight AS instance_1_vote_weight, instance_1.software AS instance_1_software, instance_1.version AS instance_1_version, instance_1.created_at AS instance_1_created_at, instance_1.updated_at AS instance_1_updated_at, instance_1.last_seen AS instance_1_last_seen, instance_1.last_successful_send AS instance_1_last_successful_send, instance_1.failures AS instance_1_failures, instance_1.most_recent_attempt AS instance_1_most_recent_attempt, instance_1.dormant AS instance_1_dormant, instance_1.start_trying_again AS instance_1_start_trying_again, instance_1.gone_forever AS instance_1_gone_forever, instance_1.ip_address AS instance_1_ip_address, instance_1.trusted AS instance_1_trusted, instance_1.posting_warning AS instance_1_posting_warning, instance_1.nodeinfo_href AS instance_1_nodeinfo_href 
2025-10-08T16:02:22.5859561Z E       FROM user LEFT OUTER JOIN file AS file_1 ON file_1.id = user.avatar_id LEFT OUTER JOIN file AS file_2 ON file_2.id = user.cover_id LEFT OUTER JOIN instance AS instance_1 ON instance_1.id = user.instance_id 
2025-10-08T16:02:22.5860237Z E       WHERE user.id = ?]
2025-10-08T16:02:22.5860450Z E       [parameters: (1,)]
2025-10-08T16:02:22.5860764Z E       (Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-08T16:02:22.5861008Z 
2025-10-08T16:02:22.5861370Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/default.py:951: OperationalError
2025-10-08T16:02:22.5861964Z ------------------------------ Captured log setup ------------------------------
2025-10-08T16:02:22.5862300Z INFO     app:__init__.py:298 Started!
2025-10-08T16:02:22.5862632Z INFO     app:startup_validation.py:102 Running startup validations...
2025-10-08T16:02:22.5863048Z INFO     app:startup_validation.py:118 Startup validations completed
2025-10-08T16:02:22.5863400Z =============================== warnings summary ===============================
2025-10-08T16:02:22.5863796Z tests/test_api_reply_subscriptions.py::test_api_reply_subscriptions
2025-10-08T16:02:22.5864875Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pytesseract/pytesseract.py:32: DeprecationWarning: 'pkgutil.find_loader' is deprecated and slated for removal in Python 3.14; use importlib.util.find_spec() instead
2025-10-08T16:02:22.5865787Z     numpy_installed = find_loader('numpy') is not None
2025-10-08T16:02:22.5865990Z 
2025-10-08T16:02:22.5866162Z tests/test_api_reply_subscriptions.py::test_api_reply_subscriptions
2025-10-08T16:02:22.5867106Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pytesseract/pytesseract.py:36: DeprecationWarning: 'pkgutil.find_loader' is deprecated and slated for removal in Python 3.14; use importlib.util.find_spec() instead
2025-10-08T16:02:23.1363689Z     pandas_installed = find_loader('pandas') is not None
2025-10-08T16:02:23.1364215Z 
2025-10-08T16:02:23.1364627Z tests/test_api_reply_subscriptions.py::test_api_reply_subscriptions
2025-10-08T16:02:23.1366314Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pyasn1/codec/ber/encoder.py:952: DeprecationWarning: tagMap is deprecated. Please use TAG_MAP instead.
2025-10-08T16:02:23.1368398Z     warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)
2025-10-08T16:02:23.1368821Z 
2025-10-08T16:02:23.1369065Z tests/test_api_reply_subscriptions.py::test_api_reply_subscriptions
2025-10-08T16:02:23.1370121Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pyasn1/codec/ber/encoder.py:952: DeprecationWarning: typeMap is deprecated. Please use TYPE_MAP instead.
2025-10-08T16:02:23.1371088Z     warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)
2025-10-08T16:02:23.1371447Z 
2025-10-08T16:02:23.1371642Z tests/test_api_reply_subscriptions.py::test_api_reply_subscriptions
2025-10-08T16:02:23.1373036Z   /home/runner/work/pyfedi/pyfedi/tests/test_api_reply_subscriptions.py:29: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
2025-10-08T16:02:23.1374353Z     user = User.query.get(user_id)
2025-10-08T16:02:23.1374532Z 
2025-10-08T16:02:23.1374739Z -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
2025-10-08T16:02:23.1375179Z =========================== short test summary info ============================
2025-10-08T16:02:23.1375947Z FAILED tests/test_api_reply_subscriptions.py::test_api_reply_subscriptions - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: user
2025-10-08T16:02:23.1392182Z [SQL: SELECT user.id AS user_id, user.user_name AS user_user_name, user.alt_user_name AS user_alt_user_name, user.title AS user_title, user.email AS user_email, user.password_hash AS user_password_hash, user.verified AS user_verified, user.verification_token AS user_verification_token, user.banned AS user_banned, user.banned_until AS user_banned_until, user.ban_posts AS user_ban_posts, user.ban_comments AS user_ban_comments, user.deleted AS user_deleted, user.deleted_by AS user_deleted_by, user.about AS user_about, user.about_html AS user_about_html, user.keywords AS user_keywords, user.matrix_user_id AS user_matrix_user_id, user.hide_nsfw AS user_hide_nsfw, user.hide_nsfl AS user_hide_nsfl, user.created AS user_created, user.last_seen AS user_last_seen, user.avatar_id AS user_avatar_id, user.cover_id AS user_cover_id, user.public_key AS user_public_key, user.private_key AS user_private_key, user.newsletter AS user_newsletter, user.email_unread AS user_email_unread, user.email_unread_sent AS user_email_unread_sent, user.receive_message_mode AS user_receive_message_mode, user.bounces AS user_bounces, user.timezone AS user_timezone, user.reputation AS user_reputation, user.attitude AS user_attitude, user.post_count AS user_post_count, user.post_reply_count AS user_post_reply_count, user.stripe_customer_id AS user_stripe_customer_id, user.stripe_subscription_id AS user_stripe_subscription_id, user.searchable AS user_searchable, user.indexable AS user_indexable, user.bot AS user_bot, user.bot_override AS user_bot_override, user.suppress_crossposts AS user_suppress_crossposts, user.vote_privately AS user_vote_privately, user.ignore_bots AS user_ignore_bots, user.unread_notifications AS user_unread_notifications, user.ip_address AS user_ip_address, user.ip_address_country AS user_ip_address_country, user.instance_id AS user_instance_id, user.reports AS user_reports, user.default_sort AS user_default_sort, user.default_comment_sort AS user_default_comment_sort, user.default_filter AS user_default_filter, user.theme AS user_theme, user.font AS user_font, user.community_keyword_filter AS user_community_keyword_filter, user.referrer AS user_referrer, user.markdown_editor AS user_markdown_editor, user.interface_language AS user_interface_language, user.language_id AS user_language_id, user.read_language_ids AS user_read_language_ids, user.reply_collapse_threshold AS user_reply_collapse_threshold, user.reply_hide_threshold AS user_reply_hide_threshold, user.feed_auto_follow AS user_feed_auto_follow, user.feed_auto_leave AS user_feed_auto_leave, user.accept_private_messages AS user_accept_private_messages, user.google_oauth_id AS user_google_oauth_id, user.hide_low_quality AS user_hide_low_quality, user.show_subscribed_communities AS user_show_subscribed_communities, user.additional_css AS user_additional_css, user.mastodon_oauth_id AS user_mastodon_oauth_id, user.discord_oauth_id AS user_discord_oauth_id, user.password_updated_at AS user_password_updated_at, user.ap_id AS user_ap_id, user.ap_profile_id AS user_ap_profile_id, user.ap_public_url AS user_ap_public_url, user.ap_fetched_at AS user_ap_fetched_at, user.ap_followers_url AS user_ap_followers_url, user.ap_preferred_username AS user_ap_preferred_username, user.ap_manually_approves_followers AS user_ap_manually_approves_followers, user.ap_deleted_at AS user_ap_deleted_at, user.ap_inbox_url AS user_ap_inbox_url, user.ap_domain AS user_ap_domain, user.search_vector AS user_search_vector, user.hide_read_posts AS user_hide_read_posts, file_1.id AS file_1_id, file_1.file_path AS file_1_file_path, file_1.file_name AS file_1_file_name, file_1.width AS file_1_width, file_1.height AS file_1_height, file_1.alt_text AS file_1_alt_text, file_1.source_url AS file_1_source_url, file_1.thumbnail_path AS file_1_thumbnail_path, file_1.thumbnail_width AS file_1_thumbnail_width, file_1.thumbnail_height AS file_1_thumbnail_height, file_1.hash AS file_1_hash, file_2.id AS file_2_id, file_2.file_path AS file_2_file_path, file_2.file_name AS file_2_file_name, file_2.width AS file_2_width, file_2.height AS file_2_height, file_2.alt_text AS file_2_alt_text, file_2.source_url AS file_2_source_url, file_2.thumbnail_path AS file_2_thumbnail_path, file_2.thumbnail_width AS file_2_thumbnail_width, file_2.thumbnail_height AS file_2_thumbnail_height, file_2.hash AS file_2_hash, instance_1.id AS instance_1_id, instance_1.domain AS instance_1_domain, instance_1.inbox AS instance_1_inbox, instance_1.shared_inbox AS instance_1_shared_inbox, instance_1.outbox AS instance_1_outbox, instance_1.vote_weight AS instance_1_vote_weight, instance_1.software AS instance_1_software, instance_1.version AS instance_1_version, instance_1.created_at AS instance_1_created_at, instance_1.updated_at AS instance_1_updated_at, instance_1.last_seen AS instance_1_last_seen, instance_1.last_successful_send AS instance_1_last_successful_send, instance_1.failures AS instance_1_failures, instance_1.most_recent_attempt AS instance_1_most_recent_attempt, instance_1.dormant AS instance_1_dormant, instance_1.start_trying_again AS instance_1_start_trying_again, instance_1.gone_forever AS instance_1_gone_forever, instance_1.ip_address AS instance_1_ip_address, instance_1.trusted AS instance_1_trusted, instance_1.posting_warning AS instance_1_posting_warning, instance_1.nodeinfo_href AS instance_1_nodeinfo_href 
2025-10-08T16:02:23.1407871Z FROM user LEFT OUTER JOIN file AS file_1 ON file_1.id = user.avatar_id LEFT OUTER JOIN file AS file_2 ON file_2.id = user.cover_id LEFT OUTER JOIN instance AS instance_1 ON instance_1.id = user.instance_id 
2025-10-08T16:02:23.1408542Z WHERE user.id = ?]
2025-10-08T16:02:23.1408737Z [parameters: (1,)]
2025-10-08T16:02:23.1409005Z (Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-08T16:02:23.1409375Z ======================== 1 failed, 5 warnings in 2.64s =========================
2025-10-08T16:02:23.8658463Z ============================= test session starts ==============================
2025-10-08T16:02:23.8659460Z platform linux -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
2025-10-08T16:02:23.8660041Z cachedir: .pytest_cache
2025-10-08T16:02:23.8660336Z rootdir: /home/runner/work/pyfedi/pyfedi
2025-10-08T16:02:23.8660657Z plugins: anyio-4.11.0
2025-10-08T16:02:23.9154251Z collecting ... collected 8 items
2025-10-08T16:02:23.9154590Z 
2025-10-08T16:02:25.0443334Z tests/test_private_registration_security_focused.py::TestCoreSecurityProtocols::test_secret_authentication_required ERROR [ 12%]
2025-10-08T16:02:25.0580092Z tests/test_private_registration_security_focused.py::TestCoreSecurityProtocols::test_correct_secret_authentication ERROR [ 25%]
2025-10-08T16:02:25.0680258Z tests/test_private_registration_security_focused.py::TestCoreSecurityProtocols::test_feature_toggle_security ERROR [ 37%]
2025-10-08T16:02:25.0776298Z tests/test_private_registration_security_focused.py::TestCoreSecurityProtocols::test_ip_whitelist_enforcement ERROR [ 50%]
2025-10-08T16:02:25.0872163Z tests/test_private_registration_security_focused.py::TestCoreSecurityProtocols::test_input_sanitization ERROR [ 62%]
2025-10-08T16:02:25.0966812Z tests/test_private_registration_security_focused.py::TestCoreSecurityProtocols::test_constant_time_secret_comparison ERROR [ 75%]
2025-10-08T16:02:25.1063303Z tests/test_private_registration_security_focused.py::TestCoreSecurityProtocols::test_error_information_disclosure ERROR [ 87%]
2025-10-08T16:02:25.1179265Z tests/test_private_registration_security_focused.py::TestBasicRateLimit::test_basic_rate_limiting ERROR [100%]
2025-10-08T16:02:25.1180160Z 
2025-10-08T16:02:25.1180400Z ==================================== ERRORS ====================================
2025-10-08T16:02:25.1181026Z _ ERROR at setup of TestCoreSecurityProtocols.test_secret_authentication_required _
2025-10-08T16:02:25.1181442Z 
2025-10-08T16:02:25.1181542Z     @pytest.fixture
2025-10-08T16:02:25.1181795Z     def security_app():
2025-10-08T16:02:25.1182090Z         """Create test app with security focus"""
2025-10-08T16:02:25.1182411Z         test_env = {
2025-10-08T16:02:25.1182684Z             'PRIVATE_REGISTRATION_ENABLED': 'true',
2025-10-08T16:02:25.1183099Z             'PRIVATE_REGISTRATION_SECRET': 'secure-test-secret-2024',
2025-10-08T16:02:25.1183582Z             'PRIVATE_REGISTRATION_ALLOWED_IPS': '127.0.0.1,10.0.0.0/8',
2025-10-08T16:02:25.1183975Z             'SERVER_NAME': 'localhost'
2025-10-08T16:02:25.1184258Z         }
2025-10-08T16:02:25.1184486Z     
2025-10-08T16:02:25.1184719Z         with patch.dict(os.environ, test_env):
2025-10-08T16:02:25.1185072Z             from app import create_app, db
2025-10-08T16:02:25.1185445Z >           app = create_app(PrivateRegSecurityTestConfig)
2025-10-08T16:02:25.1185817Z                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:02:25.1186025Z 
2025-10-08T16:02:25.1186204Z tests/test_private_registration_security_focused.py:47: 
2025-10-08T16:02:25.1186623Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:02:25.1186898Z 
2025-10-08T16:02:25.1187520Z config_class = <class 'tests.test_private_registration_security_focused.PrivateRegSecurityTestConfig'>
2025-10-08T16:02:25.1187982Z 
2025-10-08T16:02:25.1188097Z     def create_app(config_class=Config):
2025-10-08T16:02:25.1188396Z         app = Flask(__name__)
2025-10-08T16:02:25.1188683Z         app.config.from_object(config_class)
2025-10-08T16:02:25.1188973Z     
2025-10-08T16:02:25.1189173Z         if app.config['SENTRY_DSN']:
2025-10-08T16:02:25.1189457Z             import sentry_sdk
2025-10-08T16:02:25.1189939Z             sentry_sdk.init(
2025-10-08T16:02:25.1190216Z                 dsn=app.config["SENTRY_DSN"],
2025-10-08T16:02:25.1190525Z                 enable_tracing=False,
2025-10-08T16:02:25.1190796Z             )
2025-10-08T16:02:25.1190989Z     
2025-10-08T16:02:25.1191225Z         app.wsgi_app = ProxyFix(app.wsgi_app, x_for=1)
2025-10-08T16:02:25.1191541Z     
2025-10-08T16:02:25.1191912Z         app.config["API_TITLE"] = "PieFed 1.3 Alpha API"
2025-10-08T16:02:25.1192264Z         app.config["API_VERSION"] = "alpha 1.3"
2025-10-08T16:02:25.1192596Z         app.config["OPENAPI_VERSION"] = "3.1.1"
2025-10-08T16:02:25.1192914Z >       if app.config["SERVE_API_DOCS"]:
2025-10-08T16:02:25.1193205Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:02:25.1193490Z E       KeyError: 'SERVE_API_DOCS'
2025-10-08T16:02:25.1193675Z 
2025-10-08T16:02:25.1193777Z app/__init__.py:82: KeyError
2025-10-08T16:02:25.1194214Z _ ERROR at setup of TestCoreSecurityProtocols.test_correct_secret_authentication _
2025-10-08T16:02:25.1194601Z 
2025-10-08T16:02:25.1194692Z     @pytest.fixture
2025-10-08T16:02:25.1194924Z     def security_app():
2025-10-08T16:02:25.1195190Z         """Create test app with security focus"""
2025-10-08T16:02:25.1195491Z         test_env = {
2025-10-08T16:02:25.1195746Z             'PRIVATE_REGISTRATION_ENABLED': 'true',
2025-10-08T16:02:25.1196149Z             'PRIVATE_REGISTRATION_SECRET': 'secure-test-secret-2024',
2025-10-08T16:02:25.1196600Z             'PRIVATE_REGISTRATION_ALLOWED_IPS': '127.0.0.1,10.0.0.0/8',
2025-10-08T16:02:25.1196975Z             'SERVER_NAME': 'localhost'
2025-10-08T16:02:25.1197247Z         }
2025-10-08T16:02:25.1197547Z     
2025-10-08T16:02:25.1197765Z         with patch.dict(os.environ, test_env):
2025-10-08T16:02:25.1198073Z             from app import create_app, db
2025-10-08T16:02:25.1198364Z >           app = create_app(PrivateRegSecurityTestConfig)
2025-10-08T16:02:25.1198646Z                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:02:25.1198821Z 
2025-10-08T16:02:25.1198958Z tests/test_private_registration_security_focused.py:47: 
2025-10-08T16:02:25.1199284Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:02:25.1199482Z 
2025-10-08T16:02:25.1199762Z config_class = <class 'tests.test_private_registration_security_focused.PrivateRegSecurityTestConfig'>
2025-10-08T16:02:25.1200125Z 
2025-10-08T16:02:25.1200220Z     def create_app(config_class=Config):
2025-10-08T16:02:25.1200470Z         app = Flask(__name__)
2025-10-08T16:02:25.1200705Z         app.config.from_object(config_class)
2025-10-08T16:02:25.1200936Z     
2025-10-08T16:02:25.1201108Z         if app.config['SENTRY_DSN']:
2025-10-08T16:02:25.1201342Z             import sentry_sdk
2025-10-08T16:02:25.1201551Z             sentry_sdk.init(
2025-10-08T16:02:25.1201783Z                 dsn=app.config["SENTRY_DSN"],
2025-10-08T16:02:25.1202033Z                 enable_tracing=False,
2025-10-08T16:02:25.1202250Z             )
2025-10-08T16:02:25.1202410Z     
2025-10-08T16:02:25.1202608Z         app.wsgi_app = ProxyFix(app.wsgi_app, x_for=1)
2025-10-08T16:02:25.1202864Z     
2025-10-08T16:02:25.1203058Z         app.config["API_TITLE"] = "PieFed 1.3 Alpha API"
2025-10-08T16:02:25.1203344Z         app.config["API_VERSION"] = "alpha 1.3"
2025-10-08T16:02:25.1203613Z         app.config["OPENAPI_VERSION"] = "3.1.1"
2025-10-08T16:02:25.1203874Z >       if app.config["SERVE_API_DOCS"]:
2025-10-08T16:02:25.1204110Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:02:25.1204347Z E       KeyError: 'SERVE_API_DOCS'
2025-10-08T16:02:25.1204499Z 
2025-10-08T16:02:25.1204583Z app/__init__.py:82: KeyError
2025-10-08T16:02:25.1204918Z ___ ERROR at setup of TestCoreSecurityProtocols.test_feature_toggle_security ___
2025-10-08T16:02:25.1205209Z 
2025-10-08T16:02:25.1205282Z     @pytest.fixture
2025-10-08T16:02:25.1205469Z     def security_app():
2025-10-08T16:02:25.1205683Z         """Create test app with security focus"""
2025-10-08T16:02:25.1206053Z         test_env = {
2025-10-08T16:02:25.1206273Z             'PRIVATE_REGISTRATION_ENABLED': 'true',
2025-10-08T16:02:25.1206592Z             'PRIVATE_REGISTRATION_SECRET': 'secure-test-secret-2024',
2025-10-08T16:02:25.1206959Z             'PRIVATE_REGISTRATION_ALLOWED_IPS': '127.0.0.1,10.0.0.0/8',
2025-10-08T16:02:25.1207263Z             'SERVER_NAME': 'localhost'
2025-10-08T16:02:25.1207588Z         }
2025-10-08T16:02:25.1207853Z     
2025-10-08T16:02:25.1208036Z         with patch.dict(os.environ, test_env):
2025-10-08T16:02:25.1208297Z             from app import create_app, db
2025-10-08T16:02:25.1208579Z >           app = create_app(PrivateRegSecurityTestConfig)
2025-10-08T16:02:25.1208861Z                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:02:25.1209026Z 
2025-10-08T16:02:25.1209165Z tests/test_private_registration_security_focused.py:47: 
2025-10-08T16:02:25.1209483Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:02:25.1209683Z 
2025-10-08T16:02:25.1209963Z config_class = <class 'tests.test_private_registration_security_focused.PrivateRegSecurityTestConfig'>
2025-10-08T16:02:25.1210331Z 
2025-10-08T16:02:25.1210422Z     def create_app(config_class=Config):
2025-10-08T16:02:25.1210668Z         app = Flask(__name__)
2025-10-08T16:02:25.1210896Z         app.config.from_object(config_class)
2025-10-08T16:02:25.1211130Z     
2025-10-08T16:02:25.1211304Z         if app.config['SENTRY_DSN']:
2025-10-08T16:02:25.1211532Z             import sentry_sdk
2025-10-08T16:02:25.1211746Z             sentry_sdk.init(
2025-10-08T16:02:25.1211970Z                 dsn=app.config["SENTRY_DSN"],
2025-10-08T16:02:25.1212221Z                 enable_tracing=False,
2025-10-08T16:02:25.1212435Z             )
2025-10-08T16:02:25.1212595Z     
2025-10-08T16:02:25.1212793Z         app.wsgi_app = ProxyFix(app.wsgi_app, x_for=1)
2025-10-08T16:02:25.1213043Z     
2025-10-08T16:02:25.1213239Z         app.config["API_TITLE"] = "PieFed 1.3 Alpha API"
2025-10-08T16:02:25.1213527Z         app.config["API_VERSION"] = "alpha 1.3"
2025-10-08T16:02:25.1213790Z         app.config["OPENAPI_VERSION"] = "3.1.1"
2025-10-08T16:02:25.1214049Z >       if app.config["SERVE_API_DOCS"]:
2025-10-08T16:02:25.1214285Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:02:25.1214514Z E       KeyError: 'SERVE_API_DOCS'
2025-10-08T16:02:25.1214672Z 
2025-10-08T16:02:25.1214751Z app/__init__.py:82: KeyError
2025-10-08T16:02:25.1215096Z __ ERROR at setup of TestCoreSecurityProtocols.test_ip_whitelist_enforcement ___
2025-10-08T16:02:25.1215383Z 
2025-10-08T16:02:25.1215460Z     @pytest.fixture
2025-10-08T16:02:25.1215644Z     def security_app():
2025-10-08T16:02:25.1215866Z         """Create test app with security focus"""
2025-10-08T16:02:25.1216117Z         test_env = {
2025-10-08T16:02:25.1216321Z             'PRIVATE_REGISTRATION_ENABLED': 'true',
2025-10-08T16:02:25.1216644Z             'PRIVATE_REGISTRATION_SECRET': 'secure-test-secret-2024',
2025-10-08T16:02:25.1217009Z             'PRIVATE_REGISTRATION_ALLOWED_IPS': '127.0.0.1,10.0.0.0/8',
2025-10-08T16:02:25.1217425Z             'SERVER_NAME': 'localhost'
2025-10-08T16:02:25.1217646Z         }
2025-10-08T16:02:25.1217798Z     
2025-10-08T16:02:25.1217979Z         with patch.dict(os.environ, test_env):
2025-10-08T16:02:25.1218237Z             from app import create_app, db
2025-10-08T16:02:25.1218524Z >           app = create_app(PrivateRegSecurityTestConfig)
2025-10-08T16:02:25.1218809Z                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:02:25.1218974Z 
2025-10-08T16:02:25.1219109Z tests/test_private_registration_security_focused.py:47: 
2025-10-08T16:02:25.1219434Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:02:25.1219632Z 
2025-10-08T16:02:25.1219903Z config_class = <class 'tests.test_private_registration_security_focused.PrivateRegSecurityTestConfig'>
2025-10-08T16:02:25.1220269Z 
2025-10-08T16:02:25.1220363Z     def create_app(config_class=Config):
2025-10-08T16:02:25.1220725Z         app = Flask(__name__)
2025-10-08T16:02:25.1220964Z         app.config.from_object(config_class)
2025-10-08T16:02:25.1221193Z     
2025-10-08T16:02:25.1221361Z         if app.config['SENTRY_DSN']:
2025-10-08T16:02:25.1221594Z             import sentry_sdk
2025-10-08T16:02:25.1221801Z             sentry_sdk.init(
2025-10-08T16:02:25.1222021Z                 dsn=app.config["SENTRY_DSN"],
2025-10-08T16:02:25.1222376Z                 enable_tracing=False,
2025-10-08T16:02:25.1222590Z             )
2025-10-08T16:02:25.1222751Z     
2025-10-08T16:02:25.1222958Z         app.wsgi_app = ProxyFix(app.wsgi_app, x_for=1)
2025-10-08T16:02:25.1223214Z     
2025-10-08T16:02:25.1223421Z         app.config["API_TITLE"] = "PieFed 1.3 Alpha API"
2025-10-08T16:02:25.1223717Z         app.config["API_VERSION"] = "alpha 1.3"
2025-10-08T16:02:25.1224016Z         app.config["OPENAPI_VERSION"] = "3.1.1"
2025-10-08T16:02:25.1224283Z >       if app.config["SERVE_API_DOCS"]:
2025-10-08T16:02:25.1224533Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:02:25.1224771Z E       KeyError: 'SERVE_API_DOCS'
2025-10-08T16:02:25.1224925Z 
2025-10-08T16:02:25.1225009Z app/__init__.py:82: KeyError
2025-10-08T16:02:25.1225351Z _____ ERROR at setup of TestCoreSecurityProtocols.test_input_sanitization ______
2025-10-08T16:02:25.1225644Z 
2025-10-08T16:02:25.1225723Z     @pytest.fixture
2025-10-08T16:02:25.1225910Z     def security_app():
2025-10-08T16:02:25.1226142Z         """Create test app with security focus"""
2025-10-08T16:02:25.1226393Z         test_env = {
2025-10-08T16:02:25.1226610Z             'PRIVATE_REGISTRATION_ENABLED': 'true',
2025-10-08T16:02:25.1226937Z             'PRIVATE_REGISTRATION_SECRET': 'secure-test-secret-2024',
2025-10-08T16:02:25.1227309Z             'PRIVATE_REGISTRATION_ALLOWED_IPS': '127.0.0.1,10.0.0.0/8',
2025-10-08T16:02:25.1227742Z             'SERVER_NAME': 'localhost'
2025-10-08T16:02:25.1227960Z         }
2025-10-08T16:02:25.1228116Z     
2025-10-08T16:02:25.1228307Z         with patch.dict(os.environ, test_env):
2025-10-08T16:02:25.1228568Z             from app import create_app, db
2025-10-08T16:02:25.1228858Z >           app = create_app(PrivateRegSecurityTestConfig)
2025-10-08T16:02:25.1229164Z                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:02:25.1229329Z 
2025-10-08T16:02:25.1229475Z tests/test_private_registration_security_focused.py:47: 
2025-10-08T16:02:25.1229802Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:02:25.1230003Z 
2025-10-08T16:02:25.1230278Z config_class = <class 'tests.test_private_registration_security_focused.PrivateRegSecurityTestConfig'>
2025-10-08T16:02:25.1230647Z 
2025-10-08T16:02:25.1230744Z     def create_app(config_class=Config):
2025-10-08T16:02:25.1230989Z         app = Flask(__name__)
2025-10-08T16:02:25.1231229Z         app.config.from_object(config_class)
2025-10-08T16:02:25.1231467Z     
2025-10-08T16:02:25.1231637Z         if app.config['SENTRY_DSN']:
2025-10-08T16:02:25.1231874Z             import sentry_sdk
2025-10-08T16:02:25.1232122Z             sentry_sdk.init(
2025-10-08T16:02:25.1232349Z                 dsn=app.config["SENTRY_DSN"],
2025-10-08T16:02:25.1232594Z                 enable_tracing=False,
2025-10-08T16:02:25.1232814Z             )
2025-10-08T16:02:25.1232975Z     
2025-10-08T16:02:25.1233168Z         app.wsgi_app = ProxyFix(app.wsgi_app, x_for=1)
2025-10-08T16:02:25.1233428Z     
2025-10-08T16:02:25.1233630Z         app.config["API_TITLE"] = "PieFed 1.3 Alpha API"
2025-10-08T16:02:25.1233916Z         app.config["API_VERSION"] = "alpha 1.3"
2025-10-08T16:02:25.1234185Z         app.config["OPENAPI_VERSION"] = "3.1.1"
2025-10-08T16:02:25.1234445Z >       if app.config["SERVE_API_DOCS"]:
2025-10-08T16:02:25.1234684Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:02:25.1234920Z E       KeyError: 'SERVE_API_DOCS'
2025-10-08T16:02:25.1235079Z 
2025-10-08T16:02:25.1235162Z app/__init__.py:82: KeyError
2025-10-08T16:02:25.1235641Z _ ERROR at setup of TestCoreSecurityProtocols.test_constant_time_secret_comparison _
2025-10-08T16:02:25.1235959Z 
2025-10-08T16:02:25.1236032Z     @pytest.fixture
2025-10-08T16:02:25.1236221Z     def security_app():
2025-10-08T16:02:25.1236443Z         """Create test app with security focus"""
2025-10-08T16:02:25.1236689Z         test_env = {
2025-10-08T16:02:25.4112582Z             'PRIVATE_REGISTRATION_ENABLED': 'true',
2025-10-08T16:02:25.4113893Z             'PRIVATE_REGISTRATION_SECRET': 'secure-test-secret-2024',
2025-10-08T16:02:25.4114700Z             'PRIVATE_REGISTRATION_ALLOWED_IPS': '127.0.0.1,10.0.0.0/8',
2025-10-08T16:02:25.4115174Z             'SERVER_NAME': 'localhost'
2025-10-08T16:02:25.4115509Z         }
2025-10-08T16:02:25.4115742Z     
2025-10-08T16:02:25.4116028Z         with patch.dict(os.environ, test_env):
2025-10-08T16:02:25.4116424Z             from app import create_app, db
2025-10-08T16:02:25.4116860Z >           app = create_app(PrivateRegSecurityTestConfig)
2025-10-08T16:02:25.4117309Z                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:02:25.4117807Z 
2025-10-08T16:02:25.4118023Z tests/test_private_registration_security_focused.py:47: 
2025-10-08T16:02:25.4118530Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:02:25.4118834Z 
2025-10-08T16:02:25.4119266Z config_class = <class 'tests.test_private_registration_security_focused.PrivateRegSecurityTestConfig'>
2025-10-08T16:02:25.4119832Z 
2025-10-08T16:02:25.4119976Z     def create_app(config_class=Config):
2025-10-08T16:02:25.4120352Z         app = Flask(__name__)
2025-10-08T16:02:25.4120701Z         app.config.from_object(config_class)
2025-10-08T16:02:25.4121068Z     
2025-10-08T16:02:25.4121323Z         if app.config['SENTRY_DSN']:
2025-10-08T16:02:25.4121672Z             import sentry_sdk
2025-10-08T16:02:25.4121995Z             sentry_sdk.init(
2025-10-08T16:02:25.4122336Z                 dsn=app.config["SENTRY_DSN"],
2025-10-08T16:02:25.4122717Z                 enable_tracing=False,
2025-10-08T16:02:25.4123045Z             )
2025-10-08T16:02:25.4123247Z     
2025-10-08T16:02:25.4123489Z         app.wsgi_app = ProxyFix(app.wsgi_app, x_for=1)
2025-10-08T16:02:25.4123795Z     
2025-10-08T16:02:25.4124019Z         app.config["API_TITLE"] = "PieFed 1.3 Alpha API"
2025-10-08T16:02:25.4124343Z         app.config["API_VERSION"] = "alpha 1.3"
2025-10-08T16:02:25.4124689Z         app.config["OPENAPI_VERSION"] = "3.1.1"
2025-10-08T16:02:25.4124986Z >       if app.config["SERVE_API_DOCS"]:
2025-10-08T16:02:25.4125259Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:02:25.4125518Z E       KeyError: 'SERVE_API_DOCS'
2025-10-08T16:02:25.4125693Z 
2025-10-08T16:02:25.4125783Z app/__init__.py:82: KeyError
2025-10-08T16:02:25.4126205Z _ ERROR at setup of TestCoreSecurityProtocols.test_error_information_disclosure _
2025-10-08T16:02:25.4126543Z 
2025-10-08T16:02:25.4126631Z     @pytest.fixture
2025-10-08T16:02:25.4126839Z     def security_app():
2025-10-08T16:02:25.4127091Z         """Create test app with security focus"""
2025-10-08T16:02:25.4127498Z         test_env = {
2025-10-08T16:02:25.4127731Z             'PRIVATE_REGISTRATION_ENABLED': 'true',
2025-10-08T16:02:25.4128104Z             'PRIVATE_REGISTRATION_SECRET': 'secure-test-secret-2024',
2025-10-08T16:02:25.4128518Z             'PRIVATE_REGISTRATION_ALLOWED_IPS': '127.0.0.1,10.0.0.0/8',
2025-10-08T16:02:25.4128860Z             'SERVER_NAME': 'localhost'
2025-10-08T16:02:25.4129109Z         }
2025-10-08T16:02:25.4129286Z     
2025-10-08T16:02:25.4129489Z         with patch.dict(os.environ, test_env):
2025-10-08T16:02:25.4129781Z             from app import create_app, db
2025-10-08T16:02:25.4130107Z >           app = create_app(PrivateRegSecurityTestConfig)
2025-10-08T16:02:25.4130429Z                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:02:25.4130613Z 
2025-10-08T16:02:25.4130772Z tests/test_private_registration_security_focused.py:47: 
2025-10-08T16:02:25.4131134Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:02:25.4131522Z 
2025-10-08T16:02:25.4131850Z config_class = <class 'tests.test_private_registration_security_focused.PrivateRegSecurityTestConfig'>
2025-10-08T16:02:25.4132268Z 
2025-10-08T16:02:25.4132375Z     def create_app(config_class=Config):
2025-10-08T16:02:25.4132646Z         app = Flask(__name__)
2025-10-08T16:02:25.4132908Z         app.config.from_object(config_class)
2025-10-08T16:02:25.4133292Z     
2025-10-08T16:02:25.4133482Z         if app.config['SENTRY_DSN']:
2025-10-08T16:02:25.4133734Z             import sentry_sdk
2025-10-08T16:02:25.4133947Z             sentry_sdk.init(
2025-10-08T16:02:25.4134177Z                 dsn=app.config["SENTRY_DSN"],
2025-10-08T16:02:25.4134420Z                 enable_tracing=False,
2025-10-08T16:02:25.4134642Z             )
2025-10-08T16:02:25.4134800Z     
2025-10-08T16:02:25.4135000Z         app.wsgi_app = ProxyFix(app.wsgi_app, x_for=1)
2025-10-08T16:02:25.4135261Z     
2025-10-08T16:02:25.4135462Z         app.config["API_TITLE"] = "PieFed 1.3 Alpha API"
2025-10-08T16:02:25.4135751Z         app.config["API_VERSION"] = "alpha 1.3"
2025-10-08T16:02:25.4136019Z         app.config["OPENAPI_VERSION"] = "3.1.1"
2025-10-08T16:02:25.4136276Z >       if app.config["SERVE_API_DOCS"]:
2025-10-08T16:02:25.4136516Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:02:25.4136743Z E       KeyError: 'SERVE_API_DOCS'
2025-10-08T16:02:25.4136898Z 
2025-10-08T16:02:25.4136983Z app/__init__.py:82: KeyError
2025-10-08T16:02:25.4137311Z ________ ERROR at setup of TestBasicRateLimit.test_basic_rate_limiting _________
2025-10-08T16:02:25.4137710Z 
2025-10-08T16:02:25.4137785Z     @pytest.fixture
2025-10-08T16:02:25.4137977Z     def security_app():
2025-10-08T16:02:25.4138202Z         """Create test app with security focus"""
2025-10-08T16:02:25.4138451Z         test_env = {
2025-10-08T16:02:25.4138661Z             'PRIVATE_REGISTRATION_ENABLED': 'true',
2025-10-08T16:02:25.4138995Z             'PRIVATE_REGISTRATION_SECRET': 'secure-test-secret-2024',
2025-10-08T16:02:25.4139371Z             'PRIVATE_REGISTRATION_ALLOWED_IPS': '127.0.0.1,10.0.0.0/8',
2025-10-08T16:02:25.4139674Z             'SERVER_NAME': 'localhost'
2025-10-08T16:02:25.4139901Z         }
2025-10-08T16:02:25.4140057Z     
2025-10-08T16:02:25.4140250Z         with patch.dict(os.environ, test_env):
2025-10-08T16:02:25.4140521Z             from app import create_app, db
2025-10-08T16:02:25.4140812Z >           app = create_app(PrivateRegSecurityTestConfig)
2025-10-08T16:02:25.4141100Z                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:02:25.4141271Z 
2025-10-08T16:02:25.4141409Z tests/test_private_registration_security_focused.py:47: 
2025-10-08T16:02:25.4141735Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:02:25.4141931Z 
2025-10-08T16:02:25.4142208Z config_class = <class 'tests.test_private_registration_security_focused.PrivateRegSecurityTestConfig'>
2025-10-08T16:02:25.4142565Z 
2025-10-08T16:02:25.4142664Z     def create_app(config_class=Config):
2025-10-08T16:02:25.4142909Z         app = Flask(__name__)
2025-10-08T16:02:25.4143149Z         app.config.from_object(config_class)
2025-10-08T16:02:25.4143390Z     
2025-10-08T16:02:25.4143553Z         if app.config['SENTRY_DSN']:
2025-10-08T16:02:25.4143789Z             import sentry_sdk
2025-10-08T16:02:25.4144008Z             sentry_sdk.init(
2025-10-08T16:02:25.4144231Z                 dsn=app.config["SENTRY_DSN"],
2025-10-08T16:02:25.4144485Z                 enable_tracing=False,
2025-10-08T16:02:25.4144707Z             )
2025-10-08T16:02:25.4144863Z     
2025-10-08T16:02:25.4145062Z         app.wsgi_app = ProxyFix(app.wsgi_app, x_for=1)
2025-10-08T16:02:25.4145315Z     
2025-10-08T16:02:25.4145514Z         app.config["API_TITLE"] = "PieFed 1.3 Alpha API"
2025-10-08T16:02:25.4145802Z         app.config["API_VERSION"] = "alpha 1.3"
2025-10-08T16:02:25.4146075Z         app.config["OPENAPI_VERSION"] = "3.1.1"
2025-10-08T16:02:25.4146331Z >       if app.config["SERVE_API_DOCS"]:
2025-10-08T16:02:25.4146686Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:02:25.4146925Z E       KeyError: 'SERVE_API_DOCS'
2025-10-08T16:02:25.4147078Z 
2025-10-08T16:02:25.4147165Z app/__init__.py:82: KeyError
2025-10-08T16:02:25.4147513Z =========================== short test summary info ============================
2025-10-08T16:02:25.4148186Z ERROR tests/test_private_registration_security_focused.py::TestCoreSecurityProtocols::test_secret_authentication_required - KeyError: 'SERVE_API_DOCS'
2025-10-08T16:02:25.4149262Z ERROR tests/test_private_registration_security_focused.py::TestCoreSecurityProtocols::test_correct_secret_authentication - KeyError: 'SERVE_API_DOCS'
2025-10-08T16:02:25.4150177Z ERROR tests/test_private_registration_security_focused.py::TestCoreSecurityProtocols::test_feature_toggle_security - KeyError: 'SERVE_API_DOCS'
2025-10-08T16:02:25.4151076Z ERROR tests/test_private_registration_security_focused.py::TestCoreSecurityProtocols::test_ip_whitelist_enforcement - KeyError: 'SERVE_API_DOCS'
2025-10-08T16:02:25.4151981Z ERROR tests/test_private_registration_security_focused.py::TestCoreSecurityProtocols::test_input_sanitization - KeyError: 'SERVE_API_DOCS'
2025-10-08T16:02:25.4152897Z ERROR tests/test_private_registration_security_focused.py::TestCoreSecurityProtocols::test_constant_time_secret_comparison - KeyError: 'SERVE_API_DOCS'
2025-10-08T16:02:25.4153826Z ERROR tests/test_private_registration_security_focused.py::TestCoreSecurityProtocols::test_error_information_disclosure - KeyError: 'SERVE_API_DOCS'
2025-10-08T16:02:25.4154698Z ERROR tests/test_private_registration_security_focused.py::TestBasicRateLimit::test_basic_rate_limiting - KeyError: 'SERVE_API_DOCS'
2025-10-08T16:02:25.4155254Z ============================== 8 errors in 1.26s ===============================
2025-10-08T16:02:25.8569067Z ============================= test session starts ==============================
2025-10-08T16:02:25.8569890Z platform linux -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
2025-10-08T16:02:25.8570529Z cachedir: .pytest_cache
2025-10-08T16:02:25.8570846Z rootdir: /home/runner/work/pyfedi/pyfedi
2025-10-08T16:02:25.8571192Z plugins: anyio-4.11.0
2025-10-08T16:02:26.9339975Z collecting ... collected 1 item
2025-10-08T16:02:26.9340336Z 
2025-10-08T16:02:28.4992074Z tests/test_api_get_site.py::test_api_get_site FAILED                     [100%]
2025-10-08T16:02:28.4992612Z 
2025-10-08T16:02:28.4992838Z =================================== FAILURES ===================================
2025-10-08T16:02:28.4993578Z ______________________________ test_api_get_site _______________________________
2025-10-08T16:02:28.4993913Z 
2025-10-08T16:02:28.4994149Z self = <sqlalchemy.engine.base.Connection object at 0x7f364c2e3a80>
2025-10-08T16:02:28.4994853Z dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f3655b902f0>
2025-10-08T16:02:28.4996274Z context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f364bd2c550>
2025-10-08T16:02:28.4997671Z statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f364c31ecf0>
2025-10-08T16:02:28.4998312Z parameters = [(1,)]
2025-10-08T16:02:28.4998474Z 
2025-10-08T16:02:28.4998582Z     def _exec_single_context(
2025-10-08T16:02:28.4998853Z         self,
2025-10-08T16:02:28.4999082Z         dialect: Dialect,
2025-10-08T16:02:28.4999353Z         context: ExecutionContext,
2025-10-08T16:02:28.4999676Z         statement: Union[str, Compiled],
2025-10-08T16:02:28.5000048Z         parameters: Optional[_AnyMultiExecuteParams],
2025-10-08T16:02:28.5000407Z     ) -> CursorResult[Any]:
2025-10-08T16:02:28.5000812Z         """continue the _execute_context() method for a single DBAPI
2025-10-08T16:02:28.5001275Z         cursor.execute() or cursor.executemany() call.
2025-10-08T16:02:28.5001591Z     
2025-10-08T16:02:28.5001804Z         """
2025-10-08T16:02:28.5002074Z         if dialect.bind_typing is BindTyping.SETINPUTSIZES:
2025-10-08T16:02:28.5002822Z             generic_setinputsizes = context._prepare_set_input_sizes()
2025-10-08T16:02:28.5003204Z     
2025-10-08T16:02:28.5003420Z             if generic_setinputsizes:
2025-10-08T16:02:28.5003706Z                 try:
2025-10-08T16:02:28.5003957Z                     dialect.do_set_input_sizes(
2025-10-08T16:02:28.5004319Z                         context.cursor, generic_setinputsizes, context
2025-10-08T16:02:28.5004651Z                     )
2025-10-08T16:02:28.5005041Z                 except BaseException as e:
2025-10-08T16:02:28.5005360Z                     self._handle_dbapi_exception(
2025-10-08T16:02:28.5005709Z                         e, str(statement), parameters, None, context
2025-10-08T16:02:28.5006025Z                     )
2025-10-08T16:02:28.5006240Z     
2025-10-08T16:02:28.5006464Z         cursor, str_statement, parameters = (
2025-10-08T16:02:28.5006768Z             context.cursor,
2025-10-08T16:02:28.5007029Z             context.statement,
2025-10-08T16:02:28.5007300Z             context.parameters,
2025-10-08T16:02:28.5007752Z         )
2025-10-08T16:02:28.5007953Z     
2025-10-08T16:02:28.5008211Z         effective_parameters: Optional[_AnyExecuteParams]
2025-10-08T16:02:28.5008537Z     
2025-10-08T16:02:28.5008745Z         if not context.executemany:
2025-10-08T16:02:28.5009056Z             effective_parameters = parameters[0]
2025-10-08T16:02:28.5009350Z         else:
2025-10-08T16:02:28.5009582Z             effective_parameters = parameters
2025-10-08T16:02:28.5009875Z     
2025-10-08T16:02:28.5010113Z         if self._has_events or self.engine._has_events:
2025-10-08T16:02:28.5010482Z             for fn in self.dispatch.before_cursor_execute:
2025-10-08T16:02:28.5010854Z                 str_statement, effective_parameters = fn(
2025-10-08T16:02:28.5011181Z                     self,
2025-10-08T16:02:28.5011431Z                     cursor,
2025-10-08T16:02:28.5011670Z                     str_statement,
2025-10-08T16:02:28.5011908Z                     effective_parameters,
2025-10-08T16:02:28.5012149Z                     context,
2025-10-08T16:02:28.5012369Z                     context.executemany,
2025-10-08T16:02:28.5012600Z                 )
2025-10-08T16:02:28.5012768Z     
2025-10-08T16:02:28.5012930Z         if self._echo:
2025-10-08T16:02:28.5013135Z             self._log_info(str_statement)
2025-10-08T16:02:28.5013362Z     
2025-10-08T16:02:28.5013537Z             stats = context._get_cache_stats()
2025-10-08T16:02:28.5013780Z     
2025-10-08T16:02:28.5013965Z             if not self.engine.hide_parameters:
2025-10-08T16:02:28.5014217Z                 self._log_info(
2025-10-08T16:02:28.5014434Z                     "[%s] %r",
2025-10-08T16:02:28.5014644Z                     stats,
2025-10-08T16:02:28.5014852Z                     sql_util._repr_params(
2025-10-08T16:02:28.5015111Z                         effective_parameters,
2025-10-08T16:02:28.5015359Z                         batches=10,
2025-10-08T16:02:28.5015607Z                         ismulti=context.executemany,
2025-10-08T16:02:28.5015858Z                     ),
2025-10-08T16:02:28.5016044Z                 )
2025-10-08T16:02:28.5016222Z             else:
2025-10-08T16:02:28.5016398Z                 self._log_info(
2025-10-08T16:02:28.5016680Z                     "[%s] [SQL parameters hidden due to hide_parameters=True]",
2025-10-08T16:02:28.5016980Z                     stats,
2025-10-08T16:02:28.5017168Z                 )
2025-10-08T16:02:28.5017484Z     
2025-10-08T16:02:28.5017676Z         evt_handled: bool = False
2025-10-08T16:02:28.5017892Z         try:
2025-10-08T16:02:28.5018127Z             if context.execute_style is ExecuteStyle.EXECUTEMANY:
2025-10-08T16:02:28.5018440Z                 effective_parameters = cast(
2025-10-08T16:02:28.5018729Z                     "_CoreMultiExecuteParams", effective_parameters
2025-10-08T16:02:28.5019002Z                 )
2025-10-08T16:02:28.5019198Z                 if self.dialect._has_events:
2025-10-08T16:02:28.5019491Z                     for fn in self.dialect.dispatch.do_executemany:
2025-10-08T16:02:28.5019893Z                         if fn(
2025-10-08T16:02:28.5020112Z                             cursor,
2025-10-08T16:02:28.5020338Z                             str_statement,
2025-10-08T16:02:28.5020584Z                             effective_parameters,
2025-10-08T16:02:28.5020834Z                             context,
2025-10-08T16:02:28.5021055Z                         ):
2025-10-08T16:02:28.5021261Z                             evt_handled = True
2025-10-08T16:02:28.5021615Z                             break
2025-10-08T16:02:28.5021835Z                 if not evt_handled:
2025-10-08T16:02:28.5022076Z                     self.dialect.do_executemany(
2025-10-08T16:02:28.5022324Z                         cursor,
2025-10-08T16:02:28.5022540Z                         str_statement,
2025-10-08T16:02:28.5022782Z                         effective_parameters,
2025-10-08T16:02:28.5023021Z                         context,
2025-10-08T16:02:28.5023232Z                     )
2025-10-08T16:02:28.5023492Z             elif not effective_parameters and context.no_parameters:
2025-10-08T16:02:28.5023805Z                 if self.dialect._has_events:
2025-10-08T16:02:28.5024107Z                     for fn in self.dialect.dispatch.do_execute_no_params:
2025-10-08T16:02:28.5024435Z                         if fn(cursor, str_statement, context):
2025-10-08T16:02:28.5024736Z                             evt_handled = True
2025-10-08T16:02:28.5024983Z                             break
2025-10-08T16:02:28.5025204Z                 if not evt_handled:
2025-10-08T16:02:28.5025452Z                     self.dialect.do_execute_no_params(
2025-10-08T16:02:28.5025724Z                         cursor, str_statement, context
2025-10-08T16:02:28.5025968Z                     )
2025-10-08T16:02:28.5026153Z             else:
2025-10-08T16:02:28.5026346Z                 effective_parameters = cast(
2025-10-08T16:02:28.5026668Z                     "_CoreSingleExecuteParams", effective_parameters
2025-10-08T16:02:28.5026945Z                 )
2025-10-08T16:02:28.5027137Z                 if self.dialect._has_events:
2025-10-08T16:02:28.5027581Z                     for fn in self.dialect.dispatch.do_execute:
2025-10-08T16:02:28.5027857Z                         if fn(
2025-10-08T16:02:28.5028064Z                             cursor,
2025-10-08T16:02:28.5028284Z                             str_statement,
2025-10-08T16:02:28.5028533Z                             effective_parameters,
2025-10-08T16:02:28.5028789Z                             context,
2025-10-08T16:02:28.5029004Z                         ):
2025-10-08T16:02:28.5029215Z                             evt_handled = True
2025-10-08T16:02:28.5029454Z                             break
2025-10-08T16:02:28.5029671Z                 if not evt_handled:
2025-10-08T16:02:28.5029905Z >                   self.dialect.do_execute(
2025-10-08T16:02:28.5030200Z                         cursor, str_statement, effective_parameters, context
2025-10-08T16:02:28.5030491Z                     )
2025-10-08T16:02:28.5030606Z 
2025-10-08T16:02:28.5030897Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1967: 
2025-10-08T16:02:28.5031385Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:02:28.5031589Z 
2025-10-08T16:02:28.5031857Z self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f3655b902f0>
2025-10-08T16:02:28.5032322Z cursor = <sqlite3.Cursor object at 0x7f364bd3bac0>
2025-10-08T16:02:28.5033169Z statement = 'SELECT site.id AS site_id, site.name AS site_name, site.description AS site_description, site.icon_id AS site_icon_id..., site.private_instance AS site_private_instance, site.language_id AS site_language_id \nFROM site \nWHERE site.id = ?'
2025-10-08T16:02:28.5033991Z parameters = (1,)
2025-10-08T16:02:28.5034374Z context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f364bd2c550>
2025-10-08T16:02:28.5034726Z 
2025-10-08T16:02:28.5035013Z     def do_execute(self, cursor, statement, parameters, context=None):
2025-10-08T16:02:28.5035358Z >       cursor.execute(statement, parameters)
2025-10-08T16:02:28.5035661Z E       sqlite3.OperationalError: no such table: site
2025-10-08T16:02:28.5035860Z 
2025-10-08T16:02:28.5036219Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/default.py:951: OperationalError
2025-10-08T16:02:28.5036660Z 
2025-10-08T16:02:28.5036945Z The above exception was the direct cause of the following exception:
2025-10-08T16:02:28.5037197Z 
2025-10-08T16:02:28.5037275Z app = <Flask 'app'>
2025-10-08T16:02:28.5037597Z 
2025-10-08T16:02:28.5037712Z     def test_api_get_site(app):
2025-10-08T16:02:28.5037949Z         with app.app_context():
2025-10-08T16:02:28.5038212Z             from app.api.alpha.utils.site import get_site
2025-10-08T16:02:28.5038503Z >           g.site = Site.query.get(1)
2025-10-08T16:02:28.5038742Z                      ^^^^^^^^^^^^^^^^^
2025-10-08T16:02:28.5038889Z 
2025-10-08T16:02:28.5038980Z tests/test_api_get_site.py:27: 
2025-10-08T16:02:28.5039239Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:02:28.5039509Z <string>:2: in get
2025-10-08T16:02:28.5039689Z     ???
2025-10-08T16:02:28.5040109Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/util/deprecations.py:386: in warned
2025-10-08T16:02:28.5040663Z     return fn(*args, **kwargs)  # type: ignore[no-any-return]
2025-10-08T16:02:28.5040971Z            ^^^^^^^^^^^^^^^^^^^
2025-10-08T16:02:28.5041396Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/query.py:1126: in get
2025-10-08T16:02:28.5041911Z     return self._get_impl(ident, loading.load_on_pk_identity)
2025-10-08T16:02:28.5042218Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:02:28.5042695Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/query.py:1135: in _get_impl
2025-10-08T16:02:28.5043168Z     return self.session._get_impl(
2025-10-08T16:02:28.5043645Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/session.py:3873: in _get_impl
2025-10-08T16:02:28.5044118Z     return db_load_fn(
2025-10-08T16:02:28.5044583Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/loading.py:695: in load_on_pk_identity
2025-10-08T16:02:28.5045088Z     session.execute(
2025-10-08T16:02:28.5045513Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2365: in execute
2025-10-08T16:02:28.5045984Z     return self._execute_internal(
2025-10-08T16:02:28.5046474Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
2025-10-08T16:02:28.5047042Z     result: Result[Any] = compile_state_cls.orm_execute_statement(
2025-10-08T16:02:28.5047830Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
2025-10-08T16:02:28.5048357Z     result = conn.execute(
2025-10-08T16:02:28.5048809Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
2025-10-08T16:02:28.5049264Z     return meth(
2025-10-08T16:02:28.5049740Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
2025-10-08T16:02:28.5050278Z     return connection._execute_clauseelement(
2025-10-08T16:02:28.5050850Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
2025-10-08T16:02:28.5051374Z     ret = self._execute_context(
2025-10-08T16:02:28.5051861Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
2025-10-08T16:02:28.5052366Z     return self._exec_single_context(
2025-10-08T16:02:28.5052873Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
2025-10-08T16:02:28.5053542Z     self._handle_dbapi_exception(
2025-10-08T16:02:28.5054067Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
2025-10-08T16:02:28.5054659Z     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
2025-10-08T16:02:28.5055244Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
2025-10-08T16:02:28.5055866Z     self.dialect.do_execute(
2025-10-08T16:02:28.5056125Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:02:28.5056322Z 
2025-10-08T16:02:28.5056589Z self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f3655b902f0>
2025-10-08T16:02:28.5057049Z cursor = <sqlite3.Cursor object at 0x7f364bd3bac0>
2025-10-08T16:02:28.5058011Z statement = 'SELECT site.id AS site_id, site.name AS site_name, site.description AS site_description, site.icon_id AS site_icon_id..., site.private_instance AS site_private_instance, site.language_id AS site_language_id \nFROM site \nWHERE site.id = ?'
2025-10-08T16:02:28.5058819Z parameters = (1,)
2025-10-08T16:02:28.5059194Z context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f364bd2c550>
2025-10-08T16:02:28.5059545Z 
2025-10-08T16:02:28.5059708Z     def do_execute(self, cursor, statement, parameters, context=None):
2025-10-08T16:02:28.5060058Z >       cursor.execute(statement, parameters)
2025-10-08T16:02:28.5060464Z E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: site
2025-10-08T16:02:28.5066503Z E       [SQL: SELECT site.id AS site_id, site.name AS site_name, site.description AS site_description, site.icon_id AS site_icon_id, site.sidebar AS site_sidebar, site.sidebar_html AS site_sidebar_html, site.legal_information AS site_legal_information, site.legal_information_html AS site_legal_information_html, site.tos_url AS site_tos_url, site.privacy_url AS site_privacy_url, site.public_key AS site_public_key, site.private_key AS site_private_key, site.enable_downvotes AS site_enable_downvotes, site.enable_gif_reply_rep_decrease AS site_enable_gif_reply_rep_decrease, site.enable_chan_image_filter AS site_enable_chan_image_filter, site.enable_this_comment_filter AS site_enable_this_comment_filter, site.allow_local_image_posts AS site_allow_local_image_posts, site.remote_image_cache_days AS site_remote_image_cache_days, site.enable_nsfw AS site_enable_nsfw, site.enable_nsfl AS site_enable_nsfl, site.community_creation_admin_only AS site_community_creation_admin_only, site.reports_email_admins AS site_reports_email_admins, site.registration_mode AS site_registration_mode, site.application_question AS site_application_question, site.allow_or_block_list AS site_allow_or_block_list, site.allowlist AS site_allowlist, site.blocklist AS site_blocklist, site.blocked_phrases AS site_blocked_phrases, site.auto_decline_referrers AS site_auto_decline_referrers, site.created_at AS site_created_at, site.updated AS site_updated, site.last_active AS site_last_active, site.log_activitypub_json AS site_log_activitypub_json, site.default_theme AS site_default_theme, site.default_filter AS site_default_filter, site.contact_email AS site_contact_email, site.about AS site_about, site.about_html AS site_about_html, site.logo AS site_logo, site.logo_180 AS site_logo_180, site.logo_152 AS site_logo_152, site.logo_32 AS site_logo_32, site.logo_16 AS site_logo_16, site.show_inoculation_block AS site_show_inoculation_block, site.additional_css AS site_additional_css, site.additional_js AS site_additional_js, site.private_instance AS site_private_instance, site.language_id AS site_language_id 
2025-10-08T16:02:28.5072600Z E       FROM site 
2025-10-08T16:02:28.5072795Z E       WHERE site.id = ?]
2025-10-08T16:02:28.5073009Z E       [parameters: (1,)]
2025-10-08T16:02:28.5073320Z E       (Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-08T16:02:28.5073570Z 
2025-10-08T16:02:28.5074047Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/default.py:951: OperationalError
2025-10-08T16:02:28.5074639Z ------------------------------ Captured log setup ------------------------------
2025-10-08T16:02:28.5074974Z INFO     app:__init__.py:298 Started!
2025-10-08T16:02:28.5075300Z INFO     app:startup_validation.py:102 Running startup validations...
2025-10-08T16:02:28.5075809Z INFO     app:startup_validation.py:118 Startup validations completed
2025-10-08T16:02:28.5076164Z =============================== warnings summary ===============================
2025-10-08T16:02:28.5076485Z tests/test_api_get_site.py::test_api_get_site
2025-10-08T16:02:28.5077525Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pytesseract/pytesseract.py:32: DeprecationWarning: 'pkgutil.find_loader' is deprecated and slated for removal in Python 3.14; use importlib.util.find_spec() instead
2025-10-08T16:02:28.5078563Z     numpy_installed = find_loader('numpy') is not None
2025-10-08T16:02:28.5078776Z 
2025-10-08T16:02:28.5078890Z tests/test_api_get_site.py::test_api_get_site
2025-10-08T16:02:28.5079766Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pytesseract/pytesseract.py:36: DeprecationWarning: 'pkgutil.find_loader' is deprecated and slated for removal in Python 3.14; use importlib.util.find_spec() instead
2025-10-08T16:02:28.5080669Z     pandas_installed = find_loader('pandas') is not None
2025-10-08T16:02:28.5080886Z 
2025-10-08T16:02:28.5080992Z tests/test_api_get_site.py::test_api_get_site
2025-10-08T16:02:28.5081828Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pyasn1/codec/ber/encoder.py:952: DeprecationWarning: tagMap is deprecated. Please use TAG_MAP instead.
2025-10-08T16:02:28.5091022Z     warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)
2025-10-08T16:02:28.5091627Z 
2025-10-08T16:02:28.5091802Z tests/test_api_get_site.py::test_api_get_site
2025-10-08T16:02:28.5092902Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pyasn1/codec/ber/encoder.py:952: DeprecationWarning: typeMap is deprecated. Please use TYPE_MAP instead.
2025-10-08T16:02:28.5094157Z     warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)
2025-10-08T16:02:28.5094501Z 
2025-10-08T16:02:28.5094622Z tests/test_api_get_site.py::test_api_get_site
2025-10-08T16:02:28.5095758Z   /home/runner/work/pyfedi/pyfedi/tests/test_api_get_site.py:27: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
2025-10-08T16:02:28.5096847Z     g.site = Site.query.get(1)
2025-10-08T16:02:28.5096995Z 
2025-10-08T16:02:28.5097190Z -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
2025-10-08T16:02:28.5097884Z =========================== short test summary info ============================
2025-10-08T16:02:28.5098481Z FAILED tests/test_api_get_site.py::test_api_get_site - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: site
2025-10-08T16:02:28.5104799Z [SQL: SELECT site.id AS site_id, site.name AS site_name, site.description AS site_description, site.icon_id AS site_icon_id, site.sidebar AS site_sidebar, site.sidebar_html AS site_sidebar_html, site.legal_information AS site_legal_information, site.legal_information_html AS site_legal_information_html, site.tos_url AS site_tos_url, site.privacy_url AS site_privacy_url, site.public_key AS site_public_key, site.private_key AS site_private_key, site.enable_downvotes AS site_enable_downvotes, site.enable_gif_reply_rep_decrease AS site_enable_gif_reply_rep_decrease, site.enable_chan_image_filter AS site_enable_chan_image_filter, site.enable_this_comment_filter AS site_enable_this_comment_filter, site.allow_local_image_posts AS site_allow_local_image_posts, site.remote_image_cache_days AS site_remote_image_cache_days, site.enable_nsfw AS site_enable_nsfw, site.enable_nsfl AS site_enable_nsfl, site.community_creation_admin_only AS site_community_creation_admin_only, site.reports_email_admins AS site_reports_email_admins, site.registration_mode AS site_registration_mode, site.application_question AS site_application_question, site.allow_or_block_list AS site_allow_or_block_list, site.allowlist AS site_allowlist, site.blocklist AS site_blocklist, site.blocked_phrases AS site_blocked_phrases, site.auto_decline_referrers AS site_auto_decline_referrers, site.created_at AS site_created_at, site.updated AS site_updated, site.last_active AS site_last_active, site.log_activitypub_json AS site_log_activitypub_json, site.default_theme AS site_default_theme, site.default_filter AS site_default_filter, site.contact_email AS site_contact_email, site.about AS site_about, site.about_html AS site_about_html, site.logo AS site_logo, site.logo_180 AS site_logo_180, site.logo_152 AS site_logo_152, site.logo_32 AS site_logo_32, site.logo_16 AS site_logo_16, site.show_inoculation_block AS site_show_inoculation_block, site.additional_css AS site_additional_css, site.additional_js AS site_additional_js, site.private_instance AS site_private_instance, site.language_id AS site_language_id 
2025-10-08T16:02:28.5110983Z FROM site 
2025-10-08T16:02:28.5111154Z WHERE site.id = ?]
2025-10-08T16:02:28.5111345Z [parameters: (1,)]
2025-10-08T16:02:29.0348090Z (Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-08T16:02:29.0348919Z ======================== 1 failed, 5 warnings in 2.65s =========================
2025-10-08T16:02:29.7625970Z ============================= test session starts ==============================
2025-10-08T16:02:29.7626686Z platform linux -- Python 3.13.7, pytest-8.4.2, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.13.7/x64/bin/python
2025-10-08T16:02:29.7627253Z cachedir: .pytest_cache
2025-10-08T16:02:29.7627801Z rootdir: /home/runner/work/pyfedi/pyfedi
2025-10-08T16:02:29.7628138Z plugins: anyio-4.11.0
2025-10-08T16:02:30.8338228Z collecting ... collected 1 item
2025-10-08T16:02:30.8338604Z 
2025-10-08T16:02:32.3926388Z tests/test_api_post_subscriptions.py::test_api_post_subscriptions FAILED [100%]
2025-10-08T16:02:32.3926950Z 
2025-10-08T16:02:32.3927096Z =================================== FAILURES ===================================
2025-10-08T16:02:32.3927873Z _________________________ test_api_post_subscriptions __________________________
2025-10-08T16:02:32.3928203Z 
2025-10-08T16:02:32.3928418Z self = <sqlalchemy.engine.base.Connection object at 0x7f8b4e1dfce0>
2025-10-08T16:02:32.3929077Z dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f8b57988440>
2025-10-08T16:02:32.3929857Z context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f8b4dc3ca50>
2025-10-08T16:02:32.3930576Z statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f8b4e249550>
2025-10-08T16:02:32.3931072Z parameters = [(1,)]
2025-10-08T16:02:32.3931219Z 
2025-10-08T16:02:32.3931332Z     def _exec_single_context(
2025-10-08T16:02:32.3931588Z         self,
2025-10-08T16:02:32.3931798Z         dialect: Dialect,
2025-10-08T16:02:32.3932057Z         context: ExecutionContext,
2025-10-08T16:02:32.3932520Z         statement: Union[str, Compiled],
2025-10-08T16:02:32.3933055Z         parameters: Optional[_AnyMultiExecuteParams],
2025-10-08T16:02:32.3933553Z     ) -> CursorResult[Any]:
2025-10-08T16:02:32.3933903Z         """continue the _execute_context() method for a single DBAPI
2025-10-08T16:02:32.3934309Z         cursor.execute() or cursor.executemany() call.
2025-10-08T16:02:32.3934627Z     
2025-10-08T16:02:32.3934816Z         """
2025-10-08T16:02:32.3935080Z         if dialect.bind_typing is BindTyping.SETINPUTSIZES:
2025-10-08T16:02:32.3935518Z             generic_setinputsizes = context._prepare_set_input_sizes()
2025-10-08T16:02:32.3935878Z     
2025-10-08T16:02:32.3936085Z             if generic_setinputsizes:
2025-10-08T16:02:32.3936357Z                 try:
2025-10-08T16:02:32.3936827Z                     dialect.do_set_input_sizes(
2025-10-08T16:02:32.3937193Z                         context.cursor, generic_setinputsizes, context
2025-10-08T16:02:32.3937783Z                     )
2025-10-08T16:02:32.3938040Z                 except BaseException as e:
2025-10-08T16:02:32.3938364Z                     self._handle_dbapi_exception(
2025-10-08T16:02:32.3938922Z                         e, str(statement), parameters, None, context
2025-10-08T16:02:32.3939243Z                     )
2025-10-08T16:02:32.3939453Z     
2025-10-08T16:02:32.3939676Z         cursor, str_statement, parameters = (
2025-10-08T16:02:32.3939986Z             context.cursor,
2025-10-08T16:02:32.3940240Z             context.statement,
2025-10-08T16:02:32.3940512Z             context.parameters,
2025-10-08T16:02:32.3940765Z         )
2025-10-08T16:02:32.3940960Z     
2025-10-08T16:02:32.3941213Z         effective_parameters: Optional[_AnyExecuteParams]
2025-10-08T16:02:32.3941545Z     
2025-10-08T16:02:32.3941761Z         if not context.executemany:
2025-10-08T16:02:32.3942067Z             effective_parameters = parameters[0]
2025-10-08T16:02:32.3942363Z         else:
2025-10-08T16:02:32.3942594Z             effective_parameters = parameters
2025-10-08T16:02:32.3942875Z     
2025-10-08T16:02:32.3943114Z         if self._has_events or self.engine._has_events:
2025-10-08T16:02:32.3943485Z             for fn in self.dispatch.before_cursor_execute:
2025-10-08T16:02:32.3943851Z                 str_statement, effective_parameters = fn(
2025-10-08T16:02:32.3944175Z                     self,
2025-10-08T16:02:32.3944408Z                     cursor,
2025-10-08T16:02:32.3944704Z                     str_statement,
2025-10-08T16:02:32.3945045Z                     effective_parameters,
2025-10-08T16:02:32.3945287Z                     context,
2025-10-08T16:02:32.3945505Z                     context.executemany,
2025-10-08T16:02:32.3945727Z                 )
2025-10-08T16:02:32.3945897Z     
2025-10-08T16:02:32.3946063Z         if self._echo:
2025-10-08T16:02:32.3946268Z             self._log_info(str_statement)
2025-10-08T16:02:32.3946491Z     
2025-10-08T16:02:32.3946679Z             stats = context._get_cache_stats()
2025-10-08T16:02:32.3946918Z     
2025-10-08T16:02:32.3947108Z             if not self.engine.hide_parameters:
2025-10-08T16:02:32.3947504Z                 self._log_info(
2025-10-08T16:02:32.3947720Z                     "[%s] %r",
2025-10-08T16:02:32.3947939Z                     stats,
2025-10-08T16:02:32.3948153Z                     sql_util._repr_params(
2025-10-08T16:02:32.3948410Z                         effective_parameters,
2025-10-08T16:02:32.3948653Z                         batches=10,
2025-10-08T16:02:32.3948900Z                         ismulti=context.executemany,
2025-10-08T16:02:32.3949149Z                     ),
2025-10-08T16:02:32.3949326Z                 )
2025-10-08T16:02:32.3949502Z             else:
2025-10-08T16:02:32.3949684Z                 self._log_info(
2025-10-08T16:02:32.3949964Z                     "[%s] [SQL parameters hidden due to hide_parameters=True]",
2025-10-08T16:02:32.3950275Z                     stats,
2025-10-08T16:02:32.3950468Z                 )
2025-10-08T16:02:32.3950632Z     
2025-10-08T16:02:32.3950805Z         evt_handled: bool = False
2025-10-08T16:02:32.3951028Z         try:
2025-10-08T16:02:32.3951264Z             if context.execute_style is ExecuteStyle.EXECUTEMANY:
2025-10-08T16:02:32.3951588Z                 effective_parameters = cast(
2025-10-08T16:02:32.3951891Z                     "_CoreMultiExecuteParams", effective_parameters
2025-10-08T16:02:32.3952165Z                 )
2025-10-08T16:02:32.3952365Z                 if self.dialect._has_events:
2025-10-08T16:02:32.3952657Z                     for fn in self.dialect.dispatch.do_executemany:
2025-10-08T16:02:32.3952938Z                         if fn(
2025-10-08T16:02:32.3953154Z                             cursor,
2025-10-08T16:02:32.3953383Z                             str_statement,
2025-10-08T16:02:32.3953762Z                             effective_parameters,
2025-10-08T16:02:32.3954015Z                             context,
2025-10-08T16:02:32.3954240Z                         ):
2025-10-08T16:02:32.3954458Z                             evt_handled = True
2025-10-08T16:02:32.3954703Z                             break
2025-10-08T16:02:32.3954917Z                 if not evt_handled:
2025-10-08T16:02:32.3955312Z                     self.dialect.do_executemany(
2025-10-08T16:02:32.3955562Z                         cursor,
2025-10-08T16:02:32.3955775Z                         str_statement,
2025-10-08T16:02:32.3956026Z                         effective_parameters,
2025-10-08T16:02:32.3956271Z                         context,
2025-10-08T16:02:32.3956477Z                     )
2025-10-08T16:02:32.3956737Z             elif not effective_parameters and context.no_parameters:
2025-10-08T16:02:32.3957049Z                 if self.dialect._has_events:
2025-10-08T16:02:32.3957471Z                     for fn in self.dialect.dispatch.do_execute_no_params:
2025-10-08T16:02:32.3957797Z                         if fn(cursor, str_statement, context):
2025-10-08T16:02:32.3958074Z                             evt_handled = True
2025-10-08T16:02:32.3958313Z                             break
2025-10-08T16:02:32.3958531Z                 if not evt_handled:
2025-10-08T16:02:32.3958789Z                     self.dialect.do_execute_no_params(
2025-10-08T16:02:32.3959075Z                         cursor, str_statement, context
2025-10-08T16:02:32.3959318Z                     )
2025-10-08T16:02:32.3959505Z             else:
2025-10-08T16:02:32.3959715Z                 effective_parameters = cast(
2025-10-08T16:02:32.3960027Z                     "_CoreSingleExecuteParams", effective_parameters
2025-10-08T16:02:32.3960301Z                 )
2025-10-08T16:02:32.3960502Z                 if self.dialect._has_events:
2025-10-08T16:02:32.3960789Z                     for fn in self.dialect.dispatch.do_execute:
2025-10-08T16:02:32.3961067Z                         if fn(
2025-10-08T16:02:32.3961283Z                             cursor,
2025-10-08T16:02:32.3961518Z                             str_statement,
2025-10-08T16:02:32.3961769Z                             effective_parameters,
2025-10-08T16:02:32.3962021Z                             context,
2025-10-08T16:02:32.3962252Z                         ):
2025-10-08T16:02:32.3962469Z                             evt_handled = True
2025-10-08T16:02:32.3962710Z                             break
2025-10-08T16:02:32.3962937Z                 if not evt_handled:
2025-10-08T16:02:32.3963180Z >                   self.dialect.do_execute(
2025-10-08T16:02:32.3963480Z                         cursor, str_statement, effective_parameters, context
2025-10-08T16:02:32.3963769Z                     )
2025-10-08T16:02:32.3963890Z 
2025-10-08T16:02:32.3964186Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1967: 
2025-10-08T16:02:32.3964678Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:02:32.3964880Z 
2025-10-08T16:02:32.3965152Z self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f8b57988440>
2025-10-08T16:02:32.3965618Z cursor = <sqlite3.Cursor object at 0x7f8b4dc12dc0>
2025-10-08T16:02:32.3966442Z statement = 'SELECT user.id AS user_id, user.user_name AS user_user_name, user.alt_user_name AS user_alt_user_name, user.title AS ...le_2.id = user.cover_id LEFT OUTER JOIN instance AS instance_1 ON instance_1.id = user.instance_id \nWHERE user.id = ?'
2025-10-08T16:02:32.3967236Z parameters = (1,)
2025-10-08T16:02:32.3967743Z context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f8b4dc3ca50>
2025-10-08T16:02:32.3968104Z 
2025-10-08T16:02:32.3968269Z     def do_execute(self, cursor, statement, parameters, context=None):
2025-10-08T16:02:32.3968615Z >       cursor.execute(statement, parameters)
2025-10-08T16:02:32.3968916Z E       sqlite3.OperationalError: no such table: user
2025-10-08T16:02:32.3969117Z 
2025-10-08T16:02:32.3969591Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/default.py:951: OperationalError
2025-10-08T16:02:32.3970038Z 
2025-10-08T16:02:32.3970208Z The above exception was the direct cause of the following exception:
2025-10-08T16:02:32.3970471Z 
2025-10-08T16:02:32.3970548Z app = <Flask 'app'>
2025-10-08T16:02:32.3970664Z 
2025-10-08T16:02:32.3970873Z     def test_api_post_subscriptions(app):
2025-10-08T16:02:32.3971132Z         with app.app_context():
2025-10-08T16:02:32.3971427Z             from app.api.alpha.utils.post import put_post_subscribe
2025-10-08T16:02:32.3971724Z     
2025-10-08T16:02:32.3971885Z             user_id = 1
2025-10-08T16:02:32.3972108Z >           user = User.query.get(user_id)
2025-10-08T16:02:32.3972355Z                    ^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:02:32.3972508Z 
2025-10-08T16:02:32.3972612Z tests/test_api_post_subscriptions.py:30: 
2025-10-08T16:02:32.3972902Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:02:32.3973178Z <string>:2: in get
2025-10-08T16:02:32.3973361Z     ???
2025-10-08T16:02:32.3973780Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/util/deprecations.py:386: in warned
2025-10-08T16:02:32.3974346Z     return fn(*args, **kwargs)  # type: ignore[no-any-return]
2025-10-08T16:02:32.3974645Z            ^^^^^^^^^^^^^^^^^^^
2025-10-08T16:02:32.3975078Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/query.py:1126: in get
2025-10-08T16:02:32.3975586Z     return self._get_impl(ident, loading.load_on_pk_identity)
2025-10-08T16:02:32.3975895Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-10-08T16:02:32.3976373Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/query.py:1135: in _get_impl
2025-10-08T16:02:32.3976848Z     return self.session._get_impl(
2025-10-08T16:02:32.3977538Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/session.py:3873: in _get_impl
2025-10-08T16:02:32.3978143Z     return db_load_fn(
2025-10-08T16:02:32.3978618Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/loading.py:695: in load_on_pk_identity
2025-10-08T16:02:32.3979123Z     session.execute(
2025-10-08T16:02:32.3979548Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2365: in execute
2025-10-08T16:02:32.3980027Z     return self._execute_internal(
2025-10-08T16:02:32.3980519Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal
2025-10-08T16:02:32.3981113Z     result: Result[Any] = compile_state_cls.orm_execute_statement(
2025-10-08T16:02:32.3981706Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement
2025-10-08T16:02:32.3982225Z     result = conn.execute(
2025-10-08T16:02:32.3982659Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1419: in execute
2025-10-08T16:02:32.3983118Z     return meth(
2025-10-08T16:02:32.3983610Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:526: in _execute_on_connection
2025-10-08T16:02:32.3984171Z     return connection._execute_clauseelement(
2025-10-08T16:02:32.3984715Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1641: in _execute_clauseelement
2025-10-08T16:02:32.3985249Z     ret = self._execute_context(
2025-10-08T16:02:32.3985738Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
2025-10-08T16:02:32.3986244Z     return self._exec_single_context(
2025-10-08T16:02:32.3986756Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
2025-10-08T16:02:32.3987279Z     self._handle_dbapi_exception(
2025-10-08T16:02:32.3988052Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
2025-10-08T16:02:32.3988659Z     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
2025-10-08T16:02:32.3989247Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
2025-10-08T16:02:32.3989867Z     self.dialect.do_execute(
2025-10-08T16:02:32.3990128Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-10-08T16:02:32.3990328Z 
2025-10-08T16:02:32.3990593Z self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f8b57988440>
2025-10-08T16:02:32.3991058Z cursor = <sqlite3.Cursor object at 0x7f8b4dc12dc0>
2025-10-08T16:02:32.3991876Z statement = 'SELECT user.id AS user_id, user.user_name AS user_user_name, user.alt_user_name AS user_alt_user_name, user.title AS ...le_2.id = user.cover_id LEFT OUTER JOIN instance AS instance_1 ON instance_1.id = user.instance_id \nWHERE user.id = ?'
2025-10-08T16:02:32.3992651Z parameters = (1,)
2025-10-08T16:02:32.3993029Z context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f8b4dc3ca50>
2025-10-08T16:02:32.3993384Z 
2025-10-08T16:02:32.3993545Z     def do_execute(self, cursor, statement, parameters, context=None):
2025-10-08T16:02:32.3993889Z >       cursor.execute(statement, parameters)
2025-10-08T16:02:32.3994304Z E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: user
2025-10-08T16:02:32.4009612Z E       [SQL: SELECT user.id AS user_id, user.user_name AS user_user_name, user.alt_user_name AS user_alt_user_name, user.title AS user_title, user.email AS user_email, user.password_hash AS user_password_hash, user.verified AS user_verified, user.verification_token AS user_verification_token, user.banned AS user_banned, user.banned_until AS user_banned_until, user.ban_posts AS user_ban_posts, user.ban_comments AS user_ban_comments, user.deleted AS user_deleted, user.deleted_by AS user_deleted_by, user.about AS user_about, user.about_html AS user_about_html, user.keywords AS user_keywords, user.matrix_user_id AS user_matrix_user_id, user.hide_nsfw AS user_hide_nsfw, user.hide_nsfl AS user_hide_nsfl, user.created AS user_created, user.last_seen AS user_last_seen, user.avatar_id AS user_avatar_id, user.cover_id AS user_cover_id, user.public_key AS user_public_key, user.private_key AS user_private_key, user.newsletter AS user_newsletter, user.email_unread AS user_email_unread, user.email_unread_sent AS user_email_unread_sent, user.receive_message_mode AS user_receive_message_mode, user.bounces AS user_bounces, user.timezone AS user_timezone, user.reputation AS user_reputation, user.attitude AS user_attitude, user.post_count AS user_post_count, user.post_reply_count AS user_post_reply_count, user.stripe_customer_id AS user_stripe_customer_id, user.stripe_subscription_id AS user_stripe_subscription_id, user.searchable AS user_searchable, user.indexable AS user_indexable, user.bot AS user_bot, user.bot_override AS user_bot_override, user.suppress_crossposts AS user_suppress_crossposts, user.vote_privately AS user_vote_privately, user.ignore_bots AS user_ignore_bots, user.unread_notifications AS user_unread_notifications, user.ip_address AS user_ip_address, user.ip_address_country AS user_ip_address_country, user.instance_id AS user_instance_id, user.reports AS user_reports, user.default_sort AS user_default_sort, user.default_comment_sort AS user_default_comment_sort, user.default_filter AS user_default_filter, user.theme AS user_theme, user.font AS user_font, user.community_keyword_filter AS user_community_keyword_filter, user.referrer AS user_referrer, user.markdown_editor AS user_markdown_editor, user.interface_language AS user_interface_language, user.language_id AS user_language_id, user.read_language_ids AS user_read_language_ids, user.reply_collapse_threshold AS user_reply_collapse_threshold, user.reply_hide_threshold AS user_reply_hide_threshold, user.feed_auto_follow AS user_feed_auto_follow, user.feed_auto_leave AS user_feed_auto_leave, user.accept_private_messages AS user_accept_private_messages, user.google_oauth_id AS user_google_oauth_id, user.hide_low_quality AS user_hide_low_quality, user.show_subscribed_communities AS user_show_subscribed_communities, user.additional_css AS user_additional_css, user.mastodon_oauth_id AS user_mastodon_oauth_id, user.discord_oauth_id AS user_discord_oauth_id, user.password_updated_at AS user_password_updated_at, user.ap_id AS user_ap_id, user.ap_profile_id AS user_ap_profile_id, user.ap_public_url AS user_ap_public_url, user.ap_fetched_at AS user_ap_fetched_at, user.ap_followers_url AS user_ap_followers_url, user.ap_preferred_username AS user_ap_preferred_username, user.ap_manually_approves_followers AS user_ap_manually_approves_followers, user.ap_deleted_at AS user_ap_deleted_at, user.ap_inbox_url AS user_ap_inbox_url, user.ap_domain AS user_ap_domain, user.search_vector AS user_search_vector, user.hide_read_posts AS user_hide_read_posts, file_1.id AS file_1_id, file_1.file_path AS file_1_file_path, file_1.file_name AS file_1_file_name, file_1.width AS file_1_width, file_1.height AS file_1_height, file_1.alt_text AS file_1_alt_text, file_1.source_url AS file_1_source_url, file_1.thumbnail_path AS file_1_thumbnail_path, file_1.thumbnail_width AS file_1_thumbnail_width, file_1.thumbnail_height AS file_1_thumbnail_height, file_1.hash AS file_1_hash, file_2.id AS file_2_id, file_2.file_path AS file_2_file_path, file_2.file_name AS file_2_file_name, file_2.width AS file_2_width, file_2.height AS file_2_height, file_2.alt_text AS file_2_alt_text, file_2.source_url AS file_2_source_url, file_2.thumbnail_path AS file_2_thumbnail_path, file_2.thumbnail_width AS file_2_thumbnail_width, file_2.thumbnail_height AS file_2_thumbnail_height, file_2.hash AS file_2_hash, instance_1.id AS instance_1_id, instance_1.domain AS instance_1_domain, instance_1.inbox AS instance_1_inbox, instance_1.shared_inbox AS instance_1_shared_inbox, instance_1.outbox AS instance_1_outbox, instance_1.vote_weight AS instance_1_vote_weight, instance_1.software AS instance_1_software, instance_1.version AS instance_1_version, instance_1.created_at AS instance_1_created_at, instance_1.updated_at AS instance_1_updated_at, instance_1.last_seen AS instance_1_last_seen, instance_1.last_successful_send AS instance_1_last_successful_send, instance_1.failures AS instance_1_failures, instance_1.most_recent_attempt AS instance_1_most_recent_attempt, instance_1.dormant AS instance_1_dormant, instance_1.start_trying_again AS instance_1_start_trying_again, instance_1.gone_forever AS instance_1_gone_forever, instance_1.ip_address AS instance_1_ip_address, instance_1.trusted AS instance_1_trusted, instance_1.posting_warning AS instance_1_posting_warning, instance_1.nodeinfo_href AS instance_1_nodeinfo_href 
2025-10-08T16:02:32.4025204Z E       FROM user LEFT OUTER JOIN file AS file_1 ON file_1.id = user.avatar_id LEFT OUTER JOIN file AS file_2 ON file_2.id = user.cover_id LEFT OUTER JOIN instance AS instance_1 ON instance_1.id = user.instance_id 
2025-10-08T16:02:32.4025860Z E       WHERE user.id = ?]
2025-10-08T16:02:32.4026080Z E       [parameters: (1,)]
2025-10-08T16:02:32.4026391Z E       (Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-08T16:02:32.4026633Z 
2025-10-08T16:02:32.4026991Z /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/sqlalchemy/engine/default.py:951: OperationalError
2025-10-08T16:02:32.4027704Z ------------------------------ Captured log setup ------------------------------
2025-10-08T16:02:32.4028036Z INFO     app:__init__.py:298 Started!
2025-10-08T16:02:32.4028364Z INFO     app:startup_validation.py:102 Running startup validations...
2025-10-08T16:02:32.4028766Z INFO     app:startup_validation.py:118 Startup validations completed
2025-10-08T16:02:32.4029124Z =============================== warnings summary ===============================
2025-10-08T16:02:32.4029504Z tests/test_api_post_subscriptions.py::test_api_post_subscriptions
2025-10-08T16:02:32.4030575Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pytesseract/pytesseract.py:32: DeprecationWarning: 'pkgutil.find_loader' is deprecated and slated for removal in Python 3.14; use importlib.util.find_spec() instead
2025-10-08T16:02:32.4031478Z     numpy_installed = find_loader('numpy') is not None
2025-10-08T16:02:32.4031687Z 
2025-10-08T16:02:32.4031957Z tests/test_api_post_subscriptions.py::test_api_post_subscriptions
2025-10-08T16:02:32.4032899Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pytesseract/pytesseract.py:36: DeprecationWarning: 'pkgutil.find_loader' is deprecated and slated for removal in Python 3.14; use importlib.util.find_spec() instead
2025-10-08T16:02:32.9656351Z     pandas_installed = find_loader('pandas') is not None
2025-10-08T16:02:32.9656851Z 
2025-10-08T16:02:32.9657149Z tests/test_api_post_subscriptions.py::test_api_post_subscriptions
2025-10-08T16:02:32.9658957Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pyasn1/codec/ber/encoder.py:952: DeprecationWarning: tagMap is deprecated. Please use TAG_MAP instead.
2025-10-08T16:02:32.9660267Z     warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)
2025-10-08T16:02:32.9660750Z 
2025-10-08T16:02:32.9661015Z tests/test_api_post_subscriptions.py::test_api_post_subscriptions
2025-10-08T16:02:32.9662208Z   /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pyasn1/codec/ber/encoder.py:952: DeprecationWarning: typeMap is deprecated. Please use TYPE_MAP instead.
2025-10-08T16:02:32.9663473Z     warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)
2025-10-08T16:02:32.9663946Z 
2025-10-08T16:02:32.9664190Z tests/test_api_post_subscriptions.py::test_api_post_subscriptions
2025-10-08T16:02:32.9665830Z   /home/runner/work/pyfedi/pyfedi/tests/test_api_post_subscriptions.py:30: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
2025-10-08T16:02:32.9667224Z     user = User.query.get(user_id)
2025-10-08T16:02:32.9667590Z 
2025-10-08T16:02:32.9667809Z -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
2025-10-08T16:02:32.9668284Z =========================== short test summary info ============================
2025-10-08T16:02:32.9669105Z FAILED tests/test_api_post_subscriptions.py::test_api_post_subscriptions - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: user
2025-10-08T16:02:32.9685985Z [SQL: SELECT user.id AS user_id, user.user_name AS user_user_name, user.alt_user_name AS user_alt_user_name, user.title AS user_title, user.email AS user_email, user.password_hash AS user_password_hash, user.verified AS user_verified, user.verification_token AS user_verification_token, user.banned AS user_banned, user.banned_until AS user_banned_until, user.ban_posts AS user_ban_posts, user.ban_comments AS user_ban_comments, user.deleted AS user_deleted, user.deleted_by AS user_deleted_by, user.about AS user_about, user.about_html AS user_about_html, user.keywords AS user_keywords, user.matrix_user_id AS user_matrix_user_id, user.hide_nsfw AS user_hide_nsfw, user.hide_nsfl AS user_hide_nsfl, user.created AS user_created, user.last_seen AS user_last_seen, user.avatar_id AS user_avatar_id, user.cover_id AS user_cover_id, user.public_key AS user_public_key, user.private_key AS user_private_key, user.newsletter AS user_newsletter, user.email_unread AS user_email_unread, user.email_unread_sent AS user_email_unread_sent, user.receive_message_mode AS user_receive_message_mode, user.bounces AS user_bounces, user.timezone AS user_timezone, user.reputation AS user_reputation, user.attitude AS user_attitude, user.post_count AS user_post_count, user.post_reply_count AS user_post_reply_count, user.stripe_customer_id AS user_stripe_customer_id, user.stripe_subscription_id AS user_stripe_subscription_id, user.searchable AS user_searchable, user.indexable AS user_indexable, user.bot AS user_bot, user.bot_override AS user_bot_override, user.suppress_crossposts AS user_suppress_crossposts, user.vote_privately AS user_vote_privately, user.ignore_bots AS user_ignore_bots, user.unread_notifications AS user_unread_notifications, user.ip_address AS user_ip_address, user.ip_address_country AS user_ip_address_country, user.instance_id AS user_instance_id, user.reports AS user_reports, user.default_sort AS user_default_sort, user.default_comment_sort AS user_default_comment_sort, user.default_filter AS user_default_filter, user.theme AS user_theme, user.font AS user_font, user.community_keyword_filter AS user_community_keyword_filter, user.referrer AS user_referrer, user.markdown_editor AS user_markdown_editor, user.interface_language AS user_interface_language, user.language_id AS user_language_id, user.read_language_ids AS user_read_language_ids, user.reply_collapse_threshold AS user_reply_collapse_threshold, user.reply_hide_threshold AS user_reply_hide_threshold, user.feed_auto_follow AS user_feed_auto_follow, user.feed_auto_leave AS user_feed_auto_leave, user.accept_private_messages AS user_accept_private_messages, user.google_oauth_id AS user_google_oauth_id, user.hide_low_quality AS user_hide_low_quality, user.show_subscribed_communities AS user_show_subscribed_communities, user.additional_css AS user_additional_css, user.mastodon_oauth_id AS user_mastodon_oauth_id, user.discord_oauth_id AS user_discord_oauth_id, user.password_updated_at AS user_password_updated_at, user.ap_id AS user_ap_id, user.ap_profile_id AS user_ap_profile_id, user.ap_public_url AS user_ap_public_url, user.ap_fetched_at AS user_ap_fetched_at, user.ap_followers_url AS user_ap_followers_url, user.ap_preferred_username AS user_ap_preferred_username, user.ap_manually_approves_followers AS user_ap_manually_approves_followers, user.ap_deleted_at AS user_ap_deleted_at, user.ap_inbox_url AS user_ap_inbox_url, user.ap_domain AS user_ap_domain, user.search_vector AS user_search_vector, user.hide_read_posts AS user_hide_read_posts, file_1.id AS file_1_id, file_1.file_path AS file_1_file_path, file_1.file_name AS file_1_file_name, file_1.width AS file_1_width, file_1.height AS file_1_height, file_1.alt_text AS file_1_alt_text, file_1.source_url AS file_1_source_url, file_1.thumbnail_path AS file_1_thumbnail_path, file_1.thumbnail_width AS file_1_thumbnail_width, file_1.thumbnail_height AS file_1_thumbnail_height, file_1.hash AS file_1_hash, file_2.id AS file_2_id, file_2.file_path AS file_2_file_path, file_2.file_name AS file_2_file_name, file_2.width AS file_2_width, file_2.height AS file_2_height, file_2.alt_text AS file_2_alt_text, file_2.source_url AS file_2_source_url, file_2.thumbnail_path AS file_2_thumbnail_path, file_2.thumbnail_width AS file_2_thumbnail_width, file_2.thumbnail_height AS file_2_thumbnail_height, file_2.hash AS file_2_hash, instance_1.id AS instance_1_id, instance_1.domain AS instance_1_domain, instance_1.inbox AS instance_1_inbox, instance_1.shared_inbox AS instance_1_shared_inbox, instance_1.outbox AS instance_1_outbox, instance_1.vote_weight AS instance_1_vote_weight, instance_1.software AS instance_1_software, instance_1.version AS instance_1_version, instance_1.created_at AS instance_1_created_at, instance_1.updated_at AS instance_1_updated_at, instance_1.last_seen AS instance_1_last_seen, instance_1.last_successful_send AS instance_1_last_successful_send, instance_1.failures AS instance_1_failures, instance_1.most_recent_attempt AS instance_1_most_recent_attempt, instance_1.dormant AS instance_1_dormant, instance_1.start_trying_again AS instance_1_start_trying_again, instance_1.gone_forever AS instance_1_gone_forever, instance_1.ip_address AS instance_1_ip_address, instance_1.trusted AS instance_1_trusted, instance_1.posting_warning AS instance_1_posting_warning, instance_1.nodeinfo_href AS instance_1_nodeinfo_href 
2025-10-08T16:02:32.9701653Z FROM user LEFT OUTER JOIN file AS file_1 ON file_1.id = user.avatar_id LEFT OUTER JOIN file AS file_2 ON file_2.id = user.cover_id LEFT OUTER JOIN instance AS instance_1 ON instance_1.id = user.instance_id 
2025-10-08T16:02:32.9702308Z WHERE user.id = ?]
2025-10-08T16:02:32.9702498Z [parameters: (1,)]
2025-10-08T16:02:32.9702773Z (Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-10-08T16:02:32.9703139Z ======================== 1 failed, 5 warnings in 2.64s =========================
2025-10-08T16:02:33.6957320Z Post job cleanup.
2025-10-08T16:02:33.8233764Z Cache hit occurred on the primary key Linux-pip-93b72d60a1f660b784d6309a0b22f127a738518ffed9eeb65aa476cd228c20e5, not saving cache.
2025-10-08T16:02:33.8323704Z Post job cleanup.
2025-10-08T16:02:33.9943098Z Post job cleanup.
2025-10-08T16:02:34.0889430Z [command]/usr/bin/git version
2025-10-08T16:02:34.0932296Z git version 2.51.0
2025-10-08T16:02:34.0976011Z Temporarily overriding HOME='/home/runner/work/_temp/1342ed33-3087-4393-85b5-aac9497d2e4b' before making global git config changes
2025-10-08T16:02:34.0977515Z Adding repository directory to the temporary git global config as a safe directory
2025-10-08T16:02:34.0982207Z [command]/usr/bin/git config --global --add safe.directory /home/runner/work/pyfedi/pyfedi
2025-10-08T16:02:34.1016680Z [command]/usr/bin/git config --local --name-only --get-regexp core\.sshCommand
2025-10-08T16:02:34.1050244Z [command]/usr/bin/git submodule foreach --recursive sh -c "git config --local --name-only --get-regexp 'core\.sshCommand' && git config --local --unset-all 'core.sshCommand' || :"
2025-10-08T16:02:34.1275296Z [command]/usr/bin/git config --local --name-only --get-regexp http\.https\:\/\/github\.com\/\.extraheader
2025-10-08T16:02:34.1295350Z http.https://github.com/.extraheader
2025-10-08T16:02:34.1308158Z [command]/usr/bin/git config --local --unset-all http.https://github.com/.extraheader
2025-10-08T16:02:34.1340064Z [command]/usr/bin/git submodule foreach --recursive sh -c "git config --local --name-only --get-regexp 'http\.https\:\/\/github\.com\/\.extraheader' && git config --local --unset-all 'http.https://github.com/.extraheader' || :"
2025-10-08T16:02:34.1696947Z Cleaning up orphan processes