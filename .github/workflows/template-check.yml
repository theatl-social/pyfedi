name: Template Validation

on:
  push:
    paths:
      - 'app/templates/**/*.html'
      - '.djlintrc'
      - '.github/workflows/template-check.yml'
  pull_request:
    paths:
      - 'app/templates/**/*.html'
      - '.djlintrc'
      - '.github/workflows/template-check.yml'
  workflow_dispatch:

jobs:
  template-validation:
    name: 🔍 Template Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install djlint==1.36.1 jinja2
      
      - name: Check for invalid len() usage
        run: |
          echo "🔍 Checking for invalid len() usage in templates..."
          if grep -r "len(" app/templates --include="*.html"; then
            echo "❌ ERROR: Found len() usage in templates!"
            echo "Use the |length filter instead of len() function in Jinja2 templates."
            echo "Example: Replace {% if len(items) > 0 %} with {% if items|length > 0 %}"
            exit 1
          else
            echo "✅ No invalid len() usage found"
          fi
      
      - name: Run djlint formatting check
        run: |
          echo "📄 Running djlint formatting check..."
          djlint app/templates --check --profile=jinja
        continue-on-error: true
      
      - name: Run djlint linting
        run: |
          echo "🔍 Running djlint linting..."
          djlint app/templates --lint --profile=jinja
      
      - name: Validate Jinja2 syntax
        run: |
          echo "🔍 Validating Jinja2 template syntax..."
          python << 'EOF'
          import os
          import sys
          from jinja2 import Environment, FileSystemLoader, TemplateSyntaxError
          
          errors = []
          env = Environment(loader=FileSystemLoader('app/templates'))
          
          for root, dirs, files in os.walk('app/templates'):
              for file in files:
                  if file.endswith('.html'):
                      template_path = os.path.relpath(os.path.join(root, file), 'app/templates')
                      try:
                          env.get_template(template_path)
                          print(f'✅ {template_path}')
                      except TemplateSyntaxError as e:
                          errors.append(f'❌ {template_path}: {e}')
                          print(f'❌ {template_path}: {e}')
          
          if errors:
              print(f'\n❌ Found {len(errors)} template syntax errors!')
              for error in errors:
                  print(error)
              sys.exit(1)
          else:
              print(f'\n✅ All {len(list(os.walk("app/templates")))} templates have valid syntax!')
          EOF
      
      - name: Summary
        if: always()
        run: |
          echo "## 📄 Template Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Checked for invalid len() usage" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Validated Jinja2 template syntax" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Ran djlint formatting and linting checks" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "To fix formatting issues locally, run:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "make lint-templates" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY