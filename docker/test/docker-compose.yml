services:
  # Test database
  test-db:
    image: postgres:15-bookworm
    container_name: pyfedi-test-db
    environment:
      POSTGRES_USER: pyfedi
      POSTGRES_PASSWORD: pyfedi
      POSTGRES_DB: pyfedi
    volumes:
      - test-db-data:/var/lib/postgresql/data
    networks:
      - test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pyfedi"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Test Redis
  test-redis:
    image: redis:7-bookworm
    container_name: pyfedi-test-redis
    command: redis-server --appendonly yes
    volumes:
      - test-redis-data:/data
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Test runner
  test-runner:
    build:
      context: ../..
      dockerfile: docker/test/Dockerfile
    container_name: pyfedi-test-runner
    depends_on:
      test-db:
        condition: service_healthy
      test-redis:
        condition: service_healthy
    environment:
      # Database
      POSTGRES_HOST: test-db
      POSTGRES_USER: pyfedi
      POSTGRES_PASSWORD: pyfedi
      POSTGRES_DB: pyfedi
      DATABASE_URL: postgresql://pyfedi:pyfedi@test-db:5432/pyfedi
      
      # Redis
      REDIS_HOST: test-redis
      REDIS_URL: redis://test-redis:6379/0
      
      # Flask
      FLASK_ENV: testing
      FLASK_APP: pyfedi.py
      TESTING: 1
      SERVER_NAME: test.local
      
      # Security settings
      SECRET_KEY: test-secret-key
      REQUIRE_SIGNATURES: "true"
      ALLOW_UNSIGNED_ACTIVITIES: "false"
      
      # Test execution
      RUN_TESTS: "true"
    volumes:
      # Mount test outputs only (source code is copied in Dockerfile)
      - ./test-reports:/app/test-reports
      - ./coverage-reports:/app/coverage-reports
    networks:
      - test-network

  # Standalone test commands
  test-all:
    extends: test-runner
    command: all
    profiles: ["all"]

  test-watch:
    extends: test-runner
    command: watch
    profiles: ["watch"]
    volumes:
      # Mount as read-write for watch mode
      - ../../app:/app/app
      - ../../tests:/app/tests

  test-shell:
    extends: test-runner
    command: shell
    profiles: ["debug"]
    stdin_open: true
    tty: true

  test-lint:
    extends: test-runner
    command: lint
    profiles: ["lint"]

  test-security-scan:
    extends: test-runner
    command: security-scan
    profiles: ["scan"]

networks:
  test-network:
    driver: bridge

volumes:
  test-db-data:
  test-redis-data: